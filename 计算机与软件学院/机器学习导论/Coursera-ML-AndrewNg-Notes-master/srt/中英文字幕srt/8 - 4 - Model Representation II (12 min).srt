1
00:00:00,280 --> 00:00:01,330
In the last video, we gave
在前面的视频里 我们
(字幕整理：中国海洋大学 黄海广,haiguang2000@qq.com )

2
00:00:01,570 --> 00:00:03,540
a mathematical definition of how
解释了怎样用数学来

3
00:00:03,700 --> 00:00:04,990
to represent or how to
定义或者计算

4
00:00:05,090 --> 00:00:07,160
compute the hypotheses used by Neural Network.
神经网络算法的假设

5
00:00:08,420 --> 00:00:09,620
In this video, I like
在这段视频中 我想

6
00:00:09,730 --> 00:00:11,280
show you how to actually
告诉你如何

7
00:00:11,450 --> 00:00:14,040
carry out that computation efficiently, and
高效地进行计算

8
00:00:14,710 --> 00:00:16,050
that is show you a vector rise implementation.
并展示一个向量化的实现方法

9
00:00:17,660 --> 00:00:18,930
And second, and more importantly, I want
更重要的是 我想

10
00:00:19,100 --> 00:00:21,110
to start giving you intuition about
让你们明白为什么

11
00:00:21,390 --> 00:00:22,590
why these neural network representations
这样表示神经网络

12
00:00:23,360 --> 00:00:24,640
might be a good idea and how
是一个好的方法 并且明白

13
00:00:25,010 --> 00:00:27,290
they can help us to learn complex nonlinear hypotheses.
它们怎样帮助我们学习复杂的非线性假设

14
00:00:28,970 --> 00:00:29,880
Consider this neural network.
以这个神经网络为例

15
00:00:30,520 --> 00:00:31,720
Previously we said that
以前我们说

16
00:00:32,010 --> 00:00:33,070
the sequence of steps that we
计算出假设输出

17
00:00:33,170 --> 00:00:34,090
need in order to compute
的步骤

18
00:00:34,650 --> 00:00:35,850
the output of a hypotheses
是左边的这些

19
00:00:36,320 --> 00:00:37,780
is these equations given on
方程 通过这些方程

20
00:00:37,950 --> 00:00:38,770
the left where we compute
我们计算出

21
00:00:39,540 --> 00:00:41,330
the activation values of the
三个隐藏单元的激励值

22
00:00:41,450 --> 00:00:43,220
three hidden uses and then
然后利用

23
00:00:43,420 --> 00:00:44,580
we use those to compute the
这些值来计算

24
00:00:44,650 --> 00:00:45,710
final output of our hypotheses
假设h(x)的最终输出

25
00:00:46,680 --> 00:00:48,410
h of x.  Now, I'm going
接下来 我要

26
00:00:48,480 --> 00:00:50,200
to define a few extra terms.
定义一些额外的项

27
00:00:50,570 --> 00:00:52,210
So, this term that I'm
因此 这里

28
00:00:52,410 --> 00:00:54,090
underlining here, I'm going to
我画线的项

29
00:00:54,180 --> 00:00:55,560
define that to be
把它定义为

30
00:00:56,230 --> 00:00:58,410
z superscript 2 subscript 1.
z上标(2) 下标1

31
00:00:58,790 --> 00:00:59,830
So that we have that
这样一来 就有了

32
00:01:00,650 --> 00:01:02,310
a(2)1, which is this
a(2)1 这个项

33
00:01:02,470 --> 00:01:03,930
term is equal to
等于

34
00:01:04,170 --> 00:01:06,020
g of z to 1.
g(z(2)1)

35
00:01:06,130 --> 00:01:08,100
And by the
顺便说一下

36
00:01:08,180 --> 00:01:09,750
way, these superscript 2, you
这些上标2

37
00:01:10,570 --> 00:01:11,580
know, what that means is that
的意思是

38
00:01:11,870 --> 00:01:12,960
the z2 and this a2
在z(2)和a(2)中

39
00:01:13,080 --> 00:01:14,140
as well, the superscript
括号中的

40
00:01:14,840 --> 00:01:16,450
2 in parentheses means that these
2表示这些值

41
00:01:16,740 --> 00:01:18,330
are values associated with layer
与第二层相关

42
00:01:18,570 --> 00:01:19,810
2, that is with the hidden
即与神经网络中的

43
00:01:20,100 --> 00:01:21,390
layer in the neural network.
隐藏层有关

44
00:01:22,820 --> 00:01:25,200
Now this term here
接下来 这里的项

45
00:01:25,990 --> 00:01:27,640
I'm going to similarly define as
我将同样定义为

46
00:01:29,530 --> 00:01:30,140
z(2)2.
z(2)2

47
00:01:30,490 --> 00:01:31,860
And finally, this last
最后这个

48
00:01:32,170 --> 00:01:33,100
term here that I'm underlining,
我画线的项

49
00:01:34,160 --> 00:01:37,040
let me define that as z(2)3.
我把它定义为z(2)3

50
00:01:37,090 --> 00:01:38,710
So that similarly we have a(2)3
这样 我们有a(2)3

51
00:01:38,850 --> 00:01:43,200
equals g of
等于

52
00:01:44,990 --> 00:01:45,360
z(2)3.
g(z(2)3)

53
00:01:45,480 --> 00:01:46,760
So these z values are just
所以这些z值都是

54
00:01:47,290 --> 00:01:48,940
a linear combination, a weighted
一个线性组合

55
00:01:49,360 --> 00:01:51,200
linear combination, of the
是输入值x0 x1 x2 x3的

56
00:01:51,490 --> 00:01:52,800
input values x0, x1,
加权线性组合

57
00:01:53,060 --> 00:01:55,350
x2, x3 that go into a particular neuron.
它将会进入一个特定的神经元

58
00:01:57,090 --> 00:01:58,260
Now if you look at
现在 看一下

59
00:01:58,900 --> 00:02:00,470
this block of numbers,
这一堆数字

60
00:02:01,990 --> 00:02:03,310
you may notice that that block
你可能会注意到这块

61
00:02:03,490 --> 00:02:05,880
of numbers corresponds suspiciously similar
对应了

62
00:02:06,950 --> 00:02:08,330
to the matrix vector
矩阵向量运算

63
00:02:08,800 --> 00:02:10,260
operation, matrix vector multiplication
类似于矩阵向量乘法

64
00:02:11,070 --> 00:02:12,710
of x1 times the
x1乘以向量x

65
00:02:12,790 --> 00:02:14,840
vector x. Using this observation
观察到一点

66
00:02:15,580 --> 00:02:18,730
we're going to be able to vectorize this computation
我们就能将

67
00:02:19,700 --> 00:02:20,280
of the neural network.
神经网络的计算向量化了

68
00:02:21,470 --> 00:02:23,510
Concretely, let's define the
具体而言 我们定义

69
00:02:23,680 --> 00:02:24,810
feature vector x as usual
特征向量x

70
00:02:25,290 --> 00:02:27,020
to be the vector of x0, x1,
为x0 x1

71
00:02:27,260 --> 00:02:28,550
x2, x3 where x0
x2 x3组成的向量 其中x0

72
00:02:29,010 --> 00:02:30,280
as usual is always equal
仍然等于1

73
00:02:30,610 --> 00:02:31,860
1 and that defines
并定义

74
00:02:32,390 --> 00:02:33,420
z2 to be the vector
z(2)为

75
00:02:34,360 --> 00:02:37,250
of these z-values, you know, of z(2)1 z(2)2, z(2)3.
这些z值组成的向量 即z(2)1 z(2)2 z(2)3

76
00:02:38,560 --> 00:02:40,210
And notice that, there, z2 this
注意 在这里 z(2)

77
00:02:40,440 --> 00:02:42,500
is a three dimensional vector.
是一个三维向量

78
00:02:43,910 --> 00:02:47,200
We can now vectorize the computation
下面 我们可以这样

79
00:02:48,270 --> 00:02:48,860
of a(2)1, a(2)2, a(2)3 as follows.
向量化a(2)1 a(2)2 a(2)3的计算

80
00:02:49,490 --> 00:02:50,690
We can just write this in two steps.
我们只用两个步骤

81
00:02:51,500 --> 00:02:53,400
We can compute z2 as theta
z(2)等于θ(1)

82
00:02:53,950 --> 00:02:55,490
1 times x and that
乘以x

83
00:02:55,790 --> 00:02:57,020
would give us this vector z2;
这样就有了向量z(2)

84
00:02:57,400 --> 00:02:59,360
and then a2 is
然后 a(2)等于

85
00:02:59,860 --> 00:03:02,180
g of z2 and just
g(z(2))

86
00:03:02,440 --> 00:03:03,860
to be clear z2 here, This
需要明白 这里的z(2)是

87
00:03:04,200 --> 00:03:05,880
is a three-dimensional vector and
三维向量 并且

88
00:03:06,060 --> 00:03:08,150
a2 is also a three-dimensional
a(2)也是一个三维

89
00:03:08,810 --> 00:03:10,410
vector and thus this
向量 因此这

90
00:03:10,690 --> 00:03:12,680
activation g. This applies the
里的激励g 将s函数

91
00:03:12,950 --> 00:03:15,290
sigmoid function element-wise to each
逐元素作用于

92
00:03:15,550 --> 00:03:18,290
of the z2's elements. And
z(2)中的每个元素

93
00:03:18,380 --> 00:03:19,270
by the way, to make our notation
顺便说一下 为了让我们

94
00:03:19,950 --> 00:03:21,260
a little more consistent with
的符号和接下来的

95
00:03:21,440 --> 00:03:23,330
what we'll do later, in this
工作相一致

96
00:03:23,590 --> 00:03:24,600
input layer we have the
在输入层 虽然我们有

97
00:03:24,670 --> 00:03:25,840
inputs x, but we
输入x 但我们

98
00:03:25,960 --> 00:03:26,950
can also thing it is
还可以把这些想成

99
00:03:27,300 --> 00:03:29,270
as in activations of the first layers.
是第一层的激励

100
00:03:29,680 --> 00:03:30,430
So, if I defined a1 to
所以 我可以定义a(1)

101
00:03:30,470 --> 00:03:32,510
be equal to x. So,
等于x 因此

102
00:03:32,660 --> 00:03:34,270
the a1 is vector, I can
a(1)就是一个向量了

103
00:03:34,500 --> 00:03:35,520
now take this x here
我就可以把这里的x

104
00:03:36,230 --> 00:03:38,850
and replace this with z2 equals theta1
替换成a(1)

105
00:03:39,570 --> 00:03:40,680
times a1 just by defining
z(2)就等于θ(1)乘以a(1)

106
00:03:41,410 --> 00:03:43,350
a1 to be activations in my input layer.
这都是通过在输入层定义a(1)做到的

107
00:03:44,990 --> 00:03:46,000
Now, with what I've written
现在 就我目前所写的

108
00:03:46,280 --> 00:03:47,500
so far I've now gotten
我得到了

109
00:03:47,900 --> 00:03:49,940
myself the values for a1,
a1 a2 a3的值

110
00:03:50,820 --> 00:03:52,690
a2, a3, and really
并且

111
00:03:52,780 --> 00:03:53,980
I should put the
我应该把

112
00:03:54,290 --> 00:03:55,600
superscripts there as well.
上标加上去

113
00:03:56,430 --> 00:03:57,530
But I need one more
但我还需要一个值

114
00:03:57,940 --> 00:03:59,810
value, which is I also want this a(0)2
我同样需要这个a(2)0

115
00:04:00,050 --> 00:04:02,050
and that corresponds to
它对应于

116
00:04:02,250 --> 00:04:04,350
a bias unit in the
隐藏层的

117
00:04:04,550 --> 00:04:06,420
hidden layer that goes to the output there.
得到这个输出的偏置单元

118
00:04:06,990 --> 00:04:07,780
Of course, there was a
当然 这里也有一个

119
00:04:07,810 --> 00:04:08,850
bias unit here too that,
偏置单元

120
00:04:09,000 --> 00:04:10,060
you know, it just didn't draw
我只是没有

121
00:04:10,270 --> 00:04:11,820
under here but to
画出来 为了

122
00:04:11,970 --> 00:04:13,100
take care of this extra bias unit,
注意这额外的偏置单元

123
00:04:13,870 --> 00:04:15,650
what we're going to do is add
接下来我们

124
00:04:16,320 --> 00:04:18,720
an extra a0 superscript 2,
要额外加上一个a0 上标(2)

125
00:04:18,890 --> 00:04:20,870
that's equal to one, and after
它等于1 这样一来

126
00:04:21,010 --> 00:04:21,990
taking this step we now have
现在

127
00:04:22,290 --> 00:04:23,860
that a2 is going to
a(2)就是一个

128
00:04:24,010 --> 00:04:25,390
be a four dimensional feature
四维的特征向量

129
00:04:25,690 --> 00:04:26,820
vector because we just added
因为我们刚添加了

130
00:04:27,300 --> 00:04:28,490
this extra, you know,
这个额外的

131
00:04:28,620 --> 00:04:30,260
a0 which is equal to
a0 它等于

132
00:04:30,500 --> 00:04:31,700
1 corresponding to the bias unit
1并且它是隐藏层的

133
00:04:32,080 --> 00:04:33,550
in the hidden layer. And finally,
一个偏置单元 最后

134
00:04:35,080 --> 00:04:37,620
to compute the actual
为了计算假设的

135
00:04:38,070 --> 00:04:40,100
value output of our hypotheses, we
实际输出值 我们

136
00:04:40,250 --> 00:04:41,190
then simply need to compute
只需要计算

137
00:04:42,470 --> 00:04:44,980
z3. So z3 is
z(3)  z(3)等于

138
00:04:45,350 --> 00:04:47,940
equal to this term here that I'm just underlining.
这里我画线的项

139
00:04:48,800 --> 00:04:51,450
This inner term there is z3.
这个方框里的项就是z(3)

140
00:04:53,980 --> 00:04:55,160
And z3 is stated
z(3)等于θ(2)

141
00:04:55,500 --> 00:04:57,120
2 times a2 and finally
乘以a(2) 最后

142
00:04:57,810 --> 00:04:59,560
my hypotheses output h of x which
假设输出为h(x)

143
00:04:59,750 --> 00:05:01,210
is a3 that is
它等于a(3)

144
00:05:01,360 --> 00:05:03,910
the activation of my
a(3)是输出层

145
00:05:04,750 --> 00:05:06,040
one and only unit in
唯一的单元

146
00:05:06,290 --> 00:05:09,500
the output layer. So, that's just the real number. You can write it as a3
它是一个实数 你可以写成a(3)

147
00:05:10,050 --> 00:05:12,390
or as a(3)1 and that's g of z3.
或a(3)1 这就是g(z(3))

148
00:05:13,240 --> 00:05:15,020
This process of computing h of x
这个计算h(x)的过程

149
00:05:15,940 --> 00:05:18,110
is also called forward propagation
也称为前向传播(forward propagation)

150
00:05:19,130 --> 00:05:20,440
and is called that because we
这样命名是因为

151
00:05:20,550 --> 00:05:21,310
start of with the activations
我们从

152
00:05:22,010 --> 00:05:24,400
of the input-units and then
输入层的激励开始

153
00:05:24,940 --> 00:05:26,770
we sort of forward-propagate that to the
然后进行前向传播给

154
00:05:26,860 --> 00:05:29,390
hidden layer and compute the activations of the
隐藏层并计算

155
00:05:29,580 --> 00:05:30,400
hidden layer and then we
隐藏层的激励 然后

156
00:05:30,540 --> 00:05:32,040
sort of forward propagate that
我们继续前向传播

157
00:05:32,760 --> 00:05:36,270
and compute the activations of
并计算输出层的激励

158
00:05:37,480 --> 00:05:39,170
the output layer, but this process of computing the activations from the input then
这个从输入层到

159
00:05:39,290 --> 00:05:40,400
the hidden then the output layer,
隐藏层再到输出层依次计算激励的

160
00:05:40,940 --> 00:05:42,030
and that's also called forward propagation
过程叫前向传播

161
00:05:43,320 --> 00:05:44,150
and what we just did is
我们刚刚得到了

162
00:05:44,310 --> 00:05:45,370
we just worked out a vector
这一过程的向量化

163
00:05:45,740 --> 00:05:47,140
wise implementation of this
实现方法

164
00:05:47,280 --> 00:05:48,890
procedure. So, if you
如果你

165
00:05:48,970 --> 00:05:50,260
implement it using these equations
使用右边这些公式实现它

166
00:05:50,800 --> 00:05:51,740
that we have on the right, these
就会得到

167
00:05:51,850 --> 00:05:53,280
would give you an efficient way
一个有效的

168
00:05:53,460 --> 00:05:54,980
or both of the efficient way of
计算h(x)

169
00:05:55,120 --> 00:05:56,130
computing h of x.
的方法

170
00:05:58,250 --> 00:05:59,860
This forward propagation view also
这种前向传播的角度

171
00:06:00,860 --> 00:06:02,270
helps us to understand what
也可以帮助我们了解

172
00:06:02,550 --> 00:06:03,640
Neural Networks might be doing
神经网络的原理

173
00:06:04,110 --> 00:06:05,290
and why they might help us to
和它为什么能够

174
00:06:05,510 --> 00:06:07,170
learn interesting nonlinear hypotheses.
帮助我们学习非线性假设

175
00:06:08,670 --> 00:06:09,760
Consider the following neural network
看一下这个神经网络

176
00:06:10,500 --> 00:06:11,820
and let's say I cover up
我会暂时盖住

177
00:06:12,040 --> 00:06:13,810
the left path of this picture for now.
图片的左边部分

178
00:06:14,650 --> 00:06:16,170
If you look at what's left in this picture.
如果你观察图中剩下的部分

179
00:06:17,030 --> 00:06:18,020
This looks a lot like
这看起来很像

180
00:06:18,260 --> 00:06:19,520
logistic regression where what
逻辑回归

181
00:06:19,660 --> 00:06:20,570
we're doing is we're using
在逻辑回归中 我们用

182
00:06:20,990 --> 00:06:22,000
that note, that's just the
这个节点 即

183
00:06:22,130 --> 00:06:23,770
logistic regression unit and we're
这个逻辑回归单元

184
00:06:24,120 --> 00:06:26,060
using that to make a
来预测

185
00:06:26,380 --> 00:06:28,290
prediction h of x.  And concretely,
h(x)的值 具体来说

186
00:06:28,440 --> 00:06:30,340
what the hypotheses is outputting
假设输出的

187
00:06:30,710 --> 00:06:31,830
is h of x is going
h(x)将

188
00:06:31,890 --> 00:06:33,760
to be equal to g which
等于s型激励函数

189
00:06:33,980 --> 00:06:38,110
is my sigmoid activation function times theta 0
g(θ0

190
00:06:38,560 --> 00:06:40,450
times a0 is equal
xa0

191
00:06:41,270 --> 00:06:43,380
to 1 plus theta 1
+θ1xa1

192
00:06:45,220 --> 00:06:49,080
plus theta 2
+θ2xa2

193
00:06:49,260 --> 00:06:52,090
times a2 plus theta
+θ3xa3)

194
00:06:52,830 --> 00:06:55,180
3 times a3 whether
其中

195
00:06:55,370 --> 00:06:56,910
values a1, a2, a3
a1 a2 a3

196
00:06:57,050 --> 00:06:59,860
are those given by these three given units.
由这三个单元给出

197
00:07:01,060 --> 00:07:02,790
Now, to be actually consistent
为了和我之前的定义

198
00:07:03,490 --> 00:07:05,000
to my early notation. Actually, we
保持一致 需要

199
00:07:05,170 --> 00:07:06,360
need to, you know, fill in
在这里

200
00:07:06,470 --> 00:07:10,700
these superscript 2's here everywhere
还有这些地方都填上上标(2)

201
00:07:12,260 --> 00:07:13,920
and I also have these
同样还要加上这些下标1

202
00:07:14,160 --> 00:07:16,800
indices 1 there because I
因为我只有

203
00:07:16,930 --> 00:07:20,610
have only one output unit, but if you focus on the blue parts of the notation.
一个输出单元 但如果你只观察蓝色的部分

204
00:07:20,930 --> 00:07:21,900
This is, you know, this looks
这看起来

205
00:07:22,150 --> 00:07:23,680
awfully like the standard logistic
非常像标准的

206
00:07:23,870 --> 00:07:25,530
regression model, except that
逻辑回归模型 不同之处在于

207
00:07:25,600 --> 00:07:28,060
I now have a capital theta instead of lower case theta.
我现在用的是大写的θ 而不是小写的θ

208
00:07:29,170 --> 00:07:30,690
And what this is
这样做完

209
00:07:30,850 --> 00:07:32,520
doing is just logistic regression.
我们只得到了逻辑回归

210
00:07:33,660 --> 00:07:35,240
But where the features fed into
但是 逻辑回归的

211
00:07:35,590 --> 00:07:37,250
logistic regression are these
输入特征值

212
00:07:38,200 --> 00:07:40,170
values computed by the hidden layer.
是通过隐藏层计算的

213
00:07:41,340 --> 00:07:42,690
Just to say that again, what
再说一遍

214
00:07:42,910 --> 00:07:44,420
this neural network is doing is
神经网络所做的

215
00:07:45,130 --> 00:07:47,050
just like logistic regression, except
就像逻辑回归 但是它

216
00:07:47,440 --> 00:07:48,900
that rather than using the
不是使用

217
00:07:49,110 --> 00:07:50,770
original features x1, x2, x3,
x1 x2 x3作为输入特征

218
00:07:52,400 --> 00:07:54,260
is using these new features a1, a2, a3.
而是用a1 a2 a3作为新的输入特征

219
00:07:54,440 --> 00:07:56,810
Again, we'll put the superscripts
同样 我们需要把

220
00:07:58,130 --> 00:08:00,380
there, you know, to be consistent with the notation.
上标加上来和之前的记号保持一致

221
00:08:02,820 --> 00:08:04,610
And the cool thing about this,
有趣的是

222
00:08:05,040 --> 00:08:06,220
is that the features a1, a2,
特征项a1 a2

223
00:08:06,720 --> 00:08:08,310
a3, they themselves are learned
a3它们是作为

224
00:08:08,760 --> 00:08:09,930
as functions of the input.
输入的函数来学习的

225
00:08:10,960 --> 00:08:12,640
Concretely, the function mapping from
具体来说 就是从第一层

226
00:08:13,320 --> 00:08:14,540
layer 1 to layer 2,
映射到第二层的函数

227
00:08:14,810 --> 00:08:16,390
that is determined by some
这个函数由其他

228
00:08:16,750 --> 00:08:18,550
other set of parameters, theta 1.
一组参数θ(1)决定

229
00:08:19,380 --> 00:08:20,210
So it's as if the
所以 在神经网络中

230
00:08:20,270 --> 00:08:22,030
neural network, instead of being
它没有用

231
00:08:22,240 --> 00:08:24,050
constrained to feed the
输入特征x1 x2 x3

232
00:08:24,120 --> 00:08:25,760
features x1, x2, x3 to logistic regression.
来训练逻辑回归

233
00:08:26,210 --> 00:08:27,440
It gets to
而是自己

234
00:08:27,720 --> 00:08:29,320
learn its own features, a1,
训练逻辑回归

235
00:08:29,810 --> 00:08:32,010
a2, a3, to feed into the
的输入

236
00:08:32,130 --> 00:08:33,950
logistic regression and as
a1 a2 a3

237
00:08:34,650 --> 00:08:36,270
you can imagine depending on
可以想象 如果

238
00:08:36,360 --> 00:08:37,690
what parameters it chooses for
在θ1中选择不同的参数

239
00:08:37,900 --> 00:08:39,880
theta 1.  You can learn some pretty interesting
有时可以学习到一些

240
00:08:40,390 --> 00:08:42,460
and complex features and therefore
很有趣和复杂的特征 就可以

241
00:08:43,780 --> 00:08:44,830
you can end up with a
得到一个

242
00:08:45,050 --> 00:08:46,650
better hypotheses than if
更好的假设

243
00:08:46,840 --> 00:08:47,870
you were constrained to use
比使用原始输入

244
00:08:48,020 --> 00:08:50,520
the raw features x1, x2 or x3 or if
x1 x2或x3时得到的假设更好

245
00:08:50,640 --> 00:08:52,530
you will constrain to say choose the
你也可以

246
00:08:52,620 --> 00:08:53,730
polynomial terms, you know,
选择多项式项

247
00:08:53,920 --> 00:08:55,550
x1, x2, x3, and so on.
x1 x2 x3等作为输入项

248
00:08:55,790 --> 00:08:57,250
But instead, this algorithm has
但这个算法可以

249
00:08:57,530 --> 00:08:59,130
the flexibility to try
灵活地

250
00:08:59,420 --> 00:09:01,990
to learn whatever features at once, using
快速学习任意的特征项

251
00:09:02,680 --> 00:09:03,990
these a1, a2, a3 in
把这些a1 a2 a3

252
00:09:04,110 --> 00:09:05,190
order to feed into this
输入这个

253
00:09:05,510 --> 00:09:07,830
last unit that's essentially
最后的单元 实际上

254
00:09:09,240 --> 00:09:11,920
a logistic regression here.  I realized
它是逻辑回归

255
00:09:12,550 --> 00:09:13,970
this example is described as
我觉得现在描述的这个例子

256
00:09:14,060 --> 00:09:15,500
a somewhat high level and so
有点高端 所以

257
00:09:15,750 --> 00:09:16,520
I'm not sure if this intuition
我不知道

258
00:09:17,440 --> 00:09:18,870
of the neural network, you know, having
你是否能理解

259
00:09:19,720 --> 00:09:21,420
more complex features will quite
这个具有更复杂特征项的

260
00:09:21,630 --> 00:09:23,120
make sense yet, but if
神经网络 但是

261
00:09:23,210 --> 00:09:24,440
it doesn't yet in the next
如果你没理解

262
00:09:24,810 --> 00:09:25,860
two videos I'm going to
在接下来的两个视频里

263
00:09:25,970 --> 00:09:27,300
go through a specific example
我会讲解一个具体的例子

264
00:09:28,250 --> 00:09:29,590
of how a neural network can
来说明神经网络

265
00:09:29,830 --> 00:09:30,860
use this hidden there to compute
如何利用这个隐藏层

266
00:09:31,250 --> 00:09:32,880
more complex features to feed
计算更复杂的特征

267
00:09:33,130 --> 00:09:34,520
into this final output layer
并输入到最后的输出层

268
00:09:35,060 --> 00:09:37,100
and how that can learn more complex hypotheses.
以及为什么这样就可以学习更复杂的假设

269
00:09:37,920 --> 00:09:39,120
So, in case what I'm
所以 如果我

270
00:09:39,180 --> 00:09:40,090
saying here doesn't quite make
现在讲的

271
00:09:40,230 --> 00:09:41,650
sense, stick with me
你没理解 请继续

272
00:09:41,810 --> 00:09:42,960
for the next two videos and
观看接下来的两个视频

273
00:09:43,190 --> 00:09:44,370
hopefully out there working through
希望它们

274
00:09:44,580 --> 00:09:46,690
those examples this explanation will
提供的例子能够

275
00:09:47,030 --> 00:09:48,640
make a little bit more sense.
让你更加理解神经网络

276
00:09:49,020 --> 00:09:49,740
But just the point O. You
但有一点

277
00:09:49,820 --> 00:09:51,120
can have neural networks with
你还可以用其他类型的图来

278
00:09:51,470 --> 00:09:52,990
other types of diagrams as
表示神经网络

279
00:09:53,080 --> 00:09:54,270
well, and the way that
神经网络中神经元

280
00:09:54,450 --> 00:09:58,000
neural networks are connected, that's called the architecture.
相连接的方式 称为神经网络的架构

281
00:09:58,390 --> 00:10:00,150
So the term architecture refers to
所以说 架构是指

282
00:10:00,490 --> 00:10:02,380
how the different neurons are connected to each other.
不同的神经元是如何相互连接的

283
00:10:03,220 --> 00:10:04,180
This is an example
这里有一个不同的

284
00:10:04,840 --> 00:10:06,300
of a different neural network architecture
神经网络架构的例子

285
00:10:07,480 --> 00:10:08,750
and once again you may
你可以

286
00:10:09,260 --> 00:10:10,770
be able to get this intuition of
意识到这个第二层

287
00:10:10,940 --> 00:10:12,180
how the second layer,
是如何工作的

288
00:10:12,900 --> 00:10:14,120
here we have three heading units
在这里 我们有三个隐藏单元

289
00:10:14,910 --> 00:10:16,200
that are computing some complex
它们根据输入层

290
00:10:16,660 --> 00:10:17,900
function maybe of the
计算一个复杂的函数

291
00:10:17,990 --> 00:10:19,530
input layer, and then the
然后第三层

292
00:10:19,730 --> 00:10:20,750
third layer can take the
可以将第二层

293
00:10:20,840 --> 00:10:22,260
second layer's features and compute
训练出的特征项作为输入

294
00:10:22,550 --> 00:10:24,070
even more complex features in layer three
并在第三层计算一些更复杂的函数

295
00:10:24,980 --> 00:10:25,880
so that by the time you get
这样 在你到达

296
00:10:25,960 --> 00:10:27,160
to the output layer, layer four,
输出层之前 即第四层

297
00:10:27,900 --> 00:10:29,130
you can have even more
就可以利用第三层

298
00:10:29,370 --> 00:10:30,690
complex features of what
训练出的更复杂的

299
00:10:30,860 --> 00:10:32,040
you are able to compute in
特征项作为输入

300
00:10:32,280 --> 00:10:34,710
layer three and so get very interesting nonlinear hypotheses.
以此得到非常有趣的非线性假设

301
00:10:36,730 --> 00:10:37,580
By the way, in a network
顺便说一下 在这样的

302
00:10:37,810 --> 00:10:38,980
like this, layer one, this is
网络里 第一层

303
00:10:39,130 --> 00:10:40,670
called an input layer. Layer four
被称为输入层 第四层

304
00:10:41,360 --> 00:10:43,170
is still our output layer, and
仍然是我们的输出层

305
00:10:43,340 --> 00:10:45,040
this network has two hidden layers.
这个网络有两个隐藏层

306
00:10:46,000 --> 00:10:47,440
So anything that's not an
所以 任何一个不是

307
00:10:48,000 --> 00:10:49,020
input layer or an output
输入层或输出层的

308
00:10:49,340 --> 00:10:50,590
layer is called a hidden layer.
都被称为隐藏层

309
00:10:53,390 --> 00:10:54,470
So, hopefully from this video
我希望从这个视频中

310
00:10:54,760 --> 00:10:55,840
you've gotten a sense of
你已经大致理解

311
00:10:56,140 --> 00:10:58,360
how the feed forward propagation step
前向传播在

312
00:10:58,830 --> 00:11:00,230
in a neural network works where you
神经网络里的工作原理：

313
00:11:00,390 --> 00:11:01,670
start from the activations of
从输入层的激励

314
00:11:01,720 --> 00:11:03,150
the input layer and forward
开始 向前

315
00:11:03,450 --> 00:11:04,480
propagate that to the
传播到

316
00:11:04,570 --> 00:11:05,560
first hidden layer, then the second
第一隐藏层 然后传播到第二

317
00:11:06,070 --> 00:11:08,200
hidden layer, and then finally the output layer.
隐藏层 最终到达输出层

318
00:11:08,990 --> 00:11:10,250
And you also saw how
并且你也知道了如何

319
00:11:10,560 --> 00:11:12,010
we can vectorize that computation.
向量化这些计算

320
00:11:13,660 --> 00:11:14,830
In the next, I realized
我发现

321
00:11:15,240 --> 00:11:16,680
that some of the intuitions in this
这个视频里我讲了

322
00:11:16,850 --> 00:11:19,220
video of how, you know, other certain
某些层是如何

323
00:11:19,550 --> 00:11:22,570
layers are computing complex features of the early layers.
计算前面层的复杂特征项

324
00:11:22,910 --> 00:11:23,540
I realized some of that intuition
我意识到这可能

325
00:11:24,190 --> 00:11:26,660
may be still slightly abstract and kind of a high level.
仍然有点抽象 显得比较高端

326
00:11:27,450 --> 00:11:28,240
And so what I would like
所以 我将

327
00:11:28,350 --> 00:11:29,460
to do in the two videos
在接下来的两个视频中

328
00:11:30,210 --> 00:11:31,540
is work through a detailed example
讨论具体的例子

329
00:11:32,510 --> 00:11:33,810
of how a neural network can
它描述了怎样用神经网络

330
00:11:33,960 --> 00:11:35,740
be used to compute nonlinear
来计算

331
00:11:36,710 --> 00:11:38,030
functions of the input and
输入的非线性函数

332
00:11:38,330 --> 00:11:39,450
hope that will give you a
希望能使你

333
00:11:39,540 --> 00:11:40,860
good sense of the sorts of
更好的理解

334
00:11:41,010 --> 00:11:44,630
complex nonlinear hypotheses we can get out of Neural Networks.
从神经网络中得到的复杂非线性假设

