1
00:00:00,180 --> 00:00:01,178
In this video, I'd like to
在这段视频中 我想

2
00:00:01,178 --> 00:00:02,587
tell you how to write
告诉你怎样

3
00:00:02,600 --> 00:00:03,842
control statements for your
为你的 Octave 程序写控制语句

4
00:00:03,842 --> 00:00:05,672
Octave programs, so things
诸如

5
00:00:05,700 --> 00:00:07,280
like "for", "while" and "if" statements
"for" "while" "if" 这些语句

6
00:00:07,350 --> 00:00:12,176
and also how to define and use functions.
并且如何定义和使用方程

7
00:00:12,480 --> 00:00:13,980
Here's my Octave window. Let
这是我们的 Octave 窗口

8
00:00:13,980 --> 00:00:16,502
me first show you how to use a "for" loop.
我先告诉你如何使用 “for” 循环

9
00:00:16,502 --> 00:00:17,888
I'm going to start by setting v
首先 我要将 v 值设为

10
00:00:17,888 --> 00:00:18,852
to be a 10 by
一个10行1列

11
00:00:18,870 --> 00:00:20,808
1 vector 0.
的零向量

12
00:00:20,830 --> 00:00:22,209
Now, here's I write
现在 我要写一个 “for" 循环

13
00:00:22,240 --> 00:00:25,071
a "for" loop for I equals 1 to 10.
让 i 等于 1 到 10

14
00:00:25,090 --> 00:00:27,608
That's for I equals Y colon 10.
写出来就是 i = 1:10

15
00:00:27,608 --> 00:00:29,905
And let's see, I'm
让我们来看看

16
00:00:29,905 --> 00:00:31,466
going to set V of I
我要设 v(i) 的值

17
00:00:31,466 --> 00:00:33,214
equals two to the
等于 2 的 i 次方

18
00:00:33,220 --> 00:00:36,848
power of I, and finally
循环最后

19
00:00:36,848 --> 00:00:37,671
end.
记得写上“end”

20
00:00:37,671 --> 00:00:39,082
The white space does not matter,
这里的空格没关系

21
00:00:39,090 --> 00:00:40,538
so I am putting the spaces
所以我就加一些空格

22
00:00:40,538 --> 00:00:41,960
just to make it look nicely indented,
让缩进后的代码看起来结构更清晰

23
00:00:41,990 --> 00:00:44,385
but you know spacing doesn't matter.
但是你要知道这里的空格没有意义

24
00:00:44,420 --> 00:00:46,163
But if I do this, then the
如果按我这样做 那么

25
00:00:46,163 --> 00:00:48,626
result is that V gets
向量 v 的值就是

26
00:00:48,626 --> 00:00:49,420
set to, you know, two to
这样一个集合 2的一次方

27
00:00:49,500 --> 00:00:51,478
the power one, two to the power two, and so on.
2的二次方 依此类推

28
00:00:51,490 --> 00:00:52,665
So this is syntax for I
于是这就是我的 i 等于 1 到 10

29
00:00:52,665 --> 00:00:55,410
equals one colon 10 that
的语句结构

30
00:00:55,410 --> 00:00:57,429
makes I loop through the
让 i 遍历 1 到 10

31
00:00:57,440 --> 00:00:59,662
values one through 10.
的值

32
00:00:59,662 --> 00:01:00,830
And by the way, you can also do
另外 你还可以通过

33
00:01:00,830 --> 00:01:02,481
this by setting your
设置你的 indices (索引) 等于 1

34
00:01:02,481 --> 00:01:04,795
indices equals one to
一直到10

35
00:01:04,800 --> 00:01:07,260
10, and so the
来做到这一点

36
00:01:07,270 --> 00:01:09,305
indices in the array from one to 10.
这时 indices 就是一个从1到10的序列

37
00:01:09,305 --> 00:01:13,249
You can also write for I equals indices.
你也可以写 i = indices

38
00:01:15,040 --> 00:01:17,805
And this is actually the same as if I equals one to 10.
这实际上和我直接把 i 写到 1 到 10 是一样

39
00:01:17,820 --> 00:01:19,459
You can do, you know, display
你可以写 disp(i)

40
00:01:19,480 --> 00:01:23,498
I and this would do the same thing.
也能得到一样的结果

41
00:01:23,498 --> 00:01:24,698
So, that is a "for" loop,
所以 这就是一个 “for” 循环

42
00:01:24,698 --> 00:01:27,201
if you are familiar with "break"
如果你对 “break” 和 “continue” 语句比较熟悉

43
00:01:27,230 --> 00:01:29,375
and "continue", there's "break" and
Octave里也有 “break” 和 “continue” 语句

44
00:01:29,375 --> 00:01:30,809
"continue" statements, you can
你也可以在 Octave环境里

45
00:01:30,809 --> 00:01:32,061
also use those inside loops
使用那些循环语句

46
00:01:32,061 --> 00:01:33,902
in octave, but first
但是首先让我告诉你

47
00:01:33,902 --> 00:01:36,550
let me show you how a while loop works.
一个 while 循环是如何工作的

48
00:01:36,570 --> 00:01:39,088
So, here's my vector
这是我的 v 向量

49
00:01:39,120 --> 00:01:40,912
V. Let's write the while loop.
让我们写个 while 循环

50
00:01:40,920 --> 00:01:44,037
I equals 1, while I
i = 1 ;

51
00:01:44,037 --> 00:01:45,259
is less than or equal to
while i <= 5 ;

52
00:01:45,259 --> 00:01:47,662
5, let's set
让我们设置

53
00:01:47,662 --> 00:01:51,082
V I equals one hundred
v(i) 等于 100

54
00:01:51,530 --> 00:01:54,449
and increment I by
然后 i 加 1

55
00:01:54,449 --> 00:01:56,644
one, end.
结束 (end)

56
00:01:56,700 --> 00:01:58,090
So this says what?
所以这是什么意思呢

57
00:01:58,090 --> 00:01:59,932
I starts off equal to
我让 i 取值从 1 开始

58
00:01:59,970 --> 00:02:01,359
one and then I'm going
然后我要

59
00:02:01,380 --> 00:02:02,629
to set V I equals one
让 v(i) 等于 100

60
00:02:02,629 --> 00:02:04,249
hundred and increment I by
再让 i 递增 1

61
00:02:04,260 --> 00:02:07,666
one until I is, you know, greater than five.
直到 i 大于 5停止

62
00:02:07,690 --> 00:02:09,377
And as a result of that,
现在来看一下结果

63
00:02:09,377 --> 00:02:13,022
whereas previously V was this powers of two vector.
原来的向量 v 是2的这些次方

64
00:02:13,022 --> 00:02:14,573
I've now taken the first
我现在已经取出了

65
00:02:14,580 --> 00:02:17,225
five elements of my vector
向量的前五个元素

66
00:02:17,260 --> 00:02:19,618
and overwritten them with this value one hundred.
把他们用100覆盖掉

67
00:02:19,618 --> 00:02:22,797
So that's a syntax for a while loop.
这就是一个while循环的句法结构

68
00:02:23,140 --> 00:02:24,503
Let's do another example.
现在我们来分析另外一个例子

69
00:02:24,503 --> 00:02:26,600
Y equals one while
i = 1; while true,

70
00:02:26,600 --> 00:02:28,491
true and here
这里我将向你展示

71
00:02:28,500 --> 00:02:31,892
I wanted to show you how to use a break statement.
如何使用break语句

72
00:02:31,892 --> 00:02:34,040
Let's say V I equals 999
比方说 v(i) = 999

73
00:02:34,070 --> 00:02:37,331
and I equals i+1
然后让 i = i+1

74
00:02:38,110 --> 00:02:45,900
if i equals 6 break and
当 i 等于6的时候 break (停止循环)

75
00:02:47,910 --> 00:02:47,910
end.
结束 (end)

76
00:02:48,410 --> 00:02:49,425
And this is also our first
当然这也是我们第一次

77
00:02:49,425 --> 00:02:51,945
use of an if statement, so
使用一个 if 语句 所以

78
00:02:51,945 --> 00:02:53,308
I hope the logic of this makes sense.
我希望你们可以理解这个逻辑

79
00:02:53,308 --> 00:02:57,297
Since I equals one and, you know, increment loop.
让 i 等于1 然后开始下面的增量循环

80
00:02:57,340 --> 00:02:59,900
While repeatedly set V I equals 1
while语句重复设置 v(i) 等于1 (此处口误 应为999 译者注)

81
00:02:59,900 --> 00:03:01,527
and increment i by 1,
不断让i增加

82
00:03:01,527 --> 00:03:02,901
and then when 1 i
然后当 i 达到6

83
00:03:02,920 --> 00:03:04,451
gets up to 6, do a
做一个

84
00:03:04,451 --> 00:03:05,757
break which breaks here although
中止循环的命令

85
00:03:05,757 --> 00:03:07,284
the while do and so, the
尽管有while循环 语句也就此中止

86
00:03:07,284 --> 00:03:08,596
effective is should be to take
所以最后的效果是

87
00:03:08,596 --> 00:03:09,929
the first five elements of this
取出向量 v 的前5个元素

88
00:03:09,929 --> 00:03:11,748
vector V and set them to 999.
并且把它们设置为999

89
00:03:11,748 --> 00:03:14,832
And yes, indeed, we're taking
然后运行 的确如此

90
00:03:14,832 --> 00:03:18,345
V and overwritten the first five elements with 999.
我们用999覆盖了 v 的前五个元素

91
00:03:18,345 --> 00:03:20,172
So, this is the
所以 这就是

92
00:03:20,172 --> 00:03:21,974
syntax for "if" statements, and
if 语句和 while 语句的句法结构

93
00:03:21,974 --> 00:03:25,058
for "while" statement, and notice the end.
并且要注意 要有end

94
00:03:25,070 --> 00:03:27,159
We have two ends here.
这里是有两个 end 的

95
00:03:27,170 --> 00:03:29,719
This ends here ends the if statement
这里的 end 结束的是 if 语句

96
00:03:29,730 --> 00:03:33,228
and the second end here ends the while statement.
第二个 end 结束的是 while 语句

97
00:03:33,250 --> 00:03:35,265
Now let me show you the more general syntax for
现在让我告诉你使用 if-else 语句时

98
00:03:35,265 --> 00:03:37,763
how to use an if-else statement.
更一般的句法结构

99
00:03:37,763 --> 00:03:40,274
So, let's see, V 1
举个例子 v(1)

100
00:03:40,274 --> 00:03:42,776
is equal to 999, let's
等于999 假设我们

101
00:03:42,860 --> 00:03:46,996
type V1 equals to 2 for this example.
令 v(1) 等于2

102
00:03:47,020 --> 00:03:48,758
So, let me type
所以 让我输入

103
00:03:48,758 --> 00:03:55,050
if V 1 equals 1 display the value as one.
if v(1) == 1, disp('The value is one');

104
00:03:56,855 --> 00:03:58,588
Here's how you write an else
这里出现了一个else语句

105
00:03:58,588 --> 00:04:00,040
statement, or rather here's an
或者更确切地说 这里是一个

106
00:04:00,040 --> 00:04:03,853
else if: V 1 equals
elseif语句 elseif v(1) == 2,

107
00:04:03,853 --> 00:04:07,815
2. This is, if in case that's true in our example, display
这就是说 如果这种情况下命题为真

108
00:04:07,815 --> 00:04:12,268
the value as 2, else
执行 disp('The value is two');

109
00:04:13,650 --> 00:04:17,960
display, the value is not one or two.
否则(else) 执行 disp('The value is not one or two');

110
00:04:17,990 --> 00:04:21,699
Okay, so that's a  if-else
好了 这就是一个if-else语句

111
00:04:21,700 --> 00:04:23,889
if-else statement it ends.
if-else语句 记得最后有end

112
00:04:23,889 --> 00:04:25,271
And of course, here we've just
当然了 我们刚刚设置过

113
00:04:25,271 --> 00:04:27,589
set v 1 equals 2, so hopefully, yup,
v(1)等于2 所以显然

114
00:04:27,610 --> 00:04:30,729
displays that the value is 2.
显示的是 "The value is two"

115
00:04:30,780 --> 00:04:32,844
And finally, I don't
最后 我觉得现在

116
00:04:32,880 --> 00:04:34,143
think I talked about this earlier, but
提醒一件事

117
00:04:34,143 --> 00:04:35,622
if you ever need to exit Octave,
如果你需要退出 Octave

118
00:04:35,622 --> 00:04:36,947
you can type the exit command and
你可以键入 exit 命令然后

119
00:04:36,947 --> 00:04:38,373
you hit enter that will cause Octave
回车就会退出 Octave

120
00:04:38,400 --> 00:04:39,981
to quit or the 'q'--quits
或者命令 ‘quit’

121
00:04:39,981 --> 00:04:42,428
command also works.
也可以

122
00:04:42,450 --> 00:04:43,857
Finally, let's talk about
最后 让我们来说说

123
00:04:43,857 --> 00:04:45,292
functions and how to define
函数 (functions)

124
00:04:45,310 --> 00:04:48,592
them and how to use them.
如何定义和调用函数

125
00:04:48,620 --> 00:04:49,680
Here's my desktop, and I
这是我的桌面

126
00:04:49,720 --> 00:04:52,078
have predefined a file
我在桌面上存了一个

127
00:04:52,078 --> 00:04:56,818
or pre-saved on my desktop a file called "squarethisnumber.m".
预先定义的文件 名为 “squarethisnumber.m”

128
00:04:56,830 --> 00:04:59,471
This is how you define functions in Octave.
这就是在 Octave 环境下定义的函数

129
00:04:59,480 --> 00:05:01,681
You create a file called, you know,
你需要创建一个文件

130
00:05:01,681 --> 00:05:03,958
with your function name and then ending in .m,
用你的函数名来命名 然后以 .m 的后缀结尾

131
00:05:03,960 --> 00:05:05,694
and when Octave finds
当 Octave 发现这文件

132
00:05:05,730 --> 00:05:07,643
this file, it knows that this
它知道应该在什么位置

133
00:05:07,680 --> 00:05:12,322
where it should look for the definition of the function "squarethisnumber.m".
寻找 squareThisNumber.m 这个函数的定义

134
00:05:12,340 --> 00:05:14,076
Let's open up this file.
让我们打开这个文件

135
00:05:14,076 --> 00:05:15,717
Notice that I'm using the
请注意 我使用的是

136
00:05:15,717 --> 00:05:19,352
Microsoft program Wordpad to open up this file.
微软的写字板程序来打开这个文件

137
00:05:19,352 --> 00:05:20,250
I just want to encourage you, if
我只是想建议你

138
00:05:20,250 --> 00:05:23,379
your using Microsoft Windows, to
如果你也使用微软的 Windows 系统

139
00:05:23,379 --> 00:05:25,075
use Wordpad rather than
那么可以使用写字板程序

140
00:05:25,110 --> 00:05:27,477
Notepad to open up these
而不是记事本 来打开这些文件

141
00:05:27,490 --> 00:05:28,557
files, if you have a
如果你有别的什么

142
00:05:28,557 --> 00:05:29,938
different text editor that's fine
文本编辑器 那也可以

143
00:05:29,938 --> 00:05:33,325
too, but notepad sometimes messes up the spacing.
但记事本有时会把代码的间距弄得很乱

144
00:05:33,350 --> 00:05:34,775
If you only have Notepad, that should
如果你只有记事本程序

145
00:05:34,800 --> 00:05:36,312
work too, that could work
那也能用

146
00:05:36,312 --> 00:05:37,779
too, but if you
但最好是

147
00:05:37,779 --> 00:05:39,354
have Wordpad as well, I
如果你有写字板的话

148
00:05:39,354 --> 00:05:40,609
would rather use that or some
我建议你用写字板

149
00:05:40,610 --> 00:05:45,053
other text editor, if you have a different text editor for editing your functions.
或者其他可以编辑函数的文本编辑器

150
00:05:45,060 --> 00:05:47,155
So, here's how you define the function in Octave.
现在我们来说如何在 Octave 里定义函数

151
00:05:47,155 --> 00:05:49,816
Let me just zoom in a little bit.
我们先来放大一点

152
00:05:49,816 --> 00:05:52,516
And this file has just three lines in it.
这个文件只有三行

153
00:05:52,516 --> 00:05:54,440
The first line says function Y equals square root
第一行写着 function y = squareThisNumber(x)

154
00:05:54,440 --> 00:05:56,448
number of X, this tells
这就告诉 Octave

155
00:05:56,448 --> 00:05:57,705
Octave that I'm gonna return
我想返回一个 y 值

156
00:05:57,705 --> 00:06:00,025
the value Y, I'm gonna
我想返回一个值

157
00:06:00,025 --> 00:06:01,315
return one value and that
并且返回的这个值

158
00:06:01,315 --> 00:06:02,375
the value is going to
将被存放于

159
00:06:02,375 --> 00:06:04,443
be saved in the variable Y
变量 y 里

160
00:06:04,443 --> 00:06:06,003
and moreover, it tells Octave
另外 它告诉了 Octave

161
00:06:06,003 --> 00:06:08,068
that this function has one argument,
这个函数有一个参数

162
00:06:08,070 --> 00:06:10,408
which is the argument X,
就是参数 x

163
00:06:10,420 --> 00:06:11,846
and the way the function
还有定义的函数体

164
00:06:11,846 --> 00:06:15,156
body is defined, if Y equals X squared.
也就是 y 等于 x 的平方

165
00:06:15,180 --> 00:06:16,553
So, let's try to call
现在让我们尝试调用这个函数

166
00:06:16,553 --> 00:06:19,071
this function "square", this number
SquareThisNumber(5)

167
00:06:19,071 --> 00:06:21,854
5, and this actually
这实际上

168
00:06:21,854 --> 00:06:23,115
isn't going to work, and
是行不通的

169
00:06:23,115 --> 00:06:25,693
Octave says square this number it's undefined.
Octave 说这个方程未被定义

170
00:06:25,693 --> 00:06:28,902
That's because Octave doesn't know where to find this file.
这是因为 Octave 不知道在哪里找这个文件

171
00:06:28,902 --> 00:06:30,682
So as usual, let's use PWD,
所以像之前一样 我们??使用 pwd

172
00:06:30,690 --> 00:06:32,592
or not in my directory,
现在不在我的目录下

173
00:06:32,592 --> 00:06:36,151
so let's see this c:\users\ang\desktop.
因此我们把路径设为 "C:\User\ang\desktop"

174
00:06:36,151 --> 00:06:39,888
That's where my desktop is.
这就是我的桌面的路径

175
00:06:39,888 --> 00:06:41,276
Oops, a little typo there.
噢 打错了

176
00:06:41,276 --> 00:06:42,848
Users ANG desktop
应该是 "Users"

177
00:06:42,848 --> 00:06:44,157
and if I now type square
现在如果我

178
00:06:44,157 --> 00:06:46,728
root number 5, it returns the
键入SquareThisNumber(5)

179
00:06:46,728 --> 00:06:48,505
answer 25.
返回值是25

180
00:06:48,505 --> 00:06:50,347
As kind of an advanced feature, this
还有一种更高级的功能

181
00:06:50,347 --> 00:06:51,972
is only for those of you
这只是对那些知道

182
00:06:51,972 --> 00:06:54,596
that know what the term search path means.
“search path (搜索路径)” 这个术语的人使用的

183
00:06:54,596 --> 00:06:55,945
But so if you
所以如果你

184
00:06:55,945 --> 00:06:57,497
want to modify the Octave
想要修改 Octave

185
00:06:57,497 --> 00:06:58,863
search path and you
的搜索路径

186
00:06:58,863 --> 00:06:59,866
could, you just think of
你可以把下面这部分

187
00:06:59,866 --> 00:07:01,827
this next part as advanced
作为一个进阶知识

188
00:07:01,827 --> 00:07:03,292
or optional material.
或者选学材料

189
00:07:03,292 --> 00:07:04,214
Only for those who are either
仅适用于那些

190
00:07:04,214 --> 00:07:05,484
familiar with the concepts of
熟悉编程语言中

191
00:07:05,484 --> 00:07:07,642
search paths and permit languages,
搜索路径概念的同学

192
00:07:07,650 --> 00:07:08,962
but you can use the
你可以使用

193
00:07:08,962 --> 00:07:11,875
term addpath, safety colon,
addpath 命令添加路径

194
00:07:11,880 --> 00:07:16,241
slash users/ANG/desktop to
添加路径 “C:\Users\ang\desktop”

195
00:07:16,241 --> 00:07:17,972
add that directory to the
将该目录添加到

196
00:07:17,972 --> 00:07:19,744
Octave search path so that
Octave 的搜索路径

197
00:07:19,744 --> 00:07:21,065
even if you know, go to
这样即使你跑到

198
00:07:21,065 --> 00:07:22,611
some other directory I can
其他路径底下

199
00:07:22,611 --> 00:07:24,510
still, Octave still knows
Octave依然知道

200
00:07:24,510 --> 00:07:26,005
to look in the users ANG
会在 Users\ang\desktop

201
00:07:26,005 --> 00:07:29,214
desktop directory for functions
目录下寻找函数

202
00:07:29,214 --> 00:07:30,521
so that even though I'm in
这样 即使我现在

203
00:07:30,521 --> 00:07:31,868
a different directory now, it still
在不同的目录下 它仍然

204
00:07:31,868 --> 00:07:35,297
knows where to find the square this number function.
知道在哪里可以找到 “SquareThisNumber” 这个函数

205
00:07:35,297 --> 00:07:35,935
Okay?
OK

206
00:07:35,935 --> 00:07:37,407
But if you're not familiar
但是 如果你不熟悉

207
00:07:37,407 --> 00:07:39,184
with the concept of search path, don't worry
搜索路径的概念

208
00:07:39,184 --> 00:07:40,068
about it.
不用担心

209
00:07:40,068 --> 00:07:40,889
Just make sure as you use
只要确保

210
00:07:40,889 --> 00:07:42,053
the CD command to go to
在执行函数之前 先用 cd 命令

211
00:07:42,053 --> 00:07:43,926
the directory of your function before
设置到你函数所在的目录下

212
00:07:43,940 --> 00:07:47,441
you run it and that actually works just fine.
实际上也是一样的效果

213
00:07:47,441 --> 00:07:49,587
One concept that Octave has
Octave 还有一个

214
00:07:49,600 --> 00:07:51,058
that many other programming
其他许多编程语言都没有的概念

215
00:07:51,058 --> 00:07:52,969
languages don't is that it
那就是它可以

216
00:07:52,969 --> 00:07:54,909
can also let you define
允许你定义一个函数

217
00:07:54,909 --> 00:07:58,873
functions that return multiple values or multiple arguments.
使得返回值是多个值或多个参数

218
00:07:58,873 --> 00:08:00,889
So here's an example of that.
这里就是一个例子

219
00:08:00,889 --> 00:08:02,931
Define the function called square
定义一个函数叫

220
00:08:02,931 --> 00:08:04,964
and cube this number X
“SquareAndCubeThisNumber(x)” (x的平方以及x的立方)

221
00:08:04,964 --> 00:08:06,644
and what this says is this
这说的就是

222
00:08:06,660 --> 00:08:08,547
function returns 2 values, y1 and y2.
函数返回值是两个 y1 和 y2

223
00:08:08,547 --> 00:08:09,955
When I set down, this
接下来就是

224
00:08:09,960 --> 00:08:13,603
follows, y1 is squared, y2 is execute.
y1是被平方后的数 y2是被立方后的结果

225
00:08:13,603 --> 00:08:16,972
And what this does is this really returns 2 numbers.
这就是说 函数会真的返回2个值

226
00:08:16,980 --> 00:08:18,855
So, some of you depending
所以 有些同学可能会根据

227
00:08:18,855 --> 00:08:20,195
on what programming language you use,
你使用的编程语言

228
00:08:20,195 --> 00:08:22,931
if you're familiar with, you know, CC++ your offer.
比如你们可能熟悉的C或C++

229
00:08:22,940 --> 00:08:26,051
Often, we think of the function as return in just one value.
通常情况下 认为作为函数返回值只能是一个值

230
00:08:26,051 --> 00:08:27,847
But just so the syntax in Octave
但 Octave 的语法结构就不一样

231
00:08:27,847 --> 00:08:31,679
that should return multiple values.
可以返回多个值

232
00:08:32,430 --> 00:08:34,087
Now back in the Octave window. If
现在回到 Octave 窗口

233
00:08:34,087 --> 00:08:37,914
I type, you know, a, b equals
如果我键入

234
00:08:37,914 --> 00:08:41,263
square and cube this
 [a,b] = SquareAndCubeThisNumber(5)

235
00:08:41,263 --> 00:08:44,599
number 5 then
然后

236
00:08:44,610 --> 00:08:46,338
a is now equal to
a 就等于25

237
00:08:46,338 --> 00:08:47,778
25 and b is equal to
b 就等于

238
00:08:47,778 --> 00:08:49,729
the cube of 5 equal to 125.
5的立方 125

239
00:08:49,729 --> 00:08:51,645
So, this is often
所以说如果你需要定义一个函数

240
00:08:51,670 --> 00:08:53,010
convenient if you needed to define
并且返回多个值

241
00:08:53,010 --> 00:08:56,447
a function that returns multiple values.
这一点常常会带来很多方便

242
00:08:56,447 --> 00:08:57,480
Finally, I'm going to show
最后 我来给大家演示一下

243
00:08:57,480 --> 00:09:01,123
you just one more sophisticated example of a function.
一个更复杂一点的函数的例子

244
00:09:01,130 --> 00:09:02,361
Let's say I have a data set
比方说 我有一个数据集

245
00:09:02,370 --> 00:09:04,400
that looks like this, with data points at 1, 1, 2, 2, 3, 3.
像这样 数据点为[1,1], [2,2], [3,3]

246
00:09:04,430 --> 00:09:07,636
And what I'd like
我想做的事是

247
00:09:07,636 --> 00:09:09,113
to do is to define an
定义一个 Octave 函数来计算代价函数 J(θ)

248
00:09:09,113 --> 00:09:10,798
octave function to compute the cost
就是计算

249
00:09:10,830 --> 00:09:14,341
function J of theta for different values of theta.
不同 θ 值所对应的代价函数值 J

250
00:09:14,360 --> 00:09:16,157
First let's put the data into octave.
首先让我们把数据放到 Octave 里

251
00:09:16,160 --> 00:09:17,694
So I set my design
我把我的矩阵设置为

252
00:09:17,700 --> 00:09:20,998
matrix to be 1,1,1,2,1,3.
X = [1 1; 1 2; 1 3];

253
00:09:21,010 --> 00:09:24,043
So, this is my design
这就是我的设计矩阵 X

254
00:09:24,050 --> 00:09:26,073
matrix x with x0, the
第一列表示x0项

255
00:09:26,073 --> 00:09:27,428
first column being the said
矩阵的第一列

256
00:09:27,428 --> 00:09:28,746
term and the second term being
第二列表示

257
00:09:28,770 --> 00:09:32,375
you know, my the x-values of my three training examples.
我的三个训练样本的 x 值

258
00:09:32,375 --> 00:09:33,594
And let me set
现在我再来

259
00:09:33,594 --> 00:09:35,488
y to be 1-2-3 as
设置 y 值为 [1; 2; 3]

260
00:09:35,488 --> 00:09:38,793
follows, which were the y axis values.
就像这样 是y轴对应值

261
00:09:38,810 --> 00:09:40,431
So let's say theta
现在我们设定 theta

262
00:09:40,431 --> 00:09:43,714
is equal to 0 semicolon 1.
为 [0;1]

263
00:09:43,730 --> 00:09:45,652
Here at my desktop, I've
现在我的桌面上

264
00:09:45,660 --> 00:09:47,483
predefined does cost function
已经有我预定义的代价函数 J

265
00:09:47,490 --> 00:09:49,008
j and if I
如果我打开函数

266
00:09:49,010 --> 00:09:52,019
bring up the definition of that function it looks as follows.
函数的定义应该是下面这样的

267
00:09:52,019 --> 00:09:53,579
So function j equals cost function
所以 函数J 就写成

268
00:09:53,580 --> 00:09:55,192
j equals x y
J = costFunctionJ(X, y, theta)

269
00:09:55,192 --> 00:09:57,151
theta, some commons, specifying
这里有一些注释

270
00:09:57,151 --> 00:09:59,546
the inputs and then
主要用于解释输入变量

271
00:09:59,560 --> 00:10:01,383
vary few steps set m
接下来几步

272
00:10:01,383 --> 00:10:02,995
to be the number trading examples
设定 m 为训练样本的数量

273
00:10:03,020 --> 00:10:05,495
thus the number of rows in x.
也就是 X 的行数

274
00:10:05,510 --> 00:10:07,596
Compute the predictions, predictions equals
计算预测值 predictions

275
00:10:07,596 --> 00:10:10,137
x times theta and so
预测值等于 X 乘以 theta

276
00:10:10,170 --> 00:10:11,670
this is a common that's wrapped
这里是注释行

277
00:10:11,710 --> 00:10:14,693
around, so this is probably the preceding comment line.
是上一个注释行拐过来的部分

278
00:10:14,720 --> 00:10:16,823
Computer script errors by, you know, taking
下面就是计算平方误差 公式就是

279
00:10:16,823 --> 00:10:18,637
the difference between your predictions and
预测值减去 y 值

280
00:10:18,640 --> 00:10:20,265
the y values and taking the
然后取出来每一项进行平方

281
00:10:20,265 --> 00:10:22,126
element of y squaring and then
最后就可以

282
00:10:22,140 --> 00:10:24,376
finally computing the cost
计算代价函数 J

283
00:10:24,376 --> 00:10:26,128
function J. And Octave knows
并且 Octave 知道

284
00:10:26,128 --> 00:10:27,439
that J is a value I
J 是一个我想返回的值

285
00:10:27,439 --> 00:10:31,383
want to return because J appeared here in the function definition.
因为 J 出现在了我函数的定义里

286
00:10:31,420 --> 00:10:34,127
Feel free by the way to pause
另外 你可以随时

287
00:10:34,170 --> 00:10:35,292
this video if you want
暂停一下视频

288
00:10:35,292 --> 00:10:36,712
to look at this function
如果你想

289
00:10:36,712 --> 00:10:38,820
definition for longer and
仔细看一下这个函数的定义

290
00:10:38,820 --> 00:10:44,031
kind of make sure that you understand the different steps.
确保你明白了定义中的每一步

291
00:10:44,031 --> 00:10:45,184
But when I run it in
现在当我

292
00:10:45,184 --> 00:10:46,630
Octave, I run j equals
在 Octave 里运行时

293
00:10:46,630 --> 00:10:51,197
cost function j x y theta.
我键入 j = costFunctionJ(x, y, theta)

294
00:10:51,197 --> 00:10:55,142
It computes. Oops, made a typo there.
然后他就开始计算 噢 又打错了

295
00:10:55,142 --> 00:10:57,018
It should have been capital X. It
这里应该是大写 X

296
00:10:57,018 --> 00:11:00,472
computes J equals 0 because
它就计算出 j 等于0

297
00:11:00,510 --> 00:11:03,367
if my data set was,
这是因为 如果我的数据集

298
00:11:03,367 --> 00:11:06,963
you know, 123, 123 then setting, theta 0
x 为 [1;2;3] y 也为 [1;2;3] 然后设置 θ0 等于0

299
00:11:06,980 --> 00:11:08,741
equals 0, theta 1 equals
θ1 等于1

300
00:11:08,770 --> 00:11:11,259
1, this gives me exactly the
这给了我恰好45度的斜线

301
00:11:11,259 --> 00:11:15,559
45-degree line that fits my data set perfectly.
这条线是可以完美拟合我的数据集的

302
00:11:15,600 --> 00:11:16,887
Whereas in contrast if I set
而相反地 如果我设置

303
00:11:16,887 --> 00:11:19,828
theta equals say 0, 0,
theta 等于[0; 0]

304
00:11:19,830 --> 00:11:22,524
then this hypothesis is
那么这个假设就是

305
00:11:22,540 --> 00:11:24,050
predicting zeroes on everything
0是所有的预测值

306
00:11:24,050 --> 00:11:25,803
the same, theta 0 equals 0,
和刚才一样 设置θ0 = 0

307
00:11:25,810 --> 00:11:27,139
theta 1 equals 0 and
θ1 也等于0

308
00:11:27,139 --> 00:11:29,345
I compute the cost function
然后我计算的代价函数

309
00:11:29,370 --> 00:11:31,830
then it's 2.333 and that's
结果是2.333

310
00:11:31,830 --> 00:11:35,495
actually equal to 1 squared,
实际上 他就等于1的平方

311
00:11:35,520 --> 00:11:36,745
which is my squared error on
 也就是第一个样本的平方误差

312
00:11:36,745 --> 00:11:39,789
the first example, plus 2 squared,
加上2的平方

313
00:11:39,800 --> 00:11:42,377
plus 3 squared and then
加上3的平方

314
00:11:42,440 --> 00:11:45,288
divided by 2m, which is
然后除以2m

315
00:11:45,288 --> 00:11:47,091
2 times number of training examples,
也就是训练样本数的两倍

316
00:11:47,091 --> 00:11:50,643
which is indeed 2.33 and
这就是2.33

317
00:11:50,643 --> 00:11:53,289
so, that sanity checks that
因此这也反过来验证了

318
00:11:53,330 --> 00:11:54,909
this function here is, you
我们这里的函数

319
00:11:54,909 --> 00:11:56,302
know, computing the correct cost
计算出了正确的代价函数

320
00:11:56,302 --> 00:11:58,212
function and these are the couple examples
这些就是我们

321
00:11:58,250 --> 00:12:00,222
we tried out on our
用简单的训练样本

322
00:12:00,222 --> 00:12:03,433
simple training example.
尝试的几次试验

323
00:12:03,490 --> 00:12:04,914
And so that sanity tracks
这也可以作为我们对

324
00:12:04,960 --> 00:12:08,689
that the cost function J,
定义的代价函数 J

325
00:12:08,720 --> 00:12:10,202
as defined here, that it
进行了完整性检查

326
00:12:10,230 --> 00:12:12,992
is indeed, you know, seeming to compute
确实是可以计算出正确的代价函数的

327
00:12:12,992 --> 00:12:14,908
the correct cost function, at least
至少基于这里的 X

328
00:12:14,920 --> 00:12:17,424
on our simple training set
和 y 是成立的

329
00:12:17,430 --> 00:12:18,835
that we had here with X
 也就是我们

330
00:12:18,835 --> 00:12:20,823
and Y being this
这几个简单的训练集

331
00:12:20,823 --> 00:12:25,189
simple training example that we solved.
至少是成立的

332
00:12:25,230 --> 00:12:26,285
So, now you know how
好啦 现在你知道

333
00:12:26,285 --> 00:12:28,171
to right control statements like for loops,
如何在 Octave 环境下写出正确的控制语句

334
00:12:28,171 --> 00:12:29,838
while loops and if statements
比如 for 循环、while 循环和 if 语句

335
00:12:29,838 --> 00:12:33,197
in octave as well as how to define and use functions.
以及如何定义和使用函数

336
00:12:33,197 --> 00:12:34,530
In the next video, I'm
在接下来的视频中

337
00:12:34,530 --> 00:12:36,123
going to just very quickly
我会非常快的

338
00:12:36,123 --> 00:12:38,144
step you through the logistics
介绍一下

339
00:12:38,144 --> 00:12:39,873
of working on and
如何在这门课里

340
00:12:39,873 --> 00:12:41,664
submitting problem sets for
完成和提交作业

341
00:12:41,664 --> 00:12:45,212
this class and how to use our submission system.
如何使用我们的提交系统

342
00:12:45,230 --> 00:12:46,794
And finally, after that, in
在此之后

343
00:12:46,794 --> 00:12:48,856
the final octave tutorial video,
在最后的 Octave 教程视频里

344
00:12:48,856 --> 00:12:51,400
I wanna tell you about vectorization, which
我会讲解一下向量化

345
00:12:51,400 --> 00:12:52,938
is an idea for how to
这是一种可以使你的

346
00:12:52,938 --> 00:12:56,126
make your octave programs run much fast.
Octave 程序运行非常快的思想(字幕整理：中国海洋大学 黄海广,haiguang2000@qq.com )

