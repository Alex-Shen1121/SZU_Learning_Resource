2017133026:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(string no_){
        no=no_;
    }
    virtual void display()=0;

};
class Car:public Vehicle{
    int num,weight;
public:
    Car(string no_,int n,int w):Vehicle(no_){
        num=n;
        weight=w;
    }
    void display(){
        cout<<no<<" "<<num*8+weight*2<<endl;
    }
};
class Truck:public Vehicle{
    int weight;
public:
    Truck(string no_,int w):Vehicle(no_){
        weight=w;
    }
    void display(){
        cout<<no<<" "<<weight*5<<endl;
    }
};
class Bus:public Vehicle{
    int num;
public:
    Bus(string no_,int n):Vehicle(no_){
        num=n;
    }
    void display(){
        cout<<no<<" "<<num*3<<endl;
    }
};
int main()
{
    Vehicle *pv;
    string no;
    int n,w,t;
    cin>>t;
    while(t--){
        int type;
        cin>>type;
        if(type==1){
            cin>>no>>n>>w;
            Car c(no,n,w);
            pv=&c;
            pv->display();
        }else if(type==2){
            cin>>no>>w;
            Truck t1(no,w);
            pv=&t1;
            pv->display();
        }else if(type==3){
            cin>>no>>n;
            Bus b(no,n);
            pv=&b;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192022:Problem1232:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
protected:
    int num,weight;
public:
    Car(){}
    Car(string a,int b,int c):num(b),weight(c){no=a;}
    void display()
    {
        cout<<no<<" ";
        cout<<num*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(){}
    Truck(string a,int b):weight(b){no=a;}
    void display()
    {
        cout<<no<<" ";
        cout<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int num;
public:
    Bus(){}
    Bus(string a,int b):num(b){no=a;}
    void display()
    {
        cout<<no<<" ";
        cout<<num*3<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        if(n==1)
        {
            string name;
            int num,weight;
            cin>>name>>num>>weight;
            Car p(name,num,weight);
            p.display();
        }
        else if(n==2)
        {
            string name;
            int weight;
            cin>>name>>weight;
            Truck p(name,weight);
            p.display();
        }
        else if(n==3)
        {
            string name;
            int num;
            cin>>name>>num;
            Bus p(name,num);
            p.display();
        }
    }
    return 0;
}
------------------------------------------------------
2018182052:Problem1232:正确
#include<cstdio>
#include<iostream>
#include<iomanip>
#include<string>
#define ADDRESS "D:\\in.txt","r",stdin
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(const string& n):no(n) {}
    virtual void display()const=0;
};
class Car:public Vehicle
{
protected:
    int cnt_peo;
    int wei;
public:
    Car(const string &n,int c,int w):Vehicle(n),cnt_peo(c),wei(w) {}
    virtual void display()const
    {
        cout<<no<<" "<<cnt_peo*8+wei*2<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int wei;
public:
    Truck(const string &n,int w):Vehicle(n),wei(w) {}
    virtual void display()const
    {
        cout<<no<<" "<<wei*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int cnt_peo;
public:
    Bus(const string &n,int c):Vehicle(n),cnt_peo(c) {}
    virtual void display()const
    {
        cout<<no<<" "<<cnt_peo*3<<endl;
    }
};
int main()
{
 //   freopen(ADDRESS);
    int T(0);
    cin>>T;
    Vehicle *p;
    while(T--)
    {
        int type;
        string no;
        cin>>type>>no;
        int d[2];
        if(type==1)
        {
            cin>>d[0]>>d[1];
            Car tem(no,d[0],d[1]);
            p=&tem;
            p->display();
        }
        else if(type==2)
        {
            cin>>d[0];
            Truck tem(no,d[0]);
            p=&tem;
            p->display();
        }
        else if(type==3)
        {
            cin>>d[1];
            Bus tem(no,d[1]);
            p=&tem;
            p->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018192006:Problem1129:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
  
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <algorithm>
using std::sort;
using std::swap;
  
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
  
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
  
/*Add Data Structures Here*/
class BaseCard{
    public:
        void setCard();
        void depositCard();
        void withdrawCard();
        void printCard();
    protected:
        string cardID;
        string cardName;
        double value;
         
};
class TraCard : public BaseCard{
    public:
        void setTraCard();
        void depositTraCard();
        void withdrawTraCard();
        void printTraCard();
        void transfer();
    protected:
        double traVal;
};
class GoldCard : public BaseCard{
    public:
        void setGoldCard();
        void depositGoldCard();
        void withdrawGoldCard();
        void printGoldCard();
    protected:
        double extraVal;
};
/*Add Functions Here*/
void
BaseCard::setCard(){
    cin >> this->cardID >> this->cardName >> this->value;
}
void
TraCard::setTraCard(){
    this->setCard();
    cin >> this->traVal;
}
void
GoldCard::setGoldCard(){
    this->setCard();
    cin >> this->extraVal;
}
 
void
BaseCard::depositCard(){
    double m;
    cin >> m;
    if(m<=0)
        return;
    this->value+=m;
}
void
TraCard::depositTraCard(){
    this->depositCard();
}
void
GoldCard::depositGoldCard(){
    this->depositCard();
}
 
void
BaseCard::withdrawCard(){
    double m;
    cin >> m; 
    if(m<=0)
        return;
    if(m>this->value)
        return;
    this->value-=m;
}
void
TraCard::withdrawTraCard(){
    this->withdrawCard();
}
void
GoldCard::withdrawGoldCard(){
    double m;
    cin >> m; 
    if(m<=0)
        return;
    else if(m>this->value+this->extraVal)
        return;
    else if(m<=this->value+this->extraVal && m>this->value){
        m-=this->value;
        this->value=0;
        this->extraVal-=m;
    }else{
        this->value-=m;
    }
}
void
BaseCard::printCard(){
    cout << this->cardID << "-" << this->cardName << "-" << this->value << endl;
}
void
TraCard::printTraCard(){
    cout << this->cardID << "-" << this->cardName << "-" << this->value << "-" << this->traVal << endl; 
}
void
GoldCard::printGoldCard(){
    cout << this->cardID << "-" << this->cardName << "-" << this->value << "-" << this->extraVal << endl; 
}
void
TraCard::transfer(){
    double m;
    cin >> m;
    if(m<=0)
        return;
    if(m>this->value)
        return;
    this->value-=m;
    this->traVal+=m;
}
/*Main Function starts here.*/
int main(){
/*define IF_LOOP_NEEDED here if number of test cases are known.*/
//#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
     
    for(round=1;round<=rounds;++round){
 
    }
 
    /*Final process here.*/
     
#endif
    /*Solve Problems here if there are only one test case.*/
    BaseCard A;
    TraCard B;
    GoldCard C;
    A.setCard();
    B.setTraCard();
    C.setGoldCard();
    A.depositCard();
    A.depositCard();
    A.withdrawCard();
    A.withdrawCard();
    A.printCard();
    B.depositTraCard();
    B.withdrawTraCard();
    B.transfer();
    B.transfer();
    B.printTraCard();
    C.depositGoldCard();
    C.withdrawGoldCard();
    C.withdrawGoldCard();
    C.withdrawGoldCard();
    C.printGoldCard();
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}     
  
------------------------------------------------------
2018152008:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class Animal
{
	protected:
		string kind;
		string name;
		int age;
	public:
		virtual void speak();	
		void display();
};
void Animal::speak()
{
	;
}
void Animal::display()
{
	cout<<"Hello,I am "<<name<<",";
	speak();
}
class tiger:public Animal
{
	public:
		tiger(string n,int a);
		void speak();
};
tiger::tiger(string n,int a)
{
	kind="tiger";
	name=n;
	age=a;
}
void tiger::speak()
{
	cout<<"AOOO."<<endl;
}
class dog:public Animal
{
	public:
		dog(string n,int a);
		void speak();
};
dog::dog(string n,int a)
{
	kind="dog";
	name=n;
	age=a;
}
void dog::speak()
{
	cout<<"WangWang."<<endl;
}
class duck:public Animal
{
	public:
		duck(string n,int a);
		void speak();	
};
duck::duck(string n,int a)
{
	kind="duck";
	name=n;
	age=a;
}
void duck::speak()
{
	cout<<"GAGA."<<endl;
}
class pig:public Animal
{
	public:
		pig(string n,int a);
		void speak();
};
pig::pig(string n,int a)
{
	kind="pig";
	name=n;
	age=a;
}
void pig::speak()
{
	cout<<"HENGHENG."<<endl;
}
int main()
{
	int t;
	cin>>t;	
	while(t--)
	{
		Animal *p;
		string kind;
		string n;
		int a;
		cin>>kind>>n>>a;
		if(kind=="Tiger")
		{
			p=new tiger(n,a);
			p->display();
		}
		else if(kind=="Pig")
		{
			p=new pig(n,a);
			p->display();
		}
		else if(kind=="Duck")
		{
			p=new duck(n,a);
			p->display();
		}
		else if(kind=="Dog")
		{
			p=new dog(n,a);
			p->display();
		}
		else
		{
			cout<<"There is no "<<kind<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018151031:Problem1129:正确
#include <bits/stdc++.h>
using namespace std;
class travel;
class vip;
class card
{
	long id;
	string CName;
	float Counter;
public:
	friend travel;
	friend vip;
	virtual void initial(long id_in,string n,float c)
	{
		id=id_in;
		CName=n;
		Counter=c;		
	}	
	int save(float m)
	{
		if(m<0)
			return -1;
		if(m!=(int)m)
			return -1;
		if(m<0)
			return -1;
		else
			Counter+=m;
		return 1;
	}
	int take(float m)
	{
		if(m<0)
			return -1;
		if(m!=(int)m)
			return -1;
		if(m>Counter)
			return -1;
		else
			Counter-=m;
		return 1;
	}
	virtual void info()
	{
		cout<<id<<'-'<<CName<<'-'<<Counter<<endl;
	}
	
};
class travel:public card
{
	int Tcounter;
public:
	void initial(long id_in,string n,float c,int t)
	{
		id=id_in;
		CName=n;
		Counter=c;		
		Tcounter=t;
	}	
	int transfer(float m)
	{
		if(m<0)
			return -1;
		if(m>Counter)
			return -1;
		else
		{
			Counter-=m;
			Tcounter+=m;	
		}	
	}	
	void info()
	{
		cout<<id<<'-'<<CName<<'-'<<Counter<<'-'<<Tcounter<<endl;
	}
};
class vip:public card
{
	int Credit;
public:
	void initial(long id_in,string n,float c,int credit)
	{
		id=id_in;
		CName=n;
		Counter=c;		
		Credit=credit;
	}	
	int over(int m)
	{
		if(m<0)
			return -1;
		if(m>Counter+Credit)
			return -1;
		else
		{
			Credit-=m-Counter;
			Counter=0;
			return 1;
		}
	}
	void info()
	{
		cout<<id<<'-'<<CName<<'-'<<Counter<<'-'<<Credit<<endl;
	}
};
void show(card &obj)
{
	obj.info();
}
int main()
{
	long id;
	string n;
	float balance;
	cin>>id>>n>>balance;
	card c1;
	c1.initial(id,n,balance);
	int tcount_in;
	cin>>id>>n>>balance>>tcount_in;
	travel t;
	t.initial(id,n,balance,tcount_in);
	int o;
	cin>>id>>n>>balance>>o;
	vip v;
	v.initial(id,n,balance,o);
	float A,B,C,D;
	cin>>A>>B>>C>>D;
	c1.save(A);
	c1.save(B);
	c1.take(C);
	c1.take(D);
	cin>>A>>B>>C>>D;
	t.save(A);
	t.take(B);
	t.transfer(C);
	t.transfer(D);
	cin>>A>>B>>C>>D;
	v.save(A);
	v.take(B);
	v.over(C);
	v.over(D);
	card *c;
	c=&c1;
	show(*c);
	c=&t;
	show(*c);
	c=&v;
	show(*c);
}
------------------------------------------------------
2018192044:Problem1232:正确
#include <iostream>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
    int number,height;
public:
    Car(string n,int n1,int h):Vehicle(n),number(n1),height(h){}
    void display()
    {
        cout<<no<<" "<<number*8+height*2<<endl;
    }
};
class Truck:public Vehicle
{
    int height;
public:
    Truck(string n,int h):Vehicle(n),height(h){}
    void display()
    {
        cout<<no<<" "<<height*5<<endl;
    }
};
class Bus:public Vehicle
{
    int number;
public:
    Bus(string n,int n1):Vehicle(n),number(n1){}
    void display()
    {
        cout<<no<<" "<<number*3<<endl;
    }
};
int main()
{
    int t,i,number,height;
    string no;
    cin>>t;
    Vehicle *pv;
    while(t--)
    {
        cin>>i>>no;
        if(i==1)
        {
            cin>>number>>height;
            Car A(no,number,height);
            pv=&A;
            pv->display();
        }
        if(i==2)
        {
            cin>>height;
            Truck A(no,height);
            pv=&A;
            pv->display();
        }
        if(i==3)
        {
            cin>>number;
            Bus A(no,number);
            pv=&A;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018151031:Problem1120:正确
#include <iostream>
#include <cstring>

using namespace std;

class Animal
{
public:
    virtual void Speak()
    {

    }
};

class tiger:public Animal
{
public:
    tiger(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
private:
    char name[20];
    int age;
};

class dog:public Animal
{
public:
    dog(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
private:
    char name[20];
    int age;
};

class duck:public Animal
{
public:
    duck(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
private:
    char name[20];
    int age;
};

class pig:public Animal
{
public:
    pig(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
private:
    char name[20];
    int age;
};


int main()
{
	int t,age;
	char name[20],ani[20];
	cin>>t;
	Animal *p;
	while(t--)
    {
        cin>>ani>>name>>age;
        if(!strcmp(ani,"Tiger"))
        {
            tiger a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Dog"))
        {
            dog a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Duck"))
        {
            duck a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Pig"))
        {
            pig a(name,age);
            p=&a;
            p->Speak();
        }
        else
            cout<<"There is no "<<ani<<" in our Zoo."<<endl;
    }
	return 0;
}
------------------------------------------------------
2018152008:Problem1232:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Vehicle
{
	protected:
		string no;
		int count;
	public:
		virtual void display()=0;
		Vehicle(string n);
};
Vehicle::Vehicle(string n)
{
	no=n;
}
class Car:public Vehicle
{
	protected:
		int weight;
		int sum;
	public:
		Car(string n,int w,int s);
		void display();
};
Car::Car(string n,int w,int s):Vehicle(n)
{
		weight=w;
		sum=s;
};
void Car::display()
{
	count=weight*8+sum*2;
	cout<<setw(3)<<setfill('0')<<no<<" "<<count<<endl;
}
class Truck:public Vehicle
{
	protected:
		int weight;
	public:
		Truck(string n,int w);
		void display();	
};
Truck::Truck(string n,int w):Vehicle(n)
{
	weight=w;
}
void Truck::display()
{
	count=weight*5;
	cout<<setw(3)<<setfill('0')<<no<<" "<<count<<endl;	
}
class Bus:public Vehicle
{
	protected:
		int sum;	
	public:
		Bus(string n,int s);
		void display();
};
Bus::Bus(string n,int s):Vehicle(n)
{
	sum=s;
}
void Bus::display()
{
	count=sum*3;
	cout<<setw(3)<<setfill('0')<<no<<" "<<count<<endl;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Vehicle * pol;
		int kind,s,w;
		string n;
		cin>>kind;
		if(kind==1)
		{
			cin>>n>>w>>s;
			pol=new Car(n,w,s);
			pol->display();
		}
		else if(kind==2)
		{
			cin>>n>>w;
			pol=new Truck(n,w);
			pol->display();
		}
		else
		{
			cin>>n>>s;
			pol=new Bus(n,s);
			pol->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018152008:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;
class BaseAccount
{
	protected:
		string name,account;
		double balance;
	public:
		BaseAccount(string n,string a,double b); 
		void deposit(double money);
		virtual bool withdraw(double money);
		virtual void display();
		virtual void error();
};
void BaseAccount::error()
{
	cout<<"insufficient"<<endl;
}
BaseAccount::BaseAccount(string n,string a,double b)
{
	name=n;
	account=a;
	balance=b;
}
void BaseAccount::deposit(double money)
{
	balance+=money;
}
bool BaseAccount::withdraw(double money)
{
	if(balance>=money)
	{
		balance-=money;
		return true;
	}
	return false;
}
void BaseAccount::display()
{
	cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
}
class BasePlus:public BaseAccount
{
	protected:
		double limit;
		double limit_sum;
	public:
		BasePlus(string n,string a,double b);
		bool withdraw(double money);
		void display();
		void error();
};
void BasePlus::error()
{
	cout<<"insufficient"<<endl;
}
BasePlus::BasePlus(string n,string a,double b):BaseAccount(n,a,b),limit(5000),limit_sum(0)
{
	;
} 
bool BasePlus::withdraw(double money)
{
	if(balance+limit-limit_sum>=money)
	{
		balance-=money;
		if(balance<0)
		{
			limit_sum-=balance;
			limit+=balance;
			balance=0;
		}
		return true;
	}		
	return false;
}
void BasePlus::display()
{
	cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		BaseAccount *T;
		string n,p;
		double bal;
		cin>>n>>p>>bal;
		if(p[1]=='A')
			T=new BaseAccount(n,p,bal);
		else
			T=new BasePlus(n,p,bal);
		double x1,x2,x3,x4;
		cin>>x1>>x2>>x3>>x4;
		T->deposit(x1);
		if(!T->withdraw(x2))
		{
			T->error();
		}
		T->deposit(x3);
		if(!T->withdraw(x4))
		{
			T->error();
		}
		T->display();
	}
}
------------------------------------------------------
2018192014:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;
class Vehicle
{ 
protected:

string no;//编号

public:
Vehicle(string n):no(n){
}
virtual void display()=0;//应收费用
};
class Car:virtual public Vehicle{
protected:
	int guest,weight;
public:
	Car(string n,int g,int w):
		Vehicle(n),guest(g),weight(w){
		}
	virtual void display(){
		cout<<no<<" "<<guest*8+weight*2<<endl;
	}
};
class Truck:virtual public Vehicle{
protected:
	int weight;
public:
	Truck(string n,int w):
		Vehicle(n),weight(w){
		}
	virtual void display(){
		cout<<no<<" "<<weight*5<<endl;
	}
};
class Bus:virtual public Vehicle{
protected:
	int guest;
public:
	Bus(string n,int g):
		Vehicle(n),guest(g){
		}
	virtual void display(){
		cout<<no<<" "<<guest*3<<endl;
	}
};
int main ()
{
	Vehicle *pv;
	int t;
	cin>>t;
	while(t--)
	{
		string n;
		int g,w;
		int command;
		cin>>command;
		if(command==1)
		{
			cin>>n>>g>>w;
			pv=new Car(n,g,w);
			pv->display();
		}
		if(command==2)
		{
			cin>>n>>w;
			pv=new Truck(n,w);
			pv->display();
		}
		if(command==3)
		{
			cin>>n>>g;
			pv=new Bus(n,g);
			pv->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018192022:Problem1120:答案错误
#include <iostream>
#include <iomanip>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    virtual void Speak()=0;
};
class Tiger:public Animal
{
protected:
public:
    Tiger(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
protected:
public:
    Dog(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
protected:
public:
    Duck(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
protected:
public:
    Pig(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    Animal *p;
    while(t--)
    {
        string n;
        cin>>n;
        if(n=="Tiger")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Tiger(name,age);
            p->Speak();
        }
        else if(n=="Pig")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Pig(name,age);
            p->Speak();
        }
        else if(n=="Duck")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Duck(name,age);
            p->Speak();
        }
        else
        {
            string name;
            int age;
            cin>>name>>age;
            cout<<"There is no"<<name<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2017133026:Problem1120:正确
#include <iostream>

using namespace std;
class Animal{
protected:
    string name;
    int age,weight;
public:
    Animal(string n,int a){
        name=n;
        age=a;
    }
    virtual void speak(){

    };
};
class Tiger:public Animal{
public:
    Tiger(string n,int a):Animal(n,a){

    }
    void speak(){
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Pig:public Animal{
public:
    Pig(string n,int a):Animal(n,a){

    }
    void speak(){
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};

class Duck:public Animal{
public:
    Duck(string n,int a):Animal(n,a){

    }
    void speak(){
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Dog:public Animal{
public:
    Dog(string n,int a):Animal(n,a){

    }
    void speak(){
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string type,name;
    int age;
    Animal *a;
    while(t--){
        cin>>type>>name>>age;
        if(type=="Tiger"){
            Tiger t1(name,age);
            a=&t1;
            a->speak();
        }else if(type=="Pig"){
            Pig p(name,age);
            a=&p;
            a->speak();
        }else if(type=="Duck"){
            Duck d(name,age);
            a=&d;
            a->speak();
        }else if(type=="Dog"){
            Dog d1(name,age);
            a=&d1;
            a->speak();
        }else{
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192022:Problem1120:答案错误
#include <iostream>
#include <iomanip>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    virtual void Speak()=0;
};
class Tiger:public Animal
{
protected:
public:
    Tiger(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
protected:
public:
    Dog(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
protected:
public:
    Duck(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
protected:
public:
    Pig(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    Animal *p;
    while(t--)
    {
        string n;
        cin>>n;
        if(n=="Tiger")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Tiger(name,age);
            p->Speak();
        }
        else if(n=="Pig")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Pig(name,age);
            p->Speak();
        }
        else if(n=="Duck")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Duck(name,age);
            p->Speak();
        }
        else
        {
            string name;
            int age;
            cin>>name>>age;
            cout<<"There is no "<<n<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018151014:Problem1232:正确
#include <iostream>

using namespace std;

class Vehicle {
public:
	Vehicle(string n) : no(n) {
		
	}
	virtual void display() = 0;
protected:
	string no;
};

class Car : public Vehicle {
public:
	Car(string n, int s, float w) : Vehicle(n), seats(s), weight(w) {
		
	}
	
	void display() {
		cout << no << ' ' << 8*seats + 2*weight << endl;
	}
private:
	int seats;
	float weight;
};

class Truck : public Vehicle {
public:
	Truck(string n, float w) : Vehicle(n), weight(w) {
		
	}
	
	void display() {
		cout << no << ' ' << 5*weight << endl;
	}
private:
	float weight;
};

class Bus : public Vehicle {
public:
	Bus(string n, int s) : Vehicle(n), seats(s) {
		
	}
	
	void display() {
		cout << no << ' ' << 3*seats << endl;
	}
private:
	int seats;
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		int x;
		int seats;
		float weight;
		string no;
		Vehicle *ptr;
		
		cin >> x;
		if (x == 1) {
			cin >> no >> seats >> weight;
			ptr = new Car(no, seats, weight);
			ptr->display();
		}
		else if (x == 2) {
			cin >> no >> weight;
			ptr = new Truck(no, weight);
			ptr->display();
		}
		
		else if (x == 3) {
			cin >> no >> seats;
			ptr = new Bus(no, seats);
			ptr->display();
		}
		
		delete ptr;
	}
	
	return 0;
}
------------------------------------------------------
2018192038:Problem1232:正确
#include <iostream>

using namespace std;

class Vehicle

{
protected:

    string no;//编号

public:
    Vehicle(string nonono):no(nonono){}
    virtual void display()=0;//应收费用

};

class Car:public Vehicle
{
    int num;
    int weight;
public:
    Car(string nonono,int nn,int ww):Vehicle(nonono),num(nn),weight(ww){}
    void display()
    {
        cout<<no<<" "<<num*8+weight*2<<endl;
    }
};

class Truck:public Vehicle
{
    //int num;
    int weight;
public:
    Truck(string nonono,int ww):Vehicle(nonono),weight(ww){}
    void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
};

class Bus:public Vehicle
{
    int num;
    //int weight;
public:
    Bus(string nonono,int nn):Vehicle(nonono),num(nn){}
    void display()
    {
        cout<<no<<" "<<num*3<<endl;
    }
};

int main()
{
    string no;
    int num,weight,type;
    int t;
    cin>>t;
    Vehicle *pv=NULL;
    while(t--)
    {
        cin>>type;
        cin>>no;
        if(type==1)
        {
            cin>>num>>weight;
            Car cc(no,num,weight);
            pv=&cc;
            pv->display();
        }
        else if(type==2)
        {
            cin>>weight;
            Truck tt(no,weight);
            pv=&tt;
            pv->display();
        }
        else if(type==3)
        {
            cin>>num;
            Bus bb(no,num);
            pv=&bb;
            pv->display();
        }

    }
    return 0;
}

------------------------------------------------------
2018192022:Problem1120:答案错误
#include <iostream>
#include <iomanip>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    virtual void Speak()=0;
};
class Tiger:public Animal
{
protected:
public:
    Tiger(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
protected:
public:
    Dog(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
protected:
public:
    Duck(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
protected:
public:
    Pig(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    Animal *p;
    while(t--)
    {
        string n;
        cin>>n;
        if(n=="Tiger")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Tiger(name,age);
            p->Speak();
        }
        else if(n=="Pig")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Pig(name,age);
            p->Speak();
        }
        else if(n=="Duck")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Duck(name,age);
            p->Speak();
        }
        else
        {
            string name;
            int age;
            cin>>name>>age;
            cout<<"There is no "<<n<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018152044:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class animal
{
protected:
    string name;
    int age;
    int weight;
public:
    animal(string n,int a)
    {
        name=n;
        age=a;
    }
    ~animal()
    {
    }
    virtual void speak()=0;
};
class tiger:public animal
{
public:
    tiger(string n,int a):animal(n,a)
    {
    }
    void virtual speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class dog:public animal
{
public:
    dog(string n,int a):animal(n,a)
    {
    }
    ~dog()
    {
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class duck:public animal
{
public:
    duck(string n,int a):animal(n,a)
    {
    }
    ~duck()
    {
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class pig:public animal
{
public:
    pig(string n,int a):animal(n,a)
    {
    }
    ~pig()
    {
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int T,age;
    animal *s;
    string type,name;
    cin>>T;
    while(T--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            tiger t(name,age);
            s=&t;
            s->speak();
        }
        else if(type=="Pig")
        {
            pig t(name,age);
            s=&t;
            s->speak();
        }
        else if(type=="Duck")
        {
            duck t(name,age);
            s=&t;
            s->speak();
        }
        else if(type=="Dog")
        {
            dog t(name,age);
            s=&t;
            s->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
}
------------------------------------------------------
2018192022:Problem1120:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    virtual void Speak()=0;
};
class Tiger:public Animal
{
protected:
public:
    Tiger(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
protected:
public:
    Dog(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
protected:
public:
    Duck(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
protected:
public:
    Pig(string a,int b){name=a;age=b;}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    Animal *p;
    while(t--)
    {
        string n;
        cin>>n;
        if(n=="Tiger")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Tiger(name,age);
            p->Speak();
        }
        else if(n=="Pig")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Pig(name,age);
            p->Speak();
        }
        else if(n=="Duck")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Duck(name,age);
            p->Speak();
        }
        else if(n=="Dog")
        {
            string name;
            int age;
            cin>>name>>age;
            p=new Dog(name,age);
            p->Speak();
        }
        else
        {
            string name;
            int age;
            cin>>name>>age;
            cout<<"There is no "<<n<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018152106:Problem1232:正确
#include<iostream>
using namespace std;

class Vehicle
{
protected:
	string no;
public:
	Vehicle(string n):no(n){}
	virtual void display()=0;
};

class Car:public Vehicle
{
    int passage_num,weight;
public:
	Car(string n,int pass,int wei):Vehicle(n),passage_num(pass),weight(wei){}
	void display()
	{
		cout<<no<<" "<<passage_num*8+weight*2<<endl;
	}
};

class Turck:public Vehicle
{
    int weight;
public:
	Turck(string n,int wei):Vehicle(n),weight(wei){}
	void display()
	{
		cout<<no<<" "<<+weight*5<<endl;
	}
};
class Bus:public Vehicle
{
    int passage_num;
public:
	Bus(string n,int pass):Vehicle(n),passage_num(pass){}
	void display()
	{
		cout<<no<<" "<<passage_num*3<<endl;
	}
};

int main()
{
	int t;
	Vehicle *pv;
	cin>>t;
	while(t--)
	{
		int h,pass,weight;
		string n;
		cin>>h;
		if(h==1)
		{
			cin>>n>>pass>>weight;
			Car a(n,pass,weight);
			pv=&a;
			pv->display();
		}
		if(h==2)
		{
			cin>>n>>weight;
			Turck a(n,weight);
			pv=&a;
			pv->display();
		}
		if(h==3)
		{
			cin>>n>>pass;
			Bus a(n,pass);
			pv=&a;
			pv->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018151031:Problem1232:编译错误
#include <bits/stdc++.h>
using namespace std;
class Vehicle
{ 
protected:
	string no;//编号
public:
	virtual void display()=0;//应收费用
	Vehicle(string no_in):no(no_in){}
};
class Car:public Vehicle
{
	int carry;
	int weight;
public:
	Car(string no_in,int c,int w):Vehicle(no_in),carry(c),weight(w){}
	void display()
	{
		cout<<no<<' '<<carry*8+weight*2<<endl;
	}
};
class Truck:public Vehicle
{
	int weight;
public:
	Truck(string no_in,int w):Vehicle(no_in),weight(w){}
	void display()
	{
		cout<<no<<' '<<weight*5<<endl;
	}
};
class Bus:public Vehicle
{
	int carry;
public:
	Bus(string no_in,int c):Vehicle(no_in),carry(c){}
	void display()
	{
		cout<<no<<' '<<carry*3<<endl;
	}
};
int main() 
{
	Vehicle *pv;
	int t;
	cin>>t;
	while(t--)
	{
		int type,w,c;
		cin>>type;
		string  no;
		if(type==1)
		{
			
			cin>>no>>c>>w;
			Car c1(no,c,w);
			c1.display();
		}
		else if(type==2)
		{
	
			cin>>no>>w;
			Truck t(no,w);
			t.display();
		}
		else if(type==3)
		{
			
			cin>>no>>c;
			Bus b(no,c);
			b.display();
		}
	}
	return 0;
}
------------------------------------------------------
2018192044:Problem1120:编译错误
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak(){}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t,age;
    string name,type;
    cin>>t;
    Animal *p;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018152108:Problem1232:正确
#include<iostream>
using namespace std;

class Vehicle
{
protected:
	string no;
public:
	Vehicle(string nov)
	{
		no = nov;
	}
	virtual void display()=0;
};

class Car:public Vehicle
{
	int n,weight;
public:
	Car(string nov,int num,int w):Vehicle(nov),n(num),weight(w){}
	void display()
	{
		cout<<no<<" "<<n*8+weight*2<<endl;
	}
};

class Truck:public Vehicle
{
	int weight;
public:
	Truck(string nov,int w):Vehicle(nov),weight(w){}
	void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};

class Bus:public Vehicle
{
	int n;
public:
	Bus(string nov,int num):Vehicle(nov),n(num){}
	void display()
	{
		cout<<no<<" "<<n*3<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Vehicle *pv;
		int type;
		cin>>type;
		if(type==1)
		{
			string nov;
			int num,w;
			cin>>nov>>num>>w;
			Car c(nov,num,w);
			pv = &c;
			pv->display();
		}
		if(type==2)
		{
			string nov;
			int w;
			cin>>nov>>w;
			Truck T(nov,w);
			pv = &T;
			pv->display();
		}
		if(type==3)
		{
			string nov;
			int num;
			cin>>nov>>num;
			Bus b(nov,num);
			pv = &b;
			pv->display();
		}
	}
	return 0;
}


------------------------------------------------------
2018151031:Problem1232:正确
#include <bits/stdc++.h>
using namespace std;
class Vehicle
{ 
protected:
	string no;//编号
public:
	virtual void display()=0;//应收费用
	Vehicle(string no_in):no(no_in){}
};
class Car:public Vehicle
{
	int carry;
	int weight;
public:
	Car(string no_in,int c,int w):Vehicle(no_in),carry(c),weight(w){}
	void display()
	{
		cout<<no<<' '<<carry*8+weight*2<<endl;
	}
};
class Truck:public Vehicle
{
	int weight;
public:
	Truck(string no_in,int w):Vehicle(no_in),weight(w){}
	void display()
	{
		cout<<no<<' '<<weight*5<<endl;
	}
};
class Bus:public Vehicle
{
	int carry;
public:
	Bus(string no_in,int c):Vehicle(no_in),carry(c){}
	void display()
	{
		cout<<no<<' '<<carry*3<<endl;
	}
};
int main() 
{
	Vehicle *pv;
	int t;
	cin>>t;
	while(t--)
	{
		int type,w,c;
		cin>>type;
		string  no;
		if(type==1)
		{
			
			cin>>no>>c>>w;
			Car c1(no,c,w);
			pv=&c1;
			pv->display();
		}
		else if(type==2)
		{
	
			cin>>no>>w;
			Truck t(no,w);
			pv=&t;
			pv->display();
		}
		else if(type==3)
		{
			
			cin>>no>>c;
			Bus b(no,c);
			pv=&b;
			pv->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018192025:Problem1232:正确
#include<iostream>
#include<cstring>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string name):no(name) {};
    virtual void display()=0;//应收费用
};

class Car:public Vehicle
{
protected:
    int weight;
    int passenger;
public:
    Car(string name, int wei, int p):Vehicle(name),weight(wei),passenger(p) {};
    virtual void display()
    {
        int i=passenger*2+weight*8;
        cout<<no<<' '<<i<<endl;
    }
};

class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string name, int wei):Vehicle(name),weight(wei) {};
    virtual void display()
    {
        int i=weight*5;
        cout<<no<<' '<<i<<endl;
    }
};

class Bus:public Vehicle
{
protected:
    int passenger;
public:
    Bus(string name, int p):Vehicle(name),passenger(p) {};
    virtual void display()
    {
        int i=passenger*3;
        cout<<no<<' '<<i<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int m,wei,p;
        string name;
        cin>>m;
        if(m==1)
        {
            cin>>name>>wei>>p;
            Car ss(name,wei,p);
            ss.display();
        }
        else if(m==2)
        {
            cin>>name>>wei;
            Truck ss(name,wei);
            ss.display();
        }
        else if(m==3)
        {
            cin>>name>>p;
            Bus ss(name,p);
            ss.display();
        }
    }
}

------------------------------------------------------
2018152035:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string n):no(n) {}
    virtual void display()=0;//应收费用
};
class car:public Vehicle
{
    int people;
    int weight;
public:
    car(string n,int p,int w):Vehicle(n),people(p),weight(w) {}
    void display()
    {
        cout<<no<<' '<<people*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w) {}
    void display()
    {
        cout<<no<<' '<<weight*5<<endl;
    }
};
class bus:public Vehicle
{
    int people;
public:
    bus(string n,int p):Vehicle(n),people(p) {}
    void display()
    {
        cout<<no<<' '<<people*3<<endl;
    }
};
int main()
{
    int T,pe,w,t;
    string n;
    cin>>T;
    while(T--)
    {
        Vehicle *p;
        cin>>t>>n;
        if(t==1)
        {
            cin>>pe>>w;
            car c(n,pe,w);
            p=&c;
            p->display();
        }
        else if(t==2)
        {
            cin>>pe;
            Truck t(n,pe);
            p=&t;
            p->display();
        }
        else
        {
            cin>>w;
            bus b(n,w);
            p=&b;
            p->display();
        }
    }
}

------------------------------------------------------
2017182103:Problem1232:正确
#include <iostream>

using namespace std;

class Vehicle

{
protected:

    string no;//编号

public:
    Vehicle(string n=" "):no(n) {}
    virtual void display()=0;//应收费用
};

class Car:public Vehicle
{
    int num;
    int weight;
public:
    Car(string n=" ",int num_=0,int w=0):Vehicle(n),num(num_),weight(w) {}
    virtual void display()
    {
        int fee = num * 8 + weight *2;
        cout<<no<<" "<<fee<<endl;
    }
};

class Truck:public Vehicle
{
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w) {}
    virtual void display()
    {
        int fee = weight * 5;
        cout<<no<<" "<<fee<<endl;
    }
};

class Bus:public Vehicle
{
    int num;
public:
    Bus(string n,int num_):Vehicle(n),num(num_) {}
    virtual void display()
    {
        int fee = num * 3;
        cout<<no<<" "<<fee<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int type;
        cin>>type;

        Vehicle *pv;
        string no;
        cin>>no;

        if(type==1)
        {
            int num,w;
            cin>>num>>w;
            Car c(no,num,w);
            pv = &c;
            pv->display();
        }
        else if(type==2)
        {
            int w;
            cin>>w;
            Truck t(no,w);
            pv = &t;
            pv->display();
        }
        else if(type==3)
        {
            int num;
            cin>>num;
            Bus b(no,num);
            pv = &b;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018152062:Problem1232:运行错误
#include <iostream>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string _no):no(_no){}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
protected:
    int weight;
    int load_num;
public:
    Car(string _no,int _load_num,int _weight):Vehicle(_no),weight(_weight),load_num(_load_num){}
    void display()
    {
        cout<<no<<" ";
        cout<<weight*2+load_num*8<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string _no,int _weight):Vehicle(_no),weight(_weight){}
    void display()
    {
        cout<<no<<" ";
        cout<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int load_num;
public:
    Bus(string _no,int _load_num):Vehicle(_no),load_num(_load_num){}
    void display()
    {
        cout<<no<<" ";
        cout<<load_num*3<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehicle *pv;
        string no;
        int weight=0,load_num=0;
        int cnt;
        cin>>cnt;
        if(cnt==1)
        {
            cin>>no>>load_num>>weight;
            Car car(no,load_num,weight);
            pv=&car;
            pv->display();
        }
        if(cnt==2)
        {
            cin>>no>>weight;
            Truck truck(no,weight);
            pv=&truck;
            pv->display();
        }
        if(cnt==3)
        {
            cin>>no>>load_num;
            Bus bus(no,load_num);
            pv=&bus;
            pv->display();
        }
        delete []pv;
    }
    return 0;
}

------------------------------------------------------
2018152062:Problem1232:运行错误
#include <iostream>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string _no):no(_no){}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
protected:
    int weight;
    int load_num;
public:
    Car(string _no,int _load_num,int _weight):Vehicle(_no),weight(_weight),load_num(_load_num){}
    void display()
    {
        cout<<no<<" ";
        cout<<weight*2+load_num*8<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string _no,int _weight):Vehicle(_no),weight(_weight){}
    void display()
    {
        cout<<no<<" ";
        cout<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int load_num;
public:
    Bus(string _no,int _load_num):Vehicle(_no),load_num(_load_num){}
    void display()
    {
        cout<<no<<" ";
        cout<<load_num*3<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehicle *pv;
        string no;
        int weight=0,load_num=0;
        int cnt;
        cin>>cnt;
        if(cnt==1)
        {
            cin>>no>>load_num>>weight;
            Car car(no,load_num,weight);
            pv=&car;
            pv->display();
        }
        if(cnt==2)
        {
            cin>>no>>weight;
            Truck truck(no,weight);
            pv=&truck;
            pv->display();
        }
        if(cnt==3)
        {
            cin>>no>>load_num;
            Bus bus(no,load_num);
            pv=&bus;
            pv->display();
        }
        delete pv;
    }
    return 0;
}

------------------------------------------------------
2018192044:Problem1120:运行错误
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){}
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak(){}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t,age;
    string name,type;
    cin>>t;
    Animal *p;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    delete []p;
    return 0;
}

------------------------------------------------------
2018192046:Problem1232:正确
#include<iostream>
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(string _no):no(_no){}
    virtual void display()=0;
};
class Car:public Vehicle
{
    int Person;
    int hat;
public:
    Car(string _no,int _P,int _hat):Vehicle(_no),Person(_P),hat(_hat){}
    void display()
    {
        cout<<no<<" "<<Person*8+hat*2<<endl;
    }
};
class Truck:public Vehicle
{
    int hat;
public:
    Truck(string _no,int _hat):Vehicle(_no),hat(_hat){}
    void display()
    {
        cout<<no<<" "<<5*hat<<endl;
    }
};
class Bus:public Vehicle
{
    int Person;
public:
    Bus(string _no,int _P):Vehicle(_no),Person(_P){}
    void display()
    {
        cout<<no<<" "<<Person*3<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehicle *pv;
        int type;
        string name;
        int person,hat;
        cin>>type;
        cin>>name;
        if(type==1)
        {
            cin>>person>>hat;
            Car P(name,person,hat);
            pv=&P;
            pv->display();
        }
        else if(type==2)
        {
            cin>>hat;
            Truck P(name,hat);
            pv=&P;
            pv->display();
        }
        else if(type==3)
        {
            cin>>person;
            Bus P(name,person);
            pv=&P;
            pv->display();
        }
    }
}

------------------------------------------------------
2018152008:Problem1235:答案错误
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
	public:
		virtual double getArea()=0;
};
class Rect:public Geometry
{
	protected:
		float c,k;
	public:
		Rect(float c,float k);
		double getArea();	
};
Rect::Rect(float c1,float k1)
{
	c=c1;
	k=k1;
}
double Rect::getArea()
{
	return c*k;
}
class Circle:public Geometry
{
	protected:
		float radius;
	public:
		Circle(float r);
		double getArea();		
};
Circle::Circle(float r)
{
	radius=r;
}
double Circle::getArea()
{
	return 3.14*radius*radius;
}
class TotalArea
{
	public:
		static void computerTotalArea(Geometry** t,int n)
		{
			int i;
			double max=-1;
			for(i=0;i<n;i++)
			{
				if(t[i]->getArea()>max)
					max=t[i]->getArea();
			}
			cout<<"最大面积="<<max<<endl;
		}
};
int main()
{
	int t,i;
	cin>>t;
	Geometry **p=new Geometry*[t];
	for(i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			float c1,k1;
			cin>>c1>>k1;
			p[i]=new Rect(c1,k1);
		}
		else
		{
			float r;
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea::computerTotalArea(p,t);
	return 0;
}

------------------------------------------------------
2018151020:Problem1232:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string _no):no(_no){}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
protected:
    int weight,number;
public:
    Car(string _no,int we,int n):Vehicle(_no),weight(we),number(n)
    {
    }
    void display()
    {
        cout<<no<<" "<<number*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string _no,int we):Vehicle(_no),weight(we){}
    void display()
    {
         cout<<no<<" "<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int number;
public:
    Bus(string _no,int n):Vehicle(_no),number(n){}
    void display()
    {
         cout<<no<<" "<<number*3<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    int order;
    while(t--)
    {
        string _no;
        cin>>order;
        if(order==1)
        {
            int we,n;
            cin>>_no>>n>>we;
            Car C(_no,we,n);
            C.display();
        }
        else if(order==2)
        {
            int we;
            cin>>_no>>we;
            Truck T(_no,we);
            T.display();
        }
        else if(order==3)
        {
            int n;
            cin>>_no>>n;
            Bus B(_no,n);
            B.display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192040:Problem1232:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Vehicle{ 
protected:

	string no;//编号

public:
	Vehicle(){
	};
	Vehicle(string n):no(n){
	};
	virtual void display()=0;//应收费用

};

class Car:protected Vehicle{
	int num;
	int height;
public:
	Car(string n,int N,int h):Vehicle(n),num(N),height(h){
	};
	Car(){
	};
	void display(){
		cout<<no<<" "<<num*8+height*2<<endl;
	}
};

class Truck:protected Vehicle{
	int height;
public:
	Truck(string n,int h):Vehicle(n),height(h){
	};
	Truck(){
	};
	void display(){
		cout<<no<<" "<<height*5<<endl;
	}
};

class Bus:protected Vehicle{
	int num;
public:
	Bus(string n,int N):Vehicle(n),num(N){
	};
	Bus(){
	};
	void display(){
		cout<<no<<" "<<num*3<<endl;
	}
};

int main(){
	int n;
	cin>>n;
	while(n--){
		int type;
		cin>>type;
		string no;
		cin>>no;
		if(type == 1){
			int num,height;
			cin>>num>>height;
			Car car(no,num,height);
			car.display();
		}
		if(type == 2){
			int height;
			cin>>height;
			Truck truck(no,height);
			truck.display();
		}
		if(type == 3){
			int num;
			cin>>num;
			Bus bus(no,num);
			bus.display();
		}
	}
}
------------------------------------------------------
2018192043:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string nos):no(nos) {}
    virtual void display()=0;//应收费用
    ~Vehicle() {}
};
class Car:public Vehicle
{
    int people,weight;
public:
    Car(string no,int peoples,int weights):Vehicle(no),people(peoples),weight(weights) {}
    void display()
    {
        cout<<no<<" "<<people*8+weight*2<<endl;
    }
    ~Car() {}
};
class Truck:public Vehicle
{
    int weight;
public:
    Truck(string no,int weights):Vehicle(no),weight(weights) {}
    void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
    ~Truck() {}
};
class Bus:public Vehicle
{
    int people;
public:
    Bus(string no,int peoples):Vehicle(no),people(peoples) {}
    void display()
    {
        cout<<no<<" "<<people*3<<endl;
    }
    ~Bus() {}
};
int main()
{
    Vehicle *pv;
    int t,people,weight;
    string no;
    char type;
    cin>>t;
    while(t--)
    {
        cin>>type>>no;
        if(type=='1')
        {
            cin>>people>>weight;
            Car a(no,people,weight);
            pv=&a;
            pv->display();
        }
        else if(type=='2')
        {
            cin>>weight;
            Truck a(no,weight);
            pv=&a;
            pv->display();
        }
        else if(type=='3')
        {
            cin>>people;
            Bus a(no,people);
            pv=&a;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192008:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用
};

class Car:public Vehicle
{
    int num,weight;
public:
    Car(string n,int nu,int w):Vehicle(n),num(nu),weight(w){}
    virtual void display()
    {
        int m;
        m=num*8+weight*2;
        cout<<no<<" "<<m<<endl;
    }
};

class Truck:public Vehicle
{
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w){}
    virtual void display()
    {
        int m;
        m=weight*5;
        cout<<no<<" "<<m<<endl;
    }
};
class Bus:public Vehicle
{
    int num;
public:
    Bus(string n,int nu):Vehicle(n),num(nu){}
    virtual void display()
    {
        int m;
        m=num*3;
        cout<<no<<" "<<m<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehicle *pv;
        int k;
        string no;
        cin>>k;
        if(k==1)
        {
           int  nu,w;
           cin>>no>>nu>>w;
           Car c1(no,nu,w);
           pv=&c1;
           pv->display();
        }
        else if(k==2)
        {
            int w;
            cin>>no>>w;
            Truck t1(no,w);
            pv=&t1;
            pv->display();
        }
        else if(k==3)
        {
            int nu;
            cin>>no>>nu;
            Bus b1(no,nu);
            pv=&b1;
            pv->display();
        }
    }
}

------------------------------------------------------
2018152062:Problem1232:正确
#include <iostream>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string _no):no(_no){}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
protected:
    int weight;
    int load_num;
public:
    Car(string _no,int _load_num,int _weight):Vehicle(_no),weight(_weight),load_num(_load_num){}
    void display()
    {
        cout<<no<<" ";
        cout<<weight*2+load_num*8<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string _no,int _weight):Vehicle(_no),weight(_weight){}
    void display()
    {
        cout<<no<<" ";
        cout<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int load_num;
public:
    Bus(string _no,int _load_num):Vehicle(_no),load_num(_load_num){}
    void display()
    {
        cout<<no<<" ";
        cout<<load_num*3<<endl;
    }
};
int main()
{
    Vehicle *pv;
    int t;
    cin>>t;
    while(t--)
    {

        string no;
        int weight=0,load_num=0;
        int cnt;
        cin>>cnt;
        if(cnt==1)
        {
            cin>>no>>load_num>>weight;
            Car car(no,load_num,weight);
            pv=&car;
            pv->display();
        }
        if(cnt==2)
        {
            cin>>no>>weight;
            Truck truck(no,weight);
            pv=&truck;
            pv->display();
        }
        if(cnt==3)
        {
            cin>>no>>load_num;
            Bus bus(no,load_num);
            pv=&bus;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192006:Problem1232:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
   
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
   
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
 
 
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
 
/*Add Data Structures Here*/
class Veichle{
	public:
		virtual void display()=0;
		void setType(int i);
		
	protected:	
		int type;
		string name;
		int num;
		int weight;

};
class Car:public Veichle{
	public:
		void display();
		void readInfo();
	protected:

};
class Truck:public Veichle{
	public:
		void display();
		void readInfo();
	protected:

};
class Bus:public Veichle{
	public:
		void display();
		void readInfo();
	protected:


};
/*Add Functions Here*/
void
Veichle::display(){
	cout << this->name << " ";
	if(this->type==1){
		cout << this->num*8+this->weight*2 << endl;
	}else if(this->type==2){
		cout << this->weight*5 << endl;
	}else{
		cout << this->num*3 << endl;
	}
}
void
Car::display(){
	cout << this->name << " ";
	if(this->type==1){
		cout << this->num*8+this->weight*2 << endl;
	}else if(this->type==2){
		cout << this->weight*5 << endl;
	}else{
		cout << this->num*3 << endl;
	}
}
void
Bus::display(){
	cout << this->name << " ";
	if(this->type==1){
		cout << this->num*8+this->weight*2 << endl;
	}else if(this->type==2){
		cout << this->weight*5 << endl;
	}else{
		cout << this->num*3 << endl;
	}
}
void
Truck::display(){
	cout << this->name << " ";
	if(this->type==1){
		cout << this->num*8+this->weight*2 << endl;
	}else if(this->type=2){
		cout << this->weight*5 << endl;
	}else{
		cout << this->num*3 << endl;
	}
}
void 
Car::readInfo(){
	cin >> this->name >> this->num >> this->weight;
}
void 
Truck::readInfo(){
	cin >> this->name >> this->weight;
}
void 
Bus::readInfo(){
	cin >> this->name >> this->num ;
}
void
Veichle::setType(int n){
	this->type=n;
}
/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
	Veichle *ptr;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
    	int n;
    	cin >> n;
    	if(n==1){
    		Car A;
    		ptr=&A;
    		ptr->setType(n);
    		A.readInfo(); 
    		ptr->display();
		}else if(n==2){
			Truck B;
			ptr=&B;
			ptr->setType(n);
			B.readInfo();
			ptr->display();
		}else{
			Bus C;
			ptr=&C;
			ptr->setType(n);
			C.readInfo();
			ptr->display();
		}
    }
#endif
    /*Final process here.*/
 
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2018192009:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(){}
    Vehicle(string n):no(n){}
    virtual void display()=0;
};
class car:public Vehicle
{
protected:
    int num;
    int weight;
public:
    car(string n,int nu,int wei):num(nu),weight(wei),Vehicle(n){}
    virtual void display()
    {
        int cost=num*8+weight*2;
        cout<<no<<" "<<cost<<endl;
    }
};
class truck:public Vehicle
{
protected:
    int weight;
public:
    truck(string n,int wei):weight(wei),Vehicle(n){}
    virtual void display()
    {
        int cost=weight*5;
        cout<<no<<" "<<cost<<endl;
    }
};
class bus:public Vehicle
{
protected:
    int num;
public:
    bus(string n,int nu):num(nu),Vehicle(n){}
    virtual void display()
    {
        int cost=num*3;
        cout<<no<<" "<<cost<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    int type;
    string no;
    int weight,num;
    Vehicle *p;
    while(t--)
    {
        cin>>type;
        cin>>no;
        if(type==1)
        {
            cin>>num>>weight;
            car a(no,num,weight);
            p=&a;
            p->display();
        }
        if(type==2)
        {
            cin>>weight;
            truck a(no,weight);
            p=&a;
            p->display();
        }
        if(type==3)
        {
            cin>>num;
            bus a(no,num);
            p=&a;
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018152008:Problem1235:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
	public:
		virtual double getArea()=0;
};
class Rect:public Geometry
{
	protected:
		float c,k;
	public:
		Rect(float c,float k);
		double getArea();	
};
Rect::Rect(float c1,float k1)
{
	c=c1;
	k=k1;
}
double Rect::getArea()
{
	return c*k;
}
class Circle:public Geometry
{
	protected:
		float radius;
	public:
		Circle(float r);
		double getArea();		
};
Circle::Circle(float r)
{
	radius=r;
}
double Circle::getArea()
{
	return 3.14*radius*radius;
}
class TotalArea
{
	public:
		static void computerTotalArea(Geometry** t,int n)
		{
			int i;
			double max=-1;
			for(i=0;i<n;i++)
			{
				if(t[i]->getArea()>max)
					max=t[i]->getArea();
			}
			cout<<fixed<<setprecision(2)<<"最大面积="<<max<<endl;
		}
};
int main()
{
	int t,i;
	cin>>t;
	Geometry **p=new Geometry*[t];
	for(i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			float c1,k1;
			cin>>c1>>k1;
			p[i]=new Rect(c1,k1);
		}
		else
		{
			float r;
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea::computerTotalArea(p,t);
	return 0;
}

------------------------------------------------------
2018192044:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){}
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak(){}
    ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t,age;
    string name,type;
    cin>>t;
    Animal *p;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018152102:Problem1232:正确
#include <iostream>

using namespace std;

class Vehicle {
protected:
    string no;//编号
public:
    virtual void display()=0;//应收费用
};
class Car: public Vehicle {
protected:
    int zaikeshu;
    int weight;
public:
    void display() {
        cout<<no<<" "<<zaikeshu*8 + weight*2<<endl;
    }
    void set(string num,int zai,int wei) {
        no = num;
        zaikeshu = zai;
        weight = wei;
    }
};
class Truck:public Vehicle {
protected:
    int weight;
public:
    void display() {
        cout<<no<<" "<<weight * 5<<endl;
    }
    void set(string num,int wei) {
        no = num;
        weight = wei;
    }
};
class Bus :public Vehicle {
protected:
    int zhaikeshu;
public:
    void display() {
        cout<<no<<" "<<zhaikeshu * 3<<endl;
    }
    void set(string num,int zai) {
        no = num;
        zhaikeshu = zai;
    }
};
int main()
{
    Vehicle *pv;
    int t;
    string no;
    int zhaikeshu;
    int weight;

    Car car;
    Truck truck;
    Bus bus;
    cin>>t;
    while(t--) {
        int num;
        cin>>num;
        if(num == 1) {
            cin>>no>>zhaikeshu>>weight;
            car.set(no,zhaikeshu,weight);
            pv = &car;
        }else if(num == 2) {
            cin>>no>>weight;
            truck.set(no,weight);
            pv = &truck;
        }else {
            cin>>no>>zhaikeshu;
            bus.set(no,zhaikeshu);
            pv = &bus;
        }
        pv->display();
    }


    return 0;
}

------------------------------------------------------
2018152114:Problem1232:正确
#include<iostream>
using namespace std;
class Vehicle

{ 
protected:

	string no;//编号

public:
 	Vehicle(string n5):no(n5)
 	{
	 }
	virtual void display()=0;//应收费用

};
class Car:public Vehicle
{
protected:
	int _people,_weight;
public:
	Car(string n1,int p,int w):Vehicle(n1),_people(p),_weight(w)
	{
	}
	virtual void display()
	{
		cout<<_people*8+_weight*2<<endl;
	}
	
};
class Truck:public Vehicle
{
protected:
	int weight_;
public:
 	Truck(string n2,int w2):Vehicle(n2),weight_(w2)
	 {
	}
	virtual void display()
	{
		cout<<weight_*5<<endl;
	}	
};
class Bus:public Vehicle
{
protected:
	int people_;
public:
	Bus(string n3,int p2):Vehicle(n3),people_(p2)
	{
	}
	virtual void display()
	{
		cout<<people_*3<<endl;
	}	
};
int main()
{
	int t;
	cin>>t;
	int type;
	string _no;
	int people;
	int weight;
	
	while(t--)
	{
		Vehicle* s;
		cin>>type>>_no;
		cout<<_no<<" ";
		if(type==1)
		{
			cin>>people>>weight;
			Car c(_no,people,weight);
			s=&c;
			s->display();
		}
		if(type==2)
		{
			cin>>weight;
			Truck tr(_no,weight);
			s=&tr;
			s->display();
		}
		if(type==3)
		{
			cin>>people;
			Bus b(_no,people);
			s=&b;
			s->display();
		}
	}
		return 0;
}
------------------------------------------------------
2018152010:Problem1232:正确
#include<iostream>

using namespace std;

class Vehicle
{
protected:
    string no;
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;
};

class Car:public Vehicle
{
    int cus,weight;
public:
    Car(string n,int wei,int c):cus(c),weight(wei),Vehicle(n){}
    void display()
    {
        cout<<no<<' '<<cus*8+weight*2<<endl;
    }
};

class Truck:public Vehicle
{
    int weight;
public:
    Truck(string n,int wei):Vehicle(n),weight(wei){}
    void display()
    {
        cout<<no<<' '<<weight*5<<endl;
    }
};

class Bus:public Vehicle
{
    int cus;
public:
    Bus(string n,int c):Vehicle(n),cus(c){}
    void display()
    {
        cout<<no<<' '<<cus*3<<endl;
    }
};



int main()
{

    int t,type,cus,wei;
    string no;
    Vehicle *p;
    cin>>t;
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>no>>cus>>wei;
            Car car(no,wei,cus);
            p=&car;
            p->display();
        }
        else if(type==2)
        {
            cin>>no>>wei;
            Truck truck(no,wei);
            p=&truck;
            p->display();
        }
        else
        {
            cin>>no>>cus;
            Bus bus(no,cus);
            p=&bus;
            p->display();
        }

    }

}

------------------------------------------------------
2018041051:Problem1232:正确
#include<iostream>
#include<string>

using namespace std;

class Vehicle

{
protected:

    string num;//编号

public:
    Vehicle(){}
    Vehicle(string num1):num(num1){}
    virtual void display()=0;//应收费用

};

class Car:public Vehicle{
protected:
    int passenge,weight;
public:
    Car(){}
    Car(string num1,int passenge1,int weight1):Vehicle(num1),passenge(passenge1),weight(weight1){}
    void display()
    {
        int fee;
        fee=passenge*8+weight*2;
        cout<<num<<" "<<fee<<endl;
    }
};

class Truck:public Vehicle{
protected:
    int weight;
public:
    Truck(){}
    Truck(string num1,int weight1):Vehicle(num1),weight(weight1){}
    void display()
    {
        int fee;
        fee=weight*5;
        cout<<num<<" "<<fee<<endl;
    }
};

class Bus:public Vehicle{
protected:
    int passenge;
public:
    Bus(){}
    Bus(string num1,int passenge1):Vehicle(num1),passenge(passenge1){}
    void display()
    {
        int fee;
        fee=passenge*3;
        cout<<num<<" "<<fee<<endl;
    }
};

int main()
{
    Vehicle *pv;

    int t;
    cin>>t;
    while(t--)
    {
        int n,passenge,weight;
        string num;
        cin>>n;
        if(n==1)
        {
            cin>>num>>passenge>>weight;
            pv=new Car(num,passenge,weight);
            pv->display();
        }
        else if(n==2)
        {
            cin>>num>>weight;
            pv=new Truck(num,weight);
            pv->display();
        }
        else
        {
            cin>>num>>passenge;
            pv=new Bus(num,passenge);
            pv->display();
        }
    }

    return 0;
}

------------------------------------------------------
2018182052:Problem1120:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Animal
{
protected:
    int wei;
    int age;
    string name;
public:
    Animal() {}
    Animal(const string& n,int a):name(n),wei(60),age(a) {}
    virtual void speak()const=0;
};
class Tiger:public Animal
{
public:
    Tiger(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
  //  freopen(ADDRESS);
    int T(0);
    cin>>T;
    string cmd;
    string name;
    int age;
    Animal* p;
    while(T--)
    {
        cin>>cmd>>name>>age;
        if(cmd=="Tiger")
        {
            Tiger te(name,age);
            p=&te;
            p->speak();
        }
        else if(cmd=="Pig")
        {
            Pig te(name,age);
            p=&te;
            p->speak();
        }
        else if(cmd=="Duck")
        {
            Duck te(name,age);
            p=&te;
            p->speak();
        }
        else if(cmd=="Dog")
        {
            Dog te(name,age);
            p=&te;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<cmd<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018192014:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;
class Animal{
protected:
	string name;
	int age;
public:
	Animal(string n,int a):
		name(n),age(a){
		}
	virtual void speak()=0;
};
class Tiger:virtual public Animal{
protected:
public:
	Tiger(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Pig:virtual public Animal{
protected:
public:
	Pig(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};
class Duck:virtual public Animal{
protected:
public:
	Duck(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
class Dog:virtual public Animal{
protected:
public:
	Dog(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};
int main ()
{
	Animal *an;
	int t;
	cin>>t;
	while(t--)
	{
		string n;
		int a;
		string command;
		cin>>command;
		if(command=="Tiger")
		{
			cin>>n>>a;
			an=new Tiger(n,a);
			an->speak();
		}
		else if(command=="Pig")
		{
			cin>>n>>a;
			an=new Pig(n,a);
			an->speak();
		}
		else if(command=="Duck")
		{
			cin>>n>>a;
			an=new Duck(n,a);
			an->speak();
		}
		else if(command=="Dog")
		{
			cin>>n>>a;
			an=new Dog(n,a);
			an->speak();
		}
		else
		{
			cin>>n>>a;
			cout<<"There is no "<<command<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018152100:Problem1232:正确
#include <iostream>
#include <string>
using namespace std;

class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string noo):no(noo){}
    virtual void display()=0;
};

class Car:virtual public Vehicle
{
    int people,weight;
public:
    Car(string noo,int p,int w):Vehicle(noo),people(p),weight(w){}
    void display(){cout << no << " " << people*8+weight*2 << endl;}
};

class Truck:virtual public Vehicle
{
    int weight;
public:
    Truck(string noo,int w):Vehicle(noo),weight(w){}
    void display(){cout << no << " " << weight*5 << endl;}
};

class Bus:virtual public Vehicle
{
    int people;
public:
    Bus(string noo,int p):Vehicle(noo),people(p){}
    void display(){cout << no << " " << people*3 << endl;}
};
int main()
{
    int t,type;
    string no;
    int p,w;
    cin >> t;
    Vehicle *pv;
    while (t--)
    {
        cin >> type >> no;
        if (type==1)
        {
            cin >> p >> w;
            Car c(no,p,w);
            pv=&c;
            pv->display();
        }
        else if (type==2)
        {
            cin >> w;
            Truck t(no,w);
            pv=&t;
            pv->display();
        }
        else if (type==3)
        {
            cin >> p;
            Bus b(no,p);
            pv=&b;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017047011:Problem1232:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(){}
	virtual void display()=0;
};
//------------------------
class car:public Vehicle
{
protected:
	int num;
	int weigh;
public:
	car(string no1,int num1,int weigh1);
	void display();
};

car::car(string no1,int num1,int weigh1){
	no=no1;num=num1;weigh=weigh1;
}

void car::display(){
	cout<<no<<" "<<num*8+weigh*2<<endl; 
}
//------------------------
class truck:public Vehicle
{
protected:
	int weigh;
public:
	truck(string no1,int w);
	void display();
};

truck::truck(string no1,int w){
	no=no1;weigh=w;
}

void truck::display(){
	cout<<no<<" "<<weigh*5<<endl; 
}
//------------------------
class bus:public Vehicle
{
protected:
	int num; 
public:
	bus(string no1,int n);
	void display();
};

bus::bus(string no1,int n){
	no=no1;num=n;
}

void bus::display(){
	cout<<no<<" "<<num*3<<endl;
}
//------------------------

int main()
{
	int t;
	int kind,num,weigh;
	string no;
	Vehicle *pv;
	
	cin>>t;
	while(t--)
	{
		cin>>kind;
		
		if(kind==1){
			cin>>no>>num>>weigh;
			car car1(no,num,weigh);
			car1.display();
			
		}
		
		else if(kind==2){
			cin>>no>>weigh;
			truck truck1(no,weigh);
			truck1.display();
		}
		
		else if(kind==3){
			cin>>no>>num;
			bus bus1(no,num);
			bus1.display();
		}
		
	}	
}
------------------------------------------------------
2018151014:Problem1120:正确
#include <iostream>
#include <string>

using namespace std;

class Animal {
public:
	Animal(string n, int a) : name(n), age(a) {
		
	}
	
	virtual void speak() = 0;
	
protected:
	string name;
	int age;
};

class Tiger : public Animal {
public:
	Tiger(string n, int a) : Animal(n, a) {
		
	}
	
	void speak() {
		cout << "Hello,I am " << name << ",AOOO.\n";
	}
};

class Pig : public Animal {
public:
	Pig(string n, int a) : Animal(n, a) {
		
	}
	
	void speak() {
		cout << "Hello,I am " << name << ",HENGHENG.\n";
	}
};

class Duck : public Animal {
public:
	Duck(string n, int a) : Animal(n, a) {
		
	}
	
	void speak() {
		cout << "Hello,I am " << name << ",GAGA.\n";
	}
};

class Dog : public Animal {
public:
	Dog(string n, int a) : Animal(n, a) {
		
	}
	
	void speak() {
		cout << "Hello,I am " << name << ",WangWang.\n";
	}
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		Animal *ptr;
		string type;
		string name;
		int age;
		
		cin >> type >> name >> age;
		if (type == "Tiger") {
			ptr = new Tiger(name, age);
			ptr->speak();
		}
		else if (type == "Pig") {
			ptr = new Pig(name, age);
			ptr->speak();
		}
		else if (type == "Dog") {
			ptr = new Dog(name, age);
			ptr->speak();
		}
		else if (type == "Duck") {
			ptr = new Duck(name, age);
			ptr->speak();
		}
		else {
			cout << "There is no " << type << " in our Zoo.\n";
			continue;
		}
		delete ptr;
	}
	
	return 0;
}
------------------------------------------------------
2018192038:Problem1120:正确
#include <iostream>

using namespace std;

class Animal
{
public:
    virtual void Speak()=0;
};

class Tiger:public Animal
{
    string name;
    int age;
public:
    Tiger(string nn,int aa):name(nn),age(aa){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
    string name;
    int age;
public:
    Dog(string nn,int aa):name(nn),age(aa){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
    string name;
    int age;
public:
    Duck(string nn,int aa):name(nn),age(aa){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
    string name;
    int age;
public:
    Pig(string nn,int aa):name(nn),age(aa){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};


int main()
{
    string type,name;
    int age;
    int t;
    cin>>t;
    Animal *aa=NULL;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger tig(name,age);
            aa=&tig;
            aa->Speak();
        }
        else if(type=="Dog")
        {
            Dog dd(name,age);
            aa=&dd;
            aa->Speak();
        }
        else if(type=="Duck")
        {
            Duck duc(name,age);
            aa=&duc;
            aa->Speak();
        }
        else if(type=="Pig")
        {
            Pig pp(name,age);
            aa=&pp;
            aa->Speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192025:Problem1232:正确
#include<iostream>
#include<cstring>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string name):no(name) {};
    virtual void display()=0;//应收费用
};

class Car:public Vehicle
{
protected:
    int weight;
    int passenger;
public:
    Car(string name, int wei, int p):Vehicle(name),weight(wei),passenger(p) {};
    virtual void display()
    {
        int i=passenger*2+weight*8;
        cout<<no<<' '<<i<<endl;
    }
};

class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string name, int wei):Vehicle(name),weight(wei) {};
    virtual void display()
    {
        int i=weight*5;
        cout<<no<<' '<<i<<endl;
    }
};

class Bus:public Vehicle
{
protected:
    int passenger;
public:
    Bus(string name, int p):Vehicle(name),passenger(p) {};
    virtual void display()
    {
        int i=passenger*3;
        cout<<no<<' '<<i<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehicle *pv;
        int m,wei,p;
        string name;
        cin>>m;
        if(m==1)
        {
            cin>>name>>wei>>p;
            Car ss(name,wei,p);
            pv=&ss;
            pv->display();
        }
        else if(m==2)
        {
            cin>>name>>wei;
            Truck ss(name,wei);
            pv=&ss;
            pv->display();
        }
        else if(m==3)
        {
            cin>>name>>p;
            Bus ss(name,p);
            pv=&ss;
            pv->display();
        }
    }
}

------------------------------------------------------
2018192026:Problem1232:正确
#include<stdio.h>
#include<string.h>
class Vehicle
{
protected:
	char *no;
public:
	virtual void display()=0;
};
class Car:public Vehicle
{
protected:
	int number;
	int weight;
public:
	Car(char *n,int nu,int w):number(nu),weight(w)
	{
		no=new char[10];
		strcpy(no,n);
	}
	void display()
	{
		printf("%s %d\n",no,number*8+weight*2);
	}
};
class Truck:public Vehicle
{
protected:
	int weight;
public:
	Truck(char *n,int w):weight(w)
	{
		no=new char[10];
		strcpy(no,n);
	}
	void display()
	{
		printf("%s %d\n",no,weight*5);
	}
};
class Bus:public Vehicle
{
protected:
	int number;
public:
	Bus(char *n,int nu):number(nu)
	{
		no=new char[10];
		strcpy(no,n);
	}
	void display()
	{
		printf("%s %d\n",no,number*3);
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		getchar();
		int n,weight,number;
		char *no=new char[10];
		Vehicle *V;
		scanf("%d",&n);
		if(n==1)
		{
			scanf("%s %d %d",no,&number,&weight);
			Car V1(no,number,weight);
			V=&V1;
			V->display();
		}
		else if(n==2)
		{
			scanf("%s %d",no,&weight);
			Truck V2(no,weight);
			V=&V2;
			V->display();
		}
		else if(n==3)
		{
			scanf("%s %d",no,&number);
			Bus V3(no,number);
			V=&V3;
			V->display();
		}
	}
	return 0;
}


------------------------------------------------------
2017163101:Problem1120:运行错误
#include<iostream>
#include<cstdio>
using namespace std;
class Animal{
	protected:
		string type;
		string name;
		int age;
	public:
		virtual void speak()=0;
		Animal(string t,string n,int a):type(t),name(n),age(a){
			
		}
};
class Tiger:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"AOOO"<<endl;
		}
		Tiger(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Dog:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"WangWang"<<endl;
		}
		Dog(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Pig:public Animal{
public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"HENGHENG"<<endl;
		}
		Pig(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Duck:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"GAGA"<<endl;
		}
		Duck(string t,string n,int a):Animal(t,n,a){
		}
};
int main(){
	int t;
	cin>>t;
	while(t--){
		string type,name;
		int age;
		cin>>type>>name>>age;
		Animal *s;
		if(type=="Tiger"){
			s=new Tiger(type,name,age);
		}
		else if(type=="Pig"){
			s=new Pig(type,name,age);
		}
		else if(type=="Dog"){
			s=new Dog(type,name,age);
		}
		else if(type=="Duck"){
			s=new Duck(type,name,age);
		}
		else{
			cout<<"There is no "<<type<<" in our Zoo"<<endl;
		}
		s->speak();
		delete s;
	}
	return 0;
}
------------------------------------------------------
2017047011:Problem1232:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(){}
	virtual void display()=0;
};
//------------------------
class car:public Vehicle
{
protected:
	int num;
	int weigh;
public:
	car(string no1,int num1,int weigh1);
	void display();
};

car::car(string no1,int num1,int weigh1){
	no=no1;num=num1;weigh=weigh1;
}

void car::display(){
	cout<<no<<" "<<num*8+weigh*2<<endl; 
}
//------------------------
class truck:public Vehicle
{
protected:
	int weigh;
public:
	truck(string no1,int w);
	void display();
};

truck::truck(string no1,int w){
	no=no1;weigh=w;
}

void truck::display(){
	cout<<no<<" "<<weigh*5<<endl; 
}
//------------------------
class bus:public Vehicle
{
protected:
	int num; 
public:
	bus(string no1,int n);
	void display();
};

bus::bus(string no1,int n){
	no=no1;num=n;
}

void bus::display(){
	cout<<no<<" "<<num*3<<endl;
}
//------------------------

int main()
{
	int t;
	int kind,num,weigh;
	string no;
	Vehicle *pv;
	
	cin>>t;
	while(t--)
	{
		cin>>kind;
		
		if(kind==1){
			cin>>no>>num>>weigh;
			car car1(no,num,weigh);
			pv=&car1;
			pv->display();
			
		}
		
		else if(kind==2){
			cin>>no>>weigh;
			truck truck1(no,weigh);
			pv=&truck1;
			pv->display();
		}
		
		else if(kind==3){
			cin>>no>>num;
			bus bus1(no,num);
			pv=&bus1;
			pv->display();
		}
		
	}	
}
------------------------------------------------------
2018151066:Problem1232:正确
#include <iostream>
#include<string>
using namespace std;

class Vehicle
{
protected:
    string no;
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;
};
class Car:virtual public Vehicle
{
protected:
    int num,weight;
public:
    Car(int num_,int weight_,string no):num(num_),weight(weight_),Vehicle(no){}
    void display()
    {
        cout<<no<<" "<<num*8+weight*2<<endl;
    }
};
class Truck:virtual public Vehicle
{
protected:
    int weight;
public:
    Truck(int weight_,string no):weight(weight_),Vehicle(no){}
    void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
};
class Bus:virtual public Vehicle
{
protected:
    int num;
public:
    Bus(int num_,string no):num(num_),Vehicle(no){}
    void display()
    {
        cout<<no<<" "<<num*3<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehicle *pv;
        int cmd;
        string no;
        cin >>cmd;
        if(cmd==1)
        {
            int weight,num;
            cin>>no>>num>>weight;
            Car car(num,weight,no);
            pv=&car;
            pv->display();
        }
        else if(cmd==2)
        {
            int weight;
            cin>>no>>weight;
            Truck truck(weight,no);
            pv=&truck;
            pv->display();
        }
        else
        {
            int num;
            cin>>no>>num;
            Bus bus(num,no);
            pv=&bus;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017163101:Problem1120:运行错误
#include<iostream>
#include<cstdio>
using namespace std;
class Animal{
	protected:
		string type;
		string name;
		int age;
	public:
		virtual void speak()=0;
		Animal(string t,string n,int a):type(t),name(n),age(a){
			
		}
};
class Tiger:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"AOOO"<<endl;
		}
		Tiger(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Dog:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"WangWang"<<endl;
		}
		Dog(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Pig:public Animal{
public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"HENGHENG"<<endl;
		}
		Pig(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Duck:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"GAGA"<<endl;
		}
		Duck(string t,string n,int a):Animal(t,n,a){
		}
};
int main(){
	int t;
	cin>>t;
	while(t--){
		string type,name;
		int age;
		cin>>type>>name>>age;
		Animal *s;
		if(type=="Tiger"){
			s=new Tiger(type,name,age);
		}
		else if(type=="Pig"){
			s=new Pig(type,name,age);
		}
		else if(type=="Dog"){
			s=new Dog(type,name,age);
		}
		else if(type=="Duck"){
			s=new Duck(type,name,age);
		}
		else{
			cout<<"There is no "<<type<<" in our Zoo"<<endl;
		}
		s->speak();
		//delete s;
	}
	//delete s;
	return 0;
}
------------------------------------------------------
2018152007:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
    protected:
        string no;
    public:
        Vehicle(){}
        Vehicle(string n)
        {
            no=n;
        }
        virtual void display()=0;//应收费用

};
class Car:public Vehicle
{
private:
    int num;
    int weight;
public:
    Car(string  n,int N,int w):Vehicle(n),num(N),weight(w){}
    void display()
    {
        cout<<no<<' '<<num*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
private:
    int weight;
public:
    Truck(string  n,int w):Vehicle(n),weight(w){}
    void display()
    {
        cout<<no<<' '<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
private:
    int num;
public:
    Bus(string n,int N):Vehicle(n),num(N){};
    void display()
    {
        cout<<no<<' '<<num*3<<endl;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        Vehicle *pv;
        int type;
        cin>>type;
        if(type==1)
        {
            string n;
            int N,w;
            cin>>n>>N>>w;
            Car c1(n,N,w);
            pv=&c1;
            pv->display();
        }
        else if(type==2)
        {
            string n;
            int w;
            cin>>n>>w;
            Truck t1(n,w);
            pv=&t1;
             pv->display();
        }
        else
        {
            string n;
            int N;
            cin>>n>>N;
            Bus b1(n,N);
            pv=&b1;
             pv->display();
        }
        //pv->display();
    }
    return 0;
}

------------------------------------------------------
2016071031:Problem1232:编译错误
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Vehicle{
protected:
    string no;//编号
public:
    Vehicle();
    Vehicle(string no_) {
        no = no_;
    }
    virtual void display()=0;//应收费用
    string getNo() {
        return no;
    }
};

class Car: public Vehicle {
    int amount;
    int weight;
public:
    Car(string no_, int amount_, int weight_): Vehicle(no_) {
        amount = amount_;
        weight = weight_;
    }
    void display() {
        cout<< getNo() << " " << amount * 8 + weight * 2 <<endl;
    }
};

class Truck: public Vehicle {
    int weight;
public:
    Truck(string no_, int weight_):Vehicle(no_) {
        weight = weight_;
    }
    void display() {
        cout<< getNo() << " " << weight * 5 <<endl;
    }
};

class Bus: public Vehicle {
    int amount;
public:
    Bus(string no_, int amount_): Vehicle(no_) {
        amount = amount_;
    }
    void display() {
        cout<< getNo() << " " << amount * 3 <<endl;
    }
} ;

int main()
{
    int t, type, amount, weight;
    string no;

    cin>>t;
    Vehicle * pv = nullptr;
    while (t--) {
        cin>>type;
        if (type == 1) {
            cin>>no>>amount>>weight;
            pv = Car(no, amount, weight);
            pv.display();
        } else if (type == 2) {
            cin>>no>>weight;
            pv = Truck(no, weight);
            pv.display();
        } else {
            cin>>no>>amount;
            pv = Bus(no, amount);
            pv.display();
        }
    }

    return 0;
}

------------------------------------------------------
2018192024:Problem1232:正确
#include <iostream>
#include <iomanip>
using namespace std;

class Vehicle
{
protected:
    string no;
public:
    Vehicle(){}
    Vehicle(string _no):no(_no){}
    virtual void display()=0;
};

class Car:public Vehicle
{
    int number,weight;
public:
    Car(string _no,int num,int wei):Vehicle(_no),number(num),weight(wei){}
    virtual void display()
    {
        cout<<setw(3)<<setfill('0')<<no<<" "<<number*8+weight*2<<endl;
    }
};

class Truck:public Vehicle
{
    int weight;
public:
    Truck(string _no,int wei):Vehicle(_no),weight(wei){}
    virtual void display()
    {
        cout<<setw(3)<<setfill('0')<<no<<" "<<weight*5<<endl;
    }
};

class Bus:public Vehicle
{
    int number;
public:
    Bus(string _no,int num):Vehicle(_no),number(num){}
    virtual void display()
    {
        cout<<setw(3)<<setfill('0')<<no<<" "<<number*3<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    Vehicle *pv;
    while(t--)
    {
        string _no;
        int type,num,wei;
        cin>>type;
        if(type==1)
        {
            cin>>_no>>num>>wei;
            Car carl(_no,num,wei);
            carl.display();
        }
        else if(type==2)
        {
            cin>>_no>>wei;
            Truck truckl(_no,wei);
            truckl.display();
        }
        else if(type==3)
        {
            cin>>_no>>num;
            Bus busl(_no,num);
            busl.display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192013:Problem1232:正确
#include <iostream>
using namespace std;

class Vehicle
{
protected:
    string no;
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;
};

class Car:public Vehicle
{
    int num,heavy;
public:
    Car(string no,int n,int h):Vehicle(no),num(n),heavy(h){}
    int Paid(){return num*8+heavy*2;}
    void display(){cout<<no<<" "<<Paid()<<endl;}
};
class Truck:public Vehicle
{
    int heavy;
public:
    Truck(string no,int h):Vehicle(no),heavy(h){}
    int Paid(){return heavy*5;}
    void display(){cout<<no<<" "<<Paid()<<endl;}
};
class Bus:public Vehicle
{
    int num;
public:
    Bus(string no,int n):Vehicle(no),num(n){}
    int Paid(){return num*3;}
    void display(){cout<<no<<" "<<Paid()<<endl;}
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int type,num,heavy;
        string no;
        cin>>type>>no;
        if(type==1)
        {
            cin>>num>>heavy;
            Car c(no,num,heavy);
            c.display();
        }
        else if(type==2)
        {
            cin>>heavy;
            Truck t(no,heavy);
            t.display();
        }
        else if(type==3)
        {
            cin>>num;
            Bus b(no,num);
            b.display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192010:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(){}
    Vehicle(string N):no(N){}
    ~Vehicle(){}
    virtual void display()=0;
};
class Car:public Vehicle
{
protected:
    int num;
    int weight;
public:
    Car(){}
    Car(string N,int n,int w):Vehicle(N),num(n),weight(w){}
    void display()
    {
        cout << no << ' ';
        cout << num*8 + weight*2 << endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(){}
    Truck(string N,int w):Vehicle(N),weight(w){}
    void display()
    {
        cout << no<< ' ';
        cout << weight*5 << endl;
    }
};
class Bus:public Vehicle
{
protected:
    int num;
public:
    Bus(){}
    Bus(string N,int n):Vehicle(N),num(n){}
    void display()
    {
        cout << no<< ' ';
        cout << num*3 << endl;
    }
};
int main()
{
    int type,t;
    string no;
    int num,weight;
    cin >> t;
    while(t--)
    {
        Vehicle *pv;
        cin >> type;
        switch(type)
        {
        case 1:
            {
                cin >> no >> num >> weight;
                pv = new Car(no,num,weight);
                pv->display();
                delete pv;
                break;
            }
        case 2:
            {
                cin >> no >> weight;
                pv = new Truck(no,weight);
                pv->display();
                delete pv;
                break;
            }
        case 3:
            {
                cin >> no >> num;
                pv = new Bus(no,num);
                pv->display();
                delete pv;
                break;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2016154114:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;

class Vehicle
{
protected:
    string no;
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;
};

class Car:public Vehicle
{
protected:
	int customer;
	int weight;
public:
    Car(string n,int c,int w):Vehicle(n),customer(c),weight(w){}
    virtual void display()
    {
		cout<<no<<" "<<customer*8+weight*2<<endl;
    }
};

class Truck:public Vehicle
{
protected:
	int wei;
public:
    Truck(string n,int w):Vehicle(n),wei(w){}
    virtual void display()
    {
		cout<<no<<" "<<wei*5<<endl;
    }
};

class Bus:public Vehicle
{
protected:
	int cus;
public:
    Bus(string n,int c):Vehicle(n),cus(c){}
    virtual void display()
    {
		cout<<no<<" "<<cus*3<<endl;
    }
};

int main()
{
    int i;
    cin>>i;
    while(i--)
    {
		Vehicle *pv;
		string no;
		int type,cus,wei;
        cin>>type>>no;
        if(type==1)
		{
			cin>>cus>>wei;
			Car c(no,cus,wei);
			pv=&c;
			pv->display();
		}
		else if(type==2)
        {
			cin>>wei;
			Truck t(no,wei);
			pv=&t;
			pv->display();
        }
		else if(type==3)
        {
			cin>>cus;
			Bus b(no,cus);
			pv=&b;
			pv->display();
        }
    }
	return 0;
}
------------------------------------------------------
2017182103:Problem1120:正确
#include <iostream>
using namespace std;

class Animal
{
protected:
    string name;
    int age,weight;
public:
    Animal(string n=" ",int a=0):name(n),age(a) {}
    virtual void speak()=0;
    ~Animal() {}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger() {}
};

class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog() {}
};

class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck() {}
};

class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig() {}
};


int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string type;
        cin>>type;

        Animal *a;

        string name;
        int age;
        cin>>name>>age;

        if(type=="Tiger")
        {
            Tiger t(name,age);
            a = &t;
            a->speak();
        }
        else if(type=="Dog")
        {
            Dog d(name,age);
            a = &d;
            a->speak();
        }
        else if(type=="Duck")
        {
            Duck duck(name,age);
            a = &duck;
            a->speak();
        }
        else if(type=="Pig")
        {
            Pig p(name,age);
            a = &p;
            a->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;

    }
    return 0;
}

------------------------------------------------------
2017163101:Problem1120:答案错误
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
class Animal{
	protected:
		string type;
		string name;
		int age;
	public:
		virtual void speak()=0;
		Animal(string t,string n,int a):type(t),name(n),age(a){
			
		}
};
class Tiger:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
		}
		Tiger(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Dog:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
		}
		Dog(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Pig:public Animal{
public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
		}
		Pig(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Duck:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"GAGA"<<endl;
		}
		Duck(string t,string n,int a):Animal(t,n,a){
		}
};
int main(){
	int t;
	cin>>t;
	while(t--){
		string type,name;
		int age;
		cin>>type>>name>>age;
		Animal *s;
		if(type=="Tiger"){
			s=new Tiger(type,name,age);
		}
		else if(type=="Pig"){
			s=new Pig(type,name,age);
		}
		else if(type=="Dog"){
			s=new Dog(type,name,age);
		}
		else if(type=="Duck"){
			s=new Duck(type,name,age);
		}
		else{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
			continue;
		}
		s->speak();
		delete s;
	}
	//delete s;
	return 0;
}
------------------------------------------------------
2017152043:Problem1232:正确
#include<iostream>
using namespace std;

class Vehicle{
protected:
	string no;//编号
public:
	Vehicle(){}
	virtual void display()=0;//应收费用
	void getNo(string num)
	{
		no = num;
	}
};

class Car:public Vehicle{
	int people;
	int weight;
public:
	Car(){}
	void display()
	{
		cout << no << " " << (people * 8 + weight * 2) << endl;
	}
	void getPW(int p,int w)
	{
		people = p;
		weight = w;
	}
};

class Truck:public Vehicle{
	int weight;
public:
	Truck(){}
	void display()
	{
		cout << no << " " << weight * 5 << endl;
	}
	void getW(int w)
	{
		weight = w;
	}
};

class Bus:public Vehicle{
	int people;
public:
	Bus(){}
	void display()
	{
		cout << no << " " << people * 3 << endl;
	}
	void getP(int p)
	{
		people = p;
	}
};


int main(){
	int t;
	cin >> t;
	Car car;
	Truck truck;
	Bus bus;
	Vehicle *pv;
	int type,p,w;
	string num;
	while(t--){	
		cin >> type >> num;
		if(type == 1){
			cin >> p >> w;
			car.getNo(num);
			car.getPW(p,w);
			pv = &car;
			pv->display();
		}
		else if(type == 2){
			cin >> w;
			truck.getNo(num);
			truck.getW(w);
			pv = &truck;
			pv->display();
		}
		else if(type == 3){
			cin >> p;
			bus.getNo(num);
			bus.getP(p);
			pv = &bus;
			pv->display();
		}
	}
	return 0;
}

------------------------------------------------------
2018192046:Problem1120:答案错误
#include<iostream>
using namespace std;
class Animal
{
protected:
    string type,name;
    int age;
public:
    Animal(string _type,string _name,int _age):type(_type),name(_name),age(_age){}
    virtual void Speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO"<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang"<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA"<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG"<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Animal *pv;
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Dog")
        {
            Dog P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Pig")
        {
            Pig P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Duck")
        {
            Duck P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else
        {
            cout<<"There is no Rabbit in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2018152035:Problem1120:答案错误
#include <iostream>

using namespace std;
class animal
{
protected:
    int age;
    string name;
public:
    animal(string n,int a):name(n),age(a) {}
    virtual void speak()=0;
};
class tiger:public animal
{
public:
    tiger(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class dog:public animal
{
public:
    dog(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public animal
{
public:
    Duck(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public animal
{
public:
    Pig(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int T,a;
    string n,type;
    cin>>T;
    while(T--)
    {
        animal *p;
        cin>>type>>n>>a;
        if(type=="Tiger")
        {
            tiger t(n,a);
            p=&t;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig pp(n,a);
            p=&pp;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck d(n,a);
            p=&d;
            p->speak();
        }
        else if(type=="Dog")
        {
            Duck dg(n,a);
            p=&dg;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2017163101:Problem1120:答案错误
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
class Animal{
	protected:
		string type;
		string name;
		int age;
	public:
		virtual void speak()=0;
		Animal(string t,string n,int a):type(t),name(n),age(a){
			
		}
};
class Tiger:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
		}
		Tiger(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Dog:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
		}
		Dog(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Pig:public Animal{
public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
		}
		Pig(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Duck:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"GAGA"<<endl;
		}
		Duck(string t,string n,int a):Animal(t,n,a){
		}
};
int main(){
	int t;
	cin>>t;
	while(t--){
		string type,name;
		int age;
		cin>>type>>name>>age;
		Animal *s;
		if(type=="Tiger"){
			s=new Tiger(type,name,age);
		}
		else if(type=="Pig"){
			s=new Pig(type,name,age);
		}
		else if(type=="Dog"){
			s=new Dog(type,name,age);
		}
		else if(type=="Duck"){
			s=new Duck(type,name,age);
		}
		else{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
			continue;
		}
		s->speak();
		delete s;
	}
	//delete s;
	return 0;
}
------------------------------------------------------
2018192022:Problem1235:答案错误
#include <iostream>
#include <iomanip>
#define PI 3.14
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:public Geometry
{
protected:
    double x,y;
public:
    Rect(double a,double b):x(a),y(b){}
    double getArea()
    {
        return x*y;
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(double c):r(c){}
    double getArea()
    {
        return r*r*PI;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry**t,int n);
};
void TotalArea::computerTotalArea(Geometry **t, int n)
{
    int i;
    double s=0;
    for(i=0;i<n;i++)
        if(s<t[i]->getArea())
            s=t[i]->getArea();
    cout<<"最大面积="<<setw(2)<<s<<endl;
}
int main()
{
    int t,i;
    cin>>t;
    Geometry **p;
    p =new Geometry *[t];

    for(i=0;i<t;i++)
    {
        int num;
        cin>>num;
        if(num==1)
        {
            double x,y;
            cin>>x>>y;
            p[i] = new Rect(x,y);
        }
        else if(num==2)
        {
            double r;
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea q;
    q.computerTotalArea(p,t);
    return 0;
}
------------------------------------------------------
2018152037:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;

class Vehicle
{
protected:
	string no;
public:
	Vehicle()
	{
	}
	Vehicle(string n)
	{
		no=n;
	}
	virtual void display()
	{
	}
	void print()
	{
		cout<<no<<" ";
	}
};

class Car:public Vehicle
{
	int zai;
	int zl;
public:
	Car(string n,int z1,int z2):Vehicle(n)
	{
		zai=z1;
		zl=z2;
	}
	void display()
	{
		cout<<zai*8+zl*2<<endl;
	}
};

class Truck:public Vehicle
{
	int zl;
public:
	Truck(string n,int z):Vehicle(n)
	{
		zl=z;
	}
	void display()
	{
		cout<<zl*5<<endl;
	}
};

class Bus:public Vehicle
{
	int zai;
public:
	Bus(string n,int z):Vehicle(n)
	{
		zai=z;
	}
	void display()
	{
		cout<<zai*3<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Vehicle *a1;
		int k;
		cin>>k;
		string n;
		cin>>n;
		if(k==1)
		{
			int z1,z2;
			cin>>z1>>z2;
			Car a2(n,z1,z2);
			a1=&a2;
			a1->print();
			a1->display();
		}
		if(k==2)
		{
			int z1;
			cin>>z1;
			Truck a3(n,z1);
			a1=&a3;
			a1->print();
			a1->display();
		}
		if(k==3)
		{
			int z2;
			cin>>z2;
			Bus a4(n,z2);
			a1=&a4;
			a1->print();
			a1->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018192046:Problem1120:答案错误
#include<iostream>
using namespace std;
class Animal
{
protected:
    string type,name;
    int age;
public:
    Animal(string _type,string _name,int _age):type(_type),name(_name),age(_age){}
    virtual void Speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Animal *pv;
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Dog")
        {
            Dog P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Pig")
        {
            Pig P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Duck")
        {
            Duck P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else
        {
            cout<<"There is no Rabbit in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2017163101:Problem1120:正确
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
class Animal{
	protected:
		string type;
		string name;
		int age;
	public:
		virtual void speak()=0;
		Animal(string t,string n,int a):type(t),name(n),age(a){
			
		}
};
class Tiger:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
		}
		Tiger(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Dog:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
		}
		Dog(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Pig:public Animal{
public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
		}
		Pig(string t,string n,int a):Animal(t,n,a){
			
		}
};
class Duck:public Animal{
	public:
		void speak(){
			cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
		}
		Duck(string t,string n,int a):Animal(t,n,a){
		}
};
int main(){
	int t;
	cin>>t;
	while(t--){
		string type,name;
		int age;
		cin>>type>>name>>age;
		Animal *s;
		if(type=="Tiger"){
			s=new Tiger(type,name,age);
		}
		else if(type=="Pig"){
			s=new Pig(type,name,age);
		}
		else if(type=="Dog"){
			s=new Dog(type,name,age);
		}
		else if(type=="Duck"){
			s=new Duck(type,name,age);
		}
		else{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
			continue;
		}
		s->speak();
		delete s;
	}
	//delete s;
	return 0;
}
------------------------------------------------------
2018152044:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(string no1)
    {
        no=no1;
    }
    virtual void display()=0;///应收费用
};

class Car:public Vehicle
{
protected:
    int number;
    int weight;
    int fee;
public:
    Car(string no1,int n,int w):Vehicle(no1)
    {
        number=n;
        weight=w;
        fee=0;
    }
    void display()
    {
        fee=number*8+weight*2;
        cout<<no<<" "<<fee<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
    int fee;
public:
    Truck(string no1,int w):Vehicle(no1)
    {
        weight=w;
        fee=0;
    }
    void display()
    {
        fee=weight*5;
        cout<<no<<" "<<fee<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int number;
    int fee;
public:
    Bus(string no1,int n):Vehicle(no1)
    {
        number=n;
        fee=0;
    }
    void display()
    {
        fee=number*3;
        cout<<no<<" "<<fee<<endl;
    }
};
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        int type;
        string no;
        int number;
        int weight;
        Vehicle *pv;
        cin>>type;
        if(type==1)
        {
            cin>>no>>number>>weight;
            Car tem(no,number,weight);
            pv=&tem;
            pv->display();
        }
        else if(type==2)
        {
            cin>>no>>weight;
            Truck tem(no,weight);
            pv=&tem;
            pv->display();
        }
        else if(type==3)
        {
            cin>>no>>number;
            Bus tem(no,number);
            pv=&tem;
            pv->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018192022:Problem1235:答案错误
#include <iostream>
#include <iomanip>
#define PI 3.14
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:public Geometry
{
protected:
    double x,y;
public:
    Rect(double a,double b):x(a),y(b){}
    double getArea()
    {
        return x*y;
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(double c):r(c){}
    double getArea()
    {
        return r*r*PI;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry**t,int n);
};
void TotalArea::computerTotalArea(Geometry **t, int n)
{
    int i;
    double s=0;
    for(i=0;i<n;i++)
        if(s<t[i]->getArea())
            s=t[i]->getArea();
    cout<<"最大面积="<<setw(2)<<setfill('0')<<s<<endl;
}
int main()
{
    int t,i;
    cin>>t;
    Geometry **p;
    p =new Geometry *[t];

    for(i=0;i<t;i++)
    {
        int num;
        cin>>num;
        if(num==1)
        {
            double x,y;
            cin>>x>>y;
            p[i] = new Rect(x,y);
        }
        else if(num==2)
        {
            double r;
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea q;
    q.computerTotalArea(p,t);
    return 0;
}
------------------------------------------------------
2018192008:Problem1120:正确
#include<iostream>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()=0;
};

class Tiger:public Animal
{
public:
     Tiger(string n,int a):Animal(n,a){}
     virtual void speak()
     {
         cout<<"Hello,I am "<<name<<",AOOO."<<endl;
     }
};

class Pig:public Animal
{
public:
     Pig(string n,int a):Animal(n,a){}
     virtual void speak()
     {
         cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
     }
};

class Duck:public Animal
{
public:
     Duck(string n,int a):Animal(n,a){}
     virtual void speak()
     {
         cout<<"Hello,I am "<<name<<",GAGA."<<endl;
     }
};

class Dog:public Animal
{
public:
     Dog(string n,int a):Animal(n,a){}
     virtual void speak()
     {
         cout<<"Hello,I am "<<name<<",WangWang."<<endl;
     }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string kind,name;
        int a;
        cin>>kind>>name>>a;
        Animal *an;
        if(kind!="Tiger"&&kind!="Pig"&&kind!="Duck"&&kind!="Dog")
            cout<<"There is no "<<kind<<" in our Zoo."<<endl;
        else if(kind=="Tiger")
        {
            Tiger t1(name,a);
            an=&t1;
            an->speak();
        }
         else if(kind=="Pig")
        {
            Pig p1(name,a);
            an=&p1;
            an->speak();
        }
         else if(kind=="Duck")
        {
            Duck d1(name,a);
            an=&d1;
            an->speak();
        }
        else if(kind=="Dog")
        {
            Dog dog(name,a);
            an=&dog;
            an->speak();
        }

    }
}

------------------------------------------------------
2018192006:Problem1120:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
   
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
   
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
 
 
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
 
/*Add Data Structures Here*/
class Animal{
	public:
		virtual void speak()=0;
		void readInfo();
	protected:	
		string type;
		string name;
		int age;
};
class Tiger:public Animal{
	public:
		void speak();
	protected:

};
class Dog:public Animal{
	public:
		void speak();
	protected:

};
class Duck:public Animal{
	public:
		void speak();
	protected:

};
class Pig:public Animal{
	public:
		void speak();
	protected:

};
/*Add Functions Here*/
void
Animal::readInfo(){
	cin >> this->type >> this->name >> this->age;
}
void
Animal::speak(){
	if(this->type=="Tiger"){
		cout << "Hello,I am " << this->name;
		cout << ",AOOO." << endl;
	}else if(this->type=="Pig"){
		cout << "Hello,I am " << this->name;
		cout << ",HENGHENG." << endl; 
	}else if(this->type=="Dog"){
		cout << "Hello,I am " << this->name; 
		cout << ",WangWang." << endl; 
	}else if(this->type=="Duck"){
		cout << "Hello,I am " << this->name; 
		cout << ",GAGA." << endl; 
	}else{
		cout << "There is no "<< this->type <<" in our Zoo."<< endl;
	}	
}
void
Tiger::speak(){
	if(this->type=="Tiger"){
		cout << "Hello,I am " << this->name;
		cout << ",AOOO." << endl;
	}else if(this->type=="Pig"){
		cout << "Hello,I am " << this->name;
		cout << ",HENGHENG." << endl; 
	}else if(this->type=="Dog"){
		cout << "Hello,I am " << this->name; 
		cout << ",WangWang." << endl; 
	}else if(this->type=="Duck"){
		cout << "Hello,I am " << this->name; 
		cout << ",GAGA." << endl; 
	}else{
		cout << "There is no "<< this->type <<" in our Zoo."<< endl;
	}	
}
void
Pig::speak(){
	if(this->type=="Tiger"){
		cout << "Hello,I am " << this->name;
		cout << ",AOOO." << endl;
	}else if(this->type=="Pig"){
		cout << "Hello,I am " << this->name;
		cout << ",HENGHENG." << endl; 
	}else if(this->type=="Dog"){
		cout << "Hello,I am " << this->name; 
		cout << ",WangWang." << endl; 
	}else if(this->type=="Duck"){
		cout << "Hello,I am " << this->name; 
		cout << ",GAGA." << endl; 
	}else{
		cout << "There is no "<< this->type <<" in our Zoo."<< endl;
	}	
}
void
Dog::speak(){
	if(this->type=="Tiger"){
		cout << "Hello,I am " << this->name;
		cout << ",AOOO." << endl;
	}else if(this->type=="Pig"){
		cout << "Hello,I am " << this->name;
		cout << ",HENGHENG." << endl; 
	}else if(this->type=="Dog"){
		cout << "Hello,I am " << this->name; 
		cout << ",WangWang." << endl; 
	}else if(this->type=="Duck"){
		cout << "Hello,I am " << this->name; 
		cout << ",GAGA." << endl; 
	}else{
		cout << "There is no "<< this->type <<" in our Zoo."<< endl;
	}	
}
void
Duck::speak(){
	if(this->type=="Tiger"){
		cout << "Hello,I am " << this->name;
		cout << ",AOOO." << endl;
	}else if(this->type=="Pig"){
		cout << "Hello,I am " << this->name;
		cout << ",HENGHENG." << endl; 
	}else if(this->type=="Dog"){
		cout << "Hello,I am " << this->name; 
		cout << ",WangWang." << endl; 
	}else if(this->type=="Duck"){
		cout << "Hello,I am " << this->name; 
		cout << ",GAGA." << endl; 
	}else{
		cout << "There is no "<< this->type <<" in our Zoo."<< endl;
	}	
}
/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
	Animal *ptr;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
    	Tiger A;
    	ptr=&A;
    	ptr->readInfo();
    	ptr->speak();
    }
#endif
    /*Final process here.*/
 
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2018192046:Problem1120:正确
#include<iostream>
using namespace std;
class Animal
{
protected:
    string type,name;
    int age;
public:
    Animal(string _type,string _name,int _age):type(_type),name(_name),age(_age){}
    virtual void Speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string _type,string _name,int _age):Animal(_type,_name,_age){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Animal *pv;
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Dog")
        {
            Dog P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Pig")
        {
            Pig P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else if(type=="Duck")
        {
            Duck P(type,name,age);
            pv=&P;
            pv->Speak();
        }
        else
        {
            cout<<"There is no ";
            cout<<type;
            cout<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2018192048:Problem1232:正确
#include<iostream>
using namespace std;

class Vehicle{
protected:
	string no;
public:
	Vehicle(){}
	Vehicle(string n):no(n){}
	virtual void display()=0;
	~Vehicle(){}
};

class Car:public Vehicle{
protected:
	int customer;
	int weight;
public:
	Car(){}
	Car(string n,int c,int w):Vehicle(n),customer(c),weight(w){}
	void display(){
		cout<<Vehicle::no<<" "<<customer*8+weight*2<<endl;
	}
	~Car(){}
};

class Truck:public Vehicle{
protected:
	int weight;
public:
	Truck(){}
	Truck(string n,int w):Vehicle(n),weight(w){}
	void display(){
		cout<<Vehicle::no<<" "<<weight*5<<endl;
	}
	~Truck(){}
};

class Bus:public Vehicle{
protected:
	int customer;
public:
	Bus(){}
	Bus(string n,int c):Vehicle(n),customer(c){}
	void display(){
		cout<<Vehicle::no<<" "<<customer*3<<endl;
	}
	~Bus(){}
};

int main(){
	int t;
	cin>>t;
	while(t--){
		int type;
		cin>>type;
		string no;
		int customer,weight;
		Vehicle *pv;
		if(type==1){
			cin>>no>>customer>>weight;
			Car a(no,customer,weight);
			pv=&a;
			pv->display();
		}
		else if(type==2){
			cin>>no>>weight;
			Truck a(no,weight);
			pv=&a;
			pv->display();
		}
		else if(type==3){
			cin>>no>>customer;
			Bus a(no,customer);
			pv=&a;
			pv->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018192050:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;
class Vehicle
{
protected:
	string no;//编号
public:
	virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
	protected:
		int num;
		int weight;
    public:
        Car(){
        }
        Car(string n,int a,int b)
		{
			no=n;
			num=a;
			weight=b;
        }
        void display(){
        	cout<<no<<" "<<num*8+weight*2<<endl;
		}
        ~Car(){
        }
};
class Truck:public Vehicle
{
	protected:
		int weight;
    public:
        Truck(){
        }
        Truck(string n,int b)
		{
			no=n;
			weight=b;
        }
        void display(){
        	cout<<no<<" "<<weight*5<<endl;
		}
        ~Truck(){
        }
};
class Bus:public Vehicle
{
	protected:
		int num;
    public:
        Bus(){
        }
        Bus(string n,int a)
		{
			no=n;
			num=a;
        }
        void display(){
        	cout<<no<<" "<<num*3<<endl;
		}
        ~Bus(){
        }
};
int main(){
	int t,n,type,w;
	string name;
	cin>>t;
	Vehicle *pv;
	while(t--)
	{
		cin>>type;
		if(type==1)
		{
			cin>>name>>n>>w;
			Car a(name,n,w);
			pv=&a;
			pv->display();
		}
		if(type==2)
		{
			cin>>name>>n;
			Truck b(name,n);
			pv=&b;
			pv->display();
		}
		if(type==3)
		{
			cin>>name>>w;
			Bus c(name,w);
			pv=&c;
			pv->display();
		}
	}
}
------------------------------------------------------
2018152051:Problem1232:正确
#include<iostream>
using namespace std;
class Vehicle
{ 
protected:
	string no;//编号
public:
	virtual void display()=0;//应收费用
};
class CCar:public Vehicle
{
protected:
	int num;
	int weight;
public:
	CCar(){}
	CCar(string s,int n,int w)
	{
		no = s;
		num = n;
		weight = w;
	}
	void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};
class CTruck:public Vehicle
{
protected:
	int weight;
public:
	CTruck(){}
	CTruck(string s,int w)
	{
		no = s;
		weight = w;
	}
	void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};
class CBus:public Vehicle
{
protected:
	int num;
public:
	CBus(){}
	CBus(string s,int n)
	{
		no = s;
		num = n;
	}
	void display()
	{
		cout<<no<<" "<<num*3<<endl;
	}
};
int main()
{
	int T;
	cin>>T;
	Vehicle *pv;
	while(T--)
	{
		int number,num,weight;
		string S;
		cin>>number;
		if(number == 1)
		{
			cin>>S>>num>>weight;
			CCar car(S,num,weight);
			pv = &car;
			pv->display();
		}
		else if(number == 2)
		{
			cin>>S>>weight;
			CTruck truck(S,weight);
			pv = &truck;
			pv->display();
		}
		else if(number == 3)
		{
			cin>>S>>num;
			CBus bus(S,num);
			pv = &bus;
			pv->display();
		}
	}
}
------------------------------------------------------
2018191214:Problem1232:正确
#include<iostream>
#include<string>
#include<cmath>
using namespace std;
class Vehicle
{
protected:
	string no;
public:
	Vehicle(){}
	Vehicle(string n):no(n){}
	virtual void display()=0;
};
class Car:public Vehicle
{
protected:
	int people,weight;
public:
	Car(){}
    Car(int p,int w,string no):people(p),weight(w),Vehicle(no){}
	void display()
	{
		int price;
		price=people*8+weight*2;
	    cout<<price<<endl;
	}
};
class Truck:public Vehicle
{
protected:
	int weight;
public:
    Truck(){}
	Truck(int w,string no):weight(w),Vehicle(no){}
	void display()
	{
		int p;
		p=weight*5;
		cout<<p<<endl;
	}
};
class Bus:public Vehicle
{
protected:
	int people;
public:
	Bus(){}
	Bus(int p,string no):people(p),Vehicle(no){}
	void display()
	{
		int p;
		p=people*3;
		cout<<p<<endl;
	}
};
int main()
{
	int t,kind,people,weight;
	string no;
	Vehicle *pv;
	cin>>t;
	while(t--)
	{
		cin>>kind;
		if(kind==1)
		{
			cin>>no>>people>>weight;
			pv=new Car(people,weight,no);
			cout<<no<<" ";
			pv->display();
		}
		else if(kind==3)
		{
			cin>>no>>people;
			pv = new Bus(people,no);
			cout<<no<<" ";
			pv->display();
		}
		else if(kind==2)
		{
			cin>>no>>weight;
	        pv=new Truck(weight,no);
			cout<<no<<" ";
			pv->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018152007:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
    protected:
        string no;
    public:
        Vehicle(){}
        Vehicle(string n)
        {
            no=n;
        }
        virtual void display()=0;//应收费用

};
class Car:public Vehicle
{
private:
    int num;
    int weight;
public:
    Car(string  n,int N,int w):Vehicle(n),num(N),weight(w){}
    void display()
    {
        cout<<no<<' '<<num*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
private:
    int weight;
public:
    Truck(string  n,int w):Vehicle(n),weight(w){}
    void display()
    {
        cout<<no<<' '<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
private:
    int num;
public:
    Bus(string n,int N):Vehicle(n),num(N){};
    void display()
    {
        cout<<no<<' '<<num*3<<endl;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        Vehicle *pv;
        int type;
        cin>>type;
        if(type==1)
        {
            string n;
            int N,w;
            cin>>n>>N>>w;
            Car *c1=new Car(n,N,w);
            pv=c1;
        }
        else if(type==2)
        {
            string n;
            int w;
            cin>>n>>w;
            Truck *t1=new Truck(n,w);
            pv=t1;
        }
        else
        {
            string n;
            int N;
            cin>>n>>N;
            Bus *b1=new Bus(n,N);
            pv=b1;
        }
        pv->display();
    }
    return 0;
}

------------------------------------------------------
2017301020:Problem1232:正确
#include <iostream>

using namespace std;

class Vehicle{
protected:
    string no;//编号
public:
    Vehicle(){}
    Vehicle(string a):no(a){}
    virtual void display()=0;//应收费用
};

class Car:public Vehicle{
    int weight;
    int number;
public:
    Car(){}
    Car(string no1,int number1,int weight1):Vehicle(no1),number(number1),weight(weight1){}
    virtual void display();
};

void Car::display(){
    cout<<no<<" "<<8*number+weight*2<<endl;
}

class Truck:public Vehicle{
    int weight;
public:
    Truck(){}
    Truck(string no1, int weight1):Vehicle(no1),weight(weight1){}
    virtual void display();
};

void Truck::display(){
    cout<<no<<" "<<5*weight<<endl;
}

class Bus:public Vehicle{
    int number;
public:
    Bus(){}
    Bus(string no1,int number1):Vehicle(no1),number(number1){}
    virtual void display();
};

void Bus::display(){
    cout<<no<<" "<<3*number<<endl;
}

int main()
{
    Vehicle *pv;
    int t,i,number,weight;
    string no;
    cin>>t;
    while(t--){
        cin>>i;
        if(i==1){
            cin>>no>>number>>weight;
            Car a(no,number,weight);
            pv=&a;
            pv->display();
        }
        else if(i==2){
            cin>>no>>weight;
            Truck b(no,weight);
            pv=&b;
            pv->display();
        }
        else{
            cin>>no>>weight;
            Bus b(no,weight);
            pv=&b;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2016071031:Problem1232:正确
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Vehicle{
protected:
    string no;//±ào?
public:
    Vehicle();
    Vehicle(string no_) {
        no = no_;
    }
    virtual void display()=0;//ó|ê?・?ó?
    string getNo() {
        return no;
    }
};

class Car: public Vehicle {
    int amount;
    int weight;
public:
    Car(string no_, int amount_, int weight_): Vehicle(no_) {
        amount = amount_;
        weight = weight_;
    }
    void display() {
        cout<< getNo() << " " << amount * 8 + weight * 2 <<endl;
    }
};

class Truck: public Vehicle {
    int weight;
public:
    Truck(string no_, int weight_):Vehicle(no_) {
        weight = weight_;
    }
    void display() {
        cout<< getNo() << " " << weight * 5 <<endl;
    }
};

class Bus: public Vehicle {
    int amount;
public:
    Bus(string no_, int amount_): Vehicle(no_) {
        amount = amount_;
    }
    void display() {
        cout<< getNo() << " " << amount * 3 <<endl;
    }
} ;

int main()
{
    int t, type, amount, weight;
    string no;

    cin>>t;
    Vehicle * pv;
    while (t--) {
        cin>>type;
        if (type == 1) {
            cin>>no>>amount>>weight;
            pv = new Car(no, amount, weight);
            pv->display();
        }   else if (type == 2) {
            cin>>no>>weight;
            pv = new Truck(no, weight);
            pv->display();
        } else {
            cin>>no>>amount;
            pv = new Bus(no, amount);
            pv->display();
        }
    }

    return 0;
}

------------------------------------------------------
2017163058:Problem1232:正确
#include <iostream>
#include <fstream>
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    virtual void display() = 0;//应收费用
};
class Car:public Vehicle
{
private:
    int customers, weight;
public:
    Car(string n, int c, int w):customers(c), weight(w)
    {
        no = n;
    }
    void display()
    {
        cout<<no<<" "<<customers*8 + weight*2<<endl;
    }
};
class Truck:public Vehicle
{
private:
    int weight;
public:
    Truck(string n, int w):weight(w)
    {
        no = n;
    }
    void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
private:
    int customers;
public:
    Bus(string n, int c):customers(c)
    {
        no = n;
    }
    void display()
    {
        cout<<no<<" "<<customers*3<<endl;
    }
};
int main()
{
//    freopen("C:\\Users\\acer\\Desktop\\in.txt", "r", stdin);
    string no;
    int weight, customers, t;
    char flag;
    Vehicle *pv;
    cin>>t;
    while(t --)
    {
        cin>>flag>>no;
        switch(flag)
        {
        case '1':
            {
                cin>>customers>>weight;
                Car car(no, customers, weight);
                pv = &car;
                pv->display();
                break;
            }
        case '2':
            {
                cin>>weight;
                Truck truck(no, weight);
                pv = &truck;
                pv->display();
                break;
            }
        case '3':
            {
                cin>>customers;
                Bus bus(no, customers);
                pv = &bus;
                pv->display();
                break;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2018151058:Problem1232:正确
#include <iostream>
using namespace std;
class Vehilcle
{
protected:
    string no;
public:
    virtual void display()=0;
};
class Car:public Vehilcle
{
protected:
    int num;
    int weight;
public:
    Car(string n,int nm,int w)
    {
        no=n;
        num=nm;
        weight=w;

    }
    void display()
    {
        cout<<no<<" "<<(num*8+weight*2)<<endl;

    }
};
class Truck:public Vehilcle
{
protected:
    int weight;
public:
    Truck(string n,int w)
    {
        no=n;
        weight=w;
    }
    void display()
    {
        cout<<no<<" "<<(weight*5)<<endl;

    }
};
class Bus:public Vehilcle
{
protected:
    int num;
public:
    Bus(string n,int nm)
    {
        no=n;
        num=nm;
    }
    void display()
    {
        cout<<no<<" "<<(num*3)<<endl;

    }
};
void print(Vehilcle *b)
{
    b->display();
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehilcle *pv;
        int type;
        cin>>type;
        string no;
        int weight,num;
        if(type==1)
        {
            cin>>no>>num>>weight;
            pv=new Car(no,num,weight);
            print(pv);

        }
        if(type==2)
        {
            cin>>no>>weight;
            pv=new Truck(no,weight);
            print(pv);
        }
        if(type==3)
        {
            cin>>no>>num;
            pv=new Bus(no,num);
            print(pv);
        }

    }
    return 0;
}

------------------------------------------------------
2018151027:Problem1232:正确
#include <iostream>
using namespace std;
class CVehicle
{
protected:
    string number;
public:
    virtual void display()=0;
    CVehicle(string n):number(n){}

};
class Car: public CVehicle
{
protected:
    int passenger;
    int weight;
public:
    Car(string n,int p,int w):CVehicle(n),passenger(p),weight(w){}
    void display()
    {
        int fee;
        fee=passenger*8+weight*2;
        cout<<number<<" "<<fee<<endl;
    }
};
class Truck: public CVehicle
{
protected:
    int weight;
public:
    Truck(string n,int w):CVehicle(n),weight(w){}
    void display()
    {
        int fee;
        fee=weight*5;
        cout<<number<<" "<<fee<<endl;
    }
};
class Bus: public CVehicle
{
protected:
    int passenger;
public:
    Bus(string n,int p):CVehicle(n),passenger(p){}
    void display()
    {
        int fee;
        fee=passenger*3;
        cout<<number<<" "<<fee<<endl;
    }
};
main()
{
    int type;
    int passenger;
    int weight;
    string number;
    int t;
    CVehicle *pv;
    cin>>t;
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>number>>passenger>>weight;
            pv=new Car(number,passenger,weight);
            pv->display();
        }
        if(type==2)
        {
            cin>>number>>weight;
            pv=new Truck(number,weight);
            pv->display();
        }
        if(type==3)
        {
            cin>>number>>passenger;
            pv=new Bus(number,passenger);
            pv->display();

        }

    }

}

------------------------------------------------------
2018152087:Problem1232:运行错误
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(string s):no(s){
	}
	virtual void display()=0;
};
class Car:public Vehicle
{
	int weight;
	int num;
public:
	Car(string s,int w,int n):Vehicle(s)
	{
		weight=w;
		num=n;
	}
	virtual void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};
class Truck:public Vehicle
{
	int weight;
public:
	Truck(string s,int w):Vehicle(s)
	{
		//no=s;
		weight=w;
	}
	virtual void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};
class Bus:public Vehicle
{
	int num;
public:
	Bus(string s,int n):Vehicle(s)
	{
		//no=s;
		num=n;
	}
	virtual void display()
	{
		cout<<no<<" "<<num*3<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Vehicle *pv;
	while(t--)
	{	
		int flag;
		cin>>flag;
		if(flag==1)
		{
			string name;
			int num;
			int weight;
			cin>>name>>num>>weight;
			Car ex(name,num,weight);
			pv=&ex;
		}
		else if(flag==2)
		{
			string name;
			int weight;
			cin>>name>>weight;
			Truck ex(name,weight);
			pv=&ex;
		}
		else if(flag==3)
		{
			string name;
			int num;
			cin>>name>>num;
			Bus ex(name,num);
			pv=&ex;
		}
		pv->display();
	}
}
------------------------------------------------------
2018152035:Problem1120:答案错误
#include <iostream>
#include<stdio.h>
#include<string>
using namespace std;
class animal
{
protected:
    int age;
    string name;
public:
    animal(string n,int a):name(n),age(a) {}
    virtual void speak()=0;
};
class tiger:public animal
{
public:
    tiger(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class dog:public animal
{
public:
    dog(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public animal
{
public:
    Duck(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public animal
{
public:
    Pig(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int T,a;
    string n,type;
    cin>>T;
    while(T--)
    {
        animal *p;
        cin>>type>>n>>a;
        if(type=="Tiger")
        {
            tiger t(n,a);
            p=&t;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig pp(n,a);
            p=&pp;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck d(n,a);
            p=&d;
            p->speak();
        }
        else if(type=="Dog")
        {
            Duck dg(n,a);
            p=&dg;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2018192043:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string names,int ages):name(names),age(ages){}
    virtual void speak()=0;
    ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
class Duck:public Animal
{
public:
    Duck(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
class Pig:public Animal
{
public:
    Pig(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig(){}
};
int main()
{
    Animal *p;
    int t,age;
    string type,name;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Dog")
        {
            Dog a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck a(name,age);
            p=&a;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192022:Problem1235:正确
#include <iostream>
#include <iomanip>
#define PI 3.14
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:public Geometry
{
protected:
    double x,y;
public:
    Rect(double a,double b):x(a),y(b){}
    double getArea()
    {
        return x*y;
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(double c):r(c){}
    double getArea()
    {
        return r*r*PI;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry**t,int n);
};
void TotalArea::computerTotalArea(Geometry **t, int n)
{
    int i;
    double s=0;
    for(i=0;i<n;i++)
        if(s<t[i]->getArea())
            s=t[i]->getArea();
    cout<<"最大面积="<<fixed<<setprecision(2)<<s<<endl;
}
int main()
{
    int t,i;
    cin>>t;
    Geometry **p;
    p =new Geometry *[t];

    for(i=0;i<t;i++)
    {
        int num;
        cin>>num;
        if(num==1)
        {
            double x,y;
            cin>>x>>y;
            p[i] = new Rect(x,y);
        }
        else if(num==2)
        {
            double r;
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea q;
    q.computerTotalArea(p,t);
    return 0;
}
------------------------------------------------------
2018192009:Problem1120:正确
#include <iostream>

using namespace std;
class animal
{
protected:
    int age;
    string name;
    int weight;
public:
    animal(){}
    animal(int a,string n):age(a),name(n){}
    virtual void speak()=0;
};
class tiger:public animal
{
public:
    tiger(string n,int a):animal(a,n){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class pig:public animal
{
public:
    pig(string n,int a):animal(a,n){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class duck:public animal
{
public:
    duck(string n,int a):animal(a,n){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class dog:public animal
{
public:
    dog(string n,int a):animal(a,n){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    animal *p;
    string name,anim;
    int age;
    while(t--)
    {
        cin>>anim;
        cin>>name;
        cin>>age;
        if(anim=="Tiger")
        {
            tiger a(name,age);
            p=&a;
            p->speak();
        }
        else if(anim=="Pig")
        {
            pig a(name,age);
            p=&a;
            p->speak();
        }
        else if(anim=="Dog")
        {
            dog a(name,age);
            p=&a;
            p->speak();
        }
        else if(anim=="Duck")
        {
            duck a(name,age);
            p=&a;
            p->speak();
        }
        else
            cout<<"There is no "<<anim<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018192025:Problem1120:正确
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
    int age;
    string name;
public:
    Animal(string no, int pAge):name(no),age(pAge) {};
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
    Tiger(string no, int pAge):Animal(no,pAge) {};
    virtual void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class Dog:public Animal
{
public:
    Dog(string no, int pAge):Animal(no,pAge) {};
    virtual void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class Duck:public Animal
{
public:
    Duck(string no, int pAge):Animal(no,pAge) {};
    virtual void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

class Pig:public Animal
{
public:
    Pig(string no, int pAge):Animal(no,pAge) {};
    virtual void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Animal *p;
        string pName,no;
        int pAge;
        cin>>pName>>no>>pAge;
        if(pName=="Tiger")
        {
            Tiger ss(no,pAge);
            p=&ss;
            p->Speak();
        }
        else if(pName=="Dog")
        {
            Dog ss(no,pAge);
            p=&ss;
            p->Speak();
        }
        else if(pName=="Duck")
        {
            Duck ss(no,pAge);
            p=&ss;
            p->Speak();
        }
        else if(pName=="Pig")
        {
            Pig ss(no,pAge);
            p=&ss;
            p->Speak();
        }
        else
            cout<<"There is no "<<pName<<" in our Zoo."<<endl;
    }
}

------------------------------------------------------
2018152108:Problem1120:答案错误
#include<iostream>
using namespace std;

class Animal
{
protected:
	string name;
	int age;
	double weight;
public:
	Animal(string n,int a)
	{
		name = n;
		age = a;
		weight = 0;
	}
	virtual void speak()
	{
	}
};

class tiger:public Animal
{
public:
	tiger(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"AOOO"<<endl;
	}
};

class dog:public Animal
{
public:
	dog(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"WangWang"<<endl;
	}
};

class duck:public Animal
{
public:
	duck(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"GAGA"<<endl;
	}
};

class pig:public Animal
{
public:
	pig(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"HENGHENG"<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		string type,name;
		int age;
		Animal *p;
		cin>>type>>name>>age;
		if(type=="Tiger")
		{
			tiger a(name,age);
			p = &a;
			p->speak();
		}
		else if(type=="Dog")
		{
			dog a(name,age);
			p = &a;
			p->speak();
		}
		else if(type=="Duck")
		{
			duck a(name,age);
			p = &a;
			p->speak();
		}
		else if(type=="Pig")
		{
			pig a(name,age);
			p = &a;
			p->speak();
		}
		else
		{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018152029:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;

class Vehicle
{
protected:
    string no;//编号

public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用

};

class Car:public Vehicle
{
protected:
    int num;
    int weight;
public:
    Car(string n,int nu,int we):Vehicle(n),num(nu),weight(we){}
    void display()
    {
        cout<<no<<' ';
        cout<<num*8+weight*2<<endl;
    }

};

class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w){}
    void display()
    {
        cout<<no<<' ';
        cout<<weight*5<<endl;
    }
};

class Bus:public Vehicle
{
protected:
    int num;
public:
    Bus(string n,int nu):Vehicle(n),num(nu){}
    void display()
    {
        cout<<no<<' ';
        cout<<num*3<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    Vehicle *pv;
    int num,weight;
    string no;
    while(t--)
    {
        char judge;
        cin>>judge;
        switch(judge)
        {
            case '1':
            {
                cin>>no>>num>>weight;
                Car a(no,num,weight);
                pv=&a;
                pv->display();
                break;
            }
            case '2':
            {
                cin>>no>>weight;
                Truck a(no,weight);
                pv=&a;
                pv->display();
                break;
            }
            case '3':
            {
                cin>>no>>num;
                Bus a(no,num);
                pv=&a;
                pv->display();
                break;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2018152100:Problem1120:正确
#include <iostream>
#include <string>
using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()=0;
};

class Tiger:virtual public Animal
{
    string type;
public:
    Tiger(string n,int a,string t="Tiger"):Animal(n,a),type(t){}
    void speak(){cout << "Hello,I am " << name << ",AOOO."<<endl;}
};

class Pig:virtual public Animal
{
    string type;
public:
    Pig(string n,int a,string t="Pig"):Animal(n,a),type(t){}
    void speak(){cout << "Hello,I am " << name << ",HENGHENG."<<endl;}
};

class Duck:virtual public Animal
{
    string type;
public:
    Duck(string n,int a,string t="Duck"):Animal(n,a),type(t){}
    void speak(){cout << "Hello,I am " << name << ",GAGA."<<endl;}
};

class Dog:virtual public Animal
{
    string type;
public:
    Dog(string n,int a,string t="Dog"):Animal(n,a),type(t){}
    void speak(){cout << "Hello,I am " << name << ",WangWang."<<endl;}
};

int main()
{
    int t,age;
    string n,type;
    cin >> t;
    Animal *pa;
    while (t--)
    {
        cin >> type;
        if (type=="Tiger")
        {
            cin >> n >> age;
            Tiger t(n,age);
            pa=&t;
            pa->speak();
        }

        else if (type=="Pig")
        {
            cin >> n >> age;
            Pig p(n,age);
            pa=&p;
            pa->speak();
        }

        else if (type=="Dog")
        {
            cin >> n >> age;
            Dog d(n,age);
            pa=&d;
            pa->speak();
        }

        else if (type=="Duck")
        {
            cin >> n >> age;
            Duck d(n,age);
            pa=&d;
            pa->speak();
        }
        else
        {
            cin >> n >> age;
            cout << "There is no "<< type << " in our Zoo." << endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018152108:Problem1120:正确
#include<iostream>
using namespace std;

class Animal
{
protected:
	string name;
	int age;
	double weight;
public:
	Animal(string n,int a)
	{
		name = n;
		age = a;
		weight = 0;
	}
	virtual void speak()
	{
	}
};

class tiger:public Animal
{
public:
	tiger(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
	}
};

class dog:public Animal
{
public:
	dog(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
	}
};

class duck:public Animal
{
public:
	duck(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
	}
};

class pig:public Animal
{
public:
	pig(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		string type,name;
		int age;
		Animal *p;
		cin>>type>>name>>age;
		if(type=="Tiger")
		{
			tiger a(name,age);
			p = &a;
			p->speak();
		}
		else if(type=="Dog")
		{
			dog a(name,age);
			p = &a;
			p->speak();
		}
		else if(type=="Duck")
		{
			duck a(name,age);
			p = &a;
			p->speak();
		}
		else if(type=="Pig")
		{
			pig a(name,age);
			p = &a;
			p->speak();
		}
		else
		{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018152106:Problem1120:答案错误
#include<iostream>
using namespace std;

class Animal
{
protected:
	string name;
	int age;
	int weight;
public:
	Animal(string n,int a):name(n),age(a){}
	virtual void speak()=0;
};

class Tiger:public Animal
{
public:
	Tiger(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};

class Pig:public Animal
{
public:
	Pig(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};

class Duck:public Animal
{
public:
	Duck(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};

int main()
{
	int t;
	Animal *p;
	cin>>t;
	while(t--)
	{
		string a,name;
		int age;
		cin>>a>>name>>age;
		if(a=="Tiger")
		{
			Tiger animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Pig")
		{
			Pig animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Duck")
		{
			Duck animal(name,age);
			p=&animal;
			p->speak();
		}
		else
		{
			cout<<"There is no "<<a<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2017047011:Problem1120:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Animal
{ 
protected:
	string kind;
	string name;
	int age;
public:
	Animal(){}
	virtual void speak()=0;
};
//------------------------
class tiger:public Animal
{
public:
	tiger(string n,int a);
	void speak();	
};

tiger::tiger(string n,int a){
	name=n;age=a;
}

void tiger::speak(){
	cout<<"Hello,I am "<<name<<",AOOO."<<endl; 
}
//------------------------
class dog:public Animal
{
public:
	dog(string n,int a);
	void speak();	
};

dog::dog(string n,int a){
	name=n;age=a;
}

void dog::speak(){
	cout<<"Hello,I am "<<name<<",WangWang."<<endl; 
}
//------------------------
class duck:public Animal
{
public:
	duck(string n,int a);
	void speak();	
};

duck::duck(string n,int a){
	name=n;age=a;
}

void duck::speak(){
	cout<<"Hello,I am "<<name<<",GAGA."<<endl; 
}
//------------------------
class pig:public Animal
{
public:
	pig(string n,int a);
	void speak();	
};

pig::pig(string n,int a){
	name=n;age=a;
}

void pig::speak(){
	cout<<"Hello,I am "<<name<<",HENGHENG."<<endl; 
}
//------------------------

int main()
{
	int t;
	string kind,name;
	int age;
	Animal *p;
	
	cin>>t;
	while(t--)
	{
		cin>>kind>>name>>age;
		
		if(kind=="Tiger"){
			tiger tiger1(name,age);
			p=&tiger1;
			p->speak();
		}
		
		else if(kind=="Duck"){
			duck duck1(name,age);
			p=&duck1;
			p->speak();
		}
		
		else if(kind=="Dog"){
			dog dog1(name,age);
			p=&dog1;
			p->speak();
		}
		
		else if(kind=="Pig"){
			pig pig1(name,age);
			p=&pig1;
			p->speak();
		}
		
		else 
			cout<<"There is no "<<kind<<" in our Zoo."<<endl;
	}
	
}
------------------------------------------------------
2018152062:Problem1120:答案错误
#include <iostream>
using namespace std;
/*某个动物园内，有老虎、狗、鸭子和猪等动物，动物园的管理员为每个动物都起了一个名字，
并且每个动物都有年龄、体重等信息。每到喂食的时候，不同的动物都会叫唤(speak)。
每种动物的叫唤声均不同，老虎的叫唤声是“AOOO”，狗的叫唤声是“WangWang”，
鸭子的叫唤声是“GAGA”，猪的叫唤声是“HENGHENG”。
定义一个Animal的基类，Animal类有函数Speak()，并派生老虎、狗、鸭子和猪类，
其能发出不同的叫唤声（用文本信息输出叫声）。
编写程序，输入动物名称、名字、年龄，让动物园内的各种动物叫唤。
要求：只使用一个基类指针，指向生成的对象并调用方法。*/
class Animal
{
protected:
    string type;
public:
    Animal(string _type):type(_type){}
    virtual void speak(){};
};
class Tiger:public Animal
{
protected:
    string name;
    int age;
public:
    Tiger(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
    }
};
class Dog:public Animal
{
protected:
    string name;
    int age;
public:
    Dog(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
    }
};
class Duck:public Animal
{
protected:
    string name;
    int age;
public:
    Duck(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
    }
};
class Pig:public Animal
{
protected:
    string name;
    int age;
public:
    Pig(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Animal *p;
        string type;
        string name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger tiger(type,name,age);
            p=&tiger;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck duck(type,name,age);
            p=&duck;
            p->speak();
        }
        else if(type=="Dog")
        {
            Dog dog(type,name,age);
            p=&dog;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig pig(type,name,age);
            p=&pig;
            p->speak();
        }
        else
            cout<<"There is no "<<name<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018192045:Problem1232:正确
#include<iostream>
using namespace std;
#include<cstring>
class Vehicle
{
protected:
    string no;//编号

public:
    Vehicle(string no1):no(no1) {}
    Vehicle() {}
    virtual void display()=0;//应收费用

};
class Car:public Vehicle
{
    int number,weight;
public:
    Car(string no1,int n,int w):Vehicle(no1),number(n),weight(w) {}
    void display()
    {
        cout<<no<<' ';
        cout<<number*8+weight*2<<endl;
    }

};
class Truck:public Vehicle
{
    int weight;
public:
    Truck(string no1,int w):Vehicle(no1),weight(w) {}
    void display()
    {
        cout<<no<<' ';
        cout<<weight*5<<endl;
    }

};
class Bus:public Vehicle
{
    int number;
public:
    Bus(string no1,int n):Vehicle(no1),number(n) {}
    void display()
    {
        cout<<no<<' ';
        cout<<number*3<<endl;
    }
};
int main()
{
    char type;
    string no;
    int t,number,weight;
    cin>>t;
    Vehicle *p;
    while(t--)
    {
        cin>>type>>no;
        if(type=='1')
        {
            cin>>number>>weight;
            Car A(no,number,weight);
            p=&A;
            p->display();
        }
        if(type=='2')
        {
            cin>>weight;
            Truck A(no,weight);
            p=&A;
            p->display();
        }
        if(type=='3')
        {
            cin>>number;
            Bus A(no,number);
            p=&A;
            p->display();
        }
    }
}

------------------------------------------------------
2018152035:Problem1120:正确
#include <iostream>
#include<stdio.h>
#include<string>
using namespace std;
class animal
{
protected:
    int age;
    string name;
public:
    animal(string n,int a):name(n),age(a) {}
    virtual void speak()=0;
};
class tiger:public animal
{
public:
    tiger(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class dog:public animal
{
public:
    dog(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public animal
{
public:
    Duck(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public animal
{
public:
    Pig(string n,int a):animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int T,a;
    string n,type;
    cin>>T;
    while(T--)
    {
        animal *p;
        cin>>type>>n>>a;
        if(type=="Tiger")
        {
            tiger t(n,a);
            p=&t;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig pp(n,a);
            p=&pp;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck d(n,a);
            p=&d;
            p->speak();
        }
        else if(type=="Dog")
        {
            dog dg(n,a);
            p=&dg;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2018152087:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(string s):no(s){
	}
	virtual void display()=0;
};
class Car:public Vehicle
{
	int weight;
	int num;
public:
	Car(string s,int w,int n):Vehicle(s)
	{
		weight=w;
		num=n;
	}
	virtual void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};
class Truck:public Vehicle
{
	int weight;
public:
	Truck(string s,int w):Vehicle(s)
	{
		//no=s;
		weight=w;
	}
	virtual void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};
class Bus:public Vehicle
{
	int num;
public:
	Bus(string s,int n):Vehicle(s)
	{
		//no=s;
		num=n;
	}
	virtual void display()
	{
		cout<<no<<" "<<num*3<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{	
		int flag;
		cin>>flag;
		if(flag==1)
		{
			string name;
			int num;
			int weight;
			cin>>name>>num>>weight;
			Car ex(name,weight,num);
			Vehicle *pv=&ex;
			pv->display();
		}
		else if(flag==2)
		{
			string name;
			int weight;
			cin>>name>>weight;
			Truck ex(name,weight);
			Vehicle *pv=&ex;
			pv->display();
		}
		else if(flag==3)
		{
			string name;
			int num;
			cin>>name>>num;
			Bus ex(name,num);
			Vehicle *pv=&ex;
			pv->display();
		}
		//pv->display();
	}
}
------------------------------------------------------
2016154114:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;

class Animal
{
protected:
    string name;
	int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};

int main()
{
    int i;
    cin>>i;
    while(i--)
    {
		Animal *zoo;
		string name,type;
		int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
		{
			Tiger t(name,age);
			zoo=&t;
			zoo->Speak();
		}
		else if(type=="Dog")
        {
			Dog dg(name,age);
			zoo=&dg;
			zoo->Speak();
        }
		else if(type=="Duck")
        {
			Duck dk(name,age);
			zoo=&dk;
			zoo->Speak();
        }
		else if(type=="Pig")
		{
			Pig p(name,age);
			zoo=&p;
			zoo->Speak();
		}
		else
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
	return 0;
}
------------------------------------------------------
2018152062:Problem1120:正确
#include <iostream>
using namespace std;
/*某个动物园内，有老虎、狗、鸭子和猪等动物，动物园的管理员为每个动物都起了一个名字，
并且每个动物都有年龄、体重等信息。每到喂食的时候，不同的动物都会叫唤(speak)。
每种动物的叫唤声均不同，老虎的叫唤声是“AOOO”，狗的叫唤声是“WangWang”，
鸭子的叫唤声是“GAGA”，猪的叫唤声是“HENGHENG”。
定义一个Animal的基类，Animal类有函数Speak()，并派生老虎、狗、鸭子和猪类，
其能发出不同的叫唤声（用文本信息输出叫声）。
编写程序，输入动物名称、名字、年龄，让动物园内的各种动物叫唤。
要求：只使用一个基类指针，指向生成的对象并调用方法。*/
class Animal
{
protected:
    string type;
public:
    Animal(string _type):type(_type){}
    virtual void speak(){};
};
class Tiger:public Animal
{
protected:
    string name;
    int age;
public:
    Tiger(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
    }
};
class Dog:public Animal
{
protected:
    string name;
    int age;
public:
    Dog(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
    }
};
class Duck:public Animal
{
protected:
    string name;
    int age;
public:
    Duck(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
    }
};
class Pig:public Animal
{
protected:
    string name;
    int age;
public:
    Pig(string _type,string _name,int _age):Animal(_type),name(_name),age(_age){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Animal *p;
        string type;
        string name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger tiger(type,name,age);
            p=&tiger;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck duck(type,name,age);
            p=&duck;
            p->speak();
        }
        else if(type=="Dog")
        {
            Dog dog(type,name,age);
            p=&dog;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig pig(type,name,age);
            p=&pig;
            p->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018192040:Problem1120:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Animal{ 
protected:
	string name;
	int age;
public:
	Animal(){
	};
	Animal(string n,int a):name(n),age(a){
	};
	virtual void speak()=0;

};

class Tiger:public Animal{
public:
	Tiger(string n,int a):Animal(n,a){
	};
	Tiger(){
	};
	void speak(){
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};

class Pig:public Animal{
public:
	Pig(string n,int a):Animal(n,a){
	};
	Pig(){
	};
	void speak(){
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};


class Duck:public Animal{
public:
	Duck(string n,int a):Animal(n,a){
	};
	Duck(){
	};
	void speak(){
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};

class Dog:public Animal{
public:
	Dog(string n,int a):Animal(n,a){
	};
	Dog(){
	};
	void speak(){
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};


int main(){
	int n;
	cin>>n;
	Animal *p0;
	while(n--){
		string type,name;
		int age;
		cin>>type>>name>>age;
		if(type == "Tiger"){
			Tiger tiger(name,age);
			Tiger *p1 = &tiger;
			p0 = p1;
			p0->speak();
		}
		else if(type == "Dog"){
			Dog dog(name,age);
			Dog *p1 = &dog;
			p0 = p1;
			p0->speak();
		}
		else if(type == "Duck"){
			Duck duck(name,age);
			Duck *p1 = &duck;
			p0 = p1;
			p0->speak();
		}
		else if(type == "Pig"){
			Pig pig(name,age);
			Pig *p1 = &pig;
			p0 = p1;
			p0->speak();
		}
		else{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
		}
	}
}
------------------------------------------------------
2017133026:Problem1119:正确
#include <iostream>

using namespace std;
class BaseAccount{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(string n,string a,int b){
        name=n;
        account=a;
        balance=b;
    }
    void deposit(int v){
        balance+=v;
    }
    virtual void withdraw(int v){
        if(balance<v){
            cout<<"insufficient"<<endl;
            return;
        }
        balance-=v;
    }
    virtual void display(){
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
    }

};
class BasePlus:public BaseAccount{
    int limit;
    int limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b){
        limit=5000;
        limit_sum=0;
    }
    void withdraw(int v){
        if(v>limit+balance){
            cout<<"insufficient"<<endl;
        }else{
            if(balance>=v){
                balance-=v;
            }else{
                limit-=(v-balance);
                limit_sum+=(v-balance);
                balance=0;
            }
        }
    }

    void display(){
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    string name,acc;
    int balance;
    BaseAccount *ba;
    int value;
    while(t--){
        cin>>name>>acc>>balance;
        if(acc[1]=='A'){
            BaseAccount ba1(name,acc,balance);
            ba=&ba1;
            cin>>value;
            ba->deposit(value);
            cin>>value;
            ba->withdraw(value);
            cin>>value;
            ba->deposit(value);
            cin>>value;
            ba->withdraw(value);
            ba->display();
        }else if(acc[1]=='P'){
            BasePlus bp(name,acc,balance);
            ba=&bp;
            cin>>value;
            ba->deposit(value);
            cin>>value;
            ba->withdraw(value);
            cin>>value;
            ba->deposit(value);
            cin>>value;
            ba->withdraw(value);
            ba->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018152106:Problem1120:答案错误
#include<iostream>
using namespace std;

class Animal
{
protected:
	string name;
	int age;
	int weight;
public:
	Animal(string n,int a):name(n),age(a){}
	virtual void speak()=0;
};

class Tiger:public Animal
{
public:
	Tiger(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};

class Pig:public Animal
{
public:
	Pig(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};

class Dog:public Animal
{
public:
	Dog(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",WANGWANG."<<endl;
	}
};

class Duck:public Animal
{
public:
	Duck(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};

int main()
{
	int t;
	Animal *p;
	cin>>t;
	while(t--)
	{
		string a,name;
		int age;
		cin>>a>>name>>age;
		if(a=="Tiger")
		{
			Tiger animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Pig")
		{
			Pig animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Duck")
		{
			Duck animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Dog")
		{
			Dog animal(name,age);
			p=&animal;
			p->speak();
		}
		else
		{
			cout<<"There is no "<<a<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018152010:Problem1120:正确
#include<iostream>

using namespace std;
class Animal
{
protected:
    string type,name;
    int age;
public:
    Animal(string t,string n,int a):type(t),name(n),age(a){}
    virtual void display()=0;
};

class Dog:public Animal
{
public:
    Dog(string type,string name,int age):Animal(type,name,age){}
    void display()
    {
        cout<<"Hello,I am "<<name<<','<<"WangWang."<<endl;
        //Hello,I am Jumpjump,AOOO.
    }
};

class Tiger:public Animal
{
public:
    Tiger(string type,string name,int age):Animal(type,name,age){}
    void display()
    {
        cout<<"Hello,I am "<<name<<','<<"AOOO."<<endl;

    }
};

class Pig:public Animal
{
public:
    Pig(string type,string name,int age):Animal(type,name,age){}
    void display()
    {
        cout<<"Hello,I am "<<name<<','<<"HENGHENG."<<endl;
        //Hello,I am Jumpjump,AOOO.
    }
};

class Duck:public Animal
{
public:
    Duck(string type,string name,int age):Animal(type,name,age){}
    void display()
    {
        cout<<"Hello,I am "<<name<<','<<"GAGA."<<endl;
        //Hello,I am Jumpjump,AOOO.
    }
};

int main()
{
    string name,type;
    int t,age;
    Animal *pv;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Dog")
        {
           Dog dog(type,name,age);
           pv=&dog;
           pv->display();
        }
        else if(type=="Pig")
        {
            Pig pig(type,name,age);
            pv=&pig;
            pv->display();
        }
        else if(type=="Tiger")
        {
            Tiger tiger(type,name,age);
            pv=&tiger;
            pv->display();
        }
        else if(type=="Duck")
        {
            Duck duck(type,name,age);
            pv=&duck;
            pv->display();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }


}

------------------------------------------------------
2018152106:Problem1120:正确
#include<iostream>
using namespace std;

class Animal
{
protected:
	string name;
	int age;
	int weight;
public:
	Animal(string n,int a):name(n),age(a){}
	virtual void speak()=0;
};

class Tiger:public Animal
{
public:
	Tiger(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};

class Pig:public Animal
{
public:
	Pig(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};

class Dog:public Animal
{
public:
	Dog(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};

class Duck:public Animal
{
public:
	Duck(string n,int a):Animal(n,a){}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};

int main()
{
	int t;
	Animal *p;
	cin>>t;
	while(t--)
	{
		string a,name;
		int age;
		cin>>a>>name>>age;
		if(a=="Tiger")
		{
			Tiger animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Pig")
		{
			Pig animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Duck")
		{
			Duck animal(name,age);
			p=&animal;
			p->speak();
		}
		else if(a=="Dog")
		{
			Dog animal(name,age);
			p=&animal;
			p->speak();
		}
		else
		{
			cout<<"There is no "<<a<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2016073026:Problem1232:答案错误
#include <iostream>

using namespace std;

class Vehicle{
protected:
    string no;
public:
    //Vehicle(string n):no(n){}
    virtual void display()=0;
};

class Car:public Vehicle{
    int seat_num;
    int weight;
public:
    Car(string n,int sn,int w):seat_num(sn),weight(w){no=n;}
    virtual void display(){cout<<no<<" "<<8*seat_num+weight*2<<endl;}
};

class Truck:public Vehicle{
    int weight;
public:
    Truck(string n,int w):weight(w){no=n;}
    virtual void display(){cout<<no<<" "<<weight+5<<endl;}
};

class Bus:public Vehicle{
    int seat_num;
public:
    Bus(string n,int sn):seat_num(sn){no=n;}
    virtual void display(){cout<<no<<" "<<seat_num*3<<endl;}
};

int main()
{
    Vehicle *pv;
    int t;
    cin>>t;
    while(t--){
        int type;
        string no;
        int seat_num,weight;
        cin>>type;
        switch(type){
            case 1:{
                cin>>no>>seat_num>>weight;
                pv=new Car(no,seat_num,weight);
                pv->display();
            }break;
            case 2:{
                cin>>no>>weight;
                pv=new Truck(no,weight);
                pv->display();
            }break;
            case 3:{
                cin>>no>>seat_num;
                pv=new Bus(no,seat_num);
                pv->display();
            }
        }
    }
    return 0;
}

------------------------------------------------------
2018192044:Problem1119:正确
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int a)
    {
        balance+=a;
    }
    virtual void withdraw(int a)
    {
        if(a>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=a;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b),limit(5000),limit_sum(0){}
    void withdraw(int a)
    {
        if(a>(balance+limit-limit_sum))
            cout<<"insufficient"<<endl;
        else
        {
            balance-=a;
            if(balance<0)
            {
                limit_sum+=(-balance);
                balance=0;
            }
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int t,balance,a;
    string name,account;
    cin>>t;
    BaseAccount *p;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccount A(name,account,balance);
            p=&A;
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            p->display();
        }
        else
        {
            BasePlus A(name,account,balance);
            p=&A;
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018151066:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class  Animal
{
protected:
public:
    virtual void speak()=0;
};
class Tiger:public Animal
{
protected:
    int age;
    string name;
public:
    Tiger(int a,string n):age(a),name(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class Pig:public Animal
{
protected:
    int age;
    string name;
public:
    Pig(int a,string n):age(a),name(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};

class Duck:public Animal
{
protected:
    int age;
    string name;
public:
    Duck(int a,string n):age(a),name(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

class Dog:public Animal
{
protected:
    int age;
    string name;
public:
    Dog(int a,string n):age(a),name(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
int main()
{
    int t;
    Animal *pv;
    cin>>t;
    while(t--)
    {
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger tiger(age,name);
            pv=&tiger;
            pv->speak();
        }
        else if(type=="Dog")
        {
            Dog dog(age,name);
            pv=&dog;
            pv->speak();
        }
        else if(type=="Duck")
        {
            Duck duck(age,name);
            pv=&duck;
            pv->speak();
        }
        else if(type=="Pig")
        {
            Pig pig(age,name);
            pv=&pig;
            pv->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
}

------------------------------------------------------
2017182013:Problem1232:正确
#include <bits/stdc++.h>

using namespace std;

class Vehicle
{
protected:
    string no;
public:
    Vehicle(string n=""):no(n){}
    virtual void display()=0;
};
class Car:public Vehicle
{
protected:
    int people;
    int weight;
public:
    Car(string n,int p,int w):Vehicle(n),people(p),weight(w){}
    void display()
    {
        cout<<no<<" "<<people*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w)
    {

    }
    void display()
    {
        cout<<no<<" "<<weight *5<<endl;
    }
};
class Bus:public Vehicle
{
    int people;
public :
    Bus(string n,int p):Vehicle(n),people(p)
    {

    }
    void display()
    {
        cout<<no<<" "<<people*3<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\c\\s.txt",stdin,"r");
    int n;
    cin>>n;
    while(n--)
    {
        Vehicle *pv;
        int type;
        cin>>type;
        string no;
        int p,w;
        if(type == 1)
        {
            cin>>no>>p>>w;
            Car c(no,p,w);
            pv = &c;
            pv->display();
        }
        else if(type == 2)
        {
            cin>>no>>w;
            Truck t(no,w);
            pv = &t;
            pv->display();
        }
        else if(type == 3)
        {
            cin>>no>>p;
            Bus b(no,p);
            pv = &b;
            pv->display();
        }

    }
    return 0;
}

------------------------------------------------------
2016073026:Problem1232:正确
#include <iostream>

using namespace std;

class Vehicle{
protected:
    string no;
public:
    //Vehicle(string n):no(n){}
    virtual void display()=0;
};

class Car:public Vehicle{
    int seat_num;
    int weight;
public:
    Car(string n,int sn,int w):seat_num(sn),weight(w){no=n;}
    virtual void display(){cout<<no<<" "<<8*seat_num+weight*2<<endl;}
};

class Truck:public Vehicle{
    int weight;
public:
    Truck(string n,int w):weight(w){no=n;}
    virtual void display(){cout<<no<<" "<<weight*5<<endl;}
};

class Bus:public Vehicle{
    int seat_num;
public:
    Bus(string n,int sn):seat_num(sn){no=n;}
    virtual void display(){cout<<no<<" "<<seat_num*3<<endl;}
};

int main()
{
    Vehicle *pv;
    int t;
    cin>>t;
    while(t--){
        int type;
        string no;
        int seat_num,weight;
        cin>>type;
        switch(type){
            case 1:{
                cin>>no>>seat_num>>weight;
                pv=new Car(no,seat_num,weight);
                pv->display();
            }break;
            case 2:{
                cin>>no>>weight;
                pv=new Truck(no,weight);
                pv->display();
            }break;
            case 3:{
                cin>>no>>seat_num;
                pv=new Bus(no,seat_num);
                pv->display();
            }
        }
    }
    return 0;
}

------------------------------------------------------
2018151020:Problem1120:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string na,int ag):name(na),age(ag){}
    virtual void Speak()=0;
};
class Tiger:public Animal
{
protected:

public:
    Tiger(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
    }
};
class Dog:public Animal
{
protected:

public:
    Dog(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
    }
};
class Duck:public Animal
{
protected:

public:
    Duck(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
    }
};
class Pig:public Animal
{
protected:

public:
    Pig(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string type,na;
    int ag;
    while(t--)
    {
        Animal *K;
        cin>>type>>na>>ag;
        if(type=="Tiger")
        {
            Tiger *T = new Tiger(na,ag);
            K = T;
        }
        else if(type=="Dog")
        {
            Dog *Do = new Dog(na,ag);
            K = Do;
        }
        else if(type == "Pig")
        {
            Pig *P = new Pig(na,ag);
            K = P;
        }
        else if(type=="Duck")
        {
            Duck *Du = new Duck(na,ag);
            K = Du;
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
            K = NULL;
        }
        if(K)
            K->Speak();
    }
    return 0;
}

------------------------------------------------------
2018192037:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;

class Vehicle{
protected:
    string no;//编号
public:
    Vehicle(){}
    virtual void display()=0;//应收费用
};

class Car:public Vehicle
{
protected:
    int zk,zl;
public:
    Car(string n,int k,int l):zk(k),zl(l){no = n;}
    void display()
    {
        cout<<no<<" "
        <<zk*8+zl*2<<endl;
    }
};

class Truck:public Vehicle
{
protected:

    int zl;
public:
    Truck(string n,int l):zl(l){no = n;}
    void display()
    {
        cout<<no<<" "
        <<zl*5<<endl;
    }
};

class Bus:public Vehicle
{
protected:
    int zk;
public:
    Bus(string n,int l):zk(l){no = n;}
    void display()
    {
        cout<<no<<" "
        <<zk*3<<endl;
    }

};


int main()
{
    Vehicle *pv;
    int n;
    cin>>n;
    while(n--)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            string no;
            cin>>no;
            int zk,zl;
            cin>>zk>>zl;
            Car car(no,zk,zl);
            car.display();
        }
        else if(type==2)
        {
            string no;
            cin>>no;
            int zk,zl;
            cin>>zl;
            Truck turck(no,zl);
            turck.display();
        }
        else if(type==3)
        {
            string no;
            cin>>no;
            int zk,zl;
            cin>>zk;
            Bus bus(no,zk);
            bus.display();
        }
    }
}

------------------------------------------------------
2018151044:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{ 
protected:
	string no;//±ào?
public:
	Vehicle(string no):no(no) {}
	virtual void display()=0;//ó|ê?・?ó?
};
class Car:public Vehicle
{
	int p,w;
public:
	Car(string no,int p,int w):Vehicle(no),p(p),w(w) {}
	virtual void display()
	{
		cout<<no<<' '<<p*8+w*2<<endl;
	}
};
class Truck:public Vehicle
{
	int w;
public:
	Truck(string no,int w):Vehicle(no),w(w) {}
	virtual void display()
	{
		cout<<no<<" "<<w*5<<endl;
	}
};
class Bus:public Vehicle
{
	int p;
public:
	Bus(string no,int p):Vehicle(no),p(p) {}
	virtual void display()
	{
		cout<<no<<" "<<p*3<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Vehicle *pv;
	int type,a,b;
	string no;
	while(t--)
	{
		cin>>type>>no>>a;
		if(type==1)
		{
			cin>>b;
			pv=new Car(no,a,b);
		}
		else if(type==2)
		{
			pv=new Truck(no,a);
		}
		else 
		{
			pv=new Bus(no,a);
		} 
		pv->display();
		delete pv;
	}
}
------------------------------------------------------
2018152102:Problem1120:答案错误
#include <iostream>

using namespace std;

class Animal {
protected:
    int year;
    int weight;
    string name;
public:
    virtual void speak() = 0;
    Animal(int ye,string na):year(ye),name(na) {}
};

class Tiger:public Animal {
public:
    Tiger(int ye,string na):Animal(ye,na) {}
    void speak() {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Pig:public Animal {
public:
    Pig(int ye,string na):Animal(ye,na) {}
    void speak() {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Duck :public Animal {
public:
    Duck(int ye,string na):Animal(ye,na) {}
    void speak() {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
int main() {
    int t;

    cin>>t;
    while(t--) {
        string kind;
        string name;
        int year;
        cin>>kind;
        cin>>name>>year;
        if(kind == "Tiger") {
            Tiger ti(year,name);
            ti.speak();
        }else if(kind == "Pig") {
            Pig pi(year,name);
            pi.speak();
        }else if(kind == "Duck") {
            Duck du(year,name);
            du.speak();
        }else {
            cout<<"There is no "<<kind<<" in our Zoo."<<endl;
        }

    }

    return 0;
}

------------------------------------------------------
2018041051:Problem1120:正确
#include<iostream>
#include<string>
#include<cstring>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){}
    Animal(string name1,int age1):name(name1),age(age1){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
    Tiger(){}
    Tiger(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class Pig:public Animal
{
public:
    Pig(){}
    Pig(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};

class Dog:public Animal
{
public:
    Dog(){}
    Dog(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class Duck:public Animal
{
public:
    Duck(){}
    Duck(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

int main()
{
    Animal *a;

    int t;
    cin>>t;
    while(t--)
    {
        int n;
        string type,name;
        cin>>type>>name>>n;
        if(type=="Tiger")
        {
            a=new Tiger(name,n);
            a->Speak();
        }
        else if(type=="Pig")
        {
            a=new Pig(name,n);
            a->Speak();
        }
        else if(type=="Duck")
        {
            a=new Duck(name,n);
            a->Speak();
        }
        else if(type=="Dog")
        {
            a=new Dog(name,n);
            a->Speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }

    }

    return 0;
}

------------------------------------------------------
2018192044:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){}
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak()=0;
    ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t,age;
    string name,type;
    cin>>t;
    Animal *p;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018192014:Problem1119:编译错误
#include<bits/stdc++.h>
using namespace std;
class BaseAccount{
protected:
	string name,account;
	double balance;
public:
	BaseAccount(string n,string a,double b):
		name(n),account(a),balance(b){
		}
	virtual void deposit(double b)
	{
		balance+=b;
	}
	virtual void withdraw(double b)
	{
		if(balance<b)
		{
			cout<<"insufficient"<<endl;
			return ;
		}
		else 
		{
			balance-=b;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};
class BasePlus:virtual public BaseAccount{
protected:
	double limit,limit_sum;
public:
	BasePlus(string n,string a,double b,double l=5000,double ls=0):
	BaseAccount(n,a,b),limit(l),limit_sum(ls){
		
	}
	void deposit(double b)
	{
		balance+=b;
	}
	void withdraw(double b)
	{
		double m=limit-limit_sum;
		if(balance+m<b)
		{
			cout<<"insufficient"<<endl;
			return ;
		}
		else 
		{
			if(balance<b)
			{
				m=b-balance;
				limit-=m;
				limit_sum+=m;
				balance=0;
			}
			else
			{
				balance-=b;
			}
		}
	}
	void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}	
};
int main ()
{
	BaseAccount *ba;
	int t;
	cin>>t;
	while(t--)
	{
		string n,a;
		double b;
		cin>>n>>a>>b;
		if(a[1]=='A')
		{
			ba=new BaseAccount(n,a,b);
			
		}
		else
		{
			ba=new BasePlus(n,a,b);
		}
		cin>>b;
		ba->deposit(b);
		cin>>b;
		ba->withdraw(b);
		cin>>b;
		ba->deposit(b);
		cin>>b;
		ba->withdraw(b);
		ba->display();
	}
	return 0;
}
------------------------------------------------------
2018151031:Problem1234:时间超限
#include <bits/stdc++.h>
using namespace std;
class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA :public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB :public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int i,maxnum=max(x,y),count=0,sum=0;
		for(i=0;maxnum;i++)
		{
			maxnum/=10;
		}
		count=i;
		for(i=0;i<count;i++)
		{
			int lastnum,a,b;
			a=x%10;
			b=y%10;
			if(a<b)
				a+=10;
			lastnum=(a-b)*(pow(10,i));
			sum+=lastnum;
			x/=10;
			y/=10;
		}
		return sum;
	}
};
class GroupC :public Group
{
public:
	int add(int x,int y)
	{
		int i,maxnum=max(x,y),count=0,sum=0;
		for(i=0;maxnum;i++)
		{
			maxnum/=10;
		}
		count=i;
		for(i=0;i<count;i++)
		{
			int lastnum,a,b;
			a=x%10;
			b=y%10;
			if(a+b>10)
				a-=10;
			lastnum=(a+b)*(pow(10,i));
			sum+=lastnum;
			x/=10;
			y/=10;
		}
		return sum;
	}
	int sub(int x,int y)
	{
		int i,maxnum=max(x,y),count=0,sum=0;
		for(i=0;maxnum;i++)
		{
			maxnum/10;
		}
		count=i;
		for(i=0;i<count;i++)
		{
			int lastnum,a,b;
			a=x%10;
			b=y%10;
			if(a<b)
				a+=10;
			lastnum=(a-b)*(pow(10,i));
			sum+=lastnum;
			x/=10;
			y/=10;
		}
		return sum;
	}	
};
int main() 
{
	Group *g;
	int t;
	cin>>t;
	while(t--)
	{
		int type,num1,num2;
		char ch;
		cin>>type;
		if(type==1)
		{
			cin>>num1>>ch>>num2;
			GroupA a;
			g=&a;
			if(ch=='+')
				cout<<g->add(num1,num2)<<endl;
			else
				cout<<g->sub(num1,num2)<<endl;
		}
		else if(type==2)
		{
			cin>>num1>>ch>>num2;
			GroupB b;
			g=&b;
			if(ch=='+')
				cout<<g->add(num1,num2)<<endl;
			else
				cout<<g->sub(num1,num2)<<endl;		
				
		}
		else if(type==3)
		{
			cin>>num1>>ch>>num2;
			GroupC c;
			g=&c;
			if(ch=='+')
				cout<<g->add(num1,num2)<<endl;
			else
				cout<<g->sub(num1,num2)<<endl;	
		}
	}
	return 0;
}
------------------------------------------------------
2018192026:Problem1120:正确
#include<stdio.h>
#include<string.h>
class Animal
{
protected:
	int age;
	char *name;
public:
	virtual void Speak()=0;
};
class Tiger:public Animal
{
public:
	Tiger(char *n,int a)
	{
		age=a;
		name=new char[10];
		strcpy(name,n);
	}
	void Speak()
	{
		printf("Hello,I am %s,AOOO.\n",name);
	}
};
class Dog:public Animal
{
public:
	Dog(char *n,int a)
	{
		age=a;
		name=new char[10];
		strcpy(name,n);
	}
	void Speak()
	{
		printf("Hello,I am %s,WangWang.\n",name);
	}
};
class Duck:public Animal
{
public:
	Duck(char *n,int a)
	{
		age=a;
		name=new char[10];
		strcpy(name,n);
	}
	void Speak()
	{
		printf("Hello,I am %s,GAGA.\n",name);
	}
};
class Pig:public Animal
{
public:
	Pig(char *n,int a)
	{
		age=a;
		name=new char[10];
		strcpy(name,n);
	}
	void Speak()
	{
		printf("Hello,I am %s,HENGHENG.\n",name);
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		getchar();
		char *kind=new char[10];
		char *name=new char[10];
		Animal *A;
		int age;
		scanf("%s %s %d",kind,name,&age);
		if(strcmp(kind,"Tiger")==0)
		{
			Tiger A1(name,age);
			A=&A1;
			A->Speak();
		}
		else if(strcmp(kind,"Pig")==0)
		{
			Pig A2(name,age);
			A=&A2;
			A->Speak();
		}
		else if(strcmp(kind,"Duck")==0)
		{
			Duck A3(name,age);
			A=&A3;
			A->Speak();
		}
		else if(strcmp(kind,"Dog")==0)
		{
			Dog A4(name,age);
			A=&A4;
			A->Speak();
		}
		else
			printf("There is no %s in our Zoo.\n",kind);
	}
	return 0;
}

		

------------------------------------------------------
2017152043:Problem1120:正确
#include<iostream>
#include<cstring>
using namespace std;

class Animal{
protected:
	int age;
	int weight;
	string name;
public:
	Animal(){}
	void getInfo(string nam,int ag)
	{
		name = nam;
		age = ag;
	}
	virtual void speak(){}
	~Animal(){}
};

class Tiger:public Animal{
public:
	Tiger(){}
	void speak()
	{
		cout << "Hello,I am " << name << ",AOOO." << endl;
	}
	~Tiger(){}
};

class Dog:public Animal{
public:
	Dog(){}
	void speak()
	{
		cout << "Hello,I am " << name << ",WangWang." << endl;
	}
	~Dog(){}
};

class Duck:public Animal{
public:
	Duck(){}
	void speak()
	{
		cout << "Hello,I am " << name << ",GAGA." << endl;
	}
	~Duck(){}
};

class Pig:public Animal{
public:
	Pig(){}
	void speak()
	{
		cout << "Hello,I am " << name << ",HENGHENG." << endl;
	}
	~Pig(){}
};

int main(){
	int t;
	cin >> t;
	Tiger tiger;
	Dog dog;
	Duck duck;
	Pig pig;
	Animal *pa;
	string type,nam;
	int ag;
	while(t--){
		cin >> type >> nam >> ag;
		if(type == "Tiger"){
			tiger.getInfo(nam,ag);
			pa = &tiger;
			pa->speak();
		}
		else if(type == "Dog"){
			dog.getInfo(nam,ag);
			pa = &dog;
			pa->speak();
		}
		else if(type == "Duck"){
			duck.getInfo(nam,ag);
			pa = &duck;
			pa->speak();
		}
		else if(type == "Pig"){
			pig.getInfo(nam,ag);
			pa = &pig;
			pa->speak();
		}
		else
			cout << "There is no " << type << " in our Zoo." << endl;
	}
	return 0;
}

------------------------------------------------------
2018192050:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;
class Animal{
    protected:
        string name;
    public:
        Animal(){
        }
        Animal(string m){
        	name=m;
        }
        ~Animal(){
        }
        virtual void speak()=0;
};
class Tiger:public Animal
{
    protected:
        string id;
        int year;
    public:
        Tiger(){
        }
        Tiger(string a,string b,int c){
            name=a;
            id=b;
            year=c;
        }
        ~Tiger(){
        }
        void speak(){
        	cout<<"Hello,I am "<<id<<",AOOO."<<endl;
		}  
};
class Dog:public Animal
{
    protected:
        string id;
        int year;
    public:
        Dog(){
        }
        Dog(string a,string b,int c){
            name=a;
            id=b;
            year=c;
        }
        ~Dog(){
        }
        void speak(){
        	cout<<"Hello,I am "<<id<<",WangWang."<<endl;
		}  
};
class Duck:public Animal
{
    protected:
        string id;
        int year;
    public:
        Duck(){
        }
        Duck(string a,string b,int c){
            name=a;
            id=b;
            year=c;
        }
        ~Duck(){
        }
        void speak(){
        	cout<<"Hello,I am "<<id<<",GAGA."<<endl;
		}  
};
class Pig:public Animal
{
    protected:
        string id;
        int year;
    public:
        Pig(){
        }
        Pig(string a,string b,int c){
            name=a;
            id=b;
            year=c;
        }
        ~Pig(){
        }
        void speak(){
        	cout<<"Hello,I am "<<id<<",HENGHENG."<<endl;
		}  
};
int main(){
	int t,n;
	string name,id;
	cin>>t;
	Animal *pv;
	while(t--)
	{
		cin>>name>>id>>n;;
		if(name=="Tiger")
		{
			Tiger a(name,id,n);
			pv=&a;
			pv->speak();
		}
		else if(name=="Duck")
		{
			Duck a(name,id,n);
			pv=&a;
			pv->speak();
		}
		else if(name=="Pig")
		{
			Pig a(name,id,n);
			pv=&a;
			pv->speak();
		}
		else if(name=="Dog")
		{
			Dog a(name,id,n);
			pv=&a;
			pv->speak();
		}
		else
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
	}
}
------------------------------------------------------
2018192024:Problem1120:正确
#include <iostream>

using namespace std;

class Animal
{
protected:
    string name;
public:
    Animal(){}
    Animal(string n):name(n){}
    virtual void speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string n):Animal(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n):Animal(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n):Animal(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n):Animal(n){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};



int main()
{
    int t;
    cin>>t;
    Animal *p_animal;
    while(t--)
    {
        string type,n;
        int age;
        cin>>type>>n>>age;
        if(type=="Tiger")
        {
            Tiger t(n);
            p_animal=&t;
            p_animal->speak();
        }
        else if(type=="Dog")
        {
            Dog d(n);
            p_animal=&d;
            p_animal->speak();
        }
        else if(type=="Duck")
        {
            Duck du(n);
            p_animal=&du;
            p_animal->speak();
        }
        else if(type=="Pig")
        {
            Pig p(n);
            p_animal=&p;
            p_animal->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018152008:Problem1234:正确
#include<iostream>
#include<cstring>
#include<iomanip>
#include<cstdlib>
using namespace std;
class Group
{
	public:
		virtual int add(int x,int y)=0;
		virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
	public:
		int add(int x,int y);
		int sub(int x,int y);
};
int GroupA::add(int x,int y)
{
	return x+y;
}
int GroupA::sub(int x,int y)
{
	return x-y;
}
class GroupB:public GroupA
{
	public:
		int sub(int x,int y);
};
int GroupB::sub(int x,int y)
{
	int z=1;
	int sum=0;
	while(x||y)
	{
		int a=x%10;
		int b=y%10;
		sum+=(a-b)*z;
		if(a<b)
			sum+=z*10;
		x/=10;
		y/=10;
		z*=10;
	}
	return sum;
}
class GroupC:public GroupB
{
	public:
		int add(int x,int y);
};
int GroupC::add(int x,int y)
{
	int z=1;
	int sum=0;
	while(x||y)
	{
		int a=x%10;
		int b=y%10;
		sum+=(a+b)*z;
		if(a+b>9)
			sum-=z*10;
		x/=10;
		y/=10;
		z*=10;
	}
	return sum;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Group *pll;
		int kind;
		cin>>kind;
		char suanshi[100];
		char num1[100];
		char yunsuanfu;
		char num2[100];
		cin>>suanshi;
		int k=strlen(suanshi);
		int i;
		int flag=0;
		int j=0;
		for(i=0;i<k;i++)
		{
			if(flag==0&&suanshi[i]<='9'&&suanshi[i]>='0')
			{
				num1[j]=suanshi[i];
				j++;
			}
			else if(suanshi[i]>'9'||suanshi[i]<'0')
			{
				flag=1;
				num1[j]='\0';
				yunsuanfu=suanshi[i];
				j=0;
			}
			else if(flag==1&&suanshi[i]<='9'&&suanshi[i]>='0')
			{
				num2[j]=suanshi[i];
				j++;
			}
		}
		num2[j]='\0';
		int nu1=atoi(num1);
		int nu2=atoi(num2);
		if(kind==1)
		{
			pll=new GroupA;
			if(yunsuanfu=='+')
				cout<<pll->add(nu1,nu2)<<endl;
			else
				cout<<pll->sub(nu1,nu2)<<endl;
		}
		else if(kind==2)
		{
			pll=new GroupB;
			if(yunsuanfu=='+')
				cout<<pll->add(nu1,nu2)<<endl;
			else
				cout<<pll->sub(nu1,nu2)<<endl;
		}
		else if(kind==3)
		{
			pll=new GroupC;
			if(yunsuanfu=='+')
				cout<<pll->add(nu1,nu2)<<endl;
			else
				cout<<pll->sub(nu1,nu2)<<endl;
		}
	}
	return 0;
}

------------------------------------------------------
2018192014:Problem1119:正确
#include<bits/stdc++.h>
using namespace std;
class BaseAccount{
protected:
	string name,account;
	double balance;
public:
	BaseAccount(string n,string a,double b):
		name(n),account(a),balance(b){
		}
	virtual void deposit(double b)
	{
		balance+=b;
	}
	virtual void withdraw(double b)
	{
		if(balance<b)
		{
			cout<<"insufficient"<<endl;
			return ;
		}
		else 
		{
			balance-=b;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};
class BasePlus:virtual public BaseAccount{
protected:
	double limit,limit_sum;
public:
	BasePlus(string n,string a,double b,double l=5000,double ls=0):
	BaseAccount(n,a,b),limit(l),limit_sum(ls){
		
	}
	virtual void deposit(double b)
	{
		balance+=b;
	}
	virtual void withdraw(double b)
	{
		double m=limit-limit_sum;
		if(balance+m<b)
		{
			cout<<"insufficient"<<endl;
			return ;
		}
		else 
		{
			if(balance<b)
			{
				m=b-balance;
				limit-=m;
				limit_sum+=m;
				balance=0;
			}
			else
			{
				balance-=b;
			}
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}	
};
int main ()
{
	BaseAccount *ba;
	int t;
	cin>>t;
	while(t--)
	{
		string n,a;
		double b;
		cin>>n>>a>>b;
		if(a[1]=='A')
		{
			ba=new BaseAccount(n,a,b);
			
		}
		else
		{
			ba=new BasePlus(n,a,b);
		}
		cin>>b;
		ba->deposit(b);
		cin>>b;
		ba->withdraw(b);
		cin>>b;
		ba->deposit(b);
		cin>>b;
		ba->withdraw(b);
		ba->display();
	}
	return 0;
}
------------------------------------------------------
2018151020:Problem1232:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string _no):no(_no){}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
protected:
    int weight,number;
public:
    Car(string _no,int we,int n):Vehicle(_no),weight(we),number(n)
    {
    }
    void display()
    {
        cout<<no<<" "<<number*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string _no,int we):Vehicle(_no),weight(we){}
    void display()
    {
         cout<<no<<" "<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int number;
public:
    Bus(string _no,int n):Vehicle(_no),number(n){}
    void display()
    {
         cout<<no<<" "<<number*3<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    int order;
    while(t--)
    {
        Vehicle *K;
        string _no;
        cin>>order;
        if(order==1)
        {
            int we,n;
            cin>>_no>>n>>we;
            Car *C = new Car(_no,we,n);
            K = C;
        }
        else if(order==2)
        {
            int we;
            cin>>_no>>we;
            Truck *T = new Truck(_no,we);
            K = T;
        }
        else if(order==3)
        {
            int n;
            cin>>_no>>n;
            Bus *B = new Bus(_no,n);
            K = B;
        }
        K->display();
    }
    return 0;
}

------------------------------------------------------
2018152026:Problem1232:正确
#include <bits/stdc++.h>

using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string _n){no=_n;}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
protected:
    int weight;
    int num;
public:
    Car(string _n,int _num,int w):Vehicle(_n)
    {
        num=_num;
        weight=w;
    }
    virtual void display()
    {
        int sum;
        sum=num*8+weight*2;
        cout<<no<<" "<<sum<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string _n,int w):Vehicle(_n)
    {
        weight=w;
    }
    virtual void display()
    {
        int sum;
        sum=weight*5;
        cout<<no<<" "<<sum<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int num;
public:
    Bus(string _n,int _num):Vehicle(_n)
    {
        num=_num;
    }
    virtual void display()
    {
        int sum;
        sum=num*3;
        cout<<no<<" "<<sum<<endl;
    }
};
void print(Vehicle *pv)
{
    pv->display();
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehicle *pv;
        int n;
        string _no;
        int _num,w;
        cin>>n;
        if(n==1)
        {
            cin>>_no>>_num>>w;
            Car a(_no,_num,w);
            pv=&a;
            print(pv);
        }
        if(n==2)
        {
            cin>>_no>>w;
            Truck b(_no,w);
            pv=&b;
            print(pv);
        }
        if(n==3)
        {
            cin>>_no>>_num;
            Bus c(_no,_num);
            pv=&c;
            print(pv);
        }
    }
    return 0;
}
------------------------------------------------------
2018152008:Problem1129:正确
#include<iostream>
#include<string>
using namespace std;
class card
{
	protected:
		string num;
		string id;
		float balance;
	public:
		card(string n,string i,float bal);
		int save(float money);
		int take(float money);
		void virtual info();
};
card::card(string n,string i,float bal)
{
	num=n;
	id=i;
	balance=bal;
}
int card::save(float money)
{
	if(money!=(int)money||money<=0)
		return -1;
	else
		balance+=money;
	return 1;
}
int card::take(float money)
{
	if(money!=(int)money||money<=0||money>balance)
		return -1;
	else
		balance-=money;
	return 1;
}
void card::info()
{
	cout<<num<<"-"<<id<<"-"<<balance<<endl;
}
class trcard:public card
{
	protected:
		float Tcounter;
	public:
		trcard(string n,string i,float bal,float tc);
		int zhuan(float money);
		void info();
};
int trcard::zhuan(float money)
{
	if(money!=(int)money||money<=0||money>balance)
		return -1;
	else
	{
		balance-=money;
		Tcounter+=money;
	}
	return 1;
}
trcard::trcard(string n,string i,float bal,float tc):card(n,i,bal)
{
	Tcounter=tc;
}
void trcard::info()
{
	cout<<num<<"-"<<id<<"-"<<balance<<"-"<<Tcounter<<endl;
}
class vipcard:public card
{
	protected:
		float credit;
	public:
		vipcard(string n,string i,float bal,float cr);
		int over(float money);
		void info();
};
void vipcard::info()
{
	cout<<num<<"-"<<id<<"-"<<balance<<"-"<<credit<<endl;
}
vipcard::vipcard(string n,string i,float bal,float cr):card(n,i,bal)
{
	credit=cr;
}
int vipcard::over(float money)
{
	if(money!=(int)money||money<=0||money>balance+credit)
		return -1;
	else
	{
		money-=balance;
		balance=0;
		credit-=money;
	}
	return 1;
}
int main()
{
	card * pol;
	string n1,n2,n3,i1,i2,i3;
	float bal1,bal2,bal3,tc,cr;
	cin>>n1>>i1>>bal1;
	cin>>n2>>i2>>bal2>>tc;
	cin>>n3>>i3>>bal3>>cr;
	card po1(n1,i1,bal1);
	trcard po2(n2,i2,bal2,tc);
	vipcard po3(n3,i3,bal3,cr);
	float m1,m2,m3,m4;
	cin>>m1>>m2>>m3>>m4;
	po1.save(m1);
	po1.save(m2);
	po1.take(m3);
	po1.take(m4);
	pol=&(po1);
	pol->info();
	cin>>m1>>m2>>m3>>m4;
	po2.save(m1);
	po2.take(m2);
	po2.zhuan(m3);
	po2.zhuan(m4);
	pol=&(po2);
	pol->info();
	cin>>m1>>m2>>m3>>m4;
	po3.save(m1);
	po3.take(m2);
	po3.over(m3);
	po3.over(m4);
	pol=&(po3);
	pol->info();
	return 0; 
}
------------------------------------------------------
2018152007:Problem1120:答案错误
#include <iostream>

using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class dog:public Animal
{
public:
    dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class pig:public Animal
{
public:
    pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        string t,n;
        int a;
        cin>>t>>n>>a;
        Animal *b;
        if(t=="Tiger")
        {
            Tiger *t1=new Tiger(n,a);
            b=t1;
            b->speak();
        }
        else if(t=="Pig")
        {
            pig *p1=new pig(n,a);
            b=p1;
            b->speak();
        }
        else if(t=="Dog")
        {
            dog *d1=new dog(n,a);
            b=d1;
            b->speak();
        }
        else if(t=="Duck")
        {
            Duck *k1=new Duck(n,a);
            b=k1;
            b->speak();
        }
        else
        {
            cout<<"There is no Rabbit in our Zoo."<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192010:Problem1120:正确
#include <iostream>

using namespace std;
class Animal
{
protected:
    int age;
    string name;
public:
    Animal(){}
    Animal(string n,int a):name(n),age(a){}
    ~Animal(){}
    virtual void speak(){};
};
class Tiger:public Animal
{
public:
    Tiger(){}
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout << "Hello,I am " << name << ",AOOO." << endl;
    }
};
class Pig:public Animal
{
public:
    Pig(){}
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout << "Hello,I am " << name << ",HENGHENG." << endl;
    }
};
class Dog:public Animal
{
public:
    Dog(){}
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout << "Hello,I am " << name << ",WangWang." << endl;
    }
};
class Duck:public Animal
{
public:
    Duck(){}
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout << "Hello,I am " << name << ",GAGA." << endl;
    }
};
int main()
{
    int t;
    string no,type;
    int age;
    cin >> t;
    while(t--)
    {
        Animal *pv;
        cin >> type;
        if(type=="Tiger")
        {
            cin >> no >> age;
            pv = new Tiger(no,age);
            pv->speak();
            delete pv;
        }
        else if(type=="Pig")
        {
            cin >> no >> age;
            pv = new Pig(no,age);
            pv->speak();
            delete pv;
        }
        else if(type=="Duck")
        {
            cin >> no >> age;
            pv = new Duck(no,age);
            pv->speak();
            delete pv;
        }
        else if(type=="Dog")
        {
            cin >> no >> age;
            pv = new Dog(no,age);
            pv->speak();
            delete pv;
        }
        else
        {
            cin >> no >> age;
            cout << "There is no " << type << " in our Zoo." << endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151031:Problem1234:正确
#include <bits/stdc++.h>
using namespace std;
class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA :public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB :public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int i,maxnum=max(x,y),count=0,sum=0;
		for(i=0;maxnum;i++)
		{
			maxnum/=10;
		}
		count=i;
		for(i=0;i<count;i++)
		{
			int lastnum,a,b;
			a=x%10;
			b=y%10;
			if(a<b)
				a+=10;
			lastnum=(a-b)*(pow(10,i));
			sum+=lastnum;
			x/=10;
			y/=10;
		}
		return sum;
	}
};
class GroupC :public Group
{
public:
	int add(int x,int y)
	{
		int i,maxnum=max(x,y),count=0,sum=0;
		for(i=0;maxnum;i++)
		{
			maxnum/=10;
		}
		count=i;
		for(i=0;i<count;i++)
		{
			int lastnum,a,b;
			a=x%10;
			b=y%10;
			if(a+b>10)
				a-=10;
			lastnum=(a+b)*(pow(10,i));
			sum+=lastnum;
			x/=10;
			y/=10;
		}
		return sum;
	}
	int sub(int x,int y)
	{
		int i,maxnum=max(x,y),count=0,sum=0;
		for(i=0;maxnum;i++)
		{
			maxnum/=10;
		}
		count=i;
		for(i=0;i<count;i++)
		{
			int lastnum,a,b;
			a=x%10;
			b=y%10;
			if(a<b)
				a+=10;
			lastnum=(a-b)*(pow(10,i));
			sum+=lastnum;
			x/=10;
			y/=10;
		}
		return sum;
	}	
};
int main() 
{
	Group *g;
	int t;
	cin>>t;
	while(t--)
	{
		int type,num1,num2;
		char ch;
		cin>>type;
		if(type==1)
		{
			cin>>num1>>ch>>num2;
			GroupA a;
			g=&a;
			if(ch=='+')
				cout<<g->add(num1,num2)<<endl;
			else
				cout<<g->sub(num1,num2)<<endl;
		}
		else if(type==2)
		{
			cin>>num1>>ch>>num2;
			GroupB b;
			g=&b;
			if(ch=='+')
				cout<<g->add(num1,num2)<<endl;
			else
				cout<<g->sub(num1,num2)<<endl;		
				
		}
		else if(type==3)
		{
			cin>>num1>>ch>>num2;
			GroupC c;
			g=&c;
			if(ch=='+')
				cout<<g->add(num1,num2)<<endl;
			else
				cout<<g->sub(num1,num2)<<endl;	
		}
	}
	return 0;
}
------------------------------------------------------
2018192013:Problem1120:正确
#include <iostream>
using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n=" ",int a=0):name(n),age(a){}
    virtual void speak()=0;
};

class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void speak(){cout<<"Hello,I am "<<name<<",AOOO."<<endl;}
};

class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak(){cout<<"Hello,I am "<<name<<",WangWang."<<endl;}
};

class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak(){cout<<"Hello,I am "<<name<<",GAGA."<<endl;}
};

class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak(){cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;}
};

int main()
{
    int t;
    cin>>t;
    Animal *a;
    while(t--)
    {
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger t(name,age);
            a=&t;
            a->speak();
        }
        else if(type=="Dog")
        {
            Dog d(name,age);
            a=&d;
            a->speak();
        }
        else if(type=="Duck")
        {
            Duck d(name,age);
            a=&d;
            a->speak();
        }
        else if(type=="Pig")
        {
            Pig p(name,age);
            a=&p;
            a->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018152007:Problem1120:正确
#include <iostream>

using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class dog:public Animal
{
public:
    dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class pig:public Animal
{
public:
    pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        string t,n;
        int a;
        cin>>t>>n>>a;
        Animal *b;
        if(t=="Tiger")
        {
            Tiger *t1=new Tiger(n,a);
            b=t1;
            b->speak();
        }
        else if(t=="Pig")
        {
            pig *p1=new pig(n,a);
            b=p1;
            b->speak();
        }
        else if(t=="Dog")
        {
            dog *d1=new dog(n,a);
            b=d1;
            b->speak();
        }
        else if(t=="Duck")
        {
            Duck *k1=new Duck(n,a);
            b=k1;
            b->speak();
        }
        else
        {
            cout<<"There is no "<<t<<" in our Zoo."<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151027:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string type;
public:
    virtual void speak()=0;
    Animal(string n):type(n){}

};
class Tiger: public Animal
{
protected:
    string name;
    int age;
public:
    Tiger(string t,string n,int a):Animal(n),name(n),age(a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog: public Animal
{
protected:
    string name;
    int age;
public:
    Dog(string t,string n,int a):Animal(n),name(n),age(a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck: public Animal
{
protected:
    string name;
    int age;
public:
    Duck(string t,string n,int a):Animal(n),name(n),age(a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig: public Animal
{
protected:
    string name;
    int age;
public:
    Pig(string t,string n,int a):Animal(n),name(n),age(a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
main()
{
    string type;
    string name;
    int age;
    int t;
    Animal *p;
    cin>>t;
    while(t--)
    {
        cin>>type;
        if(type=="Tiger")
        {
            cin>>name>>age;
            p=new Tiger(type,name,age);
            p->speak();
        }
        else if(type=="Pig")
        {
            cin>>name>>age;
            p=new Pig(type,name,age);
            p->speak();
        }
        else if(type=="Duck")
        {
            cin>>name>>age;
            p=new Duck(type,name,age);
            p->speak();

        }
        else if(type=="Dog")
        {
            cin>>name>>age;
            p=new Dog(type,name,age);
            p->speak();
        }
        else
        {
            cin>>name>>age;
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }


    }

}

------------------------------------------------------
2018152102:Problem1120:正确
#include <iostream>

using namespace std;

class Animal {
protected:
    int year;
    int weight;
    string name;
public:
    virtual void speak() = 0;
    Animal(int ye,string na):year(ye),name(na) {}
};

class Tiger:public Animal {
public:
    Tiger(int ye,string na):Animal(ye,na) {}
    void speak() {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Pig:public Animal {
public:
    Pig(int ye,string na):Animal(ye,na) {}
    void speak() {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Duck :public Animal {
public:
    Duck(int ye,string na):Animal(ye,na) {}
    void speak() {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Dog:public Animal{
public:
    void speak(){
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    Dog(int ye,string na):Animal(ye,na) {}
};
int main() {
    int t;

    cin>>t;
    while(t--) {
        string kind;
        string name;
        int year;
        cin>>kind;
        cin>>name>>year;
        if(kind == "Tiger") {
            Tiger ti(year,name);
            ti.speak();
        }else if(kind == "Pig") {
            Pig pi(year,name);
            pi.speak();
        }else if(kind == "Duck") {
            Duck du(year,name);
            du.speak();
        }else if(kind == "Dog" ) {
            Dog dog(year,name);
            dog.speak();
        }else {
            cout<<"There is no "<<kind<<" in our Zoo."<<endl;
        }

    }

    return 0;
}

------------------------------------------------------
2016071031:Problem1120:答案错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Animal {
    string kind;
    string name;
    int age;
public:
    Animal(){};
    Animal(string kind_, string name_, int age_) {
        kind = kind_;
        name = name_;
        age = age_;
    }
    virtual void speak(){}
    string getName() { return name;}
};

class Tiger: public Animal {
public:
    Tiger(){};
    Tiger(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello, I am " << getName() << ", AOOO." <<endl;
    }
};

class Pig: public Animal {
public:
    Pig(){};
    Pig(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello, I am " << getName() << ", HENGHENG." <<endl;
    }
};

class Dog: public Animal {
public:
    Dog(){};
    Dog(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello, I am " << getName() << ", WangWang." <<endl;
    }
};

class Duck: public Animal {
public:
    Duck(){};
    Duck(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello, I am " << getName() << ", GAGA." <<endl;
    }
};


int main() {
    int t, age;
    string kind, name;
    Animal *a;

    cin>>t;
    while (t--) {
        cin>>kind>>name>>age;
        if (kind == "Tiger") {
            a = new Tiger(kind, name, age);
            a->speak();
        } else if (kind == "Pig") {
            a = new Pig(kind, name, age);
            a->speak();
        } else if (kind == "Dog") {
            a = new Dog(kind, name, age);
            a->speak();
        } else if (kind == "Duck") {
            a = new Duck(kind, name, age);
            a->speak();
        } else {
            cout<< "There is no " << kind << " in our Zoo." <<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018182052:Problem1119:答案错误
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    double balance;
public:
    BaseAccount(const string& n,const string &a,double b):name(n),account(a),balance(b) {}
    void deposit(double amo)
    {
        balance+=amo;
    }
    virtual bool withdraw(double amo)
    {
        if(amo>=balance)
        {
            cout<<"insufficient"<<endl;
            return false;
        }
        balance-=amo;
        return true;
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<fixed<<setprecision(0)<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
protected:
    double limit;
    double limit_sum;
public:
    BasePlus(const string& n,const string &a,double b):BaseAccount(n,a,b),limit(5000.00),limit_sum(0.0) {}
    virtual bool withdraw(double amo)
    {
        if(amo<=balance)
        {
            balance-=amo;
            return true;
        }
        else if(amo>balance&&amo<=balance+limit-limit_sum)
        {
            amo-=balance;
            balance=0.0;
            limit_sum+=amo;
            return true;
        }
        else
        {
            cout<<"insufficient"<<endl;
            return false;
        }
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<fixed<<setprecision(0)<<" Balance:"<<balance<<" limit:"<<(limit-limit_sum)<<endl;
    }
};
int main()
{
 //   freopen(ADDRESS);
    int T(0);
    cin>>T;
    BaseAccount *p;
    string name,acc;
    int d[5];
    while(T--)
    {
        cin>>name>>acc>>d[4]>>d[0]>>d[1]>>d[2]>>d[3];
        if(acc[1]=='A')
        {
            p=new BaseAccount(name,acc,d[4]);
        }
        else if(acc[1]='P')
        {
            p=new BasePlus(name,acc,d[4]);
        }
        p->deposit(d[0]);
        p->withdraw(d[1]);
        p->deposit(d[2]);
        p->withdraw(d[3]);
        p->display();
        delete p;
    }
    return 0;
}
------------------------------------------------------
2018152029:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;

class Animal
{
protected:
    string name;
    int year;
public:
    Animal(string n,int y):name(n),year(y){}
    virtual void Speak()=0;

};

class Tiger:public Animal
{
public:
    Tiger(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"AOOO."<<endl;
    }
};

class Pig:public Animal
{
public:
    Pig(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"HENGHENG."<<endl;
    }
};

class Duck:public Animal
{
public:
    Duck(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"GAGA."<<endl;
    }
};

class Dog:public Animal
{
public:
    Dog(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"WangWang."<<endl;
    }
};

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        string kind,name;
        int year;
        cin>>kind>>name>>year;
        if(kind=="Tiger")
        {
            Tiger a(name,year);
            a.Speak();
        }
        else if(kind=="Dog")
        {
            Dog a(name,year);
            a.Speak();
        }
        else if(kind=="Duck")
        {
            Duck a(name,year);
            a.Speak();
        }
        else if(kind=="Pig")
        {
            Pig a(name,year);
            a.Speak();
        }
        else
            cout<<"There is no "<<kind<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018151014:Problem1119:正确
#include <iostream>
#include <string>

using namespace std;

class BaseAccount {
public:
	BaseAccount(string n, string acc, float b) : name(n), account(acc), balance(b) {
		
	}
	
	virtual void deposit(int s) {
		balance += s;
	}
	
	virtual void withdraw(int s) {
		
		if (s > balance) {
			cout << "insufficient\n";
			return;
		}
		else {
			balance -= s;
		}
	}
	
	virtual void display() {
		cout << name << ' ' << account << " Balance:" << balance << endl;
	}
protected:
	string name;
	string account;
	float balance;
};

class BasePlus : public BaseAccount {
public:
	BasePlus(string name, string acc, float b) : BaseAccount(name, acc, b) {
		limit = 5000;
		limit_sum = 0;
	}
	
	void deposit(int s) {
		if (limit_sum != 0) {
			if (limit + s >= 5000) {
				balance = limit + s - 5000;
				limit = 5000;
				limit_sum = 0;
			}
			else {
				limit += s;
				limit_sum -= s;
			}
		}
		else {
			balance += s;
		}
	}
	
	void withdraw(int s) {
		if (s > balance) {
			int sub = s - balance;
			if (sub <= limit) {
				balance = 0;
				limit_sum += sub;
				limit -= sub;
			}
			else {
				cout << "insufficient\n";
			}
		}
		else {
			balance -= s;
		}
	}
	
	void display() {
		cout << name << ' ' << account << " Balance:" << balance << " limit:" << limit << endl;
	}
private:
	int limit;
	int limit_sum;
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		BaseAccount *ptr;
		string name;
		string acc;
		float balance;
		
		cin >> name >> acc >> balance;
		
		if (acc[1] == 'A') {
			ptr = new BaseAccount(name, acc, balance);
			
			int in1, out1, in2, out2;
			cin >> in1 >> out1 >> in2 >> out2;
			ptr->deposit(in1);
			ptr->withdraw(out1);
			ptr->deposit(in2);
			ptr->withdraw(out2);
			ptr->display();
			delete ptr;
		}
		else if (acc[1] == 'P') {
			ptr = new BasePlus(name, acc, balance);
			
			int in1, out1, in2, out2;
			cin >> in1 >> out1 >> in2 >> out2;
			
			ptr->deposit(in1);
			ptr->withdraw(out1);
			ptr->deposit(in2);
			ptr->withdraw(out2);
			ptr->display();
			delete ptr;
		}
		
	}
	
	return 0;
}
------------------------------------------------------
2018191214:Problem1120:答案错误
#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
class Animal
{
public:
	virtual void speak()
	{
		cout<<"Hello,I am animal."<<endl;
	}
};
class Tiger:public Animal
{
protected:
	char name[20];
	int old;
public:
	Tiger(){}
	Tiger(char na[20],int ol):old(ol)
	{
		strcpy(name,na);
	}
    void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Pig:public Animal
{	
	char name[20];
	int old;
public:
	Pig(){}
	Pig(char na[20],int ol):old(ol)
	{
	    strcpy(name,na);
	}
    void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};
class Duck:public Animal
{
	char name[20];
	int old;
public:
	Duck(){}
	Duck(char na[20],int ol):old(ol)
	{
		strcpy(name,na);
	}
    void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
int main()
{
	int t,old;
	char name[20],kind[20];
	Animal *p;
	cin>>t;
	while(t--)
	{
		cin>>kind>>name>>old;
		if(strcmp(kind,"Tiger")==0)
		{
			p=new Tiger(name,old);
			p->speak();
		}
		else if(strcmp(kind,"Pig")==0)
		{
			p=new Pig(name,old);
			p->speak();
		}
		else if(strcmp(kind,"Duck")==0)
		{
			p=new Duck(name,old);
			p->speak();
		}
		else 
			cout<<"There is no "<<kind<<" in our Zoo."<<endl;
	}
	return 0;
}

------------------------------------------------------
2017163058:Problem1120:正确
#include <iostream>
#include <fstream>
using namespace std;
//某个动物园内，有老虎、狗、鸭子和猪等动物，动物园的管理员为每个动物都起了一个名字，并且每个动物都有年龄、体重等信息。

//每到喂食的时候，不同的动物都会叫唤(speak)。每种动物的叫唤声均不同，老虎的叫唤声是“AOOO”，狗的叫唤声是“WangWang”，鸭子的叫唤声是“GAGA”，猪的叫唤声是“HENGHENG”。

//定义一个Animal的基类，Animal类有函数Speak()，并派生老虎、狗、鸭子和猪类，其能发出不同的叫唤声（用文本信息输出叫声）。
//
//编写程序，输入动物名称、名字、年龄，让动物园内的各种动物叫唤。
//
//要求：只使用一个基类指针，指向生成的对象并调用方法。
class Animal
{
protected:
    string name;
    int age;
public:
    virtual void Speak() = 0;
};
class Tiger:public Animal
{
public:
    Tiger(string name, int age)
    {
        this->name = name;
        this->age = age;
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string name, int age)
    {
        this->name = name;
        this->age = age;
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string name, int age)
    {
        this->name = name;
        this->age = age;
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string name, int age)
    {
        this->name = name;
        this->age = age;
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
//    freopen("C:\\Users\\acer\\Desktop\\in.txt", "r", stdin);
    string name, animal;
    int t, age;
    Animal *p;
    cin>>t;
    while(t --)
    {
        cin>>animal>>name>>age;
        if(animal == "Tiger")
        {
            Tiger tiger(name, age);
            p = &tiger;
            p->Speak();
        }
        else if(animal == "Dog")
        {
            Dog dog(name, age);
            p = &dog;
            p->Speak();
        }
        else if(animal == "Duck")
        {
            Duck duck(name, age);
            p = &duck;
            p->Speak();
        }
        else if(animal == "Pig")
        {
            Pig pig(name, age);
            p = &pig;
            p->Speak();
        }
        else
        {
            cout<<"There is no "<<animal<<" in our Zoo."<<endl;
        }

    }
    return 0;
}

------------------------------------------------------
2018152114:Problem1120:编译错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"WangWang"<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"GAGA"<<endl;
		}	
};
int mian()
{
	int t;
	string _name,_no;
	int _old;
	while(t--)
	{
		cin>>_name;
		Animal* a;
		if(_name=="Tiger")
		{
			cin>>_no>>_old;
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
			cin>>_no>>_old;
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
			cin>>_no>>_old;
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{
			cin>>_no>>_old;
			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else
			cout<<"There is no "<<_no<<" in our Zoo. "<<endl;
	}
}
------------------------------------------------------
2018152087:Problem1120:答案错误
#include<iostream>
using namespace std;
class Animal
{
protected:
	string name;
	int old;
public:
	virtual void speak()=0;
};
class Tiger:public Animal
{
public:
	Tiger(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
	}
};
class Dog:public Animal
{
public:
	Dog(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
	}
};
class Duck:public Animal
{
public:
	Duck(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
	}
};
class Pig:public Animal
{
public:
	Pig(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Animal *p;
	while(t--)
	{
		string n;
		int o;
		string name;
		cin>>name;
		if(name=="Tiger")
		{
			cin>>n>>o;
			Tiger ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Pig")
		{
			cin>>n>>o;
			Pig ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Duck")
		{
			cin>>n>>o;
			Duck ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Dog")
		{
			cin>>n>>o;
			Dog ex(n,o);
			p=&ex;
		}
		else 
		{
			cin>>n>>o;
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
		}
	}
}
------------------------------------------------------
2018192045:Problem1120:答案错误
#include<iostream>
using namespace std;
#include<cstring>
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a) {}
    virtual void speak()=0;

};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
int main()
{
    string type,name;
    int age,t;
    Animal *p;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->speak();
        }
        if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->speak();
        }
        if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->speak();
        }
        if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }

    }
}

------------------------------------------------------
2016071031:Problem1120:答案错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Animal {
    string kind;
    string name;
    int age;
public:
    Animal(){};
    Animal(string kind_, string name_, int age_) {
        kind = kind_;
        name = name_;
        age = age_;
    }
    virtual void speak(){}
    string getName() { return name;}
};

class Tiger: public Animal {
public:
    Tiger(){};
    Tiger(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",AOOO." <<endl;
    }
};

class Pig: public Animal {
public:
    Pig(){};
    Pig(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",HENGHENG." <<endl;
    }
};

class Dog: public Animal {
public:
    Dog(){};
    Dog(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",WangWang." <<endl;
    }
};

class Duck: public Animal {
public:
    Duck(){};
    Duck(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello, I am " << getName() << ", GAGA." <<endl;
    }
};


int main() {
    int t, age;
    string kind, name;
    Animal *a;

    cin>>t;
    while (t--) {
        cin>>kind>>name>>age;
        if (kind == "Tiger") {
            a = new Tiger(kind, name, age);
            a->speak();
        } else if (kind == "Pig") {
            a = new Pig(kind, name, age);
            a->speak();
        } else if (kind == "Dog") {
            a = new Dog(kind, name, age);
            a->speak();
        } else if (kind == "Duck") {
            a = new Duck(kind, name, age);
            a->speak();
        } else {
            cout<< "There is no " << kind << " in our Zoo." <<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2017133026:Problem1235:答案错误
#include <iostream>

using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry{
    int w,h;
public:
    Rect(int _w,int _h){
        w=_w;
        h=_h;
    }
    double getArea(){
        return w*h;
    }
};

class Circle:public Geometry{
    int r;
public:
    Circle(int _r){
        r=_r;
    }
    double getArea(){
        return 3.14*r*r;
    }

};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n);//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
};
void computerTotalArea(Geometry** t,int n){
    double max=0;
    for(int i=0;i<n;i++){
        double temp=t[i]->getArea();
        if(temp>max){
            max=temp;
        }
    }
    cout<<"最大面积="<<max<<endl;
}
int main()
{
    int t;
    cin>>t;
    int type,w,h,r;
    Geometry** t1=new Geometry*[t];
    int pos=0;
    while(t--){
        cin>>type;
        if(type==1){
            cin>>w>>h;
            Rect r1(w,h);
            t1[pos++]=&r1;
        }else if(type==2){
            cin>>r;
            Circle c1(r);
            t1[pos++]=&c1;
        }
    }
    computerTotalArea(t1,pos);
    return 0;
}

------------------------------------------------------
2018152044:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    double balance;
public:
    BaseAccount(string n,string acc,double bal)
    {
        name=n;
        account=acc;
        balance=bal;
    }
    void deposit(double x)
    {
        balance+=x;
    }
    virtual void withdraw(double x)
    {
        if(balance<x)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        balance-=x;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
protected:
    double limit;
    double limit_sum;
public:
    BasePlus(string n,string acc,double bal):BaseAccount(n,acc,bal)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void withdraw(double x)
    {
        if(balance+limit<x)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        if(balance<x)
        {
            limit=limit+balance-x;
            balance=0;
            limit_sum+=5000-limit;
            return;
        }
        balance-=x;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        BaseAccount *s;
        string name;
        string account;
        double balance;
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccount BA(name,account,balance);
            s=&BA;
            double a,b,c,d;
            cin>>a>>b>>c>>d;
            s->deposit(a);
            s->withdraw(b);
            s->deposit(c);
            s->withdraw(d);
            s->display();
        }
        else if(account[1]=='P')
        {
            BasePlus BP(name,account,balance);
            s=&BP;
            double a,b,c,d;
            cin>>a>>b>>c>>d;
            s->deposit(a);
            s->withdraw(b);
            s->deposit(c);
            s->withdraw(d);
            s->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018192045:Problem1120:正确
#include<iostream>
using namespace std;
#include<cstring>
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a) {}
    virtual void speak()=0;

};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a) {}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
int main()
{
    string type,name;
    int age,t;
    Animal *p;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->speak();
        }
       else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }

    }
}

------------------------------------------------------
2018151058:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    virtual void speak()=0;
};
class tiger:public Animal
{

public:
    tiger(string n,int a)
    {
        name=n;
        age=a;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;

    }
};
class duck:public Animal
{

public:
    duck(string n,int a)
    {
        name=n;
        age=a;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;

    }
};
class dog:public Animal
{

public:
    dog(string n,int a)
    {
        name=n;
        age=a;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;

    }
};
class pig:public Animal
{
public:
    pig(string n,int a)
    {
        name=n;
        age=a;
    }
    void speak()
    {
       cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;

    }
};

void print(Animal *b)
{
    b->speak();
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Animal *pv;
        string type;
        cin>>type;
        string name;
        int age;
        cin>>name>>age;
        if(type=="Tiger")
        {

            pv=new tiger(name,age);
            print(pv);continue ;

        }
        if(type=="Duck")
        {

            pv=new duck(name,age);
            print(pv);continue ;
        }
        if(type=="Dog")
        {

            pv=new dog(name,age);
            print(pv);continue ;
        }
        if(type=="Pig")
        {
           pv=new pig(name,age);
            print(pv);continue ;
        }
        cout<<"There is no "<<type<<" in our Zoo."<<endl;

    }
    return 0;
}

------------------------------------------------------
2016071031:Problem1120:答案错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Animal {
    string kind;
    string name;
    int age;
public:
    Animal(){};
    Animal(string kind_, string name_, int age_) {
        kind = kind_;
        name = name_;
        age = age_;
    }
    virtual void speak(){}
    string getName() { return name;}
};

class Tiger: public Animal {
public:
    Tiger(){};
    Tiger(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",AOOO." <<endl;
    }
};

class Pig: public Animal {
public:
    Pig(){};
    Pig(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",HENGHENG." <<endl;
    }
};

class Dog: public Animal {
public:
    Dog(){};
    Dog(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",WangWang." <<endl;
    }
};

class Duck: public Animal {
public:
    Duck(){};
    Duck(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello, I am " << getName() << ",GAGA." <<endl;
    }
};


int main() {
    int t, age;
    string kind, name;
    Animal *a;

    cin>>t;
    while (t--) {
        cin>>kind>>name>>age;
        if (kind == "Tiger") {
            a = new Tiger(kind, name, age);
            a->speak();
        } else if (kind == "Pig") {
            a = new Pig(kind, name, age);
            a->speak();
        } else if (kind == "Dog") {
            a = new Dog(kind, name, age);
            a->speak();
        } else if (kind == "Duck") {
            a = new Duck(kind, name, age);
            a->speak();
        } else {
            cout<< "There is no " << kind << " in our Zoo." <<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018191214:Problem1120:正确
#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
class Animal
{
public:
	virtual void speak()
	{
		cout<<"Hello,I am animal."<<endl;
	}
};
class Tiger:public Animal
{
protected:
	char name[20];
	int old;
public:
	Tiger(){}
	Tiger(char na[20],int ol):old(ol)
	{
		strcpy(name,na);
	}
    void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Pig:public Animal
{	
	char name[20];
	int old;
public:
	Pig(){}
	Pig(char na[20],int ol):old(ol)
	{
	    strcpy(name,na);
	}
    void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};
class Dog:public Animal
{
	char name[20];
	int old;
public:
	Dog(){}
	Dog(char na[20],int ol):old(ol)
	{
		strcpy(name,na);
	}
    void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};
class Duck:public Animal
{
	char name[20];
	int old;
public:
	Duck(){}
	Duck(char na[20],int ol):old(ol)
	{
		strcpy(name,na);
	}
    void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
int main()
{
	int t,old;
	char name[20],kind[20];
	Animal *p;
	cin>>t;
	while(t--)
	{
		cin>>kind>>name>>old;
		if(strcmp(kind,"Tiger")==0)
		{
			p=new Tiger(name,old);
			p->speak();
		}
		else if(strcmp(kind,"Pig")==0)
		{
			p=new Pig(name,old);
			p->speak();
		}
		else if(strcmp(kind,"Duck")==0)
		{
			p=new Duck(name,old);
			p->speak();
		}
        else if(strcmp(kind,"Dog")==0)
		{
			p=new Dog(name,old);
			p->speak();
		}
		else 
			cout<<"There is no "<<kind<<" in our Zoo."<<endl;
	}
	return 0;
}
------------------------------------------------------
2018192043:Problem1119:正确
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string ns,string as,int bs):name(ns),account(as),balance(bs){}
    void deposit(int m)
    {
        balance+=m;
    }
    virtual void withdraw(int m)
    {
        if(balance-m<0)
            cout<<"insufficient"<<endl;
        else
            balance-=m;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    ~BaseAccount(){}
};
class BasePlus:public BaseAccount
{
    int limit;
public:
    BasePlus(string ns,string as,int bs,int ls=5000):BaseAccount(ns,as,bs),limit(ls){}
    void withdraw(int m)
    {
        if(balance+limit-m<0)
            cout<<"insufficient"<<endl;
        else if(balance-m<0)
        {
            limit+=balance-m;
            balance=0;
        }
        else
            balance-=m;
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
    ~BasePlus(){}
};
int main()
{
    int t,balance,m;
    string name,account;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[0]=='B' && account[1]=='A')
        {
            BaseAccount a(name,account,balance);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            a.display();
        }
        else
        {
            BasePlus a(name,account,balance);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            a.display();
        }
    }
    return 0;
}

------------------------------------------------------
2017182013:Problem1120:答案错误
#include <bits/stdc++.h>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n="",int a=0):name(n),age(a){}
    virtual void speak()=0;
};
class Tiger:public Animal
{

public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<" Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\c\\s.txt",stdin,"r");
    int n;
    cin>>n;
    while(n--)
    {
        Animal *pv;
        string type;
        cin>>type;
        string name;
        int age;
        cin>>name>>age;
        if(type == "Tiger")
        {
            Tiger t(name ,age);
            pv = &t;
            pv->speak();
        }
        else if(type == "Pig")
        {
            Pig p(name,age);
            pv = &p;
            pv->speak();
        }
        else if(type == "Duck")
        {
            Duck d(name,age);
            pv = &d;
            pv->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;

    }
    return 0;
}

------------------------------------------------------
2018192038:Problem1119:正确
#include <iostream>

using namespace std;

class BaseAccount
{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(string nn,string acc,int b):name(nn),account(acc),balance(b){}
    void deposit(int m)
    {
        balance+=m;
    }
    virtual void withdraw(int m)
    {
        if(balance>=m)
        {
            balance-=m;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
    int limit;
public:
    BasePlus(string nn,string acc,int b):BaseAccount(nn,acc,b),limit(5000){}
    void withdraw(int m)
    {
        if(limit+balance>=m)
        {
            if(balance>=m)
            {
                balance-=m;
            }
            else
            {

                //cout<<limit<<endl;
                limit-=(m-balance);
                balance=0;
               // cout<<limit<<endl;
            }
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    string name;
    string account;
    int balance;
    int t,money;
    cin>>t;
    BaseAccount *p=NULL;
    while(t--)
    {
        string sub;
        cin>>name>>account>>balance;
        sub=account.substr(0,2);
        //cout<<sub<<endl;
        if(sub=="BA")
        {

            BaseAccount ba(name,account,balance);
            p=&ba;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdraw(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdraw(money);
            p->display();
        }
        else if(sub=="BP")
        {
            //cin>>limit;
            BasePlus bp(name,account,balance);
            p=&bp;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdraw(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdraw(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192048:Problem1120:正确
#include<iostream>
#include<cstring>
using namespace std;

class Animal{
protected:
	string name;
public:
	Animal(){}
	Animal(string n):name(n){}
	virtual void speak()=0;
	~Animal(){}
};

class Tiger:public Animal{
protected:
	int age;
public:
	Tiger(){}
	Tiger(string n,int a):Animal(n),age(a){}
	void speak(){
		cout<<"Hello,I am "<<Animal::name<<",AOOO."<<endl;
	}
	~Tiger(){}
};

class Pig:public Animal{
protected:
	int age;
public:
	Pig(){}
	Pig(string n,int a):Animal(n),age(a){}
	void speak(){
		cout<<"Hello,I am "<<Animal::name<<",HENGHENG."<<endl;
	}
	~Pig(){}
};

class Dog:public Animal{
protected:
	int age;
public:
	Dog(){}
	Dog(string n,int a):Animal(n),age(a){}
	void speak(){
		cout<<"Hello,I am "<<Animal::name<<",WangWang."<<endl;
	}
	~Dog(){}
};

class Duck:public Animal{
protected:
	int age;
public:
	Duck(){}
	Duck(string n,int a):Animal(n),age(a){}
	void speak(){
		cout<<"Hello,I am "<<Animal::name<<",GAGA."<<endl;
	}
	~Duck(){}
};

int main(){
	int t;
	cin>>t;
	while(t--){
		char type[10];
		cin>>type;
		string name;
		int age;
		cin>>name>>age;
		Animal *pv;
		if(strcmp(type,"Tiger")==0){
			Tiger a(name,age);
			pv=&a;
			pv->speak();
		}
		else if(strcmp(type,"Pig")==0){
			Pig a(name,age);
			pv=&a;
			pv->speak();
		}
		else if(strcmp(type,"Dog")==0){
			Dog a(name,age);
			pv=&a;
			pv->speak();
		}
		else if(strcmp(type,"Duck")==0){
			Duck a(name,age);
			pv=&a;
			pv->speak();
		}
		else
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
		
			
	}
	return 0;
}
------------------------------------------------------
2018152087:Problem1120:答案错误
#include<iostream>
#include<string>
using namespace std;
class Animal
{
protected:
	string name;
	int old;
public:
	virtual void speak()=0;
};
class Tiger:public Animal
{
public:
	Tiger(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
	}
};
class Dog:public Animal
{
public:
	Dog(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
	}
};
class Duck:public Animal
{
public:
	Duck(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
	}
};
class Pig:public Animal
{
public:
	Pig(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Animal *p;
	while(t--)
	{
		string n;
		int o;
		string name;
		cin>>name;
		if(name=="Tiger")
		{
			cin>>n>>o;
			Tiger ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Pig")
		{
			cin>>n>>o;
			Pig ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Duck")
		{
			cin>>n>>o;
			Duck ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Dog")
		{
			cin>>n>>o;
			Dog ex(n,o);
			p=&ex;
		}
		else 
		{
			cin>>n>>o;
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
		}
	}
}
------------------------------------------------------
2018192022:Problem1119:正确
#include <iostream>
#include <iomanip>
#include <cstring>
#define PI 3.14
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    double balance;
public:
    BaseAccount(){}
    BaseAccount(string a,string b,double c)
    {
        name=a;
        account=b;
        balance=c;
    }
    virtual void deposit(double x)
    {
        balance+=x;
    }
    virtual void withdraw(double x)
    {
        if(x>balance)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=x;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
protected:
    double limit,limit_sum;
public:
    BasePlus(){limit=5000;limit_sum=0;}
    BasePlus(string a,string b,double c)
    {
        name=a;
        account=b;
        balance=c;
        limit=5000;
        limit_sum=0;
    }
    void deposit(double x)
    {
        if(limit_sum)
        {
            if(limit_sum > x)
            {
                limit_sum -= x;
                x = 0;
            }
            else
            {
                x -= limit_sum;
                limit_sum = 0;
            }
        }
        balance += x;
    }
    void withdraw(double x)
    {
        if(balance >= x)
        {
            balance -= x;
        }
        else if(balance + limit - limit_sum >= x)
        {
            limit_sum += x - balance;
            balance = 0;
        }
        else
        {
            cout << "insufficient" << endl;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string name,account;
        double balance;
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccount p(name,account,balance);
            double a,b,c,d;
            cin>>a>>b>>c>>d;
            p.deposit(a);
            p.withdraw(b);
            p.deposit(c);
            p.withdraw(d);
            p.display();
        }
        else if(account[1]=='P')
        {
            BasePlus p(name,account,balance);
            double a,b,c,d;
            cin>>a>>b>>c>>d;
            p.deposit(a);
            p.withdraw(b);
            p.deposit(c);
            p.withdraw(d);
            p.display();
        }
    }
    return 0;
}
------------------------------------------------------
2016071031:Problem1120:正确
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Animal {
    string kind;
    string name;
    int age;
public:
    Animal(){};
    Animal(string kind_, string name_, int age_) {
        kind = kind_;
        name = name_;
        age = age_;
    }
    virtual void speak(){}
    string getName() { return name;}
};

class Tiger: public Animal {
public:
    Tiger(){};
    Tiger(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",AOOO." <<endl;
    }
};

class Pig: public Animal {
public:
    Pig(){};
    Pig(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",HENGHENG." <<endl;
    }
};

class Dog: public Animal {
public:
    Dog(){};
    Dog(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",WangWang." <<endl;
    }
};

class Duck: public Animal {
public:
    Duck(){};
    Duck(string kind_, string name_, int age_)
        :Animal(kind_, name_, age_) {}
    void speak() {
        cout<< "Hello,I am " << getName() << ",GAGA." <<endl;
    }
};


int main() {
    int t, age;
    string kind, name;
    Animal *a;

    cin>>t;
    while (t--) {
        cin>>kind>>name>>age;
        if (kind == "Tiger") {
            a = new Tiger(kind, name, age);
            a->speak();
        } else if (kind == "Pig") {
            a = new Pig(kind, name, age);
            a->speak();
        } else if (kind == "Dog") {
            a = new Dog(kind, name, age);
            a->speak();
        } else if (kind == "Duck") {
            a = new Duck(kind, name, age);
            a->speak();
        } else {
            cout<< "There is no " << kind << " in our Zoo." <<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018152051:Problem1120:正确
#include<iostream>
using namespace std;
class Animal
{ 
protected:
	string name;
	int age;
public:
	Animal(){}
	Animal(string n,int Age)
	{
		name = n;
		age = Age;
	}
	void virtual speak(){}
};
class CTiger:public Animal
{
public:
	CTiger(){}
	CTiger(string s,int a)
	{
		name = s;
		age = a;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Cdog:public Animal
{
public:
	Cdog(){}
	Cdog(string s,int a)
	{
		name = s;
		age = a;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};
class Cduck:public Animal
{
public:
	Cduck(){}
	Cduck(string s,int a)
	{
		name = s;
		age = a;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
class CPig:public Animal
{
public:
	CPig(){}
	CPig(string s,int a)
	{
		name = s;
		age = a;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};

int main()
{
	int T;
	cin>>T;
	Animal *pv;
	while(T--)
	{
		string S,Name;
		int age;
		cin>>S;
		if(S == "Tiger")
		{
			cin>>Name>>age;
			CTiger tiger(Name,age);
			pv = &tiger;
			pv->speak();
		}
		else if(S == "Duck")
		{
			cin>>Name>>age;
			Cduck duck(Name,age);
			pv = &duck;
			pv->speak();
		}
		else if(S == "Pig")
		{
			cin>>Name>>age;
			CPig pig(Name,age);
			pv = &pig;
			pv->speak();
		}
		else if(S == "Dog")
		{
			cin>>Name>>age;
			Cdog dog(Name,age);
			pv = &dog;
			pv->speak();
		}
		else
		{
			cin>>Name>>age;
			cout<<"There is no "<<S<<" in our Zoo."<<endl;
		}
	}
}
------------------------------------------------------
2017182013:Problem1120:答案错误
#include <bits/stdc++.h>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n="",int a=0):name(n),age(a){}
    virtual void speak()=0;
};
class Tiger:public Animal
{

public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\c\\s.txt",stdin,"r");
    int n;
    cin>>n;
    while(n--)
    {
        Animal *pv;
        string type;
        cin>>type;
        string name;
        int age;
        cin>>name>>age;
        if(type == "Tiger")
        {
            Tiger t(name ,age);
            pv = &t;
            pv->speak();
        }
        else if(type == "Pig")
        {
            Pig p(name,age);
            pv = &p;
            pv->speak();
        }
        else if(type == "Duck")
        {
            Duck d(name,age);
            pv = &d;
            pv->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;

    }
    return 0;
}

------------------------------------------------------
2018182052:Problem1119:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(const string& n,const string &a,int b):name(n),account(a),balance(b) {}
    void deposit(int amo)
    {
        balance+=amo;
    }
    virtual bool withdraw(int amo)
    {
        if(amo>balance)
        {
            cout<<"insufficient"<<endl;
            return false;
        }
        balance-=amo;
        return true;
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(const string& n,const string &a,int b):BaseAccount(n,a,b),limit(5000.00),limit_sum(0.0) {}
    virtual bool withdraw(int amo)
    {
        if(amo<=balance)
        {
            balance-=amo;
            return true;
        }
        else if(amo>balance&&amo<=balance+limit-limit_sum)
        {
            amo-=balance;
            balance=0.0;
            limit_sum+=amo;
            return true;
        }
        else
        {
            cout<<"insufficient"<<endl;
            return false;
        }
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<(limit-limit_sum)<<endl;
    }
};
int main()
{
  //  freopen(ADDRESS);
    int T(0);
    cin>>T;
    BaseAccount *p;
    string name,acc;
    int d[5];
    while(T--)
    {
        cin>>name>>acc>>d[4]>>d[0]>>d[1]>>d[2]>>d[3];
        if(acc[1]=='A')
        {
            p=new BaseAccount(name,acc,d[4]);
        }
        else if(acc[1]='P')
        {
            p=new BasePlus(name,acc,d[4]);
        }
        p->deposit(d[0]);
        p->withdraw(d[1]);
        p->deposit(d[2]);
        p->withdraw(d[3]);
        p->display();
        delete p;
    }
    return 0;
}
------------------------------------------------------
2017301020:Problem1120:答案错误
#include <iostream>

using namespace std;

class Animal{
protected:
    string name;
    int year;
public:
    Animal(string name1,int year1):name(name1),year(year1){}
    virtual void Speak()=0;
};

class Tiger:public Animal{
public:
    Tiger(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Tiger::Speak(){
    cout<<"Hello,I am "<<name<<",AOOO"<<endl;
}

class Dog:public Animal{
public:
    Dog(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Dog::Speak(){
    cout<<"Hello,I am "<<name<<",WangWang"<<endl;
}

class Duck:public Animal{
public:
    Duck(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Duck::Speak(){
    cout<<"Hello,I am "<<name<<",GAGA"<<endl;
}

class Pig:public Animal{
public:
    Pig(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Pig::Speak(){
    cout<<"Hello,I am "<<name<<",HENGHENG"<<endl;
}

int main()
{
    Animal *pv;
    int t,year;
    string name,type;
    cin>>t;
    while(t--){
        cin>>type>>name>>year;
        if(type=="Tiger"){
            Tiger a(name, year);
            pv=&a;
            pv->Speak();
        }

        else if(type=="Dog"){
            Dog a(name, year);
            pv=&a;
            pv->Speak();
        }
        else if(type=="Duck"){
            Duck a(name, year);
            pv=&a;
            pv->Speak();
        }
        else if(type=="Pig"){
            Pig a(name, year);
            pv=&a;
            pv->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2016073026:Problem1120:答案错误
#include <iostream>

using namespace std;

class Animal{
public:
    virtual void Speak()=0;
};

class Tiger:public Animal{
    string name;
    int age;
public:
    Tiger(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",AOOO.\n";}
};

class Dog:public Animal{
    string name;
    int age;
public:
    Dog(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",WangWang.\n";}
};

class Duck:public Animal{
    string name;
    int age;
public:
    Duck(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",GAGA.\n";}
};

class Pig:public Animal{
    string name;
    int age;
public:
    Pig(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",HENGHENG.\n";}
};

int main()
{
    Animal *pa;
    int t;
    cin>>t;
    while(t--){
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger"){    pa=new Tiger(name,age);     pa->Speak();}
        else if(type=="Pig"){   pa=new Pig(name,age);     pa->Speak();}
        else if(type=="Duck"){   pa=new Duck(name,age);     pa->Speak();}
        else if(type=="Dog"){   pa=new Dog(name,age);     pa->Speak();}
        else    cout<<"There is no "<<type<<"n our Zoo.\n";
    }
    return 0;
}

------------------------------------------------------
2016150076:Problem1120:答案错误
#include <iostream>
using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()
    {

    }
    ~Animal(){} 
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};

class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};

class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HengHeng."<<endl;
    }
    ~Pig(){}
};


int main()
{
	int n,age;
	string name;
	string type;
    Animal *p_animal;
    cin>>n;
   while(n--)
   {
   		cin>>type;
   		int flag=0;
	   		if(type=="Tiger")
	   			{	
		   			cin>>name>>age;
		   			Tiger a(name,age);
		   			p_animal=&a;
		   			p_animal->speak();
		   			flag=1;
				}
				
			if(type=="Dog")
	   			{	
		   			cin>>name>>age;
		   			Dog b(name,age);
		   			p_animal=&b;
		   			p_animal->speak();
		   			flag=1;
				}
				
			if(type=="Duck")
	   			{	
		   			cin>>name>>age;
		   			Duck c(name,age);
		   			p_animal=&c;
		   			p_animal->speak();
		   			flag=1;
				}		
	   	
	 		if(type=="Pig")
	   			{	
		   			cin>>name>>age;
		   			Pig d(name,age);
		   			p_animal=&d;
		   			p_animal->speak();
		   			flag=1;
				} 
				
			if(flag==0)
			{
				cout<<"There is no "<<type<<" in our Zoo."<<endl;
			 }	 	
   }

  
    
    return 0;
}
------------------------------------------------------
2018152087:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class Animal
{
protected:
	string name;
	int old;
public:
	virtual void speak()=0;
};
class Tiger:public Animal
{
public:
	Tiger(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
	}
};
class Dog:public Animal
{
public:
	Dog(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
	}
};
class Duck:public Animal
{
public:
	Duck(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
	}
};
class Pig:public Animal
{
public:
	Pig(string n,int o)
	{
		name=n;
		old=o;
	}
	void speak()
	{
		cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Animal *p;
	while(t--)
	{
		string n;
		int o;
		string name;
		cin>>name;
		if(name=="Tiger")
		{
			cin>>n>>o;
			Tiger ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Pig")
		{
			cin>>n>>o;
			Pig ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Duck")
		{
			cin>>n>>o;
			Duck ex(n,o);
			p=&ex;
			p->speak();
		}
		else if(name=="Dog")
		{
			cin>>n>>o;
			Dog ex(n,o);
			p=&ex;
			p->speak();
		}
		else 
		{
			cin>>n>>o;
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
		}
	}
}
------------------------------------------------------
2018151092:Problem1232:正确
#include<iostream>
#include<cstring>
using namespace std;

class Vehicle
{ 	
	protected:
		string no;//编号
	public:
		Vehicle()
		{
		}
		
		Vehicle(string n)
		{
			no=n;
		}

		virtual void display()=0;//应收费用

		~Vehicle()
		{
		}
};

class Car:public Vehicle
{ 	
	protected:
		int passenger;
		int load;
	public:
		Car()
		{
		}
		
		Car(string n,int p,int l):Vehicle(n)
		{
			passenger=p;
			load=l;
		}

		virtual void display()
		{
			int money;
			
			money=passenger*8+load*2;
			
			cout<<no<<" "<<money<<endl;
		}

		~Car()
		{
		}
};

class Truck:public Vehicle
{ 	
	protected:
		int load;
	public:
		Truck()
		{
		}
		
		Truck(string n,int l):Vehicle(n)
		{
			load=l;
		}

		virtual void display()
		{
			int money;
			
			money=load*5;
			
			cout<<no<<" "<<money<<endl;
		}

		~Truck()
		{
		}
};

class Bus:public Vehicle
{ 	
	protected:
		int passenger;
	public:
		Bus()
		{
		}
		
		Bus(string n,int p):Vehicle(n)
		{
			passenger=p;
		}

		virtual void display()
		{
			int money;
			
			money=passenger*3;
			
			cout<<no<<" "<<money<<endl;
		}

		~Bus()
		{
		}
};

int main()
{
	int t;
	int i;
	
	cin>>t;
	Vehicle *pv[t];
	
	for(i=0;i<t;i++)
	{
		int type;
		string no;
		int passenger;
		int load;
		
		cin>>type;
		
		if(type==1)
		{
			cin>>no; 
			cin>>passenger>>load;
			pv[i]=new Car(no,passenger,load);
			pv[i]->display();
		}

		if(type==2)
		{	
			cin>>no; 
			cin>>load;
			pv[i]=new Truck(no,load);	
			pv[i]->display();
		}
		
		if(type==3)
		{
			cin>>no;
			cin>>passenger;
			pv[i]=new Bus(no,passenger);
			pv[i]->display();
		}
	}
	
	return 0;
}
------------------------------------------------------
2018192006:Problem1119:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
   
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
   
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
 
 
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
 
/*Add Data Structures Here*/
class BaseAccount{
	public:
		virtual void deposit();
		virtual void withdraw();
		virtual void display(); 
		BaseAccount(string name,string acco,int balance):name(name),acco(acco),balance(balance){};
	protected:	
		string name;
		string acco;
		int balance;
};
class BasePlus:public BaseAccount{
	public:
		BasePlus(string name,string acco,int balance):BaseAccount(name,acco,balance),limit(5000){};
		void deposit();
		void withdraw(); 
		void display();
	protected:
		int limit;
};
void
BaseAccount::display(){
	cout << this->name << " " << this->acco << " Balance:" << this->balance << endl;
}
void
BasePlus::display(){
	cout << this->name << " " << this->acco << " Balance:" << this->balance << " limit:" << this->limit << endl;
}
void
BaseAccount::deposit(){
	int a;
	cin >> a;
	this->balance+=a;
	
}
void
BaseAccount::withdraw(){
	int a;
	cin >> a;
	if(this->balance<a){
		cout << "insufficient" << endl;
	}else{
		this->balance-=a;
	}
}
void
BasePlus::deposit(){
	int a;
	cin >> a;
	this->balance+=a;
	
}
void
BasePlus::withdraw(){
	int a;
	cin >> a;
	if((this->balance+this->limit)<a){
		cout << "insufficient" << endl;
	}else if(this->balance<a && (this->balance+this->limit)>=a){
		this->limit-=(a-this->balance);
		this->balance=0;
	}else{
		this->balance-=a;
	}
}
/*Add Functions Here*/

/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
    BaseAccount *ptr;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
    	string s1,s2;
    	int m;
    	cin >> s1 >> s2 >> m;
    	if(s2.substr(0,2)=="BA"){
    		BaseAccount A(s1,s2,m);
    		ptr=&A;
    		ptr->deposit();
			ptr->withdraw();		
			ptr->deposit();
			ptr->withdraw();
			ptr->display();
		}else{
			BasePlus B(s1,s2,m);
			ptr=&B;
			ptr->deposit();
			ptr->withdraw();		
			ptr->deposit();
			ptr->withdraw();
			ptr->display();
		}

    }
#endif
    /*Final process here.*/
 
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2016073026:Problem1120:答案错误
#include <iostream>

using namespace std;

class Animal{
public:
    virtual void Speak()=0;
};

class Tiger:public Animal{
    string name;
    int age;
public:
    Tiger(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",AOOO.\n";}
};

class Dog:public Animal{
    string name;
    int age;
public:
    Dog(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",WangWang.\n";}
};

class Duck:public Animal{
    string name;
    int age;
public:
    Duck(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",GAGA.\n";}
};

class Pig:public Animal{
    string name;
    int age;
public:
    Pig(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",HENGHENG.\n";}
};

int main()
{
    Animal *pa;
    int t;
    cin>>t;
    while(t--){
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger"){    pa=new Tiger(name,age);     pa->Speak();}
        else if(type=="Pig"){   pa=new Pig(name,age);     pa->Speak();}
        else if(type=="Duck"){   pa=new Duck(name,age);     pa->Speak();}
        else if(type=="Dog"){   pa=new Dog(name,age);     pa->Speak();}
        else    cout<<"There is no "<<type<<"in our Zoo.\n";
    }
    return 0;
}

------------------------------------------------------
2017301020:Problem1120:正确
#include <iostream>

using namespace std;

class Animal{
protected:
    string name;
    int year;
public:
    Animal(string name1,int year1):name(name1),year(year1){}
    virtual void Speak()=0;
};

class Tiger:public Animal{
public:
    Tiger(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Tiger::Speak(){
    cout<<"Hello,I am "<<name<<",AOOO."<<endl;
}

class Dog:public Animal{
public:
    Dog(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Dog::Speak(){
    cout<<"Hello,I am "<<name<<",WangWang."<<endl;
}

class Duck:public Animal{
public:
    Duck(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Duck::Speak(){
    cout<<"Hello,I am "<<name<<",GAGA."<<endl;
}

class Pig:public Animal{
public:
    Pig(string name1,int year1):Animal(name1,year1){}
    virtual void Speak();
};

void Pig::Speak(){
    cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
}

int main()
{
    Animal *pv;
    int t,year;
    string name,type;
    cin>>t;
    while(t--){
        cin>>type>>name>>year;
        if(type=="Tiger"){
            Tiger a(name, year);
            pv=&a;
            pv->Speak();
        }

        else if(type=="Dog"){
            Dog a(name, year);
            pv=&a;
            pv->Speak();
        }
        else if(type=="Duck"){
            Duck a(name, year);
            pv=&a;
            pv->Speak();
        }
        else if(type=="Pig"){
            Pig a(name, year);
            pv=&a;
            pv->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2016073026:Problem1120:正确
#include <iostream>

using namespace std;

class Animal{
public:
    virtual void Speak()=0;
};

class Tiger:public Animal{
    string name;
    int age;
public:
    Tiger(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",AOOO.\n";}
};

class Dog:public Animal{
    string name;
    int age;
public:
    Dog(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",WangWang.\n";}
};

class Duck:public Animal{
    string name;
    int age;
public:
    Duck(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",GAGA.\n";}
};

class Pig:public Animal{
    string name;
    int age;
public:
    Pig(string na,int age_v):name(na),age(age_v){}
    virtual void Speak(){cout<<"Hello,I am "<<name<<",HENGHENG.\n";}
};

int main()
{
    Animal *pa;
    int t;
    cin>>t;
    while(t--){
        string type,name;
        int age;
        cin>>type>>name>>age;
        if(type=="Tiger"){    pa=new Tiger(name,age);     pa->Speak();}
        else if(type=="Pig"){   pa=new Pig(name,age);     pa->Speak();}
        else if(type=="Duck"){   pa=new Duck(name,age);     pa->Speak();}
        else if(type=="Dog"){   pa=new Dog(name,age);     pa->Speak();}
        else    cout<<"There is no "<<type<<" in our Zoo.\n";
    }
    return 0;
}

------------------------------------------------------
2017144045:Problem1232:正确
#include <iostream>
using namespace std;
 
class Vehicle
{ 
protected:
    string no;//编号
    int num;
    int weight;
public:
    virtual void display()=0;//应收费用
    Vehicle()
    {
	}
    Vehicle(string nom,int n,int w)
    {
    	no=nom;
    	num=n;
    	weight=w;
	}
};
class Car:public Vehicle
{
public:
	Car(string nom,int n,int w):Vehicle(nom,n,w)
	{
	} 
	virtual void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};

class Truck:public Vehicle
{
public:
	Truck(string nom,int w)
	{
		no=nom;
		weight=w;
	} 
	virtual void display()
	{
		cout<<no<<" "<<5*weight<<endl;
	}
};

class Bus:public Vehicle
{
public:
	Bus(string nom,int n)
	{
		no=nom;
		num=n;
	} 
	virtual void display()
	{
		cout<<no<<" "<<3*num<<endl;
	}
};

int main()
{
	int t;
	int a;
	string nom;
	int n,w;
	cin>>t;
	while(t--)
	{
		cin>>a>>nom;
		if(a==1)
		{
			cin>>n>>w;
			Vehicle *pv=new Car(nom,n,w);
			pv->display();
		}
		else if(a==2)
		{
			cin>>w;
			Vehicle *pv=new Truck(nom,w);
			pv->display();
		}
		else if(a==3)
		{
			cin>>n;
			Vehicle *pv=new Bus(nom,n);
			pv->display();
		}
	}
}

------------------------------------------------------
2018152021:Problem1232:正确
#include<iostream>
#include <string>
using namespace std;
class Vehicle           // 父类、基类  Vehicle
{
protected:              // 安全属性
    string no;          // 编号
public:                  // 公共属性
    Vehicle(string n):no(n){}
    virtual void display()=0;//计算应收费用
};
class Car:Vehicle        // 子类Car，继承父类Verhicle
{
public:
    int people,weight;
    Car(string n1,int p,int w):Vehicle(n1),people(p),weight(w){}
    void display()
    {
        cout << people*8+weight*2<<endl;  //  载客数8+重量2
    }
};
class Truck:Vehicle  // 子类Truck，继承父类Verhicle
{
    public:
    int weight;
    Truck(string n1,int w):Vehicle(n1),weight(w){}
    void display()
    {
        cout << weight*5<<endl;  // 重量*5
    }
};
class Bus:Vehicle    // 子类Bus，继承父类Verhicle
{
public:
    int people;
    Bus(string n1,int p):Vehicle(n1),people(p){}
    void display()
    {
        cout << people*3<<endl;  // 载客数*3
    }
};
int main()
{
    int t,num,people,weight;
    string no;
    Car car("",0,0);  // 实例化对象类，初始化Car的 载客数量，重量
    Truck truck("",0);
    Bus bus("",0);
    cin >> t;

    while(t--)
    {
        cin >> num;
        if(num==1)
        {
            cin >> no >> people >> weight;     // 获取 Car的 载客数量，重量
            car = Car(no,people,weight);
            cout << no << ' ';
            car.display();
        }
        if(num==2)
        {
            cin >> no >> weight;     // 获取Truck 的重量
            truck = Truck(no, weight);
            cout << no << ' ';
            truck.display();

        }
        if(num==3)
        {
            cin >> no >> people;     // 获取Bus的载客数
            bus = Bus(no, people);
            cout << no << ' ';
            bus.display();
        }
    }
    return 0;
}
------------------------------------------------------
2018192037:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;

class CAnimal
{
protected:
    string name;
    int age;
public:
    CAnimal(){}
    virtual void speak()=0;
};

class Tiger:public CAnimal
{
public:
    Tiger(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class Dog:public CAnimal
{
public:
    Dog(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class Duck:public CAnimal
{
public:
    Duck(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

class Pig:public CAnimal
{
public:
    Pig(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};


int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        int a;
        string type,n;
        cin>>type;
        cin>>n;
        cin>>a;
        if(type == "Tiger")
        {
            Tiger Tiger(n,a);
            Tiger.speak();
        }
        else if(type == "Dog")
        {
            Dog dog(n,a);
            dog.speak();
        }
        else if(type == "Duck")
        {
            Duck duck(n,a);
            duck.speak();
        }
        else if(type == "Pig")
        {
            Pig pig(n,a);
            pig.speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2018192014:Problem1235:答案错误
#include<bits/stdc++.h>
using namespace std;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry{
protected:
	double a,b;
public:
	Rect(double a1,double b1):
		a(a1),b(b1){	
		}
	virtual double getArea(){
		return a*b;
	}
};
class Circle:virtual public Geometry{
protected:
	double r;
public:
	Circle(double r1):
		r(r1){
		}
	virtual double getArea(){
		return r*r*3.14;
	}
};
class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		double res;
		for(int i=0;i<n;i++)
		{
			if(res<t[i]->getArea())
			{
				res=t[i]->getArea();
			}
		}
		cout<<"最大面积="<<res<<endl;
	}
};
int main ()
{
	Geometry **t;
	int n;
	cin>>n;
	t=new Geometry*[n];
	for(int i=0;i<n;i++)
	{
		int command;
		double a,b,r;
		cin>>command;
		if(command==1)
		{
			cin>>a>>b;
			t[i]=new Rect(a,b);
		}
		else
		{
			cin>>r;
			t[i]=new Circle(r);
		}
	}
	TotalArea a;
	a.computerTotalArea(t,n);
	return 0;
}
------------------------------------------------------
2018151085:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;

class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(string No):no(No){}
	virtual void display()=0;
};

class Car:public Vehicle
{
protected:
	int num;
	int weight;
public:
	Car(string No,int Num,int Weight):Vehicle(No),num(Num),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};

class Truck:public Vehicle
{
protected:
	int	weight;
public:
	Truck(string No,int Weight):Vehicle(No),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};

class Bus:public Vehicle
{
protected:
	int num;
public:
	Bus(string No,int Num):Vehicle(No),num(Num){}
	virtual void display()
	{
		cout<<no<<" "<<num*3<<endl;
	}
};

int main()
{
	int n,t;
	cin>>t;
	//Vehicle *p;
	//p=new Vehicle[n];
	
	string No;
	int Num,Weight;
	//for(int i=0;i<n;i++)
	while(t--)
	{
		//p[i];
		cin>>n;
		if(n==1)
		{
			cin>>No>>Num>>Weight;
			Car p(No,Num,Weight);
			p.display();
		}
		
		if(n==2)
		{
			cin>>No>>Weight;
			Truck p(No,Weight);
			p.display();
		}
		
		if(n==3)
		{
			cin>>No>>Num;
			Bus p(No,Num);
			p.display();
		}
	}
}
------------------------------------------------------
2018192006:Problem1232:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
    
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
    
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
  
  
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
  
/*Add Data Structures Here*/
class Veichle{
    public:
        virtual void display()=0;
        void setType(int i);
         
    protected:  
        int type;
        string name;
        int num;
        int weight;
 
};
class Car:public Veichle{
    public:
        void display();
        void readInfo();
    protected:
 
};
class Truck:public Veichle{
    public:
        void display();
        void readInfo();
    protected:
 
};
class Bus:public Veichle{
    public:
        void display();
        void readInfo();
    protected:
 
 
};
/*Add Functions Here*/
void
Car::display(){
    cout << this->name << " ";
    cout << this->num*8+this->weight*2 << endl;

}
void
Bus::display(){
    cout << this->name << " ";
    cout << this->num*3 << endl;
    
}
void
Truck::display(){
    cout << this->name << " ";

    cout << this->weight*5 << endl;

}
void
Car::readInfo(){
    cin >> this->name >> this->num >> this->weight;
}
void
Truck::readInfo(){
    cin >> this->name >> this->weight;
}
void
Bus::readInfo(){
    cin >> this->name >> this->num ;
}
void
Veichle::setType(int n){
    this->type=n;
}
/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
    Veichle *ptr;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
        int n;
        cin >> n;
        if(n==1){
            Car A;
            ptr=&A;
            ptr->setType(n);
            A.readInfo(); 
            ptr->display();
        }else if(n==2){
            Truck B;
            ptr=&B;
            ptr->setType(n);
            B.readInfo();
            ptr->display();
        }else{
            Bus C;
            ptr=&C;
            ptr->setType(n);
            C.readInfo();
            ptr->display();
        }
    }
#endif
    /*Final process here.*/
  
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2018151031:Problem1119:正确
#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

class BaseAccount{
	protected:
		string name;
		string account;
		float balance;
	public:
		BaseAccount(string _name="Lebron",string _account="BA000",float _balance=10000){
			name=_name;
			account=_account;
			balance=_balance;
		}
		virtual void deposit(float money){
			balance+=money;
		}
		virtual void withdraw(float money){
			if(money>balance)
				cout<<"insufficient"<<endl;
			else
				balance-=money;
		}
		virtual void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
		}
};

class BasePlus:public BaseAccount{
	private:
		float limit;
		float limit_sum;
	public:
		BasePlus(string _name="Lebron",string _account="BP000",float _balance=10000,float _limit=5000,float _limit_sum=0):BaseAccount(_name,_account,_balance){
			limit=_limit;
			limit_sum=_limit_sum;
		}
		void deposit(float money){
			if(limit_sum==0)
			{
				balance+=money;
			}
			else
			{
				if(limit_sum>money)
				{
					limit_sum-=money;
				}
				else
				{
					balance=balance+(money-limit_sum);
					limit_sum=0;
				}
			}
		}
		void withdraw(float money){
			if(money<=balance)
			{
				balance-=money;
			}
			else
			{
				if(money<=(balance+(limit-limit_sum)))
				{
					limit_sum=limit_sum+(money-balance);
					balance=0;
				}
				else
				{
					cout<<"insufficient"<<endl;
				}
			}
		}
		void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
		}
};

int main ()
{
	int t;
	cin>>t;
	while(t--)
	{
		string _name,_account;
		float _balance;
		float a,b,c,d;
		cin>>_name;
		cin>>_account;
		cin>>_balance>>a>>b>>c>>d;
		BaseAccount *p;
		if(_account[1]=='A')
		{
			BaseAccount account(_name,_account,_balance);
			p=&account;
			p->deposit(a);
			p->withdraw(b);
			p->deposit(c);
			p->withdraw(d);
			p->display();
		}
		else 
		{
			BasePlus account(_name,_account,_balance,5000,0);
			p=&account;
			p->deposit(a);
			p->withdraw(b);
			p->deposit(c);
			p->withdraw(d);
			p->display();
		}
	}
	return 0;
}
------------------------------------------------------
2017182013:Problem1120:答案错误
#include <bits/stdc++.h>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n="",int a=0):name(n),age(a){}
    virtual void speak()=0;
};
class Tiger:public Animal
{

public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\c\\s.txt",stdin,"r");
    int n;
    cin>>n;
    while(n--)
    {
        Animal *pv;
        string type;
        cin>>type;
        string name;
        int age;
        cin>>name>>age;
        if(type == "Tiger")
        {
            Tiger t(name ,age);
            pv = &t;
            pv->speak();
        }
        else if(type == "Pig")
        {
            Pig p(name,age);
            pv = &p;
            pv->speak();
        }
        else if(type == "Duck")
        {
            Duck d(name,age);
            pv = &d;
            pv->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;

    }
    return 0;
}

------------------------------------------------------
2018152019:Problem1232:正确
#include<iostream>

#include<string.h>

using namespace std;

class Vehicle
{
protected:

    string no;//编号

public:

    virtual void display()=0;//应收费用

};

class Car:public Vehicle
{
protected:
    //int type=1;
    int member;
    int weight;
public:
    Car(string n,int me,int we)
    {
        no=n;
        member=me;
        weight=we;
    }
    //:no(n),member(me),weight(we){}

    virtual void display()
    {
        cout<<no<<" "<<member*8+weight*2<<endl;
    }

    //void getType(){return type;}
};

class Truck:public Vehicle
{
protected:
    //int type=2;
    int weight;
public:
    Truck(string n,int we)
    {
        no=n;
        weight=we;
    }
    //:no(n),weight(we){}

    virtual void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }

    //void getType(){return type;}
};

class Bus:public Vehicle
{
protected:
    //int type=3;
    int member;
public:
    Bus(string n,int me)
    {
        no=n;
        member=me;
    }
    //:no(n),member(me){}

    virtual void display()
    {
        cout<<no<<" "<<member*3<<endl;
    }

    //void getType(){return type;}
};

int main()
{
    Vehicle *pv;
    int times;
    cin>>times;
    while(times--)
    {
        int t;
        cin>>t;
        if(t==1)
        {
            string n;
            int me,we;
            cin>>n>>me>>we;
            Car car(n,me,we);
            pv=&car;
            pv->display();
        }
        if(t==2)
        {
            string n;
            int we;
            cin>>n>>we;
            Truck truck(n,we);
            pv=&truck;
            pv->display();
        }
        if(t==3)
        {
            string n;
            int me;
            cin>>n>>me;
            Bus bus(n,me);
            pv=&bus;
            pv->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018152037:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;

class Animal
{
	string name;
	int nl;
public:
	Animal(string n,int l)
	{
		name=n;
		nl=l;
	}
	virtual void speak()
	{
	}
	void print()
	{
		cout<<"Hello,I am "<<name<<","; 
	}
};

class Tiger:public Animal
{
public:
	Tiger(string n,int l):Animal(n,l)
	{
	}
	void speak()
	{
		cout<<"AOOO."<<endl;
	}
};

class Dog:public Animal
{
public:
	Dog(string n,int l):Animal(n,l)
	{
	}
	void speak()
	{
		cout<<"WangWang."<<endl;
	}
};

class Duck:public Animal
{
public:
	Duck(string n,int l):Animal(n,l)
	{
	}
	void speak()
	{
		cout<<"GAGA."<<endl;
	}
};

class Pig:public Animal
{
public:
	Pig(string n,int l):Animal(n,l)
	{
	}
	void speak()
	{
		cout<<"HENGHENG."<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Animal *aa;
		string n,an;
		int l;
		cin>>an>>n>>l;
		if(an=="Tiger")
		{
			Tiger a1(n,l);
			aa=&a1;
			aa->print();
			aa->speak();
		}
		else if(an=="Dog")
		{
			Dog a2(n,l);
			aa=&a2;
			aa->print();
			aa->speak();
		}
		else if(an=="Duck")
		{
			Duck a3(n,l);
			aa=&a3;
			aa->print();
			aa->speak();
		}
		else if(an=="Pig")
		{
			Pig a4(n,l);
			aa=&a4;
			aa->print();
			aa->speak();
		}
		else
		{
			cout<<"There is no "<<an<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018192044:Problem1235:答案错误
#include <iostream>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    int l,h;
public:
    Rect(int l1,int h1):l(l1),h(h1){}
    double getArea()
    {
        return l*h;
    }
};
class Circle:public Geometry
{
    int r;
public:
    Circle(int r1):r(r1){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
   static void computerTotalArea(Geometry** t,int n)
   {
        double max=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        }
        cout<<"最大面积="<<max<<endl;
   }
};
int main()
{
    int t,r,l,h,i,type;
    cin>>t;
    Geometry **p=new Geometry*[t];

    for(i=0;i<t;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>l>>h;
            Rect A(l,h);
            p[i]=&A;
        }
        else
        {
            cin>>r;
            Circle A(r);
            p[i]=&A;
        }
    }
    TotalArea::computerTotalArea(p,t);
    return 0;
}

------------------------------------------------------
2017182013:Problem1120:正确
#include <bits/stdc++.h>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n="",int a=0):name(n),age(a){}
    virtual void speak()=0;
};
class Tiger:public Animal
{

public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\c\\s.txt",stdin,"r");
    int n;
    cin>>n;
    while(n--)
    {
        Animal *pv;
        string type;
        cin>>type;
        string name;
        int age;
        cin>>name>>age;
        if(type == "Tiger")
        {
            Tiger t(name ,age);
            pv = &t;
            pv->speak();
        }
        else if(type == "Pig")
        {
            Pig p(name,age);
            pv = &p;
            pv->speak();
        }
        else if(type == "Duck")
        {
            Duck d(name,age);
            pv = &d;
            pv->speak();
        }
        else if(type == "Dog")
        {
            Dog d(name,age);
            pv = &d;
            pv->speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;

    }
    return 0;
}

------------------------------------------------------
2018192009:Problem1119:答案错误
#include <iostream>

using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[6];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[6],int ba):name(n),balance(ba)
    {
        for(int i=0;i<6;i++)
            acc[i]=a[i];
    }
    void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[6],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                balance=0;
                limit_sum=-balance;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[6];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017081130:Problem1232:正确
#include <iostream>
using namespace std;
class Vehicle
{
protected:

    string no;//编号

public:
    Vehicle(){};
    Vehicle(string n):no(n){};
    virtual void display()=0;//应收费用

};
class Car:virtual public Vehicle
{
protected:
    int people;
    int weight;
public:
    Car(){};
    Car(string n,int p,int w):Vehicle(n),people(p),weight(w){};
    int addp()
    {
        int price=people*8+weight*2;
        return price;
    }
    void display()
    {
        cout<<no<<" "<<addp()<<endl;
    }

};
class Truck:virtual public Vehicle
{
protected:
    int weight1;
public:
    Truck(){};
    Truck(string n,int w):Vehicle(n),weight1(w){};
    int addp1()
    {
        int price=weight1*5;
        return price;
    }
    void display()
    {
        cout<<no<<" "<<addp1()<<endl;
    }
};
class Bus:virtual public Vehicle
{
protected:
    int people1;
public:
    Bus(){};
    Bus(string n,int p):Vehicle(n),people1(p){};
    int addp2()
    {
        int price=people1*3;
        return price;
    }
    void display()
    {
        cout<<no<<" "<<addp2()<<endl;
    }
};
int main()
{
    int t,people,weight,type;
    string no;
    cin>>t;
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>no>>people>>weight;
            Car c(no,people,weight);
            c.display();
        }
        else if(type==2)
        {
            cin>>no>>weight;
            Truck truck(no,weight);
            truck.display();
        }
        else if(type==3)
        {
            cin>>no>>people;
            Bus bus(no,people);
            bus.display();
        }
    }
}

------------------------------------------------------
2018152029:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;
 
class Animal
{
protected:
    string name;
    int year;
public:
    Animal(string n,int y):name(n),year(y){}
    virtual void Speak()=0;
 
};
 
class Tiger:public Animal
{
public:
    Tiger(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"AOOO."<<endl;
    }
};
 
class Pig:public Animal
{
public:
    Pig(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"HENGHENG."<<endl;
    }
};
 
class Duck:public Animal
{
public:
    Duck(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"GAGA."<<endl;
    }
};
 
class Dog:public Animal
{
public:
    Dog(string n,int y):Animal(n,y){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",";
        cout<<"WangWang."<<endl;
    }
};
 
int main()
{
    int T;
    cin>>T;
    Animal *pv;
    while(T--)
    {
        string kind,name;
        int year;
        cin>>kind>>name>>year;
        if(kind=="Tiger")
        {
            Tiger a(name,year);
            pv=&a;
            pv->Speak();
        }
        else if(kind=="Dog")
        {
            Dog a(name,year);
            pv=&a;
            pv->Speak();
        }
        else if(kind=="Duck")
        {
            Duck a(name,year);
            pv=&a;
            pv->Speak();
        }
        else if(kind=="Pig")
        {
            Pig a(name,year);
            pv=&a;
            pv->Speak();
        }
        else
            cout<<"There is no "<<kind<<" in our Zoo."<<endl;
    }
    return 0;
}
------------------------------------------------------
2018151058:Problem1232:正确
#include <iostream>
using namespace std;
class Vehilcle
{
protected:
    string no;
public:
    virtual void display()=0;
};
class Car:public Vehilcle
{
protected:
    int num;
    int weight;
public:
    Car(string n,int nm,int w)
    {
        no=n;
        num=nm;
        weight=w;

    }
    void display()
    {
        cout<<no<<" "<<(num*8+weight*2)<<endl;

    }
};
class Truck:public Vehilcle
{
protected:
    int weight;
public:
    Truck(string n,int w)
    {
        no=n;
        weight=w;
    }
    void display()
    {
        cout<<no<<" "<<(weight*5)<<endl;

    }
};
class Bus:public Vehilcle
{
protected:
    int num;
public:
    Bus(string n,int nm)
    {
        no=n;
        num=nm;
    }
    void display()
    {
        cout<<no<<" "<<(num*3)<<endl;

    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Vehilcle *pv;
        int type;
        cin>>type;
        string no;
        int weight,num;
        if(type==1)
        {
            cin>>no>>num>>weight;
            pv=new Car(no,num,weight);


        }
        if(type==2)
        {
            cin>>no>>weight;
            pv=new Truck(no,weight);

        }
        if(type==3)
        {
            cin>>no>>num;
            pv=new Bus(no,num);

        }
        pv->display();

    }
    return 0;
}

------------------------------------------------------
2018151044:Problem1120:正确
#include<string>
#include<iostream>
using namespace std;
class AN
{
protected:
	int year;
	string name;
public:
	AN(string s,int a):name(s),year(a) {}
	virtual void Speak()=0;
};
class Tiger:public AN
{
public:
	Tiger(string s,int a):AN(s,a) {}
	void Speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Dog:public AN
{
public:
	Dog(string s,int a):AN(s,a) {}
	void Speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};
class Duck:public AN
{
public:
	Duck(string s,int a):AN(s,a) {}
	void Speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
class Pig:public AN
{
public:
	Pig(string s,int a):AN(s,a) {}
	void Speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};
int main()
{
	int t;
	AN *p;
	cin>>t;
	while(t--)
	{
		string type,name;
		int year;
		cin>>type>>name>>year;
		if(type=="Tiger")
		{
			p=new Tiger(name,year);
			p->Speak();
			delete p;
		}
		else if(type=="Dog")
		{
			p=new Dog(name,year);
			p->Speak();
			delete p;
		}
		else if(type=="Duck")
		{
			p=new Duck(name,year);
			p->Speak();
			delete p;
		}
		else if(type=="Pig")
		{
			p=new Pig(name,year);
			p->Speak();
			delete p;
		}
		else 
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
	}
}
------------------------------------------------------
2016140066:Problem1120:正确
#include <iostream>
#include <string>
using namespace std;

class Animal
{
public:
    Animal() {}
    virtual void Speak() {};
	virtual ~Animal(){}
};

class Tiger : public Animal
{
private:
     string type, name;
     int age;

public:
    Tiger(string type_val, string name_val, int age_val)
    {
        type = type_val;
        name = name_val;
        age = age_val;
    }

    virtual void Speak()
    {
        cout << "Hello,I am " << name << ",AOOO." << endl;
    }
    ~Tiger(){}
};
class Pig : public Animal
{
private:
     string type, name;
     int age;

public:
    Pig(string type_val, string name_val, int age_val)
    {
        type = type_val;
        name = name_val;
        age = age_val;
    }
    virtual void Speak()
    {
        cout << "Hello,I am " << name << ",HENGHENG." << endl;
    }
    ~Pig(){}
};

class Dog : public Animal
{
private:
     string type, name;
     int age;

public:
    Dog(string type_val, string name_val, int age_val)
    {
        type = type_val;
        name = name_val;
        age = age_val;
    }
    virtual void Speak()
    {
        cout << "Hello,I am " << name << ",WangWang." << endl;
    }
    ~Dog(){}
};
class Duck : public Animal
{
private:
     string type, name;
     int age;

public:
    Duck(string type_val, string name_val, int age_val)
    {
        type = type_val;
        name = name_val;
        age = age_val;
    }
    virtual void Speak()
    {
        cout << "Hello,I am " << name << ",GAGA." << endl;
    }
    ~Duck(){}
};
void Speak(Animal *p)
{
    p->Speak();
}

int main()
{
    int t;
    string type, name;
    int age;
    cin >> t;
    while(t--)
    {
        cin >> type >> name >> age;
        if(type == "Tiger")
        {
            Tiger *p = new Tiger(type, name, age);
            Speak(p);
			delete p;
        }
        else if(type == "Pig")
        {
            Pig *p = new Pig(type, name, age);
            Speak(p);
			delete p;
        }
        else if(type == "Dog" )
        {
            Dog *p = new Dog(type, name, age);
            Speak(p);
			delete p;
        }
        else if(type == "Duck")
        {
            Duck *p = new Duck(type, name, age);
            Speak(p);
			delete p;
        }
        else
        {
            cout << "There is no " << type << " in our Zoo." << endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018151085:Problem1232:编译错误
#include<bits/stdc++.h>
using namespace std;

class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(string No):no(No){}
	virtual void display()=0;
};

class Car:public Vehicle
{
protected:
	int num;
	int weight;
public:
	Car(string No,int Num,int Weight):Vehicle(No),num(Num),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};

class Truck:public Vehicle
{
protected:
	int	weight;
public:
	Truck(string No,int Weight):Vehicle(No),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};

class Bus:public Vehicle
{
protected:
	int num;
public:
	Bus(string No,int Num):Vehicle(No),num(Num){}
	virtual void display()
	{
		cout<<no<<" "<<num*3<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	Vehicle *p;
	p=new Vehicle[n];
	
	string No;
	int Num,Weight,n;
	for(int i=0;i<t;i++)
	{
		p[i];
		cin>>n;
		if(n==1)
		{
			cin>>No>>Num>>Weight;
			Car p[i](No,Num,Weight);
			p[i]->display();
		}
		
		if(n==2)
		{
			cin>>No>>Weight;
			Truck p[i](No,Weight);
			p[i]->display();
		}
		
		if(n==3)
		{
			cin>>No>>Num;
			Bus p[i](No,Num);
			p[i]->display();
		}
	}
}
------------------------------------------------------
2018152114:Problem1120:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"WangWang"<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"GAGA"<<endl;
		}	
};
int main()
{
	int t;
	string _name,_no;
	int _old;
	cin>>t;
    while(t--)
	{
		cin>>_name;
		Animal* a;
		if(_name=="Tiger")
		{
			cin>>_no>>_old;
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
			cin>>_no>>_old;
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
			cin>>_no>>_old;
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{
			cin>>_no>>_old;
			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else if(_name!="Tiger"&&_name!="Duck"&&_name!="Pig"&&_name!="Dog")
			cout<<"There is no "<<_no<<" in our Zoo. "<<endl;
	}
	return 0;
}
------------------------------------------------------
2017182103:Problem1119:编译错误
#include <iostream>
using namespace std;

class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string n="",string a="",int b=0):name(n),account(a),balance(b) {}
    virtual void deposit(int m)
    {
        balance += m;
    }
    virtual void withdraw(int m)
    {
        if((balance-m)<0)
            cout<<"insufficient"<<endl;
        else
            balance -= m;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b),limit_sum(0),limit(5000){}
     virtual void deposit(int m)
    {
        if(limit_sum==0)
             balance += m;
        else if((limit_sum-m)<=0)
        {
            balance = m - limit_sum;
            limit_sum = 0;
            limit = 5000;
        }
        else
        {
            limit_sum = limit_sum - m;
            limit = 5000 - limit_sum;
        }
    }
    virtual void withdraw(int m)
    {
        if((balance+limit-m)<0)
            cout<<"insufficient"<<endl;
        else if((balance-m)<0&&(balance+limit-m)>=0)
            limit_sum = m - balance;
            balance = 0;
            limit = limit - limit_sum;
        }
        else
        {
            balance -= m;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *BA;

        string name,a;
        int b,m1,m2,m3,m4;

        cin>>name>>a>>b;
        cin>>m1>>m2>>m3>>m4;

        if(a[1]=='A')
        {
            BaseAccount ba(name,a,b);
            BA = &ba;
            BA->deposit(m1);
            BA->withdraw(m2);
            BA->deposit(m3);
            BA->withdraw(m4);
            BA->display();
        }
        else
        {
            BasePlus bp(name,a,b);
            BA = &bp;
            BA->deposit(m1);
            BA->withdraw(m2);
            BA->deposit(m3);
            BA->withdraw(m4);
            BA->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018151085:Problem1232:编译错误
#include<bits/stdc++.h>
using namespace std;

class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(string No):no(No){}
	virtual void display()=0;
};

class Car:public Vehicle
{
protected:
	int num;
	int weight;
public:
	Car(string No,int Num,int Weight):Vehicle(No),num(Num),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};

class Truck:public Vehicle
{
protected:
	int	weight;
public:
	Truck(string No,int Weight):Vehicle(No),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};

class Bus:public Vehicle
{
protected:
	int num;
public:
	Bus(string No,int Num):Vehicle(No),num(Num){}
	virtual void display()
	{
		cout<<no<<" "<<num*3<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	Vehicle *p;
	p=new Vehicle[t];
	
	string No;
	int Num,Weight,n;
	for(int i=0;i<t;i++)
	{
		p[i];
		cin>>n;
		if(n==1)
		{
			cin>>No>>Num>>Weight;
			Car p[i](No,Num,Weight);
			p[i]->display();
		}
		
		if(n==2)
		{
			cin>>No>>Weight;
			Truck p[i](No,Weight);
			p[i]->display();
		}
		
		if(n==3)
		{
			cin>>No>>Num;
			Bus p[i](No,Num);
			p[i]->display();
		}
	}
}
------------------------------------------------------
2018192014:Problem1235:答案错误
#include<bits/stdc++.h>
using namespace std;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry{
protected:
	double a,b;
public:
	Rect(double a1,double b1):
		a(a1),b(b1){	
		}
	virtual double getArea(){
		return a*b;
	}
};
class Circle:virtual public Geometry{
protected:
	double r;
public:
	Circle(double r1):
		r(r1){
		}
	virtual double getArea(){
		return r*r*3.14;
	}
};
class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		double res;
		for(int i=0;i<n;i++)
		{
			if(res<t[i]->getArea())
			{
				res=t[i]->getArea();
			}
		}
		cout<<"最大面积="<<res;
	}
};
int main ()
{
	Geometry **t;
	int n;
	cin>>n;
	t=new Geometry*[n];
	for(int i=0;i<n;i++)
	{
		int command;
		double a,b,r;
		cin>>command;
		if(command==1)
		{
			cin>>a>>b;
			t[i]=new Rect(a,b);
		}
		else
		{
			cin>>r;
			t[i]=new Circle(r);
		}
	}
	TotalArea a;
	a.computerTotalArea(t,n);
	return 0;
}
------------------------------------------------------
2018192009:Problem1119:答案错误
#include <iostream>

using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[6];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[6],int ba):name(n),balance(ba)
    {
        for(int i=0;i<6;i++)
            acc[i]=a[i];
    }
    void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[6],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                limit_sum=-balance;
                balance=0;
                limit-=limit_sum;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[6];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018151014:Problem1235:答案错误
#include <iostream>
#include <algorithm>
#include <string>

using namespace std;

class Geometry {
public:
	virtual double getArea() = 0;
};

class Rect : public Geometry {
public:
	Rect(double l, double w) : length(l), width(w) {
		
	}
	
	double getArea() {
		return length * width;
	}
private:
	double length;
	double width;
};

class Circle : public Geometry {
public:
	Circle(double r) : radius(r) {
	
	}
	
	double getArea() {
		return 3.14 * radius * radius;
	}
protected:
	double radius;
};

class TotalArea {	
public:
	static void computerTotalArea(Geometry **t, int n) {
		double *areas = new double[n];
		
		for (int i = 0; i < n; i++) {
			areas[i] = t[i]->getArea();
		}
		
		double max_value = areas[0];
		for (int i = 1; i < n; i++) {
			if (areas[i] > max_value) {
				max_value = areas[i];
			}
		} 
		
		cout << "最大面积=" << max_value;
		delete[] areas;
	}
};

int main(void) {
	
	int t;
	cin >> t;
	
	Geometry **ptr = new Geometry *[t];
	for (int i = 0; i < t; i++) {
		int type;
		cin >> type;
		if (type == 1) {
			double x;
			double y;
			
			cin >> x >> y;
			ptr[i] = new Rect(x, y);
		}
		else if (type == 2) {
			double r;
			
			cin >> r;
			ptr[i] = new Circle(r);
		}
	}
	
	TotalArea::computerTotalArea(ptr, t);
	for (int i = 0; i < t; i++) {
		delete ptr[i];
	}
	delete[] ptr;
	
	return 0;
}
------------------------------------------------------
2018192040:Problem1119:答案错误
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class BaseAccount{ 
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){
	};
	BaseAccount(string n,string a,int b):name(n),account(a),balance(b){
	};
	virtual void display(){
		cout<<name<<" "<<"BA"<<account<<" Balance:"<<balance<<endl;
	}
	void deposit(int num){
		balance += num;
	}
	virtual void withdraw(int num){
		if(balance < num)
			cout<<"insufficient"<<endl;
		else
			balance -= num;
	}
};

class BasePlus:public BaseAccount{
	int limit;
	int limit_sum;
public:
	BasePlus():limit(5000),limit_sum(0){
	};
	BasePlus(string n,string a,int b):limit(5000),BaseAccount(n,a,b){
	};
	void display(){
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
	void withdraw(int num){
		if(balance + limit < num)
			cout<<"insufficient"<<endl;
		else if(balance < num){
			int N = num - balance;
			balance = 0;
			limit -= N;
		}
		else{
			balance -= num;
		}
	}
};



int main(){
	int n;
	cin>>n;
	while(n--){
		string name,account;
		int balance;
		cin>>name>>account>>balance;
		if(!account.find("BA")){
			BaseAccount ba(name,account,balance);
			int n1,n2,n3,n4;
			cin>>n1>>n2>>n3>>n4;
			ba.deposit(n1);
			ba.withdraw(n2);
			ba.deposit(n3);
			ba.withdraw(n4);
			ba.display();
		}
		else{
			BasePlus bp(name,account,balance);
			int n1,n2,n3,n4;
			cin>>n1>>n2>>n3>>n4;
			bp.deposit(n1);
			bp.withdraw(n2);
			bp.deposit(n3);
			bp.withdraw(n4);
			bp.display();
		}
	}
}
------------------------------------------------------
2018152010:Problem1119:答案错误
#include<iostream>

using namespace std;
class BaseAccoumt
{
protected:
    string name,account;
    float balance;
public:
    BaseAccoumt(string na,string acc,float bal):name(na),account(acc),balance(bal){}
    virtual void Deposit(float money)
    {
        balance=balance+money;
    }
    virtual void Withdraw(float money)
    {
        if(balance-money>=0)
            balance=balance-money;
        else
            cout<<"insufficient"<<endl;
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<' '<<"balance:"<<balance<<endl;

    }
};
class BasePlus:public BaseAccoumt
{
    float limit,limit_sum=0;
public:
    BasePlus(string name,string account,float balance):BaseAccoumt(name,account,balance),limit(5000){}
    void Deposit(float money)
    {
        balance=balance+money;
    }
    void Withdraw(float money)
    {
        if(balance-money>=-limit)
        {
            balance=balance-money;
            if(balance<0)
            {
                limit=limit+balance;
                balance=0;
            }
        }
        else
            cout<<"insufficient"<<endl;
    }
    void display()
    {
        cout<<name<<' '<<account<<' '<<"balance:"<<balance<<' '<<"limit:"<<limit<<endl;
    }
};

int main()
{
    string name,account;
    int t;
    float balance,money;
    BaseAccoumt *per;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccoumt BA(name,account,balance);
            per=&BA;
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            per->display();
        }
        else
        {
            BasePlus BP(name,account,balance);
            per=&BP;
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            per->display();
        }
    }
}

------------------------------------------------------
2018192010:Problem1119:正确
#include <iostream>

using namespace std;
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    ~BaseAccount(){}
    void deposit(int m)
    {
        balance += m;
    }
    virtual void withdraw(int m)
    {
        if(m <= balance)
            balance -= m;
        else
            cout << "insufficient" << endl;
    }
    virtual void display()
    {
        cout << name << ' ' << account << ' ' << "Balance:" << balance << endl;
    }
};
class BasePlus:public BaseAccount
{
protected:
    int limit,limit_sum;
public:
    BasePlus(){}
    BasePlus(string n,string a,int b):BaseAccount(n,a,b),limit(5000),limit_sum(0){}
    void withdraw(int m)
    {
        if(m <= balance)
            balance -= m;
        else if(m <= balance+limit)
        {
            limit = limit - (m-balance);
            limit_sum = m - balance;
            balance = 0;
        }
        else
            cout << "insufficient" << endl;
    }
    void display()
    {
        cout << name << ' ' << account << ' ' << "Balance:" << balance;
        cout << ' ' << "limit:" << limit << endl;
    }
};
int main()
{
    int t;
    string no,name;
    int b,m;
    cin >> t;
    while(t--)
    {
        BaseAccount *pv;
        cin >> name >> no >> b;
        if(no[1]=='A')
        {
            pv = new BaseAccount(name,no,b);
            cin >> m;
            pv->deposit(m);
            cin >> m;
            pv->withdraw(m);
            cin >> m;
            pv->deposit(m);
            cin >> m;
            pv->withdraw(m);
            pv->display();
            delete pv;
        }
        else if(no[1]=='P')
        {
            pv = new BasePlus(name,no,b);
            cin >> m;
            pv->deposit(m);
            cin >> m;
            pv->withdraw(m);
            cin >> m;
            pv->deposit(m);
            cin >> m;
            pv->withdraw(m);
            pv->display();
            delete pv;
        }
    }
    return 0;
}

------------------------------------------------------
2018192044:Problem1235:正确
#include <iostream>
using namespace std;
#include<iomanip>
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    double l,h;
public:
    Rect(double l1,double h1):l(l1),h(h1){}
    double getArea()
    {
        return l*h;
    }
};
class Circle:public Geometry
{
    int r;
public:
    Circle(int r1):r(r1){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
   static void computerTotalArea(Geometry** t,int n)
   {
        double max=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
   }
};
int main()
{
    int t,r,i,type;
    double l,h;
    cin>>t;
    Geometry **p=new Geometry*[t];
    for(i=0;i<t;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>l>>h;
            Rect A(l,h);
            p[i]=&A;
        }
        else
        {
            cin>>r;
            Circle A(r);
            p[i]=&A;
        }
    }
    TotalArea::computerTotalArea(p,t);
    return 0;
}

------------------------------------------------------
2018151014:Problem1235:正确
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <string>

using namespace std;

class Geometry {
public:
	virtual double getArea() = 0;
};

class Rect : public Geometry {
public:
	Rect(double l, double w) : length(l), width(w) {
		
	}
	
	double getArea() {
		return length * width;
	}
private:
	double length;
	double width;
};

class Circle : public Geometry {
public:
	Circle(double r) : radius(r) {
	
	}
	
	double getArea() {
		return 3.14 * radius * radius;
	}
protected:
	double radius;
};

class TotalArea {	
public:
	static void computerTotalArea(Geometry **t, int n) {
		double *areas = new double[n];
		
		for (int i = 0; i < n; i++) {
			areas[i] = t[i]->getArea();
		}
		
		double max_value = areas[0];
		for (int i = 1; i < n; i++) {
			if (areas[i] > max_value) {
				max_value = areas[i];
			}
		} 
		
		cout << fixed << setprecision(2) << "最大面积=" << max_value;
		delete[] areas;
	}
};

int main(void) {
	
	int t;
	cin >> t;
	
	Geometry **ptr = new Geometry *[t];
	for (int i = 0; i < t; i++) {
		int type;
		cin >> type;
		if (type == 1) {
			double x;
			double y;
			
			cin >> x >> y;
			ptr[i] = new Rect(x, y);
		}
		else if (type == 2) {
			double r;
			
			cin >> r;
			ptr[i] = new Circle(r);
		}
	}
	
	TotalArea::computerTotalArea(ptr, t);
	for (int i = 0; i < t; i++) {
		delete ptr[i];
	}
	delete[] ptr;
	
	return 0;
}
------------------------------------------------------
2018192037:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;

class CAnimal
{
protected:
    string name;
    int age;
public:
    CAnimal(){}
    virtual void speak()=0;
};

class Tiger:public CAnimal
{
public:
    Tiger(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class Dog:public CAnimal
{
public:
    Dog(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class Duck:public CAnimal
{
public:
    Duck(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

class Pig:public CAnimal
{
public:
    Pig(string n,int y)
    {
        name = n;
        age = y;
    }
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};


int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        CAnimal *p;
        int a;
        string type,n;
        cin>>type;
        cin>>n;
        cin>>a;
        if(type == "Tiger")
        {
            Tiger Tiger(n,a);
            p = &Tiger;
            p->speak();
        }
        else if(type == "Dog")
        {
            Dog dog(n,a);
            p = &dog;
            p->speak();
        }
        else if(type == "Duck")
        {
            Duck duck(n,a);
            p = &duck;
            p->speak();
        }
        else if(type == "Pig")
        {
            Pig pig(n,a);
            p = &pig;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }

    }
}

------------------------------------------------------
2017182103:Problem1119:正确
#include <iostream>
using namespace std;

class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string n="",string a="",int b=0):name(n),account(a),balance(b) {}
    virtual void deposit(int m)
    {
        balance += m;
    }
    virtual void withdraw(int m)
    {
        if((balance-m)<0)
            cout<<"insufficient"<<endl;
        else
            balance -= m;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
    int limit;
    int limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b),limit_sum(0),limit(5000){}
     virtual void deposit(int m)
    {
        if(limit_sum==0)
             balance += m;
        else if((limit_sum-m)<=0)
        {
            balance = m - limit_sum;
            limit_sum = 0;
            limit = 5000;
        }
        else
        {
            limit_sum = limit_sum - m;
            limit = 5000 - limit_sum;
        }
    }
    virtual void withdraw(int m)
    {
        if((balance+limit-m)<0)
            cout<<"insufficient"<<endl;
        else if((balance-m)<0&&(balance+limit-m)>=0)
        {
            limit_sum = m - balance;
            balance = 0;
            limit = limit - limit_sum;
        }
        else
        {
            balance -= m;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *BA;

        string name,a;
        int b,m1,m2,m3,m4;

        cin>>name>>a>>b;
        cin>>m1>>m2>>m3>>m4;

        if(a[1]=='A')
        {
            BaseAccount ba(name,a,b);
            BA = &ba;
            BA->deposit(m1);
            BA->withdraw(m2);
            BA->deposit(m3);
            BA->withdraw(m4);
            BA->display();
        }
        else
        {
            BasePlus bp(name,a,b);
            BA = &bp;
            BA->deposit(m1);
            BA->withdraw(m2);
            BA->deposit(m3);
            BA->withdraw(m4);
            BA->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018152035:Problem1119:正确
#include <iostream>
#include<stdio.h>
#include<string>
using namespace std;
class BaseAccount
{
protected:
    string name,idnumber;
    int balance;
public:
    BaseAccount(string n,string i,int b):name(n),idnumber(i),balance(b) {}
    virtual void deposit(int m)
    {
        balance+=m;
    }
    virtual void withdraw(int m)
    {
        if(balance-m>=0)
            balance-=m;
        else
            cout<<"insufficient"<<endl;
    }
    virtual void display()
    {
        cout<<name<<' '<<idnumber<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string i,int b):BaseAccount(n,i,b),limit(5000),limit_sum(0) {}
    void withdraw(int m)
    {
        int n=balance-m;
        if(n>=0)
            balance-=m;
        else
        {
            if(n+limit>=0)
            {
                balance=0;
                limit+=n;
                limit_sum-=n;
            }
            else
            {
                cout<<"insufficient"<<endl;
            }
        }
    }
    void display()
    {
        cout<<name<<' '<<idnumber<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int T,a,t;
    string n,type;
    cin>>T;
    while(T--)
    {
        t=2;
        BaseAccount *p;
        cin>>n>>type;
        if(type[0]=='B'&&type[1]=='A')
        {
            cin>>a;
            BaseAccount aa(n,type,a);
            p=&aa;
            while(t--)
            {
                cin>>a;
                p->deposit(a);
                cin>>a;
                p->withdraw(a);
            }
            p->display();
        }
        else
        {
            cin>>a;
            BasePlus aa(n,type,a);
            p=&aa;
            while(t--)
            {
                cin>>a;
                p->deposit(a);
                cin>>a;
                p->withdraw(a);
            }
            p->display();
        }
    }
}

------------------------------------------------------
2018192026:Problem1119:正确
#include<stdio.h>
#include<string.h>
class BaseAccount
{
protected:
	char *name;
	char *number;
	int balance;
public:
	BaseAccount(char *n,char *nu,int b):balance(b)
	{
		name=new char[10];
		number=new char[10];
		strcpy(name,n),strcpy(number,nu);
	}
	virtual void withdraw(int b)
	{
		if(b<=balance)
			balance-=b;
		else
			printf("insufficient\n");
	}
	void deposit(int b)
	{
		balance+=b;
	}
	virtual void display()
	{
		printf("%s %s Balance:%d\n",name,number,balance);
	}
};
class BasePlus:public BaseAccount
{
protected:
	int limit;
	int limit_sum;
public:
	BasePlus(char *n,char *nu,int b):BaseAccount(n,nu,b)
	{
		limit=5000;
		limit_sum=0;
	}
	void withdraw(int b)
	{
		if(balance==b)
			balance-=b;
		else if(balance+limit>=b)
			limit_sum+=b-balance,balance=0;
		else
			printf("insufficient\n");
	}
	void display()
	{
		printf("%s %s Balance:%d limit:%d\n",name,number,balance,limit-limit_sum);
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		getchar();
		char *name=new char[10];
		char *number=new char[10];
		int balance,amount;
		BaseAccount *B;
		scanf("%s %s %d",name,number,&balance);
		if(number[0]=='B'&&number[1]=='A')
		{
			BaseAccount B1(name,number,balance);
			B=&B1;
			for(int i=0;i<4;i++)
			{
				scanf("%d",&amount);
				if(i%2)
					B->withdraw(amount);
				else
					B->deposit(amount);
			}
			B->display();
		}
		else if(number[0]=='B'&&number[1]=='P')
		{
			BasePlus B2(name,number,balance);
			B=&B2;
			for(int i=0;i<4;i++)
			{
				scanf("%d",&amount);
				if(i%2)
					B->withdraw(amount);
				else
					B->deposit(amount);
			}
			B->display();
		}
	}
	return 0;
}

------------------------------------------------------
2018152062:Problem1119:正确
#include <iostream>
using namespace std;
/*某银行的支票账户分为两类，一类为基本支票账户BaseAccount，另一类为具有透支保护特性的BasePlus支票账户。
BaseAccount支票账户的信息包括：客户姓名(name)、账户(account)、当前结余(balance)；
BaseAccount支票账户可以执行的操作包括：存款(deposit)、取款(withdraw)、显示账户信息(display)。
注意：取款金额不能透支，否则显式出错信息“insufficient”。*/
class BaseAccount
{
protected:
    string name;
    string account;
    float balance;
public:
    BaseAccount(string _name,string _account,float _balance):name(_name),account(_account),balance(_balance){}
    virtual void deposit(float e)
    {
        balance+=e;
    }
    virtual void withdraw(float e)
    {
        if(e<=balance)
            balance-=e;
        else
            cout<<"insufficient"<<endl;
    }
    virtual void print()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
/*BasePlus支票账户除包含BaseAccount的所有信息外，还包括以下信息：透支上限(limit：默认为5000)，
当前透支总额(limit_sum)；BasePlus支票账户可执行的操作与BaseAccount相同，
但有两种操作的实现不同：(1)对于取款操作，可以在透支上限范围内透支，超过则显示出错信息“insufficient”；
(2)对于显示操作，必须显示BasePlus的其他信息。
请实现BaseAccount类和BasePlus类，其中BasePlus类继承于BaseAccount类，
注意BaseAccount账户名称以BA开头，BasePlus账户名称以BP开头。
要求只使用一个基类指针，指向所建立的对象，然后使用指针调用类中的方法。*/
class BasePlus:public BaseAccount
{
protected:
    float limit;
public:
    BasePlus(string _name,string _account,float _balance):BaseAccount(_name,_account,_balance)
    {
        limit=5000;
    }
    void deposit(float e)
    {
        balance+=e;
    }
    void withdraw(float e)
    {
        if(e<=limit+balance)
        {
            if(e<=balance)
                balance-=e;
            else
            {
                limit-=(e-balance);
                balance=0;
            }
        }
        else
            cout<<"insufficient"<<endl;
    }
    void print()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *p;
        string name;
        char account[10];
        float balance;
        float d1,w1,d2,w2;
        cin>>name>>account>>balance>>d1>>w1>>d2>>w2;
        if(account[1]=='A')
        {
            BaseAccount u(name,account,balance);
            p=&u;
            p->deposit(d1);
            p->withdraw(w1);
            p->deposit(d2);
            p->withdraw(w2);
            p->print();
        }
        else
        {
            BasePlus v(name,account,balance);
            p=&v;
            p->deposit(d1);
            p->withdraw(w1);
            p->deposit(d2);
            p->withdraw(w2);
            p->print();
        }
    }
    return 0;
}

------------------------------------------------------
2018152108:Problem1119:正确
#include<iostream>
using namespace std;

class BaseAccount
{
protected:
	string name,account;
	int balance;
public:
	BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
	void deposit(int m)
	{
		balance+=m;
	}
	virtual void withdraw(int m)
	{
		if(m<=balance)
		{
			balance-=m;
		}
		else
		{
			cout<<"insufficient"<<endl;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};

class BasePlus:public BaseAccount
{
	int limit,limit_sum;
public:
	BasePlus(string n,string a,int b):BaseAccount(n,a,b)
	{
		limit = 5000;
		limit_sum = 0;
	}
	void withdraw(int m)
	{
		if(m<=balance)
		{
			balance-=m;
		}
		else if(m<=balance+limit)
		{
			limit_sum = m-balance;
			limit -= m-balance;
			balance = 0;
		}
		else
		{
			cout<<"insufficient"<<endl;
		}
	}
	void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
};

int main()
{
	int t;
	BaseAccount *p;
	cin>>t;
	while(t--)
	{
		string n,ac;
		int b,x1,x2,x3,x4;
		cin>>n>>ac>>b>>x1>>x2>>x3>>x4;
		if(ac[1]=='A')
		{
			BaseAccount a(n,ac,b);
			p = &a;
			p->deposit(x1);
			p->withdraw(x2);
			p->deposit(x3);
			p->withdraw(x4);  
			p->display();
		}
		if(ac[1]=='P')
		{
			BasePlus a(n,ac,b);
			p = &a;
			p->deposit(x1);
			p->withdraw(x2);
			p->deposit(x3);
			p->withdraw(x4);  
			p->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018151051:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{
protected:
	string no;
public:
	Vehicle(){}
	virtual void display()=0;
};
class Car:public Vehicle
{
	int member;
	int zhongliang;
public:
	Car(string n,int m,int z)
	{
		no=n;
		member=m;
		zhongliang=z;
	}
	virtual void display()
	{
		int money;
		money=member*8+zhongliang*2;
		cout<<no<<" "<<money<<endl;
	}
};
class Truck:public Vehicle
{
	int zhongliang1;
public:
	Truck(string n,int z)
	{
		no=n;
		zhongliang1=z;	
	}
	virtual void display()
	{
		int money;
		money=zhongliang1*5;
		cout<<no<<" "<<money<<endl;
	}
};
class Bus:public Vehicle
{
	int member1;
public:
	Bus(string n,int m)
	{
		no=n;
		member1=m;	
	}
	virtual void display()
	{
		int money;
		money=member1*3;
		cout<<no<<" "<<money<<endl;
	}
};
int main()
{
	int n,i;
	cin>>n;
	for(i=1;i<=n;i++)
	{
		Vehicle *p;
		int type;
		cin>>type;
		if(type==1)
		{
			string no;
			int member;
			int zhongliang;
			cin>>no>>member>>zhongliang;
			p=new Car(no,member,zhongliang);
			p->display();
		}
		else if(type==2)
		{
			string no;
			int zhongliang;
			cin>>no>>zhongliang;
			p=new Truck(no,zhongliang);
			p->display();
		}
		else if(type==3)
		{
			string no;
			int member;
			cin>>no>>member;
			p=new Bus(no,member);
			p->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018192009:Problem1119:答案错误
#include <iostream>

using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[6];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[6],int ba):name(n),balance(ba)
    {
        for(int i=0;i<6;i++)
            acc[i]=a[i];
    }
    virtual void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[6],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
     virtual void deposit(int money)
    {
        if(limit_sum>0)
        {
            limit_sum-=money;
            if(limit_sum<0)
            {
                balance=-limit_sum;
                limit=5000;
                limit_sum=0;
            }
        }
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                limit_sum=-balance;
                balance=0;
                limit-=limit_sum;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[6];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192014:Problem1235:正确
#include<bits/stdc++.h>
using namespace std;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry{
protected:
	double a,b;
public:
	Rect(double a1,double b1):
		a(a1),b(b1){	
		}
	virtual double getArea(){
		return a*b;
	}
};
class Circle:virtual public Geometry{
protected:
	double r;
public:
	Circle(double r1):
		r(r1){
		}
	virtual double getArea(){
		return r*r*3.14;
	}
};
class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		double res;
		for(int i=0;i<n;i++)
		{
			if(res<t[i]->getArea())
			{
				res=t[i]->getArea();
			}
		}
		cout<<"最大面积="<<fixed<<showpoint<<setprecision(2)<<res;
	}
};
int main ()
{
	Geometry **t;
	int n;
	cin>>n;
	t=new Geometry*[n];
	for(int i=0;i<n;i++)
	{
		int command;
		double a,b,r;
		cin>>command;
		if(command==1)
		{
			cin>>a>>b;
			t[i]=new Rect(a,b);
		}
		else
		{
			cin>>r;
			t[i]=new Circle(r);
		}
	}
	TotalArea a;
	a.computerTotalArea(t,n);
	return 0;
}
------------------------------------------------------
2018041051:Problem1119:正确
#include<iostream>
#include<string>
#include<cstring>

using namespace std;

class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string name1,string account1,int balance1):name(name1),account(account1),balance(balance1){}
    void deposit(int num)
    {
        balance+=num;
    }
    virtual void withdraw(int num)
    {
        if((balance-num)>=0)
        {
            balance-=num;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
protected:
    int limit;
public:
    BasePlus()
    {
        limit=5000;
    }
    BasePlus(string name1,string account1,int balance1):BaseAccount(name1,account1,balance1)
    {
        limit=5000;
    }
    virtual void withdraw(int num)
    {
        if((balance-num+limit)>=0)
        {
            balance-=num;
            if(balance<0)
            {
                limit+=balance;
                balance=0;
            }
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};



int main()
{
    BaseAccount *BA;

    int t;
    cin>>t;
    while(t--)
    {
        int balance;
        string name,account;
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BA=new BaseAccount(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
        else
        {
            BA= new BasePlus(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
    }

    return 0;
}

------------------------------------------------------
2018151085:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;

class Vehicle
{ 
protected:
	string no;
public:
	Vehicle(string No):no(No){}
	virtual void display()=0;
};

class Car:public Vehicle
{
protected:
	int num;
	int weight;
public:
	Car(string No,int Num,int Weight):Vehicle(No),num(Num),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
};

class Truck:public Vehicle
{
protected:
	int	weight;
public:
	Truck(string No,int Weight):Vehicle(No),weight(Weight){}
	virtual void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
};

class Bus:public Vehicle
{
protected:
	int num;
public:
	Bus(string No,int Num):Vehicle(No),num(Num){}
	virtual void display()
	{
		cout<<no<<" "<<num*3<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	
	Vehicle *p;
	string No;
	int Num,Weight,n;
	
	while(t--)
	{
		
		cin>>n;
		if(n==1)
		{
			cin>>No>>Num>>Weight;
			p=new Car (No,Num,Weight);
			p->display();
			delete p;
		}
		
		if(n==2)
		{
			cin>>No>>Weight;
			p=new Truck (No,Weight);
			p->display();
		}
		
		if(n==3)
		{
			cin>>No>>Num;
			p=new Bus(No,Num);
			p->display();
		}
	}
}
------------------------------------------------------
2018152100:Problem1119:正确
#include <iostream>
#include <string>
using namespace std;

class BaseAccount
{
protected:
    string name;
    int balance;
    string account;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int w)
    {
        balance+=w;
    }
    virtual void withdraw(int w)
    {
        if (w<=balance)
            balance-=w;
        else cout << "insufficient" << endl;
    }
    virtual void display()
    {
        cout << name <<
        " " << account <<
         " Balance:" <<
         balance << endl;
    }
};

class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string a,int b,int l=5000,int ls=0):BaseAccount(n,a,b),limit(l),limit_sum(ls){}
    void withdraw(int w)
    {
        if (w<=balance) balance-=w;
        else if (w<=(balance+limit-limit_sum))
        {
            limit_sum+=(w-balance);
            balance=0;
        }
        else cout << "insufficient" << endl;
    }
    void display()
    {
        cout << name << " " << account << " Balance:" << balance  << " limit:" << limit-limit_sum << endl;
    }
};

int main()
{
    int t,b,w;
    string n,ac;
    cin >> t;
    BaseAccount *pb;
    while (t--)
    {
        cin >> n >> ac >> b;
        BaseAccount ba(n,ac,b);
        BasePlus bp(n,ac,b);
        if (ac[1]=='A') pb=&ba;
        else pb=&bp;
        for (int i=0;i<2;i++)
        {
            cin >> w;
            pb->deposit(w);
            cin >> w;
            pb->withdraw(w);
        }
        pb->display();

    }
    return 0;
}

------------------------------------------------------
2018152114:Problem1120:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"WangWang"<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"GAGA"<<endl;
		}	
};
int main()
{
	int t;
	string _name,_no;
	int _old;
	cin>>t;
    while(t--)
	{
		cin>>_name>>_no>>_old;
		Animal* a;
		if(_name=="Tiger")
		{
	
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
	
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
	
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{

			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else
			cout<<"There is no "<<_no<<" in our Zoo. "<<endl;
	}
	return 0;
}
------------------------------------------------------
2018182052:Problem1235:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Geometay
{
public:
    virtual double get_area()const=0;
};
class Rect:public Geometay
{
    double x,y;
public:
    Rect(double xx,double yy):x(xx),y(yy) {}
    virtual double get_area()const
    {
        return x*y;
    }
};
class Circle:public Geometay
{
    double r;
public:
    Circle(double rr):r(rr) {}
    virtual double get_area()const
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computeTotalArea(Geometay** t,int n)
    {
        if(n<=0)
            return;
        double ans(t[0]->get_area());
        for(int i=1; i<n; ++i)
        {
            double k=t[i]->get_area();
            if(ans<k)
                ans=k;
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<ans<<endl;
    }
};
int main()
{
 //   freopen(ADDRESS);
    int n(0);
    cin>>n;
    Geometay** pp=new Geometay*[n];
    int cmd(0);
    double d[2];
    for(int i=0; i<n; ++i)
    {
        cin>>cmd;
        if(cmd==1)
        {
            cin>>d[0]>>d[1];
            pp[i]=new Rect(d[0],d[1]);
        }
        else if(cmd==2)
        {
            cin>>d[0];
            pp[i]=new Circle(d[0]);
        }
    }
    TotalArea tem;
    tem.computeTotalArea(pp,n);
    for(int i=0; i<n; ++i)
        delete pp[i];
    delete pp;
    return 0;
}
------------------------------------------------------
2017047011:Problem1119:答案错误
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class baseAccount
{ 
protected:
	string name;
	string no;
	double balance;
public:
	baseAccount(){}
	baseAccount(string name1,string no1,double b);
	void deposit(double num);
	virtual void withdraw(double num);
	virtual void display();
};

baseAccount::baseAccount(string name1,string no1,double b){
	name=name1;no=no1;balance=b;
}

void baseAccount::deposit(double num){
	balance+=num;
}

void baseAccount::withdraw(double num){
	if(num>balance)
		cout<<"insufficient"<<endl;
	else
		balance-=num;
}

void baseAccount::display(){
	cout<<name<<" "<<no<<" Balance:"<<balance<<endl;
}
//------------------------
class Cplus:public baseAccount
{ 
protected:
	double limit;
	double lmtnum;
public:
	Cplus(string name1,string no1,double b);
	void withdraw(double num);
	void display();
};

Cplus::Cplus(string name1,string no1,double b){
	name=name1;no=no1;balance=b;limit=5000;lmtnum=0;
}

void Cplus::withdraw(double num){
	if(num>limit+balance)
		cout<<"insufficient"<<endl;
	else if(num<=balance)
		balance-=num;
	else{
		lmtnum+=(num-balance);
		if(lmtnum>5000)
			lmtnum=5000;
		balance=0;
	}
}

void Cplus::display(){
	cout<<name<<" "<<no<<" Balance:"<<balance<<" limit:"<<lmtnum<<endl;	
}
//------------------------
int main()
{
	int t,i;
	string name,no;
	double balance,num;
	
	cin>>t;
	while(t--)
	{
		cin>>name>>no>>balance;
		
		if(no[1]=='A'){
			baseAccount base(name,no,balance);
			for(i=0;i<4;i++){
				cin>>num;
				if(i%2==0)
					base.deposit(num);
				else 
					base.withdraw(num);				
			}
			base.display();
		}
		
		else if(no[1]=='P'){
			Cplus plus1(name,no,balance);
			for(i=0;i<4;i++){
				cin>>num;
				if(i%2==0)
					plus1.deposit(num);
				else 
					plus1.withdraw(num);				
			}
			plus1.display();
		}
		
	}
	
}
------------------------------------------------------
2018152007:Problem1119:正确
#include <iostream>

using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int a)
    {
        balance=balance+a;
    }
    virtual void withdraw(int a)
    {
        if(balance-a<0)
            cout<<"insufficient"<<endl;
        else
            balance=balance-a;
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
private:
    int limit;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b)
    {
        limit=5000;
    }
    void withdraw(int a)
    {
        if(balance-a<0)
        {
            if(balance+limit-a<0)
                cout<<"insufficient"<<endl;
            else
            {
                limit=limit-(a-balance);
                balance=0;
            }
        }
        else
            balance=balance-a;
    }
    void display()
    {
        cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<' '<<"limit:"<<limit<<endl;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        BaseAccount *B;
        string n,a;
        int b;
        cin>>n>>a>>b;
        int c,d,e,f;
        cin>>c>>d>>e>>f;
        if(a[1]=='A')
        {
            BaseAccount *A=new BaseAccount(n,a,b);
            B=A;
        }
        else
        {
            BasePlus *P=new BasePlus(n,a,b);
            B=P;
        }
        B->deposit(c);
        B->withdraw(d);
        B->deposit(e);
        B->withdraw(f);
        B->display();
    }
    return 0;
}

------------------------------------------------------
2018192009:Problem1119:答案错误
#include <iostream>

using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[6];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[6],int ba):name(n),balance(ba)
    {
        for(int i=0;i<6;i++)
            acc[i]=a[i];
    }
    virtual void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[6],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
     virtual void deposit(int money)
    {
        if(limit_sum>0)
        {
            limit_sum-=money;
            if(limit_sum<0)
            {
                balance=-limit_sum;
                limit=5000;
                limit_sum=0;
            }
            else
                limit+=money;
        }
        else
            balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                limit_sum=-balance;
                balance=0;
                limit-=limit_sum;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[6];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018152114:Problem1120:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"WangWang"<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"GAGA."<<endl;
		}	
};
int main()
{
	int t;
	string _name,_no;
	int _old;
	cin>>t;
    while(t--)
	{
		cin>>_name>>_no>>_old;
		Animal* a;
		if(_name=="Tiger")
		{
	
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
	
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
	
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{

			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else
			cout<<"There is no "<<_no<<" in our Zoo. "<<endl;
	}
	return 0;
}
------------------------------------------------------
2016150202:Problem1232:正确
#include<iostream>
#include<cstring>
using namespace std;
class Vehicle{
	protected:
		string no;
		public: 
		virtual void display()=0;
		Vehicle (string num):no(num){}
		~Vehicle(){}
		
		 
}; 

class Car: public Vehicle
{
	protected:
		int w,c;
		public:
			Car(string num,int whight,int customer):Vehicle(num),w(whight),c(customer){}
			~Car(){}
			virtual void display()
			{
				cout<<no<<" "<<w*8+c*2<<endl;
			} 
			
};

class Truck :public Vehicle
{
	protected:
		int w;
		public:
			Truck(string num,int whight):Vehicle(num),w(whight){}
			~Truck(){}
			void display(){

                int f;
				f=w*5;
				cout<<no<<" "<<f<<endl;
			}
	
};

class Bus : public Vehicle 
{
	
	protected:
		int c;
		public:
			
			Bus(string num,int customer):Vehicle(num),c(customer){}
			~Bus(){}
			void display()
			{
				int f;
				f=c*3;
				cout<<no<<" "<<f<<endl;
			}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int key;
		string no;
		int c,w;
		cin>>key;
	
		if(key==1)
		{
			
		 cin>>no>>w>>c;
		 Car cc(no,w,c);
		 Vehicle *pv=&cc;
		 cc.display();
		}
		if(key==2)
		{
		cin>>no>>w;
		Truck tt(no,w);
		Vehicle *pv=&tt;
	
		tt.display();
		}
		if(key==3)
		{
			cin>>no>>c;
			Bus bb(no,c);
			Vehicle *pv=&bb;
		
			bb.display();	
		}
   }
	
	
	return 0;
}



------------------------------------------------------
2018152044:Problem1235:运行错误
#include<iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
    double length,width;
public:
    Rect()
    {
    }
    Rect(double l,double w)
    {
        length=l;
        width=w;
    }
    double getArea()
    {
        double area=length*width;
        return area;
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle()
    {
    }
    Circle(double r_)
    {
        r=r_;
    }
    double getArea()
    {
        double area=r*r*3.14;
        return area;
    }
};
class TotalArea
{
public:
    TotalArea()
    {
    }
    static void computerTotalArea(Geometry **t,int n)
    {
        double *area;
        area=new double[n];
        for(int i=0;i<n;i++)
        {
            area[i]=t[i]->getArea();
        }
        double maxarea=area[0];
        for(int i=0;i<n;i++)
        {
            if(maxarea<area[i])
                maxarea=area[i];
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxarea<<endl;
    }
};

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        double x,y,r;
        Geometry *s[1000];
        int type;
        int i=0;
        while(cin>>type)
        {
            i++;
            if(type==1)
            {
                cin>>x>>y;
                s[i]=new Rect(x,y);
            }
            else if(type==2)
            {
                cin>>r;
                s[i]=new Circle(r);
            }
        }
        TotalArea Total;
        Total.computerTotalArea(s,i);
    }
    return 0;
}
------------------------------------------------------
2018152114:Problem1120:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"WangWang."<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"GAGA."<<endl;
		}	
};
int main()
{
	int t;
	string _name,_no;
	int _old;
	cin>>t;
    while(t--)
	{
		cin>>_name>>_no>>_old;
		Animal* a;
		if(_name=="Tiger")
		{
	
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
	
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
	
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{

			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else
			cout<<"There is no "<<_no<<" in our Zoo. "<<endl;
	}
	return 0;
}
------------------------------------------------------
2018151027:Problem1119:编译错误
v#include <iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    string name;
    char account[10];
    int balance;
public:
    BaseAccount(string n,char *a,int b):name(n),balance(b)
    {
        strcpy(account,a);
    }
    void deposit(int g)
    {
        balance+=g;
    }
    virtual void withdraw(int g)
    {
        if(g>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=g;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus: public BaseAccount
{
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(string n,char *a,int b):BaseAccount(n,a,b),limit(5000),limit_sum(0){}
    void withdraw(int g)
    {
        if(g>limit-limit_sum+balance)
            cout<<"insufficient"<<endl;
        else if(g>balance)
        {
            g-=balance;
            balance=0;
            limit_sum+=g;
        }
        else
            balance-=g;
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};

main()
{
   string name;
    char account[10];
    int balance;
    int gold;
    int t;
    BaseAccount *p;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            p=new BaseAccount(name,account,balance);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            p->display();
        }
        else
        {
            p=new BasePlus(name,account,balance);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            p->display();
        }

    }

}

------------------------------------------------------
2018192046:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    double balance;
public:
    BaseAccount(string _name,string _account,double _balance):name(_name),account(_account),balance(_balance){}
    virtual void deposit(double r)
    {
        balance+=r;
    }
    virtual void withdraw(double r)
    {
        if(r>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=r;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    double limit;
    double limit_sum;
public:
    BasePlus(string _name,string _account,double _balance):BaseAccount(_name,_account,_balance)
    {
        limit=5000;
        limit_sum=0;
    }
    void deposit(double r)
    {
        if(limit_sum!=0)
        {
            limit_sum-=r;
            if(limit_sum<0)
            {
                balance=balance+limit_sum*(-1);
                limit_sum=0;
            }
        }
        else
        {
            balance+=r;
        }
        //display();
    }
    void withdraw(double r)
    {
        if((balance+limit-limit_sum)>=r)
        {
            if(balance-r<0)
            {
                r=r-balance;
                balance=0;
                limit_sum+=r;
            }
            else
            {
                balance-=r;
            }
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
        //display();
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;

    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string name,account;
        double balance;
        cin>>name>>account>>balance;
        string flag(account,0,2);
        if(flag=="BA")
        {
            BaseAccount P(name,account,balance);
            double num;
            cin>>num;
            P.deposit(num);
            cin>>num;
            P.withdraw(num);
            cin>>num;
            P.deposit(num);
            cin>>num;
            P.withdraw(num);
            P.display();
        }
        else if(flag=="BP")
        {
            BasePlus P(name,account,balance);
            double num;
            cin>>num;
            P.deposit(num);
            cin>>num;
            P.withdraw(num);
            cin>>num;
            P.deposit(num);
            cin>>num;
            P.withdraw(num);
            P.display();
        }
    }
}

------------------------------------------------------
2018152114:Problem1120:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"WangWang."<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<","<<"GAGA."<<endl;
		}	
};
int main()
{
	int t;
	string _name,_no;
	int _old;
	cin>>t;
    while(t--)
	{
		cin>>_name>>_no>>_old;
		Animal* a;
		if(_name=="Tiger")
		{
	
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
	
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
	
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{

			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else
			cout<<"There is no "<<_no<<" in our Zoo."<<endl;
	}
	return 0;
}
------------------------------------------------------
2018192006:Problem1235:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
    
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
    
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
  
  
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
  
/*Add Data Structures Here*/
class Geometry{
	public:
    	virtual double getArea()=0;
};
class Rect:public Geometry{
	public:
		double getArea(){return this->length*this->width;};
		void readInfo();
	protected:
		double length;
		double width;
};
class Circle:public Geometry{
	public:
		double getArea(){return 3.14*this->radius*this->radius;};
		void readInfo();
	protected:
		double radius;
};
class TotalArea{
	public:
   		static void computerTotalArea(Geometry** t,int n);
	private:

};
/*Add Functions Here*/
void 
Rect::readInfo(){
	cin >> this->length >> this->width;
}
void 
Circle::readInfo(){
	cin >> this->radius;
}
void
TotalArea::computerTotalArea(Geometry** t,int n){
	int i;
	double tmp,max=INT_MIN;
	for(i=0;i<n;++i){
		tmp=t[i]->getArea();
		if(tmp>max)
			max=tmp;
	}
	cout << std::fixed << std::setprecision(2) << "最大面积=" << max << endl;
}
/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
    TotalArea M;
    Geometry** ptr=new Geometry*[rounds];
    int max=INT_MIN;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
    	int n;
    	cin >> n;
    	if(n==1){
    		Rect A;
    		ptr[round-1]=&A;
    		A.readInfo();
    
		}else{
			Circle B;
			ptr[round-1]=&B;
			B.readInfo();
			
		}
    }
    M.computerTotalArea(ptr,rounds);
#endif
    /*Final process here.*/
  
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2018151020:Problem1119:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    double balance;
public:
    BaseAccount(string na,string ac,double ba):name(na),account(ac),balance(ba){}
    void deposit(double money)
    {
        balance+=money;
    }
    virtual void withdraw(double takeout)
    {
        if(takeout>balance)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        else
        {
            balance-=takeout;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class Baseplus:public BaseAccount
{
protected:
    double limit,limit_sum;
public:
    Baseplus(string na,string ac,double ba):BaseAccount(na,ac,ba)
    {
        limit = 5000;
        limit_sum = 0;
    }
    void withdraw(double takeout)
    {
        if(takeout>(limit-limit_sum)+balance)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        else
        {
            if(takeout>balance)
            {
                takeout-=balance;
                balance = 0;
                limit_sum+=takeout;
            }
            else
            {
                balance-=takeout;
            }
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string na,ac;
    double money,m1,t1,m2,t2;
    while(t--)
    {
        BaseAccount *K;
        cin>>na>>ac>>money
            >>m1>>t1>>m2>>t2;
        if(ac[1]=='A')
        {
            BaseAccount *BA = new BaseAccount(na,ac,money);
            K = BA;
        }
        else if(ac[1]=='P')
        {
            Baseplus *BP = new Baseplus(na,ac,money);
            K = BP;
        }
        K->deposit(m1);
        K->withdraw(t1);
        K->deposit(m2);
        K->withdraw(t2);
        K->display();
    }

    return 0;
}

------------------------------------------------------
2018192043:Problem1235:答案错误
#include <iostream>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    int longs,shorts;
public:
    Rect(int ls,int ss):longs(ls),shorts(ss) {}
    double getArea()
    {
        return longs*shorts;
    }
    ~Rect() {}
};
class Circle:public Geometry
{
    int r;
public:
    Circle(int rs):r(rs) {}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle() {}
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double area=t[0]->getArea();
        for(int i=1;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<area<<endl;
    }
};
int main()
{
    Geometry **p;
    int t,type,shorts,longs,r,counts=0;
    cin>>t;
    p=new Geometry*[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>shorts>>longs;
            Rect a(longs,shorts);
            p[counts]=&a;
        }
        else
        {
            cin>>r;
            Circle a(r);
            p[counts]=&a;
        }
        counts++;
    }
    TotalArea x;
    x.computerTotalArea(p,counts);
    delete p;
    return 0;
}

------------------------------------------------------
2018151027:Problem1119:正确
#include <iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    string name;
    char account[10];
    int balance;
public:
    BaseAccount(string n,char *a,int b):name(n),balance(b)
    {
        strcpy(account,a);
    }
    void deposit(int g)
    {
        balance+=g;
    }
    virtual void withdraw(int g)
    {
        if(g>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=g;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus: public BaseAccount
{
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(string n,char *a,int b):BaseAccount(n,a,b),limit(5000),limit_sum(0){}
    void withdraw(int g)
    {
        if(g>limit-limit_sum+balance)
            cout<<"insufficient"<<endl;
        else if(g>balance)
        {
            g-=balance;
            balance=0;
            limit_sum+=g;
        }
        else
            balance-=g;
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};

main()
{
   string name;
    char account[10];
    int balance;
    int gold;
    int t;
    BaseAccount *p;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            p=new BaseAccount(name,account,balance);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            p->display();
        }
        else
        {
            p=new BasePlus(name,account,balance);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            cin>>gold;
            p->deposit(gold);
            cin>>gold;
            p->withdraw(gold);
            p->display();
        }

    }

}

------------------------------------------------------
2018152087:Problem1119:正确
#include<iostream>
#include<string.h>
using namespace std;
class BaseAccount
{
protected:
	char name[100];
	char account[100];
	int balance;
public:
	BaseAccount()
	{
		
	 } 
	BaseAccount(char n[],char a[],int b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;
	}
	virtual void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(balance<num)
			cout<<"insufficient"<<endl;
		else
			balance-=num;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};
class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(char n[],char a[],int b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;
		limit=5000;
		limit_sum=0;
	}
	virtual void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(balance+limit<num)
			cout<<"insufficient"<<endl;
		else 
		{
			if(balance>=num)
				balance-=num;
			else 
			{
				limit=limit+balance-num;
				balance=0;
				limit_sum=5000-limit;
			}
		}
	
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		char name[100];
		char account[100];
		cin>>name>>account;
		int balance;
		cin>>balance;
		BaseAccount *p;
		if(account[1]=='A')
		{
			BaseAccount ex(name,account,balance);
			p=&ex;
		}
		else
		{
			BasePlus ex(name,account,balance);
			p=&ex; 
		}
		int num1;
		cin>>num1;
		p->deposit(num1);
		int num2;
		cin>>num2;
		p->withdraw(num2);
		int num3;
		cin>>num3;
		p->deposit(num3);
		int num4;
		cin>>num4;
		p->withdraw(num4);
		p->display();
	}
}
------------------------------------------------------
2018152010:Problem1119:答案错误
#include<iostream>

using namespace std;
class BaseAccoumt
{
protected:
    string name,account;
    float balance;
public:
    BaseAccoumt(string na,string acc,float bal):name(na),account(acc),balance(bal){}
    virtual void Deposit(float money)
    {
        balance=balance+money;
    }
    virtual void Withdraw(float money)
    {
        if(balance-money>=0)
            balance=balance-money;
        else
            cout<<"insufficient"<<endl;
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<' '<<"balance:"<<balance<<endl;

    }
};
class BasePlus:public BaseAccoumt
{
    float limit,limit_sum=0;
public:
    BasePlus(string name,string account,float balance):BaseAccoumt(name,account,balance),limit(5000){}
    void Deposit(float money)
    {
        if(limit_sum>0)
        {
            limit_sum=limit_sum-money;
            if(limit_sum<=0)
            {
                money=-limit_sum;
                limit_sum=0;
            }
            else
            {
                money=0;
            }
            limit=5000-limit_sum;
        }
        balance=balance+money;
    }
    void Withdraw(float money)
    {
        if(balance-money>=-limit)
        {
            balance=balance-money;
            if(balance<0)
            {
                limit_sum=-balance;
                limit=limit+balance;
                balance=0;
            }
        }
        else
            cout<<"insufficient"<<endl;
    }
    void display()
    {
        cout<<name<<' '<<account<<' '<<"balance:"<<balance<<' '<<"limit:"<<limit<<endl;
    }
};

int main()
{
    string name,account;
    int t;
    float balance,money;
    BaseAccoumt *per;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccoumt BA(name,account,balance);
            per=&BA;
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            per->display();
        }
        else
        {
            BasePlus BP(name,account,balance);
            per=&BP;
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            per->display();
        }
    }
}

------------------------------------------------------
2018192009:Problem1119:答案错误
#include <iostream>

using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[6];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[6],int ba):name(n),balance(ba)
    {
        for(int i=0;i<6;i++)
            acc[i]=a[i];
    }
    virtual void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[6],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
     virtual void deposit(int money)
    {
        if(limit_sum>0)
        {
            limit_sum-=money;
            if(limit_sum<0)
            {
                balance=-limit_sum;
                limit=5000;
                limit_sum=0;
            }
            else
                limit+=money;
        }
        else
            balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                limit_sum=-balance;
                balance=0;
                limit-=limit_sum;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[6];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192008:Problem1119:正确
#include<iostream>

using namespace std;

class BaseAccount
{
protected:

    string name,account;
    int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int m)
    {
        balance+=m;
    }
    virtual void withdraw(int m)
    {
        if(balance<m)
            cout<<"insufficient"<<endl;
        else
            balance-=m;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void withdraw(int m)
    {
        if(m>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            if(m>balance)
            {
                m=m-balance;
                balance=0;
                limit-=m;
                limit_sum=5000-limit;
            }
            else
            {
                balance-=m;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string n,a;
        int b;
        cin>>n>>a>>b;
        BaseAccount *b1;
        BaseAccount ba(n,a,b);
        BasePlus bp(n,a,b);
        if(a[1]=='A')
        {
            b1=&ba;
            int x1,x2,x3,x4;
            cin>>x1>>x2>>x3>>x4;
            b1->deposit(x1);
            b1->withdraw(x2);
            b1->deposit(x3);
            b1->withdraw(x4);
            b1->display();
        }
        else if(a[1]=='P')
        {
            b1=&bp;
            int x1,x2,x3,x4;
            cin>>x1>>x2>>x3>>x4;
            b1->deposit(x1);
            b1->withdraw(x2);
            b1->deposit(x3);
            b1->withdraw(x4);
            b1->display();
        }
    }
}

------------------------------------------------------
2018152044:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
    double length,width;
public:
    Rect()
    {
    }
    Rect(double l,double w)
    {
        length=l;
        width=w;
    }
    double getArea()
    {
        double area=length*width;
        return area;
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle()
    {
    }
    Circle(double r_)
    {
        r=r_;
    }
    double getArea()
    {
        double area=r*r*3.14;
        return area;
    }
};
class TotalArea
{
public:
    TotalArea()
    {
    }
    static void computerTotalArea(Geometry **t,int n)
    {
        double *area;
        area=new double[n];
        for(int i=0;i<n;i++)
        {
            area[i]=t[i]->getArea();
        }
        double maxarea=area[0];
        for(int i=0;i<n;i++)
        {
            if(maxarea<area[i])
                maxarea=area[i];
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxarea<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry *s[1000];
    for(int i=0;i<n;i++)
    {
        double x,y,r;
        int type;
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            s[i]=new Rect(x,y);
        }
        else if(type==2)
        {
            cin>>r;
            s[i]=new Circle(r);
        }
    }
    TotalArea Total;
    Total.computerTotalArea(s,n);
    return 0;
}
------------------------------------------------------
2018192026:Problem1119:正确
#include<stdio.h>
#include<string.h>
class BaseAccount
{
protected:
	char *name;
	char *number;
	int balance;
public:
	BaseAccount(char *n,char *nu,int b):balance(b)
	{
		name=new char[10];
		number=new char[10];
		strcpy(name,n),strcpy(number,nu);
	}
	virtual void withdraw(int b)
	{
		if(b<=balance)
			balance-=b;
		else
			printf("insufficient\n");
	}
	void deposit(int b)
	{
		balance+=b;
	}
	virtual void display()
	{
		printf("%s %s Balance:%d\n",name,number,balance);
	}
};
class BasePlus:public BaseAccount
{
protected:
	int limit;
	int limit_sum;
public:
	BasePlus(char *n,char *nu,int b):BaseAccount(n,nu,b)
	{
		limit=5000;
		limit_sum=0;
	}
	void withdraw(int b)
	{
		if(balance>=b)
			balance-=b;
		else if(balance+limit>=b&&balance<b)
			limit_sum+=b-balance,limit=5000-limit_sum,balance=0;
		else
			printf("insufficient\n");
	}
	void display()
	{
		printf("%s %s Balance:%d limit:%d\n",name,number,balance,limit);
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		getchar();
		char *name=new char[10];
		char *number=new char[10];
		int balance,amount;
		BaseAccount *B;
		scanf("%s %s %d",name,number,&balance);
		if(number[0]=='B'&&number[1]=='A')
		{
			BaseAccount B1(name,number,balance);
			B=&B1;
			for(int i=0;i<4;i++)
			{
				scanf("%d",&amount);
				if(i%2)
					B->withdraw(amount);
				else
					B->deposit(amount);
			}
			B->display();
		}
		else if(number[0]=='B'&&number[1]=='P')
		{
			BasePlus B2(name,number,balance);
			B=&B2;
			for(int i=0;i<4;i++)
			{
				scanf("%d",&amount);
				if(i%2)
					B->withdraw(amount);
				else
					B->deposit(amount);
			}
			B->display();
		}
	}
	return 0;
}

------------------------------------------------------
2018192043:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    int longs,shorts;
public:
    Rect(int ls,int ss):longs(ls),shorts(ss) {}
    double getArea()
    {
        return longs*shorts;
    }
    ~Rect() {}
};
class Circle:public Geometry
{
    int r;
public:
    Circle(int rs):r(rs) {}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle() {}
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double area=t[0]->getArea();
        for(int i=1;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<area<<endl;
    }
};
int main()
{
    Geometry **p;
    int t,type,shorts,longs,r,counts=0;
    cin>>t;
    p=new Geometry*[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>shorts>>longs;
            Rect a(longs,shorts);
            p[counts]=&a;
        }
        else
        {
            cin>>r;
            Circle a(r);
            p[counts]=&a;
        }
        counts++;
    }
    TotalArea x;
    x.computerTotalArea(p,counts);
    delete p;
    return 0;
}

------------------------------------------------------
2018192009:Problem1119:答案错误
#include <iostream>

using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[6];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[6],int ba):name(n),balance(ba)
    {
        for(int i=0;i<6;i++)
            acc[i]=a[i];
    }
    virtual void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[6],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
     virtual void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                limit_sum=-balance;
                balance=0;
                limit-=limit_sum;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[6];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192022:Problem1234:正确
#include <iostream>
#include <iomanip>
#include <cstring>
#define PI 3.14
using namespace std;
class Group
{
public:
    Group(){}
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i=0,j=0,k,a[10],b[10],sum=0,t=1;
        while(x!=0)
        {
            int n;
            n=x%10;
            a[i]=n;
            x/=10;
            i++;
        }
        while(y!=0)
        {
            int n;
            n=y%10;
            b[j]=n;
            y/=10;
            j++;
        }
        for(k=0;k<j;k++)
        {
            if(a[k]>=b[k])
                a[k]-=b[k];
            else
            {
                a[k]+=10;
                a[k]-=b[k];
            }
        }
        for(k=0;k<i;k++)
        {
            sum+=a[k]*t;
            t*=10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int i=0,j=0,k,a[10],b[10],sum=0,t=1;
        while(x!=0)
        {
            int n;
            n=x%10;
            a[i]=n;
            x/=10;
            i++;
        }
        while(y!=0)
        {
            int n;
            n=y%10;
            b[j]=n;
            y/=10;
            j++;
        }
        if(i>=j)
        {
            for (k = 0; k < j; k++)
            {
                if(a[k]+b[k]<10)
                    a[k]+=b[k];
                else
                {
                    a[k]+=b[k];
                    a[k]-=10;
                }
            }
            for(k=0;k<i;k++)
            {
                sum+=a[k]*t;
                t*=10;
            }
            return sum;
        }
        else
        {
            for (k = 0; k < i; k++)
            {
                if(a[k]+b[k]<10)
                    b[k]+=a[k];
                else
                {
                    b[k]+=a[k];
                    b[k]-=10;
                }
            }
            for(k=0;k<j;k++)
            {
                sum+=b[k]*t;
                t*=10;
            }
            return sum;
        }
    }
    int sub(int x,int y)
    {
        int i=0,j=0,k,a[10],b[10],sum=0,t=1;
        while(x!=0)
        {
            int n;
            n=x%10;
            a[i]=n;
            x/=10;
            i++;
        }
        while(y!=0)
        {
            int n;
            n=y%10;
            b[j]=n;
            y/=10;
            j++;
        }
        for(k=0;k<j;k++)
        {
            if(a[k]>=b[k])
                a[k]-=b[k];
            else
            {
                a[k]+=10;
                a[k]-=b[k];
            }
        }
        for(k=0;k<i;k++)
        {
            sum+=a[k]*t;
            t*=10;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    Group *p;
    while(t--)
    {
        int n;
        cin>>n;
        if(n==1)
        {
            p=new GroupA;
            int x,y;
            char c;
            cin>>x>>c>>y;
            if(c=='+')
            {
                int sum;
                sum=p->add(x,y);
                cout<<sum<<endl;
            }
            else
            {
                int sum;
                sum=p->sub(x,y);
                cout<<sum<<endl;
            }
        }
        else if(n==2)
        {
            p=new GroupB;
            int x,y;
            char c;
            cin>>x>>c>>y;
            if(c=='+')
            {
                int sum;
                sum=p->add(x,y);
                cout<<sum<<endl;
            }
            else
            {
                int sum;
                sum=p->sub(x,y);
                cout<<sum<<endl;
            }
        }
        else if(n==3)
        {
            p=new GroupC;
            int x,y;
            char c;
            cin>>x>>c>>y;
            if(c=='+')
            {
                int sum;
                sum=p->add(x,y);
                cout<<sum<<endl;
            }
            else
            {
                int sum;
                sum=p->sub(x,y);
                cout<<sum<<endl;
            }
        }
    }
    return 0;
}
------------------------------------------------------
2018192050:Problem1119:答案错误
#include<bits/stdc++.h>
using namespace std;
class BaseAccount{
    protected:
        string name;
        string account;
        int balance;
    public:
        BaseAccount(){
        }
        BaseAccount(string a,string b,int c){
            name=a;
            account=b;
            balance= c;
        }
        ~BaseAccount(){
        }
        void deposit(int num)
        {
        	balance+=num;
		}
		void withdraw(int num)
		{
			if(balance>=num)
			{
				balance-=num;
			}
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		void display()
		{
			cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
		}
};
class BasePlus:public BaseAccount
{
    protected:
        int limit;
        int limitSum;
    public:
        BasePlus(){
        }
        BasePlus(string a,string b,int c){
            name=a;
            account=b;
            balance=c;
            limit=5000;
            limitSum=0;
        }
        ~BasePlus(){
        }
        void despoit(int n){
        	balance+=n;
		}
		void withdraw(int a)
		{
			if((balance+limit)<a)
			{
				cout<<"insufficient"<<endl;
			}
			else
			{
				if(balance<a)
				{
					balance=0;
					limitSum=(a-balance);
					limit-=limitSum;
				}
				else
					balance-=a;
			}
		}
		void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
		}
};
int main(){
	int t;
	string name,n;
	int num1,num2,num3,num4,num;
	cin>>t;
	BaseAccount *pv;
	while(t--)
	{
		cin>>name>>n>>num;
		cin>>num1>>num2>>num3>>num4;
		if(n[1]=='P')
		{
			BasePlus a(name,n,num);
			pv=&a;
			pv->deposit(num1);
			pv->withdraw(num2);
			pv->deposit(num3);
			pv->withdraw(num4);
			pv->display();
		}
		else
		{
			BaseAccount b(name,n,num);
			pv=&b;
			pv->deposit(num1);
			pv->withdraw(num2);
			pv->deposit(num3);
			pv->withdraw(num4);
			pv->display();
		}
	}
}
------------------------------------------------------
2018192025:Problem1119:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    char name[100];
    char account[100];
    double balance;
public:
    BaseAccount(char *pName, char *acc, double bal):balance(bal)
    {
        strcpy(name,pName);
        strcpy(account,acc);
    };
    virtual void deposit(double money)
    {
        balance+=money;
    }
    virtual void withdraw(double money)
    {
        if(balance-money<0)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
protected:
    double limit;
    double limit_sum;
public:
    BasePlus(char *pName, char *acc, double bal):BaseAccount(pName,acc,bal)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void deposit(double money)
    {
        if(limit_sum-money>=0)
            limit_sum-=money;
        else
        {
            balance=money-limit_sum;
            limit_sum=0;
        }
    }
    virtual void withdraw(double money)
    {
        if(balance-limit_sum-money+5000<0)
            cout<<"insufficient"<<endl;
        else
        {
            if(balance-money>=0)
                balance-=money;
            else
            {
                limit_sum=money-balance;
                balance=0;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        char pName[100],acc[100];
        double bal,de1,de2,wi1,wi2;
        BaseAccount *pv;
        cin>>pName>>acc>>bal;
        cin>>de1>>wi1>>de2>>wi2;
        if(strncmp(acc,"BA",2)==0)
        {
            BaseAccount ss(pName,acc,bal);
            pv=&ss;
            pv->deposit(de1);
            pv->withdraw(wi1);
            pv->deposit(de2);
            pv->withdraw(wi2);
            pv->display();
        }
        else if(strncmp(acc,"BP",2)==0)
        {
            BasePlus ss(pName,acc,bal);
            pv=&ss;
            pv->deposit(de1);
            pv->withdraw(wi1);
            pv->deposit(de2);
            pv->withdraw(wi2);
            pv->display();
        }
    }
}

------------------------------------------------------
2018152114:Problem1120:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",WangWang."<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",GAGA."<<endl;
		}	
};
int main()
{
	int t;
	string _name,_no;
	int _old;
	cin>>t;
    while(t--)
	{
		cin>>_name>>_no>>_old;
		Animal* a;
		if(_name=="Tiger")
		{
	
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
	
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
	
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{

			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else
			cout<<"There is no "<<_no<<" in our Zoo."<<endl;
	}
	return 0;
}
------------------------------------------------------
2018192009:Problem1119:答案错误
#include <iostream>

using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[6];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[6],int ba):name(n),balance(ba)
    {
        for(int i=0;i<6;i++)
            acc[i]=a[i];
    }
    void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<"Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[6],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                limit_sum=-balance;
                balance=0;
                limit-=limit_sum;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        for(int i=0;i<6;i++)
            cout<<acc[i];
        cout<<"Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[6];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018151092:Problem1120:正确
#include<iostream>
#include<cstring>
using namespace std;

class Animal
{
	protected:
		string name;
		int age;
		int weight;
	public:
		Animal()
		{
		}
		
		Animal(string n,int a)
		{
			name=n;
			age=a;
		}
		
		virtual void Speak()=0;
		
		~Animal()
		{
		}
};

class Tiger:public Animal
{
	public:
		Tiger()
		{
		}
		
		Tiger(string n,int a):Animal(n,a)
		{
		}
		
		virtual void Speak()
		{
			cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
		
		~Tiger()
		{
		}
};

class Dog:public Animal
{
	public:
		Dog()
		{
		}
		
		Dog(string n,int a):Animal(n,a)
		{
		}
		
		virtual void Speak()
		{
			cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
		
		~Dog()
		{
		}
};

class Pig:public Animal
{
	public:
		Pig()
		{
		}
		
		Pig(string n,int a):Animal(n,a)
		{
		}
		
		virtual void Speak()
		{
			cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
		
		~Pig()
		{
		}
};

class Duck:public Animal
{
	public:
		Duck()
		{
		}
		
		Duck(string n,int a):Animal(n,a)
		{
		}
		
		virtual void Speak()
		{
			cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
		
		~Duck()
		{
		}
};

int main()
{
	string type;
	string name;
	int age;
	int t;
	int i;
	
	cin>>t;
	
	Animal *Ace[t];
	
	for(i=0;i<t;i++)
	{
		int flag=0;
		cin>>type>>name>>age;
		
		if(type=="Dog")
		{
			Ace[i]=new Dog(name,age);
			Ace[i]->Speak();
			flag=1;
		}
		
		if(type=="Duck")
		{
			Ace[i]=new Duck(name,age);
			Ace[i]->Speak();
			flag=1;
		}
		
		if(type=="Pig")
		{
			Ace[i]=new Pig(name,age);
			Ace[i]->Speak();
			flag=1;
		}
		
		if(type=="Tiger")
		{
			Ace[i]=new Tiger(name,age);
			Ace[i]->Speak();
			flag=1;
		}
		
		if(flag==0)
		{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018192040:Problem1119:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class BaseAccount{ 
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){
	};
	BaseAccount(string n,string a,int b):name(n),account(a),balance(b){
	};
	virtual void display(){
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	void deposit(int num){
		balance += num;
	}
	virtual void withdraw(int num){
		if(balance < num)
			cout<<"insufficient"<<endl;
		else
			balance -= num;
	}
};

class BasePlus:public BaseAccount{
	int limit;
	int limit_sum;
public:
	BasePlus():limit(5000),limit_sum(0){
	};
	BasePlus(string n,string a,int b):limit(5000),BaseAccount(n,a,b){
	};
	void display(){
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
	void withdraw(int num){
		if(balance + limit < num)
			cout<<"insufficient"<<endl;
		else if(balance < num){
			int N = num - balance;
			balance = 0;
			limit -= N;
		}
		else{
			balance -= num;
		}
	}
};



int main(){
	int n;
	cin>>n;
	while(n--){
		string name,account;
		int balance;
		cin>>name>>account>>balance;
		if(!account.find("BA")){
			BaseAccount ba(name,account,balance);
			int n1,n2,n3,n4;
			cin>>n1>>n2>>n3>>n4;
			ba.deposit(n1);
			ba.withdraw(n2);
			ba.deposit(n3);
			ba.withdraw(n4);
			ba.display();
		}
		else{
			BasePlus bp(name,account,balance);
			int n1,n2,n3,n4;
			cin>>n1>>n2>>n3>>n4;
			bp.deposit(n1);
			bp.withdraw(n2);
			bp.deposit(n3);
			bp.withdraw(n4);
			bp.display();
		}
	}
}
------------------------------------------------------
2017081130:Problem1120:正确
#include <iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){};
    Animal(string n,int a):name(n),age(a){};
    void speak(){};
};
class Tiger:virtual public Animal
{
public:
    Tiger(){};
    Tiger(string n,int a):Animal(n,a){};
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Pig:virtual public Animal
{
public:
    Pig(){};
    Pig(string n,int a):Animal(n,a){};
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Dog:virtual public Animal
{
public:
    Dog(){};
    Dog(string n,int a):Animal(n,a){};
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:virtual public Animal
{
public:
    Duck(){};
    Duck(string n,int a):Animal(n,a){};
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
int main()
{
    int t,age;
    char annimal[20];
    string name;
    cin>>t;
    while(t--)
    {
        cin>>annimal>>name>>age;
        if(strcmp(annimal,"Tiger")==0)
        {
            Tiger tiger(name,age);
            tiger.speak();
        }
        else if(strcmp(annimal,"Pig")==0)
        {
            Pig pig(name,age);
            pig.speak();
        }
        else if(strcmp(annimal,"Dog")==0)
        {
            Dog dog(name,age);
            dog.speak();
        }
        else if(strcmp(annimal,"Duck")==0)
        {
            Duck duck(name,age);
            duck.speak();
        }
        else
        {
            cout<<"There is no "<<annimal<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2016140066:Problem1232:正确
#include <iostream>
#include<string>
using namespace std;
class Vehicle
{
protected:

    string no;

public:
    Vehicle(){}
    Vehicle(string N):no(N){}
    virtual void display()=0;
};
class Car:public Vehicle
{
    int num,heavy;
public:
    Car(){}
    Car(string N,int nu,int he):Vehicle(N),num(nu),heavy(he){}
    virtual void display()
    {
        cout<<no<<" "<<(num*8+heavy*2)<<endl;
    }
};
class Truck:public Vehicle
{
    int heavy;
public:
    Truck(){}
    Truck(string N,int He):Vehicle(N),heavy(He){}
    virtual void display()
    {
        cout<<no<<" "<<(heavy*5)<<endl;
    }
};
class Bus:public Vehicle
{
    int num;
public:
    Bus(){}
    Bus(string N,int Num):Vehicle(N),num(Num){}
    virtual void display()
    {
        cout<<no<<" "<<(num*3)<<endl;
    }
};
int main()
{
    int t,type,Num,He;
    string N;
    cin>>t;
    while(t--)
    {
        cin>>type>>N;
        if(type==1)
        {
            cin>>Num>>He;
            Car *s=new Car(N,Num,He);
            Vehicle *pv=s;
            pv->display();
        }
        else if(type==2)
        {
            cin>>He;
            Truck *s=new Truck(N,He);
            Vehicle *pv=s;
            pv->display();
        }
        else
        {
            cin>>Num;
            Bus *s=new Bus(N,Num);
            Vehicle *pv=s;
            pv->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018151005:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(){}
    Vehicle(string no0):no(no0){}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
private:
    int num,weight;
public:
    Car(){}
    Car(string no0,int num0,int weight0):Vehicle(no0),num(num0),weight(weight0){}
    void display()
    {
        cout<<no<<" ";
        int fee=8*num+2*weight;
        cout<<fee<<endl;
    }
};
class Truck:public Vehicle
{
private:
    int weight;
public:
    Truck(){}
    Truck(string no0,int weight0):Vehicle(no0),weight(weight0){}
    void display()
    {
        cout<<no<<" ";
        int fee=5*weight;
        cout<<fee<<endl;
    }
};
class Bus:public Vehicle
{
private:
    int num;
public:
    Bus(){}
    Bus(string no0,int num0):Vehicle(no0),num(num0){}
    void display()
    {
        cout<<no<<" ";
        int fee=3*num;
        cout<<fee<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    Vehicle *pv;
    while(t--)
    {
        string no;
        int type,num,weight;
        cin>>type>>no;
        switch(type)
        {
        case 1:
            {
                cin>>num>>weight;
                Car a(no,num,weight);
                pv=&a;
                pv->display();
                break;
            }
        case 2:
            {
                cin>>weight;
                Truck a(no,weight);
                pv=&a;
                pv->display();
                break;
            }
        case 3:
            {
                cin>>num;
                Bus a(no,num);
                pv=&a;
                pv->display();
                break;
            }
        }
    }
}

------------------------------------------------------
2018151031:Problem1235:答案错误
#include <bits/stdc++.h>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
	int length,wide;
public:
	Rect(int l,int w):length(l),wide(w){}
	double getArea()
	{
		
		return length*wide;
	}
};
class Circle:public Geometry
{
	int r;
public:
	Circle(int radius):r(radius){}
	double getArea()
	{
		
		return 3.14*r*r;
	}
};
class TotalArea
{
	static double maxarea;
public:
   static void computerTotalArea(Geometry** t,int n)
   {
   		for(int i=0;i<n;i++)
   			if(maxarea<t[i]->getArea())
			   maxarea=t[i]->getArea();
   }
   static double getmaxarea()
   {
   		return maxarea;
   }
};
double TotalArea::maxarea=0;
int main()
{
	int t;
	cin>>t;
	Geometry** g=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			int l,w;
			cin>>l>>w;
			Rect r(l,w);
			g[i]=&r;
		}
		else if(type==2)
		{
			int r;
			cin>>r;
			Circle c(r);
			g[i]=&c;
		}
	}
	TotalArea total;
	total.computerTotalArea(g,t);
	cout<<"最大面积="<<total.getmaxarea()<<endl;
}
------------------------------------------------------
2016071031:Problem1119:答案错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class BaseAccount {
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount() {}
    BaseAccount(string name_, string account_, int balance_)
        :name(name_), account(account_), balance(balance_) {}
    virtual void deposit(int amount) {
        balance += amount;
    }

    virtual void withdraw(int amount) {
        if (amount > balance)
            cout<< "insufficient" <<endl;
        else
            balance -= amount;
    }
    virtual void display() {
        cout<< name << " " << account << " Balance:" << balance <<endl;
    }
};

class BasePlus: public BaseAccount {
    int limit;
    int limit_sum;
public:
    BasePlus() {
        limit = 5000;
        limit_sum = 0;
    }
    BasePlus(string name_, string account_, int balance_)
            : BaseAccount(name_, account_, balance_) {
                limit = 5000;
                limit_sum = 0;
            }
    void deposit(int amount) {
        balance += amount;
    }

    void withdraw(int amount) {
        if (amount > balance + limit)
            cout<< "insufficient" <<endl;
        else
            balance -= amount, limit_sum += amount;
    }
    void display() {
        cout<< name << " " << account << " Balance:" << balance;
        cout<< " limit:" << limit - limit_sum <<endl;
    }
};


int main() {
    int t, balance, o1, o2, o3, o4;
    string name, account;

    BaseAccount *b;
    cin>>t;
    while (t--) {
        cin>>name>>account>>balance;
        if(account.find('A') >= 0) {
            b = new BaseAccount(name, account, balance);
        } else {
            b = new BasePlus(name, account, balance);
        }
        cin>>o1>>o2>>o3>>o4;
        b->deposit(o1);
        b->withdraw(o2);
        b->deposit(o3);
        b->withdraw(o4);
        b->display();
    }
    return 0;
}

------------------------------------------------------
2017151066:Problem1232:编译错误
#include<iostream>
using namespace std;
class Vehicle
{
protected:
	string no;
public:
	Vehicle(string n):no(n){}
	virtual void display()=0;
};
class Car:public Vehicle
{
protected:
	int zai;
	int zhong;
public:
	Car(int z,int zh,string n):zai(z),zhong(zh),Vehicle(n){}
	void display1()
	{
		cout<<no<<" "<<zai*8+zhong*2<<endl;
	}
};
class Truck:public Vehicle
{
protected:
	int zhongliang;
public:
	Truck(int z,string n):zhongliang(z),Vehicle(n){}
	void display2()
	{
		cout<<no<<" "<<zhongliang*5<<endl;
	}
};
class Bus:public Vehicle
{
protected:
	int zai;
public:
	Bus(int z,string n):zai(z),Vehicle(n){}
	display3()
	{
		cout<<no<<" "<<zai*3<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	string no;	
	int z,zh;
	Vehicle *pv;
	while(t--)
	{
		int n;
		cin>>n;
	   if(n==1)
		{
			cin>>no>>z>>zh;
			pv=new Car(z,zh,no);
			pv->display();
			delete pv;		
		}
     	else if(n==2)
		{
			cin>>no>>zh;
			pv=new Truck(zh,no);
			pv->display();	
		}
    	else if(n==2)
		{
			cin>>no>>z;
			pv=new Bus(z,no);
			pv->display();	
		}
	}
	return 0;
}
------------------------------------------------------
2018192025:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    char name[100];
    char account[100];
    double balance;
public:
    BaseAccount(char *pName, char *acc, double bal):balance(bal)
    {
        strcpy(name,pName);
        strcpy(account,acc);
    };
    virtual void deposit(double money)
    {
        balance+=money;
    }
    virtual void withdraw(double money)
    {
        if(balance-money<0)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
protected:
    double limit;
    double limit_sum;
public:
    BasePlus(char *pName, char *acc, double bal):BaseAccount(pName,acc,bal)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void deposit(double money)
    {
        if(limit_sum-money>=0)
            limit_sum-=money;
        else
        {
            balance+=money-limit_sum;
            limit_sum=0;
        }
    }
    virtual void withdraw(double money)
    {
        if(balance-limit_sum-money+5000<0)
            cout<<"insufficient"<<endl;
        else
        {
            if(balance-money>=0)
                balance-=money;
            else
            {
                limit_sum+=money-balance;
                balance=0;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        char pName[100],acc[100];
        double bal,de1,de2,wi1,wi2;
        BaseAccount *pv;
        cin>>pName>>acc>>bal;
        cin>>de1>>wi1>>de2>>wi2;
        if(strncmp(acc,"BA",2)==0)
        {
            BaseAccount ss(pName,acc,bal);
            pv=&ss;
            pv->deposit(de1);
            pv->withdraw(wi1);
            pv->deposit(de2);
            pv->withdraw(wi2);
            pv->display();
        }
        else if(strncmp(acc,"BP",2)==0)
        {
            BasePlus ss(pName,acc,bal);
            pv=&ss;
            pv->deposit(de1);
            pv->withdraw(wi1);
            pv->deposit(de2);
            pv->withdraw(wi2);
            pv->display();
        }
    }
}

------------------------------------------------------
2017163101:Problem1119:运行错误
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std; 
class BaseAccount{
	protected:
		string name,account;
		int balance;
	public:
		BaseAccount(){
		}
		virtual void Deposit(int accno){
			balance+=accno;
		}
		virtual void Withdraw(int accno){
			if(balance<accno){
				cout<<"insufficient"<<endl;
			}
			else{
			balance-=accno;
		}
		
		}
		virtual void display(){
			cout<<name<<" "<<account<<" "<<" "<<"Balance:"<<balance;
			cout<<endl;
		}
		BaseAccount(string n,string a,int b):name(n),account(a),balance(b){
			
		}
};
class BasePlus:public BaseAccount{
	private:
		int limit;
		int limit_sum;
	public:
		BasePlus(){
			limit=5000;
			limit_sum=0;
		}
		void Deposit(int accno){
			//balance+=accno;
			if(limit_sum>0){
				if(limit_sum>accno){
					limit_sum-=accno;
					accno=0;
				}
				else {
					accno-=limit_sum;
					limit_sum=0;
				}
			}
			balance+=accno;
		}
		void Withdraw(int accno){
			if(balance>=accno){
				balance-=accno;
			}
			else if(accno<=balance+limit-limit_sum){
				limit_sum+=accno-balance;
				balance=0;
			}
			else{
			//	cout<"insufficient"<<endl;
			cout<<"insufficient"<<endl;
			}
		}
		void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum;
			cout<<endl;
		}
		BasePlus(string n,string a,int b):BaseAccount(name,account,balance){
			limit=5000;
			limit_sum=0;
		}
};
int main(){
	int t;
	cin>>t;
	while(t--){
		string name,account;
		int balance;
		cin>>name>>account>>balance;
		int d1,w1,d2,w2;
		cin>>d1>>w1>>d2>>w2;
		BaseAccount *b;
		if(account[1]=='A'){
			BaseAccount BA(name,account,balance);
			b=&BA;
			b->Deposit(d1);
			b->Withdraw(w1);
			b->Deposit(d2);
			b->Withdraw(w2);
			b->display();
		//	delete b;
		}
		else{
			BasePlus BP(name,account,balance);
			b=&BP;
			b->Deposit(d1);
			b->Withdraw(w1);
			b->Deposit(d2);
			b->Withdraw(w2);
			b->display();
			//delete b;
		}
		//delete b;
	}
	return 0;
}
------------------------------------------------------
2018152114:Problem1120:正确
#include<iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
	string name;
	string no;
	int old;
public:
	Animal(string noo,int o):no(noo),old(o)
	{
	}
	virtual void speak()=0;
	virtual ~Animal()
	{
	}
};
class Tiger:public Animal
{
public:
		Tiger(string noo,int old4):Animal(noo,old4)
		{
		}
		virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",AOOO."<<endl;
		}
};
class Pig:public Animal
{
public:
	Pig(string noo,int old3):Animal(noo,old3)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",HENGHENG."<<endl;
		}
};
class Dog:public Animal
{
public:
	Dog(string noo,int old2):Animal(noo,old2)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",WangWang."<<endl;
		}	
};
class Duck:public Animal
{
public:
	Duck(string noo,int old1):Animal(noo,old1)
	{
	}
	virtual void speak()
		{
			cout<<"Hello,I am "<<no<<",GAGA."<<endl;
		}	
};
int main()
{
	int t;
	string _name,_no;
	int _old;
	cin>>t;
    while(t--)
	{
		cin>>_name>>_no>>_old;
		Animal* a;
		if(_name=="Tiger")
		{
	
			Tiger tg(_no,_old);
			a=&tg;
			a->speak();
		}
		else if(_name=="Pig")
		{
	
			Pig pg(_no,_old);
			a=&pg;
			a->speak();
		}
		else if(_name=="Duck")
		{
	
			Duck dk(_no,_old);
			a=&dk;
			a->speak();
		}
		else if(_name=="Dog")
		{

			Dog dg(_no,_old);
			a=&dg;
			a->speak();
		}
		else
			cout<<"There is no "<<_name<<" in our Zoo."<<endl;
	}
	return 0;
}
------------------------------------------------------
2017144045:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	virtual void Speak()=0;
	Animal()
	{	
	}
	Animal(string n)
	{
		name=n;
	}

};

class Tiger:public Animal
{
public:
	Tiger(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
	}
};

class Dog:public Animal
{
public:
	Dog(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
	}
};

class Duck:public Animal
{
public:
	Duck(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
	}
};

class Pig:public Animal
{
public:
	Pig(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
	}
};

/*void fn(Animal & c)
{
	c.Speak();
}*/

int main()
{
	int t;
	cin>>t;
	string l;
	string n;
	int age;
	while(t--)
	{
		cin>>l>>n>>age;
		if(l=="Tiger")
		{
			Tiger t(n);
			t.Speak();
		}
		else if(l=="Dog")
		{
			Dog d(n);
			d.Speak();
		}
		else if(l=="Duck")
		{
			Duck du(n);
			du.Speak();
		}
		else if(l=="Pig")
		{
			Pig p(n);
			p.Speak();
		}
		else
		    cout<<"There is no "<<l<<" in our Zoo."<<endl;
	}
}
------------------------------------------------------
2018192024:Problem1119:正确
#include <iostream>
#include <cstring>
using namespace std;

class BaseAccount
{
protected:
    string name;
    char *account;
    int balance;
public:
    BaseAccount(){account=new char[50];}
    BaseAccount(string n,char *a,int b):name(n),account(a),balance(b){account=new char[50];strcpy(account,a);}
    virtual void deposit(int money){balance+=money;}
    virtual void withdraw(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    ~BaseAccount(){delete []account;}
};
class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,char *a,int b,int l=5000,int ls=0):BaseAccount(n,a,b),limit(l),limit_sum(ls){}
    virtual void deposit(int money)
    {
        if(limit_sum>0)
        {
            money-=limit_sum;
            limit_sum=0;
        }
        balance+=money;
    }
    virtual void withdraw(int money)
    {
        if(money>balance+limit-limit_sum)
            cout<<"insufficient"<<endl;
        else
        {
            if(money>balance)
            {
                limit_sum=money-balance;
                balance=0;
            }
            else
                balance-=money;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};


int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string n;
        char *a=new char[50];
        int b,money;
        BaseAccount *p;
        cin>>n>>a>>b;
        if(a[1]=='A')
        {
            BaseAccount ba(n,a,b);
            p=&ba;
            for(int i=0;i<4;i++)
            {
                cin>>money;
                if(i==0||i==2)
                    p->deposit(money);
                else
                    p->withdraw(money);
            }
            p->display();
        }
        else if(a[1]=='P')
        {
            BasePlus bp(n,a,b);
            p=&bp;
            for(int i=0;i<4;i++)
            {
                cin>>money;
                if(i==0||i==2)
                    p->deposit(money);
                else
                    p->withdraw(money);
            }
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017151066:Problem1232:编译错误
#include<iostream>
using namespace std;
class Vehicle
{
protected:
	string no;
public:
	Vehicle(string n):no(n){}
	virtual void display()=0;
};
class Car:public Vehicle
{
protected:
	int zai;
	int zhong;
public:
	Car(int z,int zh,string n):zai(z),zhong(zh),Vehicle(n){}
	void display1()
	{
		cout<<no<<" "<<zai*8+zhong*2<<endl;
	}
};
class Truck:public Vehicle
{
protected:
	int zhongliang;
public:
	Truck(int z,string n):zhongliang(z),Vehicle(n){}
	void display2()
	{
		cout<<no<<" "<<zhongliang*5<<endl;
	}
};
class Bus:public Vehicle
{
protected:
	int zai;
public:
	Bus(int z,string n):zai(z),Vehicle(n){}
	void display3()
	{
		cout<<no<<" "<<zai*3<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	string no;	
	int z,zh;
	Vehicle *pv;
	while(t--)
	{
		int n;
		cin>>n;
	   if(n==1)
		{
			cin>>no>>z>>zh;
			pv=new Car(z,zh,no);
			pv->display();
			delete pv;		
		}
     	else if(n==2)
		{
			cin>>no>>zh;
			pv=new Truck(zh,no);
			pv->display();	
		}
    	else if(n==2)
		{
			cin>>no>>z;
			pv=new Bus(z,no);
			pv->display();	
		}
	}
	return 0;
}
------------------------------------------------------
2017163058:Problem1119:正确
#include <iostream>
#include <fstream>
using namespace std;
//某银行的支票账户分为两类，一类为基本支票账户BaseAccount，另一类为具有透支保护特性的BasePlus支票账户。
//
//BaseAccount支票账户的信息包括：客户姓名(name)、账户(account)、当前结余(balance)
//
//BaseAccount支票账户可以执行的操作包括：存款(deposit)、取款(withdraw)、显示账户信息(display)。注意：取款金额不能透支，否则显式出错信息“insufficient”。
//
//BasePlus支票账户除包含BaseAccount的所有信息外，还包括以下信息：
//
//请实现BaseAccount类和BasePlus类，其中BasePlus类继承于BaseAccount类，注意BaseAccount账户名称以BA开头，BasePlus账户名称以BP开头。
class BaseAccount
{
protected:
    string name, account;
    int balance;
public:
    BaseAccount(string n, string a, int b):name(n), account(a), balance(b){}
    void deposit(int money)
    {
        balance += money;
    }
    virtual void withdraw(int money)
    {
        if(balance < money)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance -= money;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
//透支上限(limit：默认为5000)，当前透支总额(limit_sum)；BasePlus支票账户可执行的操作与BaseAccount相同，但有两种操作的实现不同：
//
//(1)对于取款操作，可以在透支上限范围内透支，超过则显示出错信息“insufficient”；
//
//(2)对于显示操作，必须显示BasePlus的其他信息。
class BasePlus:public BaseAccount
{
private:
    int limit, limits_sum;
public:
    BasePlus(string name, string account, int balance):BaseAccount(name, account, balance), limit(5000), limits_sum(0){}
    void withdraw(int money)
    {
        if(money <= balance)
        {
            balance -= money;
        }
        else if(balance > 0 && money < balance + limit)
        {
            limits_sum += (money-balance);
            balance = 0;
        }
        else if(money + limits_sum < limit)
        {
            limits_sum += money;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limits_sum<<endl;
    }
};
int main()
{
//    freopen("C:\\Users\\acer\\Desktop\\in.txt", "r", stdin);
    string name, account;
    int balance, money, t;
    cin>>t;
    BaseAccount *p;
    while(t --)
    {
        cin>>name>>account>>balance;
        if(account[1] == 'A')
        {
            BaseAccount baseAccount(name, account, balance);
            p = &baseAccount;
            for(int i=0;i<2;i++)
            {
                cin>>money;
                p->deposit(money);
                cin>>money;
                p->withdraw(money);
            }
            p->display();
        }
        else
        {
            BasePlus basePlus(name, account, balance);
            p = &basePlus;
            for(int i=0;i<2;i++)
            {
                cin>>money;
                p->deposit(money);
                cin>>money;
                p->withdraw(money);
            }
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192037:Problem1119:正确
#include<bits/stdc++.h>
using namespace std;

class BaseAccount
{
protected:
    string name;
    string account;
    int  balance;
public:
    BaseAccount(){}
    BaseAccount(string n,string ac,int b)
    {
        name = n;
        account = ac;
        balance = b;
    }
    virtual void deposit(int mon)
    {
        balance += mon;
    }
    virtual void withdraw(int mon)
    {
        if(balance-mon>=0)
            balance -= mon;
        else
            cout<<"insufficient"<<endl;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"
        <<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(){}
    BasePlus(string n,string ac,int b)
    {
        name = n;
        account = ac;
        balance = b;
        limit = 5000;
        limit_sum = 0;
    }
    void deposit(int mon)
    {
        balance += mon;
    }
    void withdraw(int mon)
    {
        if(balance+limit-mon>=0)
        {
            balance -= mon;
            if(balance <0)
            {
                limit_sum += balance ;
                limit += balance;
                balance = 0;
            }
        }

        else
            cout<<"insufficient"<<endl;
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"
        <<balance<<" limit:"<<limit
        <<endl;
    }
};


int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        BaseAccount *p;
        string name,acc;
        int ba;
        cin>>name>>acc>>ba;
        if(acc[1]=='A')
        {
            int money;
            BaseAccount b(name,acc,ba);
            cin>>money;
            b.deposit(money);
            cin>>money;
            b.withdraw(money);
            cin>>money;
            b.deposit(money);
            cin>>money;
            b.withdraw(money);
            p = &b;
            p->display();
        }
        else
        {
            int money;
            BasePlus b(name,acc,ba);
            cin>>money;
            b.deposit(money);
            cin>>money;
            b.withdraw(money);
            cin>>money;
            b.deposit(money);
            cin>>money;
            b.withdraw(money);
            p = &b;
            p->display();
        }
    }
}

------------------------------------------------------
2018151051:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class Animal
{
protected:
	string name;
	int year;
public:
	Animal(){}
	virtual void speak()=0;
};
class Tiger:public Animal
{
public:
	Tiger(string n,int y)
	{
		name=n;
		year=y;
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Dog:public Animal
{
public:
	Dog(string n,int y)
	{
		name=n;
		year=y;
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};
class Duck:public Animal
{
public:
	Duck(string n,int y)
	{
		name=n;
		year=y;
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
class Pig:public Animal
{
public:
	Pig(string n,int y)
	{
		name=n;
		year=y;
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};
int main()
{
	int n,i;
	cin>>n;
	for(i=1;i<=n;i++)
	{
		Animal *p;
		string ask;
		cin>>ask;
		string name;
		int year;
		cin>>name>>year;
		if(ask=="Tiger")
		{
			p=new Tiger(name,year);
			p->speak();
		}
		else if(ask=="Dog")
		{
			p=new Dog(name,year);
			p->speak();
		}
		else if(ask=="Duck")
		{
			p=new Duck(name,year);
			p->speak();
		}
		else if(ask=="Pig")
		{
			p=new Pig(name,year);
			p->speak();
		}
		else
		{
			cout<<"There is no "<<ask<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018152010:Problem1119:正确
#include<iostream>

using namespace std;
class BaseAccoumt
{
protected:
    string name,account;
    float balance;
public:
    BaseAccoumt(string na,string acc,float bal):name(na),account(acc),balance(bal){}
    virtual void Deposit(float money)
    {
        balance=balance+money;
    }
    virtual void Withdraw(float money)
    {
        if(balance-money>=0)
            balance=balance-money;
        else
            cout<<"insufficient"<<endl;
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<endl;

    }
};
class BasePlus:public BaseAccoumt
{
    float limit,limit_sum=0;
public:
    BasePlus(string name,string account,float balance):BaseAccoumt(name,account,balance),limit(5000){}
    void Deposit(float money)
    {
        if(limit_sum>0)
        {
            limit_sum=limit_sum-money;
            if(limit_sum<=0)
            {
                money=-limit_sum;
                limit_sum=0;
            }
            else
            {
                money=0;
            }
            limit=5000-limit_sum;
        }
        balance=balance+money;
    }
    void Withdraw(float money)
    {
        if(balance-money>=-limit)
        {
            balance=balance-money;
            if(balance<0)
            {
                limit_sum=-balance;
                limit=limit+balance;
                balance=0;
            }
        }
        else
            cout<<"insufficient"<<endl;
    }
    void display()
    {
        cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<' '<<"limit:"<<limit<<endl;
    }
};

int main()
{
    string name,account;
    int t;
    float balance,money;
    BaseAccoumt *per;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccoumt BA(name,account,balance);
            per=&BA;
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            per->display();
        }
        else
        {
            BasePlus BP(name,account,balance);
            per=&BP;
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            cin>>money;
            per->Deposit(money);
            cin>>money;
            per->Withdraw(money);
            per->display();
        }
    }
}

------------------------------------------------------
2018152102:Problem1119:答案错误
#include <iostream>

using namespace std;
class BaseAccount {
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(string na,string acco,int bal) : name(na),account(acco),balance(bal){}
    void deposit(int money) {
        balance  += money;
    }
    virtual void withdraw(int money) {
        if(money > balance) {
            cout<<"insufficient"<<endl;
            return;
        }
        balance -= money;
    }
    virtual void display() {
        cout<<name<<" "<<"Balance:"<<balance<<endl;
    }
};


class BasePlus:public BaseAccount {
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(string na,string acco,int bal,int lim = 5000,int lim_s = 0):BaseAccount(na,acco,bal),limit(lim),limit_sum(lim_s) {}
    void withdraw(int money) {
        if(balance+limit < money ) {
            cout<<"insufficient"<<endl;
            return;
        }
        if(money<=balance) {
            balance -= money;
        } else {
            limit_sum = money - balance;
            balance = 0;
            limit -= limit_sum;
            limit_sum = 0;
        }
    }
    void display() {
        cout<<name<<" "<<"Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main() {
    int t;

    cin>>t;


    while(t--) {
        string name;
        char  account[32];
        int balance;
        BaseAccount * p;
        cin>>name>>account>>balance;
        if(account[1] == 'A') {
            BaseAccount acco(name,account,balance);
            p = &acco;
            int money;

            for(int i=0;i<2;i++) {
                cin>>money;
                p->deposit(money);
                cin>>money;
                p->withdraw(money);
            }
            p->display();
        }else {
            BasePlus acco(name,account,balance);
            p = &acco;
            int money;

            for(int i=0;i<2;i++) {
                cin>>money;
                p->deposit(money);
                cin>>money;
                p->withdraw(money);
            }

            p->display();
        }


    }

    return 0;
}

------------------------------------------------------
2018152021:Problem1232:答案错误
#include<iostream>
#include <string>
using namespace std;
class Vehicle           
{
protected:              
    string no;          
public:                  
    virtual void display()=0;
};
class Car:public Vehicle        
{
public:
    int people,weight;
    Car(int p,int w):people(p),weight(w){}
    void display()
    {
        cout << no << ' '<< people*8+weight*2 << endl;  
    }
};
class Truck:public Vehicle 
{
public:
    int weight;
    Truck(int w):weight(w){}
    void display()
    {
        cout << no << ' '<< weight*5 << endl;
    }
};
class Bus:public Vehicle    
{
public:
    int people;
    Bus(int p):people(p){}
    void display()
    {
        cout << no << ' '<< people*3 << endl; 
    }
};
int main()
{
    int t,num,people,weight;
    string no;
    Vehicle *pv;
    cin >> t;

    while(t--)
    {
        cin >> num,no;
        if(num==1)
        {
            cin >> people >> weight;     
            pv=new Car(people,weight);
            pv->display();
        }
        if(num==2)
        {
            cin >> weight;     
            pv =new Truck(weight);
            pv->display();

        }
        if(num==3)
        {
            cin >> people;     
            pv=new Bus(people);
            pv->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018151044:Problem1119:答案错误
#include<iostream>
#include<string>
using namespace std;
class BA
{
protected:
	string name,no;
	int ba;
public:
	BA(string a,string b,int c):name(a),no(b),ba(c) {}
	virtual void deposit(int v)
	{
		ba+=v;
	}
	virtual void withdraw(int v)
	{
		if(ba<v)
		{
			cout<<"insufficient"<<endl;
			return ;
		}
		ba-=v;
	}
	virtual void display()
	{
		cout<<name<<" "<<no<<" Balance:"<<ba<<endl;
	}
};
class BP:public BA
{
	int limit;
public:
	BP(string a,string b,int c):BA(a,b,c),limit(5000) {}
	virtual void deposit(int v)
	{
		if(limit!=5000)
		{
			limit+=v;
			if(limit>5000)v=limit-5000;
			else v=0;
		}
		ba+=v;
	}
	virtual void withdraw(int v)
	{
		if(ba+limit<v)
		{
			cout<<"insufficient"<<endl;
			return;
		}
		if(ba>=v)
		{
			ba-=v;
		}
		else 
		{
			v-=ba;
			ba=0;
			limit-=v;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<no<<" Balance:"<<ba<<" limit:"<<limit<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	BA *p;
	while(t--)
	{
		string name,no;
		int ba;
		cin>>name>>no>>ba;
		if(no[1]=='P') p=new BP(name,no,ba);
		else p=new BA(name,no,ba);
		int v;
		for(int i=0;i<2;++i)
		{
			cin>>v;
			p->deposit(v);
			cin>>v;
			p->withdraw(v);
		}
		p->display();
		delete p;
	}
}
------------------------------------------------------
2018192050:Problem1119:正确
#include<bits/stdc++.h>
using namespace std;
class BaseAccount{
    protected:
        string name;
        string account;
        int balance;
    public:
        BaseAccount(){
        }
        BaseAccount(string a,string b,int c){
            name=a;
            account=b;
            balance= c;
        }
        ~BaseAccount(){
        }
        void deposit(int num)
        {
        	balance+=num;
		}
		void withdraw(int num)
		{
			if(balance>=num)
			{
				balance-=num;
			}
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		void display()
		{
			cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
		}
};
class BasePlus:public BaseAccount
{
    protected:
        int limit;
        int limitSum;
    public:
        BasePlus(){
        }
        BasePlus(string a,string b,int c){
            name=a;
            account=b;
            balance=c;
            limit=5000;
            limitSum=0;
        }
        ~BasePlus(){
        }
        void despoit(int n){
        	balance+=n;
		}
		void withdraw(int a)
		{
			if((balance+limit)<a)
			{
				cout<<"insufficient"<<endl;
			}
			else
			{
				if(balance<a)
				{
					limitSum=(a-balance);
					limit-=limitSum;
					balance=0;
					
				}
				else
					balance-=a;
			}
		}
		void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
		}
};
int main(){
	int t;
	string name,n;
	int num1,num2,num3,num4,num;
	cin>>t;
	BaseAccount *pv;
	while(t--)
	{
		cin>>name>>n>>num;
		cin>>num1>>num2>>num3>>num4;
		if(n[1]=='P')
		{
			BasePlus a(name,n,num);
			a.deposit(num1);
			a.withdraw(num2);
			a.deposit(num3);
			a.withdraw(num4);
			a.display();
		}
		else
		{
			BaseAccount b(name,n,num);
			pv=&b;
			pv->deposit(num1);
			pv->withdraw(num2);
			pv->deposit(num3);
			pv->withdraw(num4);
			pv->display();
		}
	}
}
------------------------------------------------------
2018192046:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:public Geometry
{
    double lenth,width;
public:
    Rect(double _lenth,double _width):lenth(_lenth),width(_width){}
    double getArea()
    {
        return lenth*width;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(double _r):r(_r){}
    double getArea()
    {
        return r*r*3.14;
    }
};
class TotalArea{

public:
   static void computerTotalArea(Geometry** t,int n)
   {
       double *Area=new double[n];
       for(int i=0;i<n;i++)
       {
           Area[i]=t[i]->getArea();
       }
       double max=Area[0];
       for(int i=0;i<n;i++)
       {
           if(max<Area[i])
           {
               max=Area[i];
           }
       }
       cout<<"最大面积="<<setprecision(2)<<setiosflags(ios::fixed)<<max<<endl;
   }
};
int main()
{
    int t;
    cin>>t;
    int flag=t;
    int i=0;
    Geometry **pv=new Geometry*[flag];
    while(t--)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect P(a,b);
            pv[i]=&P;
        }
        else if(type==2)
        {
            cin>>r;
            Circle P(r);
            pv[i]=&P;
        }
        i++;
    }
    TotalArea AR;
    AR.computerTotalArea(pv,flag);
}

------------------------------------------------------
2018151031:Problem1235:答案错误
#include <bits/stdc++.h>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
	int length,wide;
public:
	Rect(int l,int w):length(l),wide(w){}
	double getArea()
	{
		cout<<"Rect"<<endl;
		cout<<length*wide<<endl;
		return length*wide;
	}
};
class Circle:public Geometry
{
	int r;
public:
	Circle(int radius):r(radius){}
	double getArea()
	{
		cout<<"C"<<endl;
		cout<<3.14*r*r<<endl;
		return 3.14*r*r;
	}
};
class TotalArea
{
	static double maxarea;
public:
   static void computerTotalArea(Geometry** t,int n)
   {
   		for(int i=0;i<n;i++)
   		{
   			double a=t[i]->getArea();
   			if(maxarea<a)
			   maxarea=a;
   		}
   }
   static double getmaxarea()
   {
   		return maxarea;
   }
};
double TotalArea::maxarea=0;
int main()
{
	int t;
	cin>>t;
	Geometry** g=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			int l,w;
			cin>>l>>w;
			g[i]=new Rect(l,w);
		}
		else if(type==2)
		{
			int r;
			cin>>r;
			g[i]=new Circle(r);
		}
	}
	TotalArea total;
	total.computerTotalArea(g,t);
	cout<<"最大面积="<<total.getmaxarea()<<endl;
	for(int i=0;i<t;i++)
		delete []g[i];
	delete g;
	
}
------------------------------------------------------
2018192038:Problem1235:运行错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    double length;
    double width;
public:
    Rect(double ll,double ww):length(ll),width(ww){}
    double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double rr):r(rr){}
    double getArea()
    {
        return r*r*3.14;
    }
};


class TotalArea
{
    double res;
public:
    TotalArea():res(0){}
    void computerTotalArea(Geometry** t,int n)
    {
           res=0;
           for(int i=0;i<n;i++)
           {
               double mm=(*t[i]).getArea();
               if(res<mm)
               {
                   res=mm;
               }
           }
           cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};


int main()
{
    double length;
    double width;
    double r;
    int n,type;
    cin>>n;
    Geometry **p=new Geometry*[n];
   // Rect *rr=new Rect[n];
    //Circle *cc=new Circle[n];
   // Geometry **pp=&p;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>length>>width;
            Rect re(length,width);
            p[i]=&re;
        }
        else if(type==2)
        {
            cin>>r;
            Circle cir(r);
            p[i]=&cir;
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
    return 0;
}

------------------------------------------------------
2018041051:Problem1235:运行错误
#include<iostream>
#include<string>
#include<cstring>

using namespace std;

class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect:public Geometry
{
protected:
    double dlong,wide;
public:
    Rect(){}
    Rect(double dlong1,double wide1):dlong(dlong1),wide(wide1){}
    double getArea()
    {
        return dlong*wide;
    }
};

class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(){}
    Circle(double r1):r(r1){}
    double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea{

public:

    static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double biggest=0;
        for(int i=0;i<n;i++)
        {
            if(p[i]->getArea()>biggest)
                biggest=(p[i]->getArea());
        }
        cout<<"最大面积="<<biggest<<endl;
    }
};

int main()
{
    Geometry **p;

    int t;
    cin>>t;
    for(int i=0;i<t;i++)
    {
        int n;
        cin>>n;
        if(n==1)
        {
            int dlong,wide;
            cin>>dlong>>wide;
            p[i]=new Rect(dlong,wide);
        }
        else
        {
            int r;
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea pr;
    pr.computerTotalArea(p,t);


    return 0;
}

------------------------------------------------------
2018152102:Problem1119:正确
#include <iostream>

using namespace std;
class BaseAccount {
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(string na,string acco,int bal) : name(na),account(acco),balance(bal){}
    void deposit(int money) {
        balance  += money;
    }
    virtual void withdraw(int money) {
        if(money > balance) {
            cout<<"insufficient"<<endl;
            return;
        }
        balance -= money;
    }
    virtual void display() {
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
    }
};


class BasePlus:public BaseAccount {
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(string na,string acco,int bal,int lim = 5000,int lim_s = 0):BaseAccount(na,acco,bal),limit(lim),limit_sum(lim_s) {}
    void withdraw(int money) {
        if(balance+limit < money ) {
            cout<<"insufficient"<<endl;
            return;
        }
        if(money<=balance) {
            balance -= money;
        } else {
            limit_sum = money - balance;
            balance = 0;
            limit -= limit_sum;
            limit_sum = 0;
        }
    }
    void display() {
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main() {
    int t;

    cin>>t;


    while(t--) {
        string name;
        char  account[32];
        int balance;
        BaseAccount * p;
        cin>>name>>account>>balance;
        if(account[1] == 'A') {
            BaseAccount acco(name,account,balance);
            p = &acco;
            int money;

            for(int i=0;i<2;i++) {
                cin>>money;
                p->deposit(money);
                cin>>money;
                p->withdraw(money);
            }
            p->display();
        }else {
            BasePlus acco(name,account,balance);
            p = &acco;
            int money;

            for(int i=0;i<2;i++) {
                cin>>money;
                p->deposit(money);
                cin>>money;
                p->withdraw(money);
            }

            p->display();
        }


    }

    return 0;
}

------------------------------------------------------
2018152021:Problem1232:正确
#include<iostream>
#include <string>
using namespace std;
class Vehicle           
{
protected:              
    string no;          
public:                  
    virtual void display()=0;
};
class Car:public Vehicle        
{
public:
    int people,weight;
    Car(int p,int w):people(p),weight(w){}
    void display()
    {
        cout << people*8+weight*2 << endl;  
    }
};
class Truck:public Vehicle 
{
public:
    int weight;
    Truck(int w):weight(w){}
    void display()
    {
        cout << weight*5 << endl;
    }
};
class Bus:public Vehicle    
{
public:
    int people;
    Bus(int p):people(p){}
    void display()
    {
        cout << people*3 << endl; 
    }
};
int main()
{
    int t,num,people,weight;
    string no;
    Vehicle *pv;
    cin >> t;

    while(t--)
    {
        cin >> num >> no;
        cout << no << ' ';
        if(num==1)
        {
            cin >> people >> weight;     
            pv=new Car(people,weight);
            pv->display();
        }
        if(num==2)
        {
            cin >> weight;     
            pv =new Truck(weight);
            pv->display();

        }
        if(num==3)
        {
            cin >> people;     
            pv=new Bus(people);
            pv->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018191214:Problem1119:正确
#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
class BaseAccount
{
protected:
	char name[20],account[6];
	int balance;
public:
	BaseAccount(){}
	BaseAccount(char na[20],char ac[6],int ba)
	{
		strcpy(name,na);
		strcpy(account,ac);
		balance=ba;
	}
	virtual void deposit(int money)
	{
		if(balance>=money)
			balance=balance-money;
		else
			cout<<"insufficient"<<endl;
	}
	virtual void withdraw(int money)
	{
		balance=money+balance;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
	}
};
class BasePlus:public BaseAccount
{
protected:
	int limit;
	int limit_sum;
public:
	BasePlus(){}
	BasePlus(char na[20],char ac[6],int ba):limit(5000),limit_sum(5000),BaseAccount(na,ac,ba){}
	void deposit(int money)
	{
		if(balance+limit_sum>=money)
			if(balance>=money)
				balance=balance-money;
			else
			{
				money=money-balance;
				balance=balance-balance;
				limit_sum=limit_sum-money;
			}
		else
			cout<<"insufficient"<<endl;
	}
	void withdraw(int money)
	{
		if(limit_sum<5000 &&limit_sum+money<=5000)
			limit_sum=limit_sum+money;
		else if(limit_sum<5000 && limit_sum+money>5000)
		{
			balance=balance+limit_sum+money-5000;
			limit_sum=5000;
		}
		else if(limit>=5000)
			balance+=money;
	}
	void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit_sum<<endl;
	}
};
int main()
{
	int t,balance,money;
	char name[20],account[6];
	BaseAccount *BA;
	cin>>t;
	while(t--)
	{
		cin>>name>>account>>balance;
		if(account[1]=='A')
		{
			BA=new BaseAccount(name,account,balance);
			cin>>money;
	        BA->withdraw(money);
			cin>>money;
			BA->deposit(money);
			cin>>money;
			BA->withdraw(money);
			cin>>money;
			BA->deposit(money);
			BA->display();
		}
		else if(account[1]=='P')
		{
			BA=new BasePlus(name,account,balance);
			cin>>money;
	        BA->withdraw(money);
			cin>>money;
			BA->deposit(money);
			cin>>money;
			BA->withdraw(money);
			cin>>money;
			BA->deposit(money);
			BA->display();
		}
	}
	return 0;
}


------------------------------------------------------
2018151031:Problem1235:答案错误
#include <bits/stdc++.h>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
	int length,wide;
public:
	Rect(int l,int w):length(l),wide(w){}
	double getArea()
	{
		/*cout<<"Rect"<<endl;
		cout<<length*wide<<endl;*/
		return length*wide;
	}
};
class Circle:public Geometry
{
	int r;
public:
	Circle(int radius):r(radius){}
	double getArea()
	{
		/*cout<<"C"<<endl;
		cout<<3.14*r*r<<endl;*/
		return 3.14*r*r;
	}
};
class TotalArea
{
	static double maxarea;
public:
   static void computerTotalArea(Geometry** t,int n)
   {
   		for(int i=0;i<n;i++)
   		{
   			double a=t[i]->getArea();
   			if(maxarea<a)
			   maxarea=a;
   		}
   }
   static double getmaxarea()
   {
   		return maxarea;
   }
};
double TotalArea::maxarea=0;
int main()
{
	int t;
	cin>>t;
	Geometry** g=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			int l,w;
			cin>>l>>w;
			g[i]=new Rect(l,w);
		}
		else if(type==2)
		{
			int r;
			cin>>r;
			g[i]=new Circle(r);
		}
	}
	TotalArea total;
	total.computerTotalArea(g,t);
	cout<<"最大面积="<<total.getmaxarea()<<endl;
	for(int i=0;i<t;i++)
		delete []g[i];
	delete g;
	
}
------------------------------------------------------
2018192038:Problem1235:答案错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    double length;
    double width;
public:
    Rect(double ll,double ww):length(ll),width(ww){}
    double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double rr):r(rr){}
    double getArea()
    {
        return r*r*3.14;
    }
};


class TotalArea
{
    double res;
public:
    TotalArea():res(0){}
    void computerTotalArea(Geometry** t,int n)
    {
           res=0;
           for(int i=0;i<n;i++)
           {
               double mm=(*t[i]).getArea();
               if(res<mm)
               {
                   res=mm;
               }
           }
           cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};


int main()
{
    double length;
    double width;
    double r;
    int n,type;
    cin>>n;
    Geometry **p=new Geometry*[n];
   // Rect *rr=new Rect[n];
    //Circle *cc=new Circle[n];
   // Geometry **pp=&p;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>length>>width;
            Rect re(length,width);
            p[i]=&re;
        }
        else if(type==2)
        {
            cin>>r;
            Circle cir(r);
            p[i]=&cir;
        }
    }
    //TotalArea total;
    //total.computerTotalArea(p,n);
    return 0;
}

------------------------------------------------------
2017044015:Problem1232:正确
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Vehicle{
protected:
    int weight, volume;
    string no;//编号
public:
    Vehicle(){}
    virtual void display()=0;//应收费用
    virtual ~Vehicle(){}
};

class Car: public Vehicle{
public:
    Car(string s, int w, int v){
        no = s;
        weight = w;
        volume = v;
    };
    virtual void display(){
        cout<<no<<" "<<(weight*2 + volume*8)<<endl;
    }
};

class Truck: public Vehicle{
public:
    Truck(string s, int w){
        no = s;
        weight = w;
    };
    virtual void display(){
        cout<<no<<" "<<(weight*5)<<endl;
    }
};

class Bus: public Vehicle{
public:
    Bus(string s, int v){
        no = s;
        volume = v;
    };
    virtual void display(){
        cout<<no<<" "<<(volume*3)<<endl;
    }
};

int main()
{
    int t, w, v, type;
    string s;
    Vehicle* vc;
    cin>>t;
    while(t--){
        cin>>type>>s;
        if(type == 1){
            cin>>v>>w;
            Car car(s, w, v);
            vc = &car;
            vc->display();
        }
        if(type == 2){
            cin>>w;
            Truck truck(s, w);
            vc = &truck;
            vc->display();
        }
        if(type == 3){
            cin>>v;
            Bus bus(s, v);
            vc = &bus;
            vc->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017182013:Problem1119:正确
#include <bits/stdc++.h>

using namespace std;

class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int m)
    {
        balance+=m;
    }
    virtual void withdraw(int m)
    {
        if(balance>=m)
            balance-=m;
        else
            cout<<"insufficient"<<endl;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }

};
class BasePlus:public BaseAccount
{
    int limit;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b)
    {
        limit=5000;
    }
    void withdraw(int m)
    {
        if(balance+limit>=m)
        {
            if(balance>=m)
                balance-=m;
            else
            {
                limit= limit +balance-m;
                balance=0;
            }
        }
        else
            cout<<"insufficient"<<endl;
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\c\\s.txt",stdin,"r");
    int n;
    cin>>n;
    while(n--)
    {
        BaseAccount *p;
        string name,account;
        int balance,limit;
        cin>>name>>account>>balance;
        if(account[1]=='P')
        {

            BasePlus bp(name,account,balance);
            p = &bp;
            int num;
            cin>>num;
            p->deposit(num);
            cin>>num;
            p->withdraw(num);
            cin>>num;
            p->deposit(num);
            cin>>num;
            p->withdraw(num);
            p->display();
        }
        else
        {
            BaseAccount ba(name,account,balance);
            p = &ba;
            int num;
            cin>>num;
            p->deposit(num);
            cin>>num;
            p->withdraw(num);
            cin>>num;
            p->deposit(num);
            cin>>num;
            p->withdraw(num);
            p->display();
        }

    }
    return 0;
}

------------------------------------------------------
2017044015:Problem1232:正确
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Vehicle{
protected:
    int weight, volume;
    string no;//编号
public:
    Vehicle(){}
    virtual void display()=0;//应收费用
    virtual ~Vehicle(){}
};

class Car: public Vehicle{
public:
    Car(string s, int w, int v){
        no = s;
        weight = w;
        volume = v;
    };
    virtual void display(){
        cout<<no<<" "<<(weight*2 + volume*8)<<endl;
    }
};

class Truck: public Vehicle{
public:
    Truck(string s, int w){
        no = s;
        weight = w;
    };
    virtual void display(){
        cout<<no<<" "<<(weight*5)<<endl;
    }
};

class Bus: public Vehicle{
public:
    Bus(string s, int v){
        no = s;
        volume = v;
    };
    virtual void display(){
        cout<<no<<" "<<(volume*3)<<endl;
    }
};

int main()
{
    int t, w, v, type;
    string s;
    Vehicle* vc;
    cin>>t;
    while(t--){
        cin>>type>>s;
        if(type == 1){
            cin>>v>>w;
            Car car(s, w, v);
            vc = &car;
            vc->display();
        }
        if(type == 2){
            cin>>w;
            Truck truck(s, w);
            vc = &truck;
            vc->display();
        }
        if(type == 3){
            cin>>v;
            Bus bus(s, v);
            vc = &bus;
            vc->display();
        }
    }
    //delete vc;
    return 0;
}

------------------------------------------------------
2018192045:Problem1119:正确
#include<iostream>
using namespace std;
#include<cstring>
class BaseAccount
{
protected:
    string name;
    char account[30];
    float balance;
public:
    BaseAccount() {}
    BaseAccount(string n,char* a,float b):name(n),balance(b)
    {
        strcpy(account,a);
    }
    void depoist(float m)
    {
        balance+=m;
    }
    virtual void withdraw(float m)
    {
        if(m<=balance)
        {
            balance-=m;
        }
        else
            cout<<"insufficient"<<endl;
    }
    virtual void display()
    {
        cout<<name<<' '<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,char* a,float b):BaseAccount(n,a,b),limit(5000),limit_sum(0) {}
    void withdraw(float m)
    {
        if(m<=balance)
        {
            balance-=m;
        }
        else if(m<=balance+limit)
        {
            limit_sum=m-balance;
            limit-=limit_sum;
            balance=0;
        }
        else
            cout<<"insufficient"<<endl;
    }
    void display()
    {
        cout<<name<<' '<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main ()
{
    int t;
    float a1,b1,a2,b2,balance;
    char account[20];
    string name;
    BaseAccount *p;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance>>a1>>b1>>a2>>b2;
        if(account[1]=='P')
        {
            BasePlus A(name,account,balance);
            p=&A;
            p->depoist(a1);
            p->withdraw(b1);
            p->depoist(a2);
            p->withdraw(b2);
            p->display();

        }
        if(account[1]=='A')
        {
            BaseAccount A(name,account,balance);
            p=&A;
            p->depoist(a1);
            p->withdraw(b1);
            p->depoist(a2);
            p->withdraw(b2);
            p->display();
        }
    }
}

------------------------------------------------------
2018192044:Problem1234:答案错误
#include <iostream>
using namespace std;
#include<iomanip>
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{
public:
    GroupA() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    GroupB() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    GroupC() {}
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
    int add(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1+t2>=10)
                t1=(t1+t2)%10;
            else
                t1+=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
};
int main()
{
    int t,type,num1,num2;
    char o;
    cin>>t;
    Group *p;
    while(t--)
    {
        cin>>type>>num1>>o>>num2;
        if(type==1)
        {
            GroupA A;
            p=&A;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else if(type==2)
        {
            GroupB B;
            p=&B;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else
        {
            GroupC C;
            p=&C;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2018192038:Problem1235:答案错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    double length;
    double width;
public:
    Rect(double ll,double ww):length(ll),width(ww){}
    double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double rr):r(rr){}
    double getArea()
    {
        return r*r*3.14;
    }
};


class TotalArea
{
    double res;
public:
    TotalArea():res(0){}
    void computerTotalArea(Geometry** t,int n)
    {
           res=0;
           for(int i=0;i<n;i++)
           {
               double mm=0;
               //mm=(*t[i]).getArea();
               if(res<mm)
               {
                   res=mm;
               }
           }
           cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};


int main()
{
    double length;
    double width;
    double r;
    int n,type;
    cin>>n;
    Geometry **p=new Geometry*[n];
   // Rect *rr=new Rect[n];
    //Circle *cc=new Circle[n];
   // Geometry **pp=&p;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>length>>width;
            Rect re(length,width);
            p[i]=&re;
        }
        else if(type==2)
        {
            cin>>r;
            Circle cir(r);
            p[i]=&cir;
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
    return 0;
}

------------------------------------------------------
2018151044:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;
class BA
{
protected:
	string name,no;
	int ba;
public:
	BA(string a,string b,int c):name(a),no(b),ba(c) {}
	virtual void deposit(int v)
	{
		ba+=v;
	}
	virtual void withdraw(int v)
	{
		if(ba<v)
		{
			cout<<"insufficient"<<endl;
			return ;
		}
		ba-=v;
	}
	virtual void display()
	{
		cout<<name<<" "<<no<<" Balance:"<<ba<<endl;
	}
};
class BP:public BA
{
	int limit;
public:
	BP(string a,string b,int c):BA(a,b,c),limit(5000) {}
	virtual void deposit(int v)
	{
		if(limit!=5000)
		{
			limit+=v;
			if(limit>5000)v=limit-5000,limit=5000;
			else v=0;
		}
		ba+=v;
	}
	virtual void withdraw(int v)
	{
		if(ba+limit<v)
		{
			cout<<"insufficient"<<endl;
			return;
		}
		if(ba>=v)
		{
			ba-=v;
		}
		else 
		{
			v-=ba;
			ba=0;
			limit-=v;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<no<<" Balance:"<<ba<<" limit:"<<limit<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	BA *p;
	while(t--)
	{
		string name,no;
		int ba;
		cin>>name>>no>>ba;
		if(no[1]=='P') p=new BP(name,no,ba);
		else p=new BA(name,no,ba);
		int v;
		for(int i=0;i<2;++i)
		{
			cin>>v;
			p->deposit(v);
			cin>>v;
			p->withdraw(v);
		}
		p->display();
		delete p;
	}
}
------------------------------------------------------
2018152035:Problem1235:答案错误
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    double l,w;
public:
    Rect(int ll,int ww):l(ll),w(ww) {}
    double getArea()
    {
        return l*w;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(int rr):r(rr) {}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double maxx=0;
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<maxx<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int n,t,w,l,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        cin>>t;
        if(t==1)
        {
            cin>>l>>w;
            Rect r(l,w);
            p[i]=&r;
        }
        if(t==2)
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea q;
    q.computerTotalArea(p,n);
}

------------------------------------------------------
2018192038:Problem1235:运行错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    double length;
    double width;
public:
    Rect(double ll,double ww):length(ll),width(ww){}
    double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double rr):r(rr){}
    double getArea()
    {
        return r*r*3.14;
    }
};


class TotalArea
{
    double res;
public:
    TotalArea():res(0){}
    void computerTotalArea(Geometry** t,int n)
    {
           res=0;
           for(int i=0;i<n;i++)
           {
               double mm=0;
               mm=t[i]->getArea();
               if(res<mm)
               {
                   res=mm;
               }
           }
           cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};


int main()
{
    double length;
    double width;
    double r;
    int n,type;
    cin>>n;
    Geometry **p=new Geometry*[n];
   // Rect *rr=new Rect[n];
    //Circle *cc=new Circle[n];
   // Geometry **pp=&p;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>length>>width;
            Rect re(length,width);
            p[i]=&re;
        }
        else if(type==2)
        {
            cin>>r;
            Circle cir(r);
            p[i]=&cir;
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
    return 0;
}

------------------------------------------------------
2018151005:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){}
    Animal(string name0,int age0):name(name0),age(age0){}
    virtual void speak()=0;//应收费用
};
class Tiger:public Animal
{
public:
    Tiger(){}
    Tiger(string name0,int age0):Animal(name0,age0){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(){}
    Dog(string name0,int age0):Animal(name0,age0){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(){}
    Duck(string name0,int age0):Animal(name0,age0){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(){}
    Pig(string name0,int age0):Animal(name0,age0){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    Animal* pa;
    while(t--)
    {
        string name;
        int age;
        string type;
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger a(name,age);
            pa=&a;
            pa->speak();
        }
        else if(type=="Dog")
        {
            Dog a(name,age);
            pa=&a;
            pa->speak();
        }
        else if(type=="Duck")
        {
            Duck a(name,age);
            pa=&a;
            pa->speak();
        }
        else if(type=="Pig")
        {
            Pig a(name,age);
            pa=&a;
            pa->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2017047011:Problem1235:答案错误

#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Geometry{

public:
	virtual double getArea()=0; //保留小数点后两位
	Geometry(){}
	static double max;
};
double Geometry::max=0;
//------------------------
class Rect
{ 
protected:
	double a;
	double b;
public:
	Rect(){}
	Rect(double a1,double b1);
	double getArea();
};

Rect::Rect(double a1,double b1){
	a=a1;b=b1;
}

double Rect::getArea(){
	return a*b;
}
//------------------------
class Circle
{ 
protected:
	double r;
public:
	Circle(){}
	Circle(double r1);
	double getArea();
};

Circle::Circle(double r1){
	r=r1;
}

double Circle::getArea(){
	return 3.14*r*r;
}

class TotalArea
{
public:
   static void computerTotalArea(Geometry** t,int n);
};
//------------------------
int main()
{
	int t;
	int kind;
	double a,b,r;
	
	cin>>t;
	while(t--)
	{
		cin>>kind;
		if(kind==1){
			cin>>a>>b;
			Rect rect1(a,b);
			if(rect1.getArea() > Geometry::max)
				Geometry::max=rect1.getArea();	
		}
		
		else if(kind==2){
			cin>>r;
			Circle cir1(r);
			if(cir1.getArea() > Geometry::max)
				Geometry::max=cir1.getArea();
		}
	}
	cout<<"最大面积="<<Geometry::max<<endl;
}

------------------------------------------------------
2018152035:Problem1235:正确
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    double l,w;
public:
    Rect(int ll,int ww):l(ll),w(ww) {}
    double getArea()
    {
        return l*w;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(int rr):r(rr) {}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double maxx=0;
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxx<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int n,t,w,l,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        cin>>t;
        if(t==1)
        {
            cin>>l>>w;
            Rect r(l,w);
            p[i]=&r;
        }
        if(t==2)
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea q;
    q.computerTotalArea(p,n);
}

------------------------------------------------------
2018152100:Problem1235:正确
#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
using namespace std;

const double PI=3.14;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};

class Rect:public Geometry
{
private:
    double a,b;
public:
    Rect(){}
    Rect(double aa,double bb):a(aa),b(bb){}
    void setting(double aa,double bb){a=aa;b=bb;}
    double getArea(){return a*b;}
};

class Circle:public Geometry
{
    double r;
public:
    Circle(){}
    Circle(double rr):r(rr){}
    void setting(double rr){r=rr;}
    double getArea(){return PI*r*r;}
};

class TotalArea
{
public:
    static double biggest;
    static void computerTotalArea(Geometry** t,int n)
    {
        for (int i=0;i<n;i++)
        {
            if (biggest<(t[i]->getArea()))
                biggest=t[i]->getArea();
        }
    }
};

double TotalArea::biggest=0;

int main()
{
    int n,m;
    cin >> n;
    int n1=n;
    Geometry **t=new Geometry*[n];
    Rect *rec=new Rect[n];
    Circle *cir=new Circle[n];
    double a,b,r;
    int ir=0,ic=0,i=0;
    while (n--)
    {
        cin >> m;
        if (m==1)
        {
            cin >> a >> b;
            rec[ir].setting(a,b);
            t[i++]=&rec[ir++];
        }
        else if (m==2)
        {
            cin >> r;
            cir[ic].setting(r);
            t[i++]=&cir[ic++];
        }

    }
    TotalArea::computerTotalArea(t,n1);
    cout << "最大面积=";
    cout << fixed << setprecision(2) << TotalArea::biggest << endl;
    delete []t;
    delete []rec;
    delete []cir;
    return 0;
}
------------------------------------------------------
2018151020:Problem1235:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
protected:
    double length,width;
public:
    Rect(double l,double w):length(l),width(w){}
    double getArea()
    {
        return length*width;
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(double _r):r(_r){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{

public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double Max=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>Max)
                Max = t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<Max<<endl;
    }
} ;
int main()
{
    int t;
    cin>>t;
    Geometry **G = new Geometry *[t];
    for(int i=0;i<t;i++)
    {
        int k;
        cin>>k;
        if(k==1)
        {
            double l,w;
            cin>>l>>w;
            G[i] = new Rect(l,w);
        }
        else if(k==2)
        {
            double r;
            cin>>r;
            G[i] = new Circle(r);
        }
    }
    TotalArea::computerTotalArea(G,t);
    return 0;
}

------------------------------------------------------
2017047011:Problem1235:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Geometry{

public:
	virtual double getArea()=0; //保留小数点后两位
	Geometry(){}
	static double max;
};
double Geometry::max=0;
//------------------------
class Rect
{ 
protected:
	double a;
	double b;
public:
	Rect(){}
	Rect(double a1,double b1);
	double getArea();
};

Rect::Rect(double a1,double b1){
	a=a1;b=b1;
}

double Rect::getArea(){
	return a*b;
}
//------------------------
class Circle
{ 
protected:
	double r;
public:
	Circle(){}
	Circle(double r1);
	double getArea();
};

Circle::Circle(double r1){
	r=r1;
}

double Circle::getArea(){
	return 3.14*r*r;
}

class TotalArea
{
public:
   static void computerTotalArea(Geometry** t,int n);
};
//------------------------
int main()
{
	int t;
	int kind;
	double a,b,r;
	
	cin>>t;
	while(t--)
	{
		cin>>kind;
		if(kind==1){
			cin>>a>>b;
			Rect rect1(a,b);
			if(rect1.getArea() > Geometry::max)
				Geometry::max=rect1.getArea();	
		}
		
		else if(kind==2){
			cin>>r;
			Circle cir1(r);
			if(cir1.getArea() > Geometry::max)
				Geometry::max=cir1.getArea();
		}
	}
	cout<<"最大面积="<<fixed<<setprecision(2)<<Geometry::max<<endl;
}
------------------------------------------------------
2018192014:Problem1234:正确
#include<bits/stdc++.h>
using namespace std;
class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group

{

public:

virtual int add(int x, int y)//输出加法的运算结果
{
	return x+y;
} 

virtual int sub(int x, int y)//输出减法的运算结果
{
	return x-y;
}
};
class GroupB:virtual public Group

{

public:

virtual int add(int x, int y)//输出加法的运算结果
{
	return x+y;
} 

virtual int sub(int x, int y)//输出减法的运算结果
{
	int n,m,times=1,x1=x,y1=y;
	while(x1)
	{
		n=x1%10;
		m=y1%10;
		x1=x1/10;
		y1=y1/10;
		if(n<m)
		{
			x=x+pow(10,times);
		}
		times++;
	}
	return x-y;
}
};
class GroupC:virtual public Group

{

public:

virtual int add(int x, int y)//输出加法的运算结果
{
	int n,m,times=1,x1=x,y1=y;
	while(x1)
	{
		n=x1%10;
		m=y1%10;
		x1=x1/10;
		y1=y1/10;
		if(n+m>=10)
		{
			x-=pow(10,times);
		}
		times++;
	}
	return x+y;
} 

virtual int sub(int x, int y)//输出减法的运算结果
{
	int n,m,times=1,x1=x,y1=y;
	while(x1)
	{
		n=x1%10;
		m=y1%10;
		x1=x1/10;
		y1=y1/10;
		if(n<m)
		{
			x+=pow(10,times);
		}
		times++;
	}
	return x-y;
}
};
int main ()
{
	Group *group;
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	{
		int command;
		int a,b;
		char ch;
		cin>>command;
		if(command==1)
		{
			cin>>a>>ch>>b;
			group=new GroupA;
			if(ch=='+')
			cout<<group->add(a,b)<<endl;
			else
			cout<<group->sub(a,b)<<endl;
		}
		else if(command==2)
		{
			cin>>a>>ch>>b;
			group=new GroupB;
			if(ch=='+')
			cout<<group->add(a,b)<<endl;
			else
			cout<<group->sub(a,b)<<endl;
		}
		else if(command==3)
		{
			cin>>a>>ch>>b;
			group=new GroupC;
			if(ch=='+')
			cout<<group->add(a,b)<<endl;
			else
			cout<<group->sub(a,b)<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018152106:Problem1119:运行错误
#include<iostream>
using namespace std;

class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){}
	BaseAccount(string n,string a,int ba):name(n),account(a),balance(ba){}
	void setv(string n,string a,int ba)
	{
		name=n;
		account=a;
		balance=ba;
	}
	void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(num<=balance)
			balance-=num;
		else
			cout<<"insufficient"<<endl;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};

class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(){}
	BasePlus(string n,string a,int ba):BaseAccount(n,a,ba),limit(5000),limit_sum(0){}
	void deposit(int num)
	{
		balance+=num;
	}
	void withdraw(int num)
	{
		if(num<=balance)
		{
			balance-=num;
		}
		else if(num>balance&&num<=balance+limit)
		{
			limit_sum=(num-balance);
			limit-=limit_sum;
			balance=0;
		}
		else
			cout<<"insufficient"<<endl;
	}
	void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<" "<<endl;
	}
};

int main()
{
	int t;
	BaseAccount *p;
	cin>>t;
	while(t--)
	{
		string n,ac;
		int b,x1,y1,x2,y2;
		cin>>n>>ac>>b>>x1>>y1>>x2>>y2;
		if(ac[1]=='A')
		{
			p=new BaseAccount;
			p->setv(n,ac,b);
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
		}
		if(ac[1]=='P')
		{
			BasePlus a(n,ac,b);
			p=&a;
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
		}
	}
	delete p;
	return 0;
}
------------------------------------------------------
2018192044:Problem1234:正确
#include <iostream>
using namespace std;
#include<iomanip>
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{
public:
    GroupA() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    GroupB() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    GroupC() {}
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
    int add(int x,int y)
    {
        int sum=0,t1,t2,total=1,x1,y1;
        x1=x;
        y1=y;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0&&x1>y1)
                break;
            if(y==0&&x1<y1)
                break;
            if(t1+t2>=10)
                t1=(t1+t2)%10;
            else
                t1+=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
};
int main()
{
    int t,type,num1,num2;
    char o;
    cin>>t;
    Group *p;
    while(t--)
    {
        cin>>type>>num1>>o>>num2;
        if(type==1)
        {
            GroupA A;
            p=&A;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else if(type==2)
        {
            GroupB B;
            p=&B;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else
        {
            GroupC C;
            p=&C;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2018151031:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
	double length,wide;
public:
	Rect(double l,double w):length(l),wide(w){}
	double getArea()
	{
		/*cout<<"Rect"<<endl;
		cout<<length*wide<<endl;*/
		return length*wide;
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double radius):r(radius){}
	double getArea()
	{
		/*cout<<"C"<<endl;
		cout<<3.14*r*r<<endl;*/
		return 3.14*r*r;
	}
};
class TotalArea
{
	static double maxarea;
public:
   static void computerTotalArea(Geometry** t,int n)
   {
   		for(int i=0;i<n;i++)
   		{
   			double a=t[i]->getArea();
   			if(maxarea<a)
			   maxarea=a;
   		}
   }
   static double getmaxarea()
   {
   		return maxarea;
   }
};
double TotalArea::maxarea=0;
int main()
{
	int t;
	cin>>t;
	Geometry** g=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			double l,w;
			cin>>l>>w;
			g[i]=new Rect(l,w);
		}
		else if(type==2)
		{
			double r;
			cin>>r;
			g[i]=new Circle(r);
		}
	}
	TotalArea total;
	total.computerTotalArea(g,t);
	cout<<"最大面积=";
	printf("%.2f\n",total.getmaxarea());
	for(int i=0;i<t;i++)
		delete []g[i];
	delete g;
	
}
------------------------------------------------------
2018182052:Problem1234:正确
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        int temp=x-y;
        int wei=1;
        while(y>0&&x>0)
        {
            if(x%10<y%10)
                temp+=pow(10,wei);
            x/=10;
            y/=10;
            ++wei;
        }
        return temp;
    }
};
class GroupC:public Group
{
public:
    virtual int add(int x,int y)
    {
        int temp=x+y;
        int wei=1;
        while(x>0&&y>0)
        {
            if(x%10+y%10>=10)
                temp-=pow(10,wei);
            x/=10;
            y/=10;
            ++wei;
        }
        return temp;
    }
    virtual int sub(int x,int y)
    {
        int temp=x-y;
        int wei=1;
        while(y>0&&x>0)
        {
            if(x%10<y%10)
                temp+=pow(10,wei);

            x/=10;
            y/=10;
            ++wei;
        }
        return temp;
    }
};
void get_num(char str[],int &x,int &y,int &type)
{
    int cur=0;
    int n=strlen(str);
    while(str[cur]>='0'&&str[cur]<='9')
    {
        x=x*10+str[cur]-'0';
        ++cur;
    }
    if(str[cur]=='+')
        type=1;
    else if(str[cur]=='-')
        type=2;
    ++cur;
    while(cur<n)
    {
        y=y*10+str[cur]-'0';
        ++cur;
    }
}
int main()
{
 //   freopen(ADDRESS);
    int T(0);
    cin>>T;
    Group *pp;
    char str[20];
    while(T--)
    {
        int cmd(0);
        int x(0),y(0),type(0);
        cin>>cmd;
        if(cmd==1)
            pp=new GroupA;
        else if(cmd==2)
            pp=new GroupB;
        else if(cmd==3)
            pp=new GroupC;
        cin>>str;
        get_num(str,x,y,type);
        if(type==1)
            cout<<pp->add(x,y)<<endl;
        else if(type==2)
            cout<<pp->sub(x,y)<<endl;
    }
    return 0;
}
------------------------------------------------------
2017151066:Problem1232:正确
#include<iostream>
using namespace std;
class Vehicle
{
protected:
	string no;
public:
	Vehicle(string n):no(n){}
	virtual void display()=0;
	virtual ~Vehicle(){}
	
};
class Car:public Vehicle
{
protected:
	int zai;
	int zhong;
public:
	Car(int z,int zh,string n):zai(z),zhong(zh),Vehicle(n){}
	void display()
	{
		cout<<no<<" "<<zai*8+zhong*2<<endl;
	}
	virtual ~Car(){}
};
class Truck:public Vehicle
{
protected:
	int zhongliang;
public:
	Truck(int z,string n):zhongliang(z),Vehicle(n){}
	void display()
	{
		cout<<no<<" "<<zhongliang*5<<endl;
	}
	virtual ~Truck(){}
};
class Bus:public Vehicle
{
protected:
	int zai;
public:
	Bus(int z,string n):zai(z),Vehicle(n){}
	void display()
	{
		cout<<no<<" "<<zai*3<<endl;
	}
	virtual ~Bus(){}
};
int main()
{
	int t;
	cin>>t;
	string no;	
	int z,zh;
	Vehicle *pv;
	while(t--)
	{
		int n;
		cin>>n;
	   if(n==1)
		{
			cin>>no>>z>>zh;
			pv=new Car(z,zh,no);
			pv->display();
			delete pv;		
		}
     	else if(n==2)
		{
			cin>>no>>zh;
			pv=new Truck(zh,no);
			pv->display();
			delete pv;	
		}
    	else if(n==3)
		{
			cin>>no>>z;
			pv=new Bus(z,no);
			pv->display();
			delete pv;	
		}
	}
	return 0;
}
------------------------------------------------------
2018152106:Problem1119:正确
#include<iostream>
using namespace std;

class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){}
	BaseAccount(string n,string a,int ba):name(n),account(a),balance(ba){}
	void setv(string n,string a,int ba)
	{
		name=n;
		account=a;
		balance=ba;
	}
	void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(num<=balance)
			balance-=num;
		else
			cout<<"insufficient"<<endl;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};

class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(){}
	BasePlus(string n,string a,int ba):BaseAccount(n,a,ba),limit(5000),limit_sum(0){}
	void deposit(int num)
	{
		balance+=num;
	}
	void withdraw(int num)
	{
		if(num<=balance)
		{
			balance-=num;
		}
		else if(num>balance&&num<=balance+limit)
		{
			limit_sum=(num-balance);
			limit-=limit_sum;
			balance=0;
		}
		else
			cout<<"insufficient"<<endl;
	}
	void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<" "<<endl;
	}
};

int main()
{
	int t;
	BaseAccount *p;
	cin>>t;
	while(t--)
	{
		string n,ac;
		int b,x1,y1,x2,y2;
		cin>>n>>ac>>b>>x1>>y1>>x2>>y2;
		if(ac[1]=='A')
		{
			p=new BaseAccount;
			p->setv(n,ac,b);
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
		}
		if(ac[1]=='P')
		{
			BasePlus a(n,ac,b);
			p=&a;
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
		}
	}
	
	return 0;
}
------------------------------------------------------
2018152062:Problem1234:答案错误
#include <iostream>
using namespace std;
/*某小学二年级的数学老师在教学生整数加减法运算时发现：班上的同学可以分成三类，
第一类可以正确地完成加减法运算(GroupA)；第二类可以正确地完成加法运算，
但对于减法运算来说，总是忘记借位的处理(GroupB)；第三类总是忘记加法的进位，
也总是忘记减法的借位(GroupC)。（提示：小学二年级还没学负数。）
现在请模拟当老师在课堂提问某位同学时，同学会给出的回答。
实现时请基于下面的基类框架：*/

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
/*构建出GroupA, GroupB和GroupC三个派出类:
并编写主函数，要求主函数中有一个基类Group指针，通过该指针统一地进行add和sub运算*/
class GroupA:public Group
{
public:
    GroupA(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    GroupB(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        if(x-y<100)
           return x-y+10;
        else
           return x-y+100+10;
    }
};
class GroupC:public Group
{
public:
    GroupC(){}
    int add(int x,int y)
    {
        if(x+y<100)
            return x+y-10;
        else
            return x+y-10-100;
    }
    int sub(int x,int y)
    {
        if(x-y<100)
           return x-y+10;
        else
           return x-y+100+10;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *p;
        int cnt;
        int x,y;
        char ch;
        cin>>cnt>>x>>ch>>y;
        if(cnt==1)
        {
            GroupA u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(cnt==2)
        {
            GroupB u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else
        {
            GroupC u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192013:Problem1119:正确
#include <iostream>
#include <string>
using namespace std;

class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int a){balance+=a;}
    virtual void withdraw(int a)
    {
        if(a>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=a;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string a,int b,int l=5000,int l_s=0):BaseAccount(n,a,b),limit(l),limit_sum(l_s){}
    void withdraw(int a)
    {
        if(a>balance+limit)
            cout<<"insufficient"<<endl;
        else if(a>balance&&a<=balance+limit)
        {
            limit_sum=a-balance;
            limit-=(a-balance);
            balance=0;
        }
        else
            balance-=a;
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    BaseAccount *p;
    while(t--)
    {
        string name,account;
        int balance,a,b,c,d;
        cin>>name>>account>>balance;
        cin>>a>>b>>c>>d;
        string s(account,0,2);
        if(s=="BA")
        {
            BaseAccount ba(name,account,balance);
            p=&ba;
            p->deposit(a);
            p->withdraw(b);
            p->deposit(c);
            p->withdraw(d);
            p->display();
        }
        else if(s=="BP")
        {
            BasePlus bp(name,account,balance);
            p=&bp;
            p->deposit(a);
            p->withdraw(b);
            p->deposit(c);
            p->withdraw(d);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017144045:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	virtual void Speak()=0;
	Animal()
	{	
	}
	Animal(string n)
	{
		name=n;
	}

};

class Tiger:public Animal
{
public:
	Tiger(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
	}
};

class Dog:public Animal
{
public:
	Dog(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
	}
};

class Duck:public Animal
{
public:
	Duck(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
	}
};

class Pig:public Animal
{
public:
	Pig(string n):Animal(n)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
	}
};

/*void fn(Animal & c)
{
	c.Speak();
}*/

int main()
{
	int t;
	cin>>t;
	string l;
	string n;
	int age;
	Animal *a;
	while(t--)
	{
		cin>>l>>n>>age;
		if(l=="Tiger")
		{
			a=new Tiger(n);
			a->Speak();
		}
		else if(l=="Dog")
		{
			a=new Dog(n);
			a->Speak();
		}
		else if(l=="Duck")
		{
			a=new Duck(n);
			a->Speak();
		}
		else if(l=="Pig")
		{
			a=new Pig(n);
			a->Speak();
		}
		else
		    cout<<"There is no "<<l<<" in our Zoo."<<endl;
	}
}
------------------------------------------------------
2018151066:Problem1235:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public :
    virtual double getArea()=0;
};

class Rect: public Geometry
{
protected:
    double w,h;
public:
    Rect(double w_,double h_):w(w_),h(h_){}
    double getArea()
    {
        return w*h;
    }
};

class Circle: public Geometry
{
protected:
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea:public Rect,public Circle
{
public :
    static void computerTotalArea(Geometry** t,int n);
};

void TotalArea::computerTotalArea(Geometry **data,int n)
{
    double maxArea=0;
    for(int i=0;i<n;i++)
    {
        if(data[i]->getArea()>maxArea)
            maxArea=data[i]->getArea();
    }
    cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<maxArea<<endl;

}
int main()
{
    int t;
    cin>>t;
    Geometry **data=new Geometry*[t];
    for(int i=0;i<t;i++)
    {
        int cmd;
        cin>>cmd;
        if(cmd==1)
        {
            int w,h;
            cin>>w>>h;
            Rect rect(w,h);
            data[i]=&rect;
        }
        else
        {
            int r;
            cin>>r;
            Circle circle(r);
            data[i]=&circle;
        }
    }
    TotalArea::computerTotalArea(data,t);
}

------------------------------------------------------
2018192050:Problem1119:运行错误
#include<bits/stdc++.h>
using namespace std;
class BaseAccount{
    protected:
        string name;
        string account;
        int balance;
    public:
        BaseAccount(){
        }
        BaseAccount(string a,string b,int c){
            name=a;
            account=b;
            balance= c;
        }
        ~BaseAccount(){
        }
        void deposit(int num)
        {
        	balance+=num;
		}
		virtual void withdraw(int num)
		{
			if(balance>=num)
			{
				balance-=num;
			}
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		virtual void display()
		{
			cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
		}
};
class BasePlus:public BaseAccount
{
    protected:
        int limit;
        int limitSum;
    public:
        BasePlus(){
        }
        BasePlus(string a,string b,int c){
            name=a;
            account=b;
            balance=c;
            limit=5000;
            limitSum=0;
        }
        ~BasePlus(){
        }
        void despoit(int n){
        	balance+=n;
		}
		void withdraw(int a)
		{
			if((balance+limit)<a)
			{
				cout<<"insufficient"<<endl;
			}
			else
			{
				if(balance<a)
				{
					
					limitSum=(a-balance);
					limit-=limitSum;
					balance=0;
					
				}
				else
					balance-=a;
			}
		}
		void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
		}
};
int main(){
	int t;
	string name,n;
	int num1,num2,num3,num4,num;
	cin>>t;
	BaseAccount *pv;
	while(t--)
	{
		cin>>name>>n>>num;
		cin>>num1>>num2>>num3>>num4;
		if(n[1]=='P')
		{
			BasePlus a(name,n,num);
			pv->deposit(num1);
			pv->withdraw(num2);
			pv->deposit(num3);
			pv->withdraw(num4);
			pv->display();
		}
		else
		{
			BaseAccount b(name,n,num);
			pv=&b;
			pv->deposit(num1);
			pv->withdraw(num2);
			pv->deposit(num3);
			pv->withdraw(num4);
			pv->display();
		}
	}
}
------------------------------------------------------
2018152106:Problem1119:正确
#include<iostream>
using namespace std;

class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){}
	BaseAccount(string n,string a,int ba):name(n),account(a),balance(ba){}
	void setv(string n,string a,int ba)
	{
		name=n;
		account=a;
		balance=ba;
	}
	void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(num<=balance)
			balance-=num;
		else
			cout<<"insufficient"<<endl;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};

class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(){}
	BasePlus(string n,string a,int ba):BaseAccount(n,a,ba),limit(5000),limit_sum(0){}
	void deposit(int num)
	{
		balance+=num;
	}
	void withdraw(int num)
	{
		if(num<=balance)
		{
			balance-=num;
		}
		else if(num>balance&&num<=balance+limit)
		{
			limit_sum+=(num-balance);
			limit-=(num-balance);
			balance=0;
		}
		else
			cout<<"insufficient"<<endl;
	}
	void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<" "<<endl;
	}
};

int main()
{
	int t;
	BaseAccount *p;
	cin>>t;
	while(t--)
	{
		string n,ac;
		int b,x1,y1,x2,y2;
		cin>>n>>ac>>b>>x1>>y1>>x2>>y2;
		if(ac[1]=='A')
		{
			p=new BaseAccount;
			p->setv(n,ac,b);
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
		}
		if(ac[1]=='P')
		{
			BasePlus a(n,ac,b);
			p=&a;
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
		}
	}
	
	return 0;
}
------------------------------------------------------
2016150076:Problem1120:答案错误
#include <iostream>
using namespace std;
 
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()
    {
 
    }
    ~Animal(){} 
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
 
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
 
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HengHeng."<<endl;
    }
    ~Pig(){}
};
 
 
int main()
{
    int n,age;
    string name;
    string type;
    Animal *p_animal;
    cin>>n;
   while(n--)
   {
        cin>>type>>name>>age;;
        int flag=0;
            if(type=="Tiger")
                {   
                    
                    Tiger a(name,age);
                    p_animal=&a;
                    p_animal->speak();
                  
                }
                 
            else if(type=="Dog")
                {   
                 
                    Dog b(name,age);
                    p_animal=&b;
                    p_animal->speak();
                 
                }
                 
            else if(type=="Duck")
                {   
                    
                    Duck c(name,age);
                    p_animal=&c;
                    p_animal->speak();
           
                }       
         
            else if(type=="Pig")
                {   
                    
                    Pig d(name,age);
                    p_animal=&d;
                    p_animal->speak();
                 
                } 
                 
          else 
            {
                cout<<"There is no "<<type<<" in our Zoo."<<endl;
             }      
   }
 
   
     
    return 0;
}
------------------------------------------------------
2018192010:Problem1235:答案错误
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
    int a,b;
public:
    Rect(){}
    Rect(int av,int bv):a(av),b(bv){}
    double getArea()
    {
        return a*b;
    }
};
class Circle:public Geometry
{
protected:
    int r;
public:
    Circle(){}
    Circle(int b):r(b){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea{

public:
   static void computerTotalArea(Geometry** t,int n)
   {
       t = new Geometry*[n];
       float m = 0;
       for(int i=0;i<n;i++)
       {
           int type;
           cin >> type;
           switch(type)
           {
           case 1:
            {
                int a,b;
                cin >> a >> b;
                t[i] = new Rect(a,b);
                if(t[i]->getArea() > m)
                    m = t[i]->getArea();
            }
           case 2:
            {
                int r;
                cin >> r;
                t[i] = new Circle(r);
                if(t[i]->getArea()>m)
                    m = t[i]->getArea();
            }
           }
       }
       cout << "最大面积=" << fixed << setprecision(2) << m << endl;
   }
};
int main()
{
    int n;
    cin >> n;
    TotalArea a;
    Geometry **t;
    a.computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2016150201:Problem1120:正确
#include<iostream>
using namespace std;
class animal{
protected:
   string name;
   int age;
   int weight;
public:
   animal(string na,int a):name(na),age(a){
   }
   ~animal(){
   }
   virtual void speak()=0;
};
class tiger:public animal{
public:
   tiger(string na,int a):animal(na,a){
   }
   ~tiger(){
   }
   void virtual speak(){
      cout<<"Hello,I am "<<name<<",AOOO."<<endl;
   }
};
class dog:public animal{
public:
   dog(string na,int a):animal(na,a){
   }
   ~dog(){
   }
   virtual void speak(){
      cout<<"Hello,I am "<<name<<",WangWang."<<endl;
   }
};
class duck:public animal{
public:
   duck(string na,int a):animal(na,a){
   }
   ~duck(){
   }
   virtual void speak(){
      cout<<"Hello,I am "<<name<<",GAGA."<<endl;
   }
};
class pig:public animal{
public:
   pig(string na,int a):animal(na,a ){
   }
   ~pig(){
   }
   virtual void speak(){
      cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
   }
};
int main(){
   int t,a;
   animal *an;
   string ty,na;
   cin>>t;
   while(t--){
      cin>>ty>>na>>a;
      if(ty=="Tiger"){
         tiger t(na,a);
         an=&t;
         an->speak();
      }
      else if(ty=="Pig"){
         pig p(na,a);
         an=&p;
         an->speak();
      }
      else if(ty=="Duck"){
         duck d(na,a);
         an=&d;
         an->speak();
      }
      else if(ty=="Dog"){
         dog dg(na,a);
         an=&dg;
         an->speak();
      }
      else
         cout<<"There is no "<<ty<<" in our Zoo."<<endl;
   }
}
------------------------------------------------------
2018192008:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry{

public:
    virtual double getArea()=0;

};
class TotalArea{

public:
   static void computerTotalArea(Geometry **t,int n)
   {
       int i=0;
       double maxa=0;
       for(i=0;i<n;i++)
       {
           if(t[i]->getArea()>maxa)
                maxa=t[i]->getArea();

       }
       cout<<"最大面积="<<fixed<<setprecision(2)<<maxa<<endl;
   }

};

class Rect:public Geometry
{
    int len,wid;
public:
    Rect(int l,int w):len(l),wid(w){}
    double getArea()
    {
        double s;
        s=len*wid;
        return s;
    }
};

class Circle:public Geometry
{
    int r;
public:
    Circle(int r1):r(r1){}
    double getArea()
    {
        double s;
        s=3.14*r*r;
        return s;
    }
};

int main()
{
    int t;
    cin>>t;
    int n=t;
    Geometry **g;
    g=new Geometry*[n];
        int i=0;
    while(t--)
    {

        int k;
        cin>>k;
        if(k==1)
        {
            int l,w;
            cin>>l>>w;
            g[i]=new Rect(l,w);
        }
        else
        {
            int r1;
            cin>>r1;
            g[i]=new Circle(r1);
        }
        i++;
    }
    TotalArea::computerTotalArea(g,n);
}

------------------------------------------------------
2018192010:Problem1235:答案错误
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
    int a,b;
public:
    Rect(){}
    Rect(int av,int bv):a(av),b(bv){}
    double getArea()
    {
        return a*b;
    }
};
class Circle:public Geometry
{
protected:
    int r;
public:
    Circle(){}
    Circle(int b):r(b){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea{

public:
   static void computerTotalArea(Geometry** t,int n)
   {
       t = new Geometry*[n];
       float m = 0;
       for(int i=0;i<n;i++)
       {
           int type;
           cin >> type;
           switch(type)
           {
           case 1:
            {
                int a,b;
                cin >> a >> b;
                t[i] = new Rect(a,b);
                if(t[i]->getArea() > m)
                    m = t[i]->getArea();
            }
           case 2:
            {
                int r;
                cin >> r;
                t[i] = new Circle(r);
                if(t[i]->getArea()>m)
                    m = t[i]->getArea();
            }
           }
       }
       cout << "最大面积=" << fixed << showpoint << setprecision(2) << m << endl;
   }
};
int main()
{
    int n;
    cin >> n;
    TotalArea a;
    Geometry **t;
    a.computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2016150076:Problem1120:正确
#include <iostream>
using namespace std;
 
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()
    {
 
    }
    ~Animal(){} 
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
 
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
 
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig(){}
};
 
 
int main()
{
    int n,age;
    string name;
    string type;
    Animal *p_animal;
    cin>>n;
   while(n--)
   {
        cin>>type>>name>>age;;
        int flag=0;
            if(type=="Tiger")
                {   
                    
                    Tiger a(name,age);
                    p_animal=&a;
                    p_animal->speak();
                  
                }
                 
            else if(type=="Dog")
                {   
                 
                    Dog b(name,age);
                    p_animal=&b;
                    p_animal->speak();
                 
                }
                 
            else if(type=="Duck")
                {   
                    
                    Duck c(name,age);
                    p_animal=&c;
                    p_animal->speak();
           
                }       
         
            else if(type=="Pig")
                {   
                    
                    Pig d(name,age);
                    p_animal=&d;
                    p_animal->speak();
                 
                } 
                 
          else 
            {
                cout<<"There is no "<<type<<" in our Zoo."<<endl;
             }      
   }
 
   
     
    return 0;
}
------------------------------------------------------
2018192030:Problem1232:正确
#include <iostream>
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(string num):no(num){}
    virtual void display(){}
};
class Car:public Vehicle 
{
    int guest,weight; 
public:  
    Car(Vehicle vehicle,int guestv,int weightv):Vehicle(vehicle),guest(guestv),weight(weightv){}
    void display()  
    {     
        cout<<no<<" "<<guest*8+weight*2<<endl;
    }  
};
class Truck:public Vehicle  
{  
    int weight; 
public:
    Truck(Vehicle vehicle,int weightv):Vehicle(vehicle),weight(weightv){} 
    void display()  
    {     
        cout<<no<<" "<<weight*5<<endl;
    }  
};
class Bus:public Vehicle
{   
    int guest;
public:  
    Bus(Vehicle vehicle,int guestv):Vehicle(vehicle),guest(guestv){}  
    void display()  
    {     
        cout<<no<<" "<<guest*3<<endl; 
    }  
};  
int main()
{
    Vehicle *pv;
    int t,type,g,w;
    string num;
    cin>>t;
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>num>>g>>w;
            Car a(num,g,w);
            pv=&a;
            pv->display();
        }
        if(type==2)
        {
            cin>>num>>w;
            Truck b(num,w);
            pv=&b;
            pv->display();
        }
        if(type==3)
        {
            cin>>num>>g;
            Bus c(num,g);
            pv=&c;
            pv->display();
        }
    }
	return 0;
}
------------------------------------------------------
2018152108:Problem1235:答案错误
#include<iostream>
#define PI 3.14
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
	double length,width;
public:
	friend class TotalArea;
	Rect(double a,double b)
	{
		length = a;
		width = b;
	}
	double getArea()
	{
		return length*width;
	}
};

class Circle:public Geometry
{
	double radius;
public:
	friend class TotalArea;
	Circle(double r)
	{
		radius = r;
	}
	double getArea()
	{
		return PI*radius*radius;
	}
};

class TotalArea
{
public:
    void computerTotalArea(Geometry** t,int n)
   {
   		double max = t[0]->getArea();
		for(int i=1;i<n;i++)
		{
			if(t[i]->getArea()>max)
			{
				max = t[i]->getArea();
			}
		}
		cout<<"最大面积="<<max<<endl;
   }
};

int main()
{
	int t,i;
	cin>>t;
	Geometry **p = new Geometry*[t];
	for(i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			double a,b;
			cin>>a>>b;
			p[i] = new Rect(a,b);
		}
		if(type==2)
		{
			double r;
			cin>>r;
			p[i] = new Circle(r);
		}
	}
	TotalArea x;
	x.computerTotalArea(p,t);
	return 0;
}
------------------------------------------------------
2018151066:Problem1119:运行错误
#include<iostream>
#include<string>
using namespace std;
class  BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount();
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b) {}
    void deposit(int n)
    {
        balance+=n;
    }
    virtual void withdraw(int n)
    {
        if(n>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=n;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
protected:
    int limit,limit_sum;
public:
    BasePlus(string name,string a,int balance):limit(5000),limit_sum(0),BaseAccount(name,a,balance) {};
    void withdraw(int n)
    {
        if(limit_sum>limit)
            cout<<"insufficient"<<endl;
        else if(n>balance)
        {
            limit_sum=n-balance;
            balance=0;
        }
        else if(n<=balance)
        {
            balance-=n;
        }

    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }

};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *pv;
        string name,account;
        int balance;
        cin>>name>>account>>balance;
        int d1,w1,d2,w2;
        cin>>d1>>w1>>d2>>w2;
        if(account[2]=='A')
        {
            BaseAccount ba(name,account,balance);
            pv=&ba;
        }
        else
        {
            BasePlus bp(name,account,balance);
            pv=&bp;
        }
        pv->deposit(d1);
        pv->withdraw(w1);
        pv->deposit(d2);
        pv->withdraw(w2);
        pv->display();
        delete pv;
    }
}

------------------------------------------------------
2018192050:Problem1119:正确
#include<bits/stdc++.h>
using namespace std;
class BaseAccount{
    protected:
        string name;
        string account;
        int balance;
    public:
        BaseAccount(){
        }
        BaseAccount(string a,string b,int c){
            name=a;
            account=b;
            balance= c;
        }
        ~BaseAccount(){
        }
        void deposit(int num)
        {
        	balance+=num;
		}
		virtual void withdraw(int num)
		{
			if(balance>=num)
			{
				balance-=num;
			}
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		virtual void display()
		{
			cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
		}
};
class BasePlus:public BaseAccount
{
    protected:
        int limit;
        int limitSum;
    public:
        BasePlus(){
        }
        BasePlus(string a,string b,int c){
            name=a;
            account=b;
            balance=c;
            limit=5000;
            limitSum=0;
        }
        ~BasePlus(){
        }
        void despoit(int n){
        	balance+=n;
		}
		void withdraw(int a)
		{
			if((balance+limit)<a)
			{
				cout<<"insufficient"<<endl;
			}
			else
			{
				if(balance<a)
				{
					
					limitSum=(a-balance);
					limit-=limitSum;
					balance=0;
					
				}
				else
					balance-=a;
			}
		}
		void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
		}
};
int main(){
	int t;
	string name,n;
	int num1,num2,num3,num4,num;
	cin>>t;
	BaseAccount *pv;
	while(t--)
	{
		cin>>name>>n>>num;
		cin>>num1>>num2>>num3>>num4;
		if(n[1]=='P')
		{
			BasePlus a(name,n,num);
			pv=&a;
			pv->deposit(num1);
			pv->withdraw(num2);
			pv->deposit(num3);
			pv->withdraw(num4);
			pv->display();
		}
		else
		{
			BaseAccount b(name,n,num);
			pv=&b;
			pv->deposit(num1);
			pv->withdraw(num2);
			pv->deposit(num3);
			pv->withdraw(num4);
			pv->display();
		}
	}
}
------------------------------------------------------
2018192009:Problem1235:答案错误
#include <iostream>

using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};
class rect:public Geometry
{
protected:
    int len,width;
public:
    rect(){}
    rect(int l,int w):len(l),width(w){}
    virtual double getArea()
    {
        double a;
        a=len*width;
        return a;
    }
};
class circle:public Geometry
{
protected:
    int r;
public:
    circle(){}
    circle(int rr):r(rr){}
    virtual double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
public:
    TotalArea(){}
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxx=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<maxx;
    }
};
int main()
{
    int t;
    int type,len,wid,r;
    cin>>t;
    Geometry **p;
    p=new Geometry*[t];
    for(int i=0;i<t;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>len>>wid;
            p[i]=new rect(len,wid);
        }
        else if(type==2)
        {
            cin>>r;
            p[i]=new circle(r);
        }
    }
    TotalArea a;
    a.computerTotalArea(p,t);
    return 0;
}

------------------------------------------------------
2016071031:Problem1119:答案错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class BaseAccount {
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount() {}
    BaseAccount(string name_, string account_, int balance_)
        :name(name_), account(account_), balance(balance_) {}
    virtual void deposit(int amount) {
        balance += amount;
    }

    virtual void withdraw(int amount) {
        if (amount > balance)
            cout<< "insufficient" <<endl;
        else
            balance -= amount;
    }
    virtual void display() {
        cout<< name << " " << account << " Balance:" << balance <<endl;
    }
};

class BasePlus: public BaseAccount {
    int limit;
    int limit_sum;
public:
    BasePlus() {
        limit = 5000;
        limit_sum = 0;
    }
    BasePlus(string name_, string account_, int balance_)
            : BaseAccount(name_, account_, balance_) {
                limit = 5000;
                limit_sum = 0;
            }
    void deposit(int amount) {
    	if (limit_sum > 0) {
    		if (limit_sum >= amount) {
    			limit -= amount;
			} else {
				limit = 0;
				balance += amount - limit;
			}
		}
    }

    void withdraw(int amount) {
        if (amount > balance + limit) {
            cout<< "insufficient" <<endl;
        }else if (amount > balance) {
            balance = 0;
            limit_sum += amount - balance;
        } else {
            balance -= amount;
        }

    }
    void display() {
        cout<< name << " " << account << " Balance:" << balance;
        cout<< " limit:" << limit - limit_sum <<endl;
    }
};


int main() {
    int t, balance, o1, o2, o3, o4;
    string name, account;

    BaseAccount *b;
    cin>>t;
    while (t--) {
        cin>>name>>account>>balance;
        if(account.find('A') != -1) {
            b = new BaseAccount(name, account, balance);
        } else {
            b = new BasePlus(name, account, balance);
        }
        cin>>o1>>o2>>o3>>o4;
        b->deposit(o1);
        b->withdraw(o2);
        b->deposit(o3);
        b->withdraw(o4);
        b->display();
    }
    return 0;
}

------------------------------------------------------
2018152007:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{

public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:public Geometry
{
private:
    int a,b;
public:
    Rect(int A,int B):a(A),b(B){}
    double getArea()
    {
        return a*b;
    }
};
class Circle:public Geometry
{
private:
    int r;
public:
    Circle(int R):r(R){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea{

public:
    TotalArea(){}
   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {

        int a;
        double b=0;
        for(a=0;a<n;a++)
        {
            if(t[a]->getArea()>b)
            {
                b=t[a]->getArea();
            }
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<b<<endl;
    }
};


int main()
{
    int time,a;
    cin>>time;
    Geometry **t=new Geometry*[time];
    for(a=0;a<time;a++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            int chang,kuan;
            cin>>chang>>kuan;
            t[a]=new Rect(chang,kuan);
        }
        else
        {
            int radiu;
            cin>>radiu;
            t[a]=new Circle(radiu);
        }
    }
    TotalArea t1;
    t1.computerTotalArea(t,time);
    return 0;
}

------------------------------------------------------
2018192009:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};
class rect:public Geometry
{
protected:
    int len,width;
public:
    rect(){}
    rect(int l,int w):len(l),width(w){}
    virtual double getArea()
    {
        double a;
        a=len*width;
        return a;
    }
};
class circle:public Geometry
{
protected:
    int r;
public:
    circle(){}
    circle(int rr):r(rr){}
    virtual double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
public:
    TotalArea(){}
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxx=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxx;
    }
};
int main()
{
    int t;
    int type,len,wid,r;
    cin>>t;
    Geometry **p;
    p=new Geometry*[t];
    for(int i=0;i<t;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>len>>wid;
            p[i]=new rect(len,wid);
        }
        else if(type==2)
        {
            cin>>r;
            p[i]=new circle(r);
        }
    }
    TotalArea a;
    a.computerTotalArea(p,t);
    return 0;
}

------------------------------------------------------
2018192006:Problem1234:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
    
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
    
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
  
  
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
  
/*Add Data Structures Here*/
class Group
{
	public:
		virtual int add(int x, int y)=0;
		virtual int sub(int x, int y)=0;
};
class GpA:public Group{
	public:
		int add(int x, int y){return x+y;};
		int sub(int x, int y){return x-y;};

	private:

};
class GpB:public Group{
	public:
		int add(int x, int y){return x+y;};
		int sub(int x, int y){
			int a=x,b=y,sum=0;
			int i;
			for(i=0;a!=0 || b!=0;++i){
				int tmp=(a%10-b%10);
				if(tmp<0)
					tmp+=10;
				sum+=tmp*pow(10,i);
				a/=10;
				b/=10;
			}
			return sum;
		};

	private:

};
class GpC:public Group{
	public:
		int add(int x, int y){
			int i;
			int a=x,b=y,sum=0;
			for(i=0;a!=0 || b!=0;++i){
				sum+=fabs((a%10+b%10)%10)*pow(10,i);
				a/=10;
				b/=10;
			}
			return sum;
		};
		int sub(int x, int y){
			int i;
			int a=x,b=y,sum=0;
			for(i=0;a!=0 || b!=0;++i){
				int tmp=(a%10-b%10);
				if(tmp<0)
					tmp+=10;
				sum+=tmp*pow(10,i);
				a/=10;
				b/=10;
			}
			return sum;
		};


};
/*Add Functions Here*/

/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
    Group *ptr;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
    	int n,a,b;
    	char c;
    	cin >> n;
    	cin >> a >> c >> b;
    	if(n==1){
    		GpA A;
    		ptr=&A;
    		if(c=='+'){
    			cout << ptr->add(a,b) << endl;
			}else{
				cout << ptr->sub(a,b) << endl;
			}
		}else if(n==2){
			GpB B;
			ptr=&B;
		    if(c=='+'){
    			cout << ptr->add(a,b) << endl;
			}else{
				cout << ptr->sub(a,b) << endl;
			}
		}else{
			GpC C;
			ptr=&C;
		    if(c=='+'){
    			cout << ptr->add(a,b) << endl;
			}else{
				cout << ptr->sub(a,b) << endl;
			}
		}
    }
    
#endif
    /*Final process here.*/
  
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2018152108:Problem1235:答案错误
#include<iostream>
#define PI 3.14
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
	double length,width;
public:
	friend class TotalArea;
	Rect(double a,double b)
	{
		length = a;
		width = b;
	}
	double getArea()
	{
		return length*width;
	}
};

class Circle:public Geometry
{
	double radius;
public:
	friend class TotalArea;
	Circle(double r)
	{
		radius = r;
	}
	double getArea()
	{
		return PI*radius*radius;
	}
};

class TotalArea
{
public:
    void computerTotalArea(Geometry** t,int n)
   {
   		double max = t[0]->getArea();
		for(int i=1;i<n;i++)
		{
			if(t[i]->getArea()>max)
			{
				max = t[i]->getArea();
			}
		}
		cout<<"最大面积="<<max<<endl;
   }
};

int main()
{
	int t,i;
	cin>>t;
	Geometry **p = new Geometry*[t];
	for(i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			double a,b;
			cin>>a>>b;
			p[i] = new Rect(a,b);
		}
		if(type==2)
		{
			double r;
			cin>>r;
			p[i] = new Circle(r);
		}
	}
	TotalArea x;
	x.computerTotalArea(p,t);
	for(i=0;i<t;i++)
		delete p[i];
	return 0;
}
------------------------------------------------------
2016073026:Problem1119:答案错误
#include <iostream>

using namespace std;

class BaseAccount{
protected:
    string name,account;
    double balance;
public:
    BaseAccount(string na,string ac,double bal):name(na),account(ac),balance(bal){}
    void deposit(double m){balance+=m;}
    virtual void withdraw(double m){
        if(balance<m)   cout<<"insufficien\n";
        else balance-=m;
    }
    virtual void display(){cout<<name<<" "<<account<<" Balance:"<<balance<<endl;}
};

class BasePlus:public BaseAccount{
    double limit,limit_sum;
public:
    BasePlus(string na,string ac,double bal):BaseAccount(na,ac,bal),limit(5000),limit_sum(0){}
    void deposit(double m){balance+=m;}
    virtual void withdraw(double m){
        if(balance+(limit-limit_sum)<m)
            cout<<"insufficien\n";
        else
            balance-=m;
        if(balance<0){
            limit_sum-=balance;
            balance=0;
        }
    }
    virtual void display(){cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;}
};

int main()
{
    BaseAccount *pb;
    int t;
    cin>>t;
    while(t--){
        string account,name;
        double balance,money;
        cin>>name>>account>>balance;
        if(account[1]=='A') pb=new BaseAccount(name,account,balance);
        else if(account[1]=='P')    pb=new BasePlus(name,account,balance);
        cin>>money;
        pb->deposit(money);
        cin>>money;
        pb->withdraw(money);
        cin>>money;
        pb->deposit(money);
        cin>>money;
        pb->withdraw(money);
        pb->display();
    }
    return 0;
}

------------------------------------------------------
2018192006:Problem1232:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
     
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
     
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
   
   
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
   
/*Add Data Structures Here*/
class Veichle{
    public:
        virtual void display()=0;
          
    protected:  
        string name;
        int num;
        int weight;
  
};
class Car:public Veichle{
    public:
        void display();
        void readInfo();
    protected:
  
};
class Truck:public Veichle{
    public:
        void display();
        void readInfo();
    protected:
  
};
class Bus:public Veichle{
    public:
        void display();
        void readInfo();
    protected:
  
  
};
/*Add Functions Here*/
void
Car::display(){
    cout << this->name << " ";
    cout << this->num*8+this->weight*2 << endl;
 
}
void
Bus::display(){
    cout << this->name << " ";
    cout << this->num*3 << endl;
     
}
void
Truck::display(){
    cout << this->name << " ";
 
    cout << this->weight*5 << endl;
 
}
void
Car::readInfo(){
    cin >> this->name >> this->num >> this->weight;
}
void
Truck::readInfo(){
    cin >> this->name >> this->weight;
}
void
Bus::readInfo(){
    cin >> this->name >> this->num ;
}

/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
    Veichle *ptr;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
        int n;
        cin >> n;
        if(n==1){
            Car A;
            ptr=&A;

            A.readInfo(); 
            ptr->display();
        }else if(n==2){
            Truck B;
            ptr=&B;

            B.readInfo();
            ptr->display();
        }else{
            Bus C;
            ptr=&C;

            C.readInfo();
            ptr->display();
        }
    }
#endif
    /*Final process here.*/
   
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2018151085:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;

class Animal
{ 
protected:
	string name;
	string call;
	int age;
public:
	Animal(string Name,string Call,int Age):name(Name),call(Call),age(Age){}
	virtual void speak()=0;
};

class Tiger:public Animal
{
public:
	Tiger(string Name,string Call,int Age):Animal(Name,Call,Age){}
	virtual void speak()
	{
		cout<<"Hello,I am "<<call<<",AOOO."<<endl;
	}
};

class Dog:public Animal
{
public:
	Dog(string Name,string Call,int Age):Animal(Name,Call,Age){}
	virtual void speak()
	{
		cout<<"Hello,I am "<<call<<",WangWang."<<endl;
	}
};

class Duck:public Animal
{
public:
	Duck(string Name,string Call,int Age):Animal(Name,Call,Age){}
	virtual void speak()
	{
		cout<<"Hello,I am "<<call<<",GAGA."<<endl;
	}
};

class Pig:public Animal
{
public:
	Pig(string Name,string Call,int Age):Animal(Name,Call,Age){}
	virtual void speak()
	{
		cout<<"Hello,I am "<<call<<",HENGHENG."<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	
	Animal *p;
	string name,call;
	int age;
	while(t--)
	{
		cin>>name;
		
		if(name=="Tiger")
		{
			cin>>call>>age;
			p=new Tiger(name,call,age);
			p->speak();
			delete p;
		}
		
		else if(name=="Dog")
		{
			cin>>call>>age;
			p=new Dog(name,call,age);
			p->speak();
			delete p;
		}
		
		else if(name=="Duck")
		{
			cin>>call>>age;
			p=new Duck(name,call,age);
			p->speak();
			delete p;
		}
		
		else if(name=="Pig")
		{
			cin>>call>>age;
			p=new Pig(name,call,age);
			p->speak();
			delete p;
		}
		
		else
		{
			cin>>call>>age;
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
		}
			
	}
}
------------------------------------------------------
2018152037:Problem1119:格式错误
#include<iostream>
#include<string>
using namespace std;

class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(string n,string ac,int ba)
	{
	 	name=n;
	 	account=ac;
	 	balance=ba;
	}
	void deposit(int k)
	{
	 	balance=balance+k;
	}
	virtual void withdraw(int k)
	{
	 	if(balance-k<0)
	 		cout<<"insufficient"<<endl;
	 	else
	 	{
	 		balance=balance-k;
		}
	}
	virtual void dispalay()
	{
	 	cout<<name<<" "<<account<<" "<<" Balance:"<<balance<<endl;
	} 
};

class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(string n,string ac,int ba):BaseAccount(n,ac,ba)
	{
		limit=5000;
		limit_sum=0;
	}
	void withdraw(int k)
	{
		if(balance+limit-k<0)
			cout<<"insufficient"<<endl;
		else
		{
			if(balance-k>=0)
				balance=balance-k;
			else
			{
				limit=limit+balance-k;
				limit_sum=5000-limit;
				balance=0;
			}
		}
	}
	void dispalay()
	{
		cout<<name<<" "<<account<<" "<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		BaseAccount *aa;
		string n,ac;
		int ba,m1,m2,m3,m4;
		cin>>n>>ac>>ba>>m1>>m2>>m3>>m4;
		if(ac[1]=='A')
		{
			BaseAccount a1(n,ac,ba);
			aa=&a1;
			aa->deposit(m1);
			aa->withdraw(m2);
			aa->deposit(m3);
			aa->withdraw(m4);
			aa->dispalay();
		}
		if(ac[1]=='P')
		{
			BasePlus a2(n,ac,ba);
			aa=&a2;
			aa->deposit(m1);
			aa->withdraw(m2);
			aa->deposit(m3);
			aa->withdraw(m4);
			aa->dispalay();
		}
	}
	return 0;
}
------------------------------------------------------
2017152043:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;

class BaseAccount{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(string nam,string acc,int bal):name(nam),account(acc),balance(bal){}
	virtual void deposit(int money)
	{
		balance += money;
	}
	virtual void withdraw(int money)
	{
		if(money <= balance)
			balance -= money;
		else
			cout << "insufficient" << endl;
		
	}
	virtual void display()
	{
		cout << name << " " << account << " Balance:" << balance << endl;
	}
};

class BasePlus:public BaseAccount{
	int limit;
	int limit_sum;
public:
	BasePlus(string nam,string acc,int bal):BaseAccount(nam,acc,bal)
	{
		limit = 5000;
		limit_sum = 0;
	}

	void withdraw(int money)
	{
		if(money <= balance)
			balance -= money;
		else if(money > balance && money <= (limit + balance)){
			limit_sum = money - balance;
			balance = 0;
		}
		else
			cout << "insufficient" << endl;
		limit -= limit_sum;
	}
	void display()
	{
		cout << name << " " << account << " Balance:" << balance << " limit:" << limit << endl;
	}
};


int main(){
	int t;
	BaseAccount *pba;
	string nam;
	char acc[10];
	int bal;
	int in,out;
	cin >> t;
	while(t--){
		cin >> nam >> acc >> bal;
		if(acc[1] == 'A'){
			string str(acc);
			BaseAccount ba(nam,str,bal);
			pba = &ba;
			cin >> in >> out;
			pba->deposit(in);
			pba->withdraw(out);
			cin >> in >> out;
			pba->deposit(in);
			pba->withdraw(out);
			pba->display();
		}
		else if(acc[1] == 'P'){
			string str(acc);
			BasePlus bp(nam,str,bal);
			pba = &bp;
			cin >> in >> out;
			pba->deposit(in);
			pba->withdraw(out);
			cin >> in >> out;
			pba->deposit(in);
			pba->withdraw(out);
			pba->display();
		}
	}
	
	
	return 0;
}

------------------------------------------------------
2016073026:Problem1119:正确
#include <iostream>

using namespace std;

class BaseAccount{
protected:
    string name,account;
    double balance;
public:
    BaseAccount(string na,string ac,double bal):name(na),account(ac),balance(bal){}
    void deposit(double m){balance+=m;}
    virtual void withdraw(double m){
        if(balance<m)   cout<<"insufficient\n";
        else balance-=m;
    }
    virtual void display(){cout<<name<<" "<<account<<" Balance:"<<balance<<endl;}
};

class BasePlus:public BaseAccount{
    double limit,limit_sum;
public:
    BasePlus(string na,string ac,double bal):BaseAccount(na,ac,bal),limit(5000),limit_sum(0){}
    void deposit(double m){balance+=m;}
    virtual void withdraw(double m){
        if(balance+(limit-limit_sum)<m)
            cout<<"insufficient\n";
        else
            balance-=m;
        if(balance<0){
            limit_sum-=balance;
            balance=0;
        }
    }
    virtual void display(){cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;}
};

int main()
{
    BaseAccount *pb;
    int t;
    cin>>t;
    while(t--){
        string account,name;
        double balance,money;
        cin>>name>>account>>balance;
        if(account[1]=='A') pb=new BaseAccount(name,account,balance);
        else if(account[1]=='P')    pb=new BasePlus(name,account,balance);
        cin>>money;
        pb->deposit(money);
        cin>>money;
        pb->withdraw(money);
        cin>>money;
        pb->deposit(money);
        cin>>money;
        pb->withdraw(money);
        pb->display();
    }
    return 0;
}

------------------------------------------------------
2018152037:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;

class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(string n,string ac,int ba)
	{
	 	name=n;
	 	account=ac;
	 	balance=ba;
	}
	void deposit(int k)
	{
	 	balance=balance+k;
	}
	virtual void withdraw(int k)
	{
	 	if(balance-k<0)
	 		cout<<"insufficient"<<endl;
	 	else
	 	{
	 		balance=balance-k;
		}
	}
	virtual void dispalay()
	{
	 	cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	} 
};

class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(string n,string ac,int ba):BaseAccount(n,ac,ba)
	{
		limit=5000;
		limit_sum=0;
	}
	void withdraw(int k)
	{
		if(balance+limit-k<0)
			cout<<"insufficient"<<endl;
		else
		{
			if(balance-k>=0)
				balance=balance-k;
			else
			{
				limit=limit+balance-k;
				limit_sum=5000-limit;
				balance=0;
			}
		}
	}
	void dispalay()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		BaseAccount *aa;
		string n,ac;
		int ba,m1,m2,m3,m4;
		cin>>n>>ac>>ba>>m1>>m2>>m3>>m4;
		if(ac[1]=='A')
		{
			BaseAccount a1(n,ac,ba);
			aa=&a1;
			aa->deposit(m1);
			aa->withdraw(m2);
			aa->deposit(m3);
			aa->withdraw(m4);
			aa->dispalay();
		}
		if(ac[1]=='P')
		{
			BasePlus a2(n,ac,ba);
			aa=&a2;
			aa->deposit(m1);
			aa->withdraw(m2);
			aa->deposit(m3);
			aa->withdraw(m4);
			aa->dispalay();
		}
	}
	return 0;
}
------------------------------------------------------
2016150201:Problem1232:正确
#include<iostream>
using namespace std;
class Vehicle{
protected:
    string no;//编号
public:
	Vehicle(string n):no(n){
	}
    virtual void display()=0;//应收费用
};
class Car:public Vehicle{
	int id;
	int custNum;
	int weight;
public:
	Car(int ids,string n,int cn,int we):id(ids),Vehicle(n),custNum(cn),weight(we){
	}
	void virtual display(){
		cout<<no<<" "<<8*custNum+weight*2<<endl;
	}
}; 
class Truck:public Vehicle{
	int id;
	int weight;
public:	
	Truck(int ids,string n,int we):id(ids),Vehicle(n),weight(we){
	}
	void virtual display(){
		cout<<no<<" "<<weight*5<<endl;
	}
}; 
class Bus:public Vehicle{
	int id;
	int custNum;
public:	
	Bus(int ids,string n,int cn):id(ids),Vehicle(n),custNum(cn){
	}
	void virtual display(){
		cout<<no<<" "<<custNum*3<<endl;
	}
}; 
int main(){
	int t,id,cn,we;
	string no;
	Vehicle *v;
	cin>>t;
	while(t--){
	  cin>>id;
	  if(id==1){
	  	cin>>no>>cn>>we;
	  	Car c(id,no,cn,we);
	  	v=&c;
	  	v->display();}
	  else if(id==2){
	  	cin>>no>>we;
	  	Truck tr(id,no,we);
	  	v=&tr;
	  	v->display();
	  }	
	  else if(id==3){
	  	cin>>no>>cn;
	  	Bus b(id,no,cn);
	  	v=&b;
	  	v->display();
	  }
	}
}
------------------------------------------------------
2018152108:Problem1235:正确
#include<iostream>
#include<iomanip>
#define PI 3.14
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
	double length,width;
public:
	friend class TotalArea;
	Rect(double a,double b)
	{
		length = a;
		width = b;
	}
	double getArea()
	{
		return length*width;
	}
};

class Circle:public Geometry
{
	double radius;
public:
	friend class TotalArea;
	Circle(double r)
	{
		radius = r;
	}
	double getArea()
	{
		return PI*radius*radius;
	}
};

class TotalArea
{
public:
    void computerTotalArea(Geometry** t,int n)
   {
   		double max = t[0]->getArea();
		for(int i=1;i<n;i++)
		{
			if(t[i]->getArea()>max)
			{
				max = t[i]->getArea();
			}
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
   }
};

int main()
{
	int t,i;
	cin>>t;
	Geometry **p = new Geometry*[t];
	for(i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			double a,b;
			cin>>a>>b;
			p[i] = new Rect(a,b);
		}
		if(type==2)
		{
			double r;
			cin>>r;
			p[i] = new Circle(r);
		}
	}
	TotalArea x;
	x.computerTotalArea(p,t);
	for(i=0;i<t;i++)
		delete p[i];
	return 0;
}
------------------------------------------------------
2016150202:Problem1120:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Animal{
	protected:
		string name;
		int age;
		public: 
		virtual void display()=0;
	    Animal (string n,int a):name(n),age(a){}
		~Animal(){}
	
}; 

class Tiger: public Animal
{	
		public:
			Tiger(string n,int a):Animal(n,a){}
			~Tiger(){}
		   void display()
			{
			cout<<"Hello,I am "<<name<<",AOOO."<<endl;
			} 
			
};

class Dog :public Animal
{
	protected:
		
		public:
			Dog(string n,int a):Animal(n,a){}
			~Dog(){}
			void display()
			{
				cout<<"Hello,I am "<<name<<",WangWang."<<endl;
               
			}
	
};

class Duck : public Animal 
{
	protected:

		public:
			
		Duck(string n,int a):Animal(n,a){}
			~Duck(){}
			void display()
			{
				cout<<"Hello,I am "<<name<<",GAGA."<<endl;
			}
};

class Pig : public Animal 
{
	protected:

		public:
			
		Pig(string n,int a):Animal(n,a){}
			~Pig(){}
			void display()
			{
				cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
			}
};


int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		string key;
		string name;
		int age;
		
		cin>>key;
	
		if(key=="Tiger")
		{
			
		 cin>>name>>age;
		 Tiger tt(name,age);
		 Animal *pv=&tt;
		 tt.display();
		}
		else if(key=="Pig")
		{
		cin>>name>>age;
		Pig pp(name,age);
		Animal *pv=&pp;
		pp.display();
		}
		else if(key=="Dog")
		{
			cin>>name>>age;
			Dog dd(name,age);
			Animal *pv=&dd;
			dd.display();	
		}
		else if(key=="Duck")
		{
			cin>>name>>age;
			Dog d(name,age);
			Animal *pv=&d;
			d.display();	
		}
		else
		{
			
			cin>>name>>age;
			cout<<"There is no "<<key<<" in our Zoo."<<endl; 
		}
		
   }
	
	
	return 0;
}



------------------------------------------------------
2018192010:Problem1235:运行错误
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
    int a,b;
public:
    Rect(){}
    Rect(int av,int bv):a(av),b(bv){}
    double getArea()
    {
        return a*b;
    }
};
class Circle:public Geometry
{
protected:
    int r;
public:
    Circle(){}
    Circle(int b):r(b){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea{

public:
   static void computerTotalArea(Geometry** t,int n)
   {
       t = new Geometry*[n];
       float m = 0;
       for(int i=0;i<n;i++)
       {
            if(t[i]->getArea() > m)
                m = t[i]->getArea();
       }
       cout << "最大面积=" << fixed << showpoint << setprecision(2) << m << endl;
   }
};
int main()
{
    int n;
    cin >> n;
    TotalArea a;
    Geometry **t;
    t = new Geometry*[n];
    for(int i=0;i<n;i++)
    {
       int type;
       cin >> type;
       switch(type)
       {
       case 1:
        {
            int a,b;
            cin >> a >> b;
            t[i] = new Rect(a,b);
            break;
        }
       case 2:
        {
            int r;
            cin >> r;
            t[i] = new Circle(r);
            break;
        }
       }
    }
    a.computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018192010:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
    int a,b;
public:
    Rect(){}
    Rect(int av,int bv):a(av),b(bv){}
    double getArea()
    {
        return a*b;
    }
};
class Circle:public Geometry
{
protected:
    int r;
public:
    Circle(){}
    Circle(int b):r(b){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea{

public:
   static void computerTotalArea(Geometry** t,int n)
   {
       float m = 0;
       for(int i=0;i<n;i++)
       {
            if(t[i]->getArea() > m)
                m = t[i]->getArea();
       }
       cout << "最大面积=" << fixed << showpoint << setprecision(2) << m << endl;
   }
};
int main()
{
    int n;
    cin >> n;
    TotalArea a;
    Geometry **t;
    t = new Geometry*[n];
    for(int i=0;i<n;i++)
    {
       int type;
       cin >> type;
       switch(type)
       {
       case 1:
        {
            int a,b;
            cin >> a >> b;
            t[i] = new Rect(a,b);
            break;
        }
       case 2:
        {
            int r;
            cin >> r;
            t[i] = new Circle(r);
            break;
        }
       }
    }
    a.computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018152010:Problem1235:答案错误
#include<iostream>

using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    int wide,_long;
public:
    Rect(int w,int l):wide(w),_long(l){}
    double getArea()
    {
        double area;
        area=wide*_long;
        return area;
    }
};

class Circle:public Geometry
{
    int R;
public:
    Circle(int r):R(r){}
    double getArea()
    {
        double area;
        area=R*R*3.14;
        return area;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i,j;
        double area=0;
        for(i=0;i<n;i++)
        {
            if(area<t[i]->getArea())
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<area<<endl;
    }
};

int main()
{
    int n,w,l,r,type,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>w>>l;
            t[i]=new Rect(w,l);
        }
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
}

------------------------------------------------------
2017163101:Problem1232:正确
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
class Vehicle
{ 
protected:
	string no;//编号
public:
	virtual void display()=0;//应收费用
	Vehicle(string n):no(n){
		
	}
};
class Car:public Vehicle{
	private:
		int num,weight;
	public:
		Car(string no,int n,int weight):Vehicle(no),num(n),weight(weight){
		}
	void display(){
		float money=num*8+weight*2;
		cout<<no<<" "<<money<<endl;
	}
};
class Truck:public Vehicle{
	private:
		int weight;
	public:
		Truck(string n,int weight):Vehicle(n),weight(weight){
			
		}
		
	void display(){
		float money=weight*5;
		cout<<no<<" "<<money<<endl;
	}
};
class Bus:public Vehicle{
	private:
		int num;
	public:
		Bus(string n,int num):Vehicle(n),num(num){
		}
	void display(){
		float money=num*3;
		cout<<no<<" "<<money<<endl;
	}
};
int main(){
	int t;
	cin>>t;
	
	while(t--){
		int flag,num,weight;
		string no;
		cin>>flag;
		Vehicle *pv;
		if(flag==1){
			cin>>no>>num>>weight;
			pv=new Car(no,num,weight);
			pv->display();
		}
		else if(flag==2){
			cin>>no>>weight;
			pv=new Truck(no,weight);
			pv->display();
		}
		else {
			cin>>no>>num;
			pv=new Bus(no,num);
			pv->display();
		}
		delete pv;
	}
	return 0;
}
------------------------------------------------------
2018192006:Problem1120:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
    
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <queue>
using std::queue;
#include <algorithm>
using std::sort;
using std::swap;
    
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
  
  
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
  
/*Add Data Structures Here*/
class Animal{
    public:
        virtual void speak()=0;
        void readInfo();
    protected:  
        string name;
        int age;
};
class Tiger:public Animal{
    public:
        void speak();
    protected:
 
};
class Dog:public Animal{
    public:
        void speak();
    protected:
 
};
class Duck:public Animal{
    public:
        void speak();
    protected:
 
};
class Pig:public Animal{
    public:
        void speak();
    protected:
 
};
/*Add Functions Here*/
void
Animal::readInfo(){
    cin >> this->name >> this->age;
}

void
Tiger::speak(){

    cout << "Hello,I am " << this->name;
    cout << ",AOOO." << endl;

}
void
Pig::speak(){
    cout << "Hello,I am " << this->name;
    cout << ",HENGHENG." << endl; 

}
void
Dog::speak(){
    cout << "Hello,I am " << this->name; 
    cout << ",WangWang." << endl; 

}
void
Duck::speak(){
    cout << "Hello,I am " << this->name; 
    cout << ",GAGA." << endl; 
}
/*Main Function starts here.*/
int main(){
#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
    Animal *ptr;
    for(round=1;round<=rounds;++round){
    /*Solve Problems Here if number of test cases are known.*/
    	string str;
    	cin >> str;
    	if(str=="Tiger"){
    		Tiger A;
    		ptr=&A;
	        ptr->readInfo();
	        ptr->speak();
		}else if(str=="Pig"){
			Pig A;
    		ptr=&A;
	        ptr->readInfo();
	        ptr->speak();
		}else if(str=="Dog"){
			Dog A;
    		ptr=&A;
	        ptr->readInfo();
	        ptr->speak();
		}else if(str=="Duck"){
			Duck A;
    		ptr=&A;
	        ptr->readInfo();
	        ptr->speak();
		}else{
			cout << "There is no "<< str <<" in our Zoo."<< endl;
			string buff1;
			int buff2;
			cin >> buff1 >> buff2;
		}

    }
#endif
    /*Final process here.*/
  
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}      
------------------------------------------------------
2018152019:Problem1120:答案错误
#include <iostream>

#include<string.h>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    virtual void Speak()=0;
    virtual void display()=0;
};

class Tiger:public Animal
{
public:
    Tiger(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"AOOO";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

class Dog:public Animal
{
public:
    Dog(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"WangWang";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

class Duck:public Animal
{
public:
    Duck(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"GAGA";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

class Pig:public Animal
{
public:
    Pig(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"HENGHENG";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

int main()
{
    Animal *panimal;
    int times;
    cin>>times;
    while(times--)
    {
        string type;
        cin>>type;

            if(type=="Tiger")
            {
                string n;
                int a;
                cin>>n>>a;
                Tiger tiger(n,a);
                panimal=&tiger;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else if(type=="Dog")
            {
                string n;
                int a;
                cin>>n>>a;
                Dog dog(n,a);
                panimal=&dog;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else if(type=="Duck")
            {
                string n;
                int a;
                cin>>n>>a;
                Duck duck(n,a);
                panimal=&duck;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else if(type=="Pig")
            {
                string n;
                int a;
                cin>>n>>a;
                Pig pig(n,a);
                panimal=&pig;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else
            {
                string n;
                int a;
                cin>>n>>a;
                cout<<"There is no "<<n<<" in our Zoo";
                cout<<"."<<endl;
            }

    }
    return 0;
}
------------------------------------------------------
2018152062:Problem1234:答案错误
#include <iostream>
using namespace std;
/*某小学二年级的数学老师在教学生整数加减法运算时发现：班上的同学可以分成三类，
第一类可以正确地完成加减法运算(GroupA)；第二类可以正确地完成加法运算，
但对于减法运算来说，总是忘记借位的处理(GroupB)；第三类总是忘记加法的进位，
也总是忘记减法的借位(GroupC)。（提示：小学二年级还没学负数。）
现在请模拟当老师在课堂提问某位同学时，同学会给出的回答。
实现时请基于下面的基类框架：*/

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
/*构建出GroupA, GroupB和GroupC三个派出类:
并编写主函数，要求主函数中有一个基类Group指针，通过该指针统一地进行add和sub运算*/
class GroupA:public Group
{
public:
    GroupA(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    GroupB(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx<yy)
                xx=xx+10-yy;
            else
                xx-=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    GroupC(){}
    int add(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx+yy>=10)
                xx=xx+yy-10;
            else
                xx+=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx<yy)
                xx=xx+10-yy;
            else
                xx-=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *p;
        int cnt;
        int x,y;
        char ch;
        cin>>cnt>>x>>ch>>y;
        if(cnt==1)
        {
            GroupA u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(cnt==2)
        {
            GroupB u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else
        {
            GroupC u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018152087:Problem1235:答案错误
#include<iostream>
using namespace std;
class Geometry
{
public:
	Geometry()
	{
		
	}
	virtual double getArea()=0;
};
class Rect:public Geometry
{
	double len;
	double wid;
public:
	Rect(double l,double w)
	{
		len=l;
		wid=w;
	}
	double getArea()
	{
		return len*wid;
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double rr)
	{
		r=rr;
	}
	double getArea()
	{
		return r*r*3.14;
	}
};
class TotalArea
{
	static double max;
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		for(int i=0;i<n;i++)
		{
			double s=t[i]->getArea();
			if(max<s)
				max=s;
		}
		cout<<"最大面积="<<max<<endl;
	}
};
double TotalArea::max=0;
int main()
{
	int t;
	cin>>t;
	Geometry *p[100];
	for(int i=0;i<t;i++)
	{
		int flag;
		cin>>flag;
		if(flag==1)
		{
			int l,w;
			cin>>l>>w;
			Rect ex(l,w);
			p[i]=&ex;
		}
		else
		{
			int r;
			cin>>r;
			Circle ex(r);
			p[i]=&ex;
		}
	}
	TotalArea temp;
	temp.computerTotalArea(&(*p),t);
}
------------------------------------------------------
2017163058:Problem1235:正确
#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea() = 0;
};
class Rect:public Geometry
{
private:
    double length, width;
public:
    Rect(double l, double w):length(l), width(w){}
    double getArea()
    {
        return length * width;
    }
};
class Circle:public Geometry
{
private:
    double radius;
public:
    Circle(double r):radius(r){}
    double getArea()
    {
        return 3.14*radius*radius;
    }
};
class TotalArea
{
public:
    static void computeTotalArea(Geometry **t, int n)
    {
        double max_area = 0;
        for(int i=0; i<n; i++)
        {
            if(max_area < t[i]->getArea())
            {
                max_area = t[i]->getArea();
            }
        }
        cout<<fixed<<setprecision(2)<<"最大面积="<<max_area<<endl;
    }
};
int main()
{
//    freopen("C:\\Users\\acer\\Desktop\\in.txt", "r", stdin);
    double length, width, radius;
    int t, sign;
    cin>>t;
    Geometry **p = new Geometry*[t];
    for(int i=0;i<t;i++)
    {
        cin>>sign;
        if(sign == 1)
        {
            cin>>length>>width;
            Rect *rect = new Rect(length, width);
            p[i] = rect;
        }
        else
        {
            cin>>radius;
            Circle *circle = new Circle(radius);
            p[i] = circle;
        }
    }
    TotalArea::computeTotalArea(p, t);
    for(int i=0; i<t; i++)
    {
        delete []p[i];
    }
    delete []p;
    return 0;
}

------------------------------------------------------
2018192040:Problem1235:编译错误
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
double pi = 3.14;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect:public Geometry{
	double l,w;
public:
	Rect(){
	};
	Rect(double L,double W):l(L),w(W){
	};
	double getArea(){
		return l*w;
	}
};

class Circle:public Geometry{
	double r;
public:
	Circle(){
	};
	Circle(double R):r(R){
	};
	double getArea(){
		return r*r*pi;
	}
};

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n){
   		double max = *t[0].getArea()
	   	if(max<*t[1].getArea())
	   		max = *t[1].getArea();
	   	if(max<*t[2].getArea())
	   		max = *t[2].getArea();
	   	cout<<"最大面积="<<setprecision(2)<<max<<endl; 
   }

};


int main(){
	int n;
	cin>>n;
	TotalArea ta;
	Geometry *p = (Geometry*)operator new[](sizeof(Geometry)*n);
	Geometry **p1 = &p;
	for(int i=0;i<n;i++){
		int type,r,w,l;
		cin>>type;
		if(type == 1){
			cin>>l>>w;
			Rect re(l,w);
			p[i] = &re;
		}
		if(type == 2){
			cin>>r;
			Circle ci(r);
			p[i] = &ci;
		}
	}
	ta.computerTotalArea(p1,n);
}
------------------------------------------------------
szuzy:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};

class Rect:public Geometry
{
    double length;
    double width;
public:
    Rect(double ll,double ww):length(ll),width(ww){}
    double getArea()
    {
        return length*width;
    }
    ~Rect(){}

};

class Circle:public Geometry
{
    double r;
public:
    Circle(double rr):r(rr){}
    double getArea()
    {
        return r*r*3.14;
    }
    ~Circle(){}

};


class TotalArea
{
    double res;
public:
    TotalArea():res(0){}
    void computerTotalArea(Geometry** t,int n)
    {
           res=0;
           for(int i=0;i<n;i++)
           {
               if(res<t[i]->getArea())
               {
                   res=t[i]->getArea();
               }
           }
           cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};


int main()
{
    double length;
    double width;
    double r;
    int n,type;
    cin>>n;
    Geometry **p=new Geometry*[n];
   // Rect *rr=new Rect[n];
    //Circle *cc=new Circle[n];
   // Geometry **pp=&p;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>length>>width;
            p[i] = new Rect(length,width);
        }
        else if(type==2)
        {
            cin>>r;
            p[i] = new Circle(r);
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);

    for(int i=0; i<n; i++)
        delete p[i];
    return 0;
}


------------------------------------------------------
2018151031:Problem1120:编译错误
#include <iostream>
#include <cstring>

using namespace std;

class Animal
{
public:
    virtual void Speak()=0
};

class tiger:public Animal
{
public:
    tiger(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
private:
    char name[20];
    int age;
};

class dog:public Animal
{
public:
    dog(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
private:
    char name[20];
    int age;
};

class duck:public Animal
{
public:
    duck(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
private:
    char name[20];
    int age;
};

class pig:public Animal
{
public:
    pig(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
private:
    char name[20];
    int age;
};


int main()
{
	int t,age;
	char name[20],ani[20];
	cin>>t;
	Animal *p;
	while(t--)
    {
        cin>>ani>>name>>age;
        if(!strcmp(ani,"Tiger"))
        {
            tiger a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Dog"))
        {
            dog a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Duck"))
        {
            duck a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Pig"))
        {
            pig a(name,age);
            p=&a;
            p->Speak();
        }
        else
            cout<<"There is no "<<ani<<" in our Zoo."<<endl;
    }
	return 0;
}
------------------------------------------------------
2018151031:Problem1120:编译错误
#include <iostream>
#include <cstring>

using namespace std;

class Animal
{
public:
    virtual void Speak()=0；
};

class tiger:public Animal
{
public:
    tiger(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
private:
    char name[20];
    int age;
};

class dog:public Animal
{
public:
    dog(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
private:
    char name[20];
    int age;
};

class duck:public Animal
{
public:
    duck(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
private:
    char name[20];
    int age;
};

class pig:public Animal
{
public:
    pig(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
private:
    char name[20];
    int age;
};


int main()
{
	int t,age;
	char name[20],ani[20];
	cin>>t;
	Animal *p;
	while(t--)
    {
        cin>>ani>>name>>age;
        if(!strcmp(ani,"Tiger"))
        {
            tiger a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Dog"))
        {
            dog a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Duck"))
        {
            duck a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Pig"))
        {
            pig a(name,age);
            p=&a;
            p->Speak();
        }
        else
            cout<<"There is no "<<ani<<" in our Zoo."<<endl;
    }
	return 0;
}
------------------------------------------------------
2018152102:Problem1235:答案错误
#include <iostream>
#include <iomanip>

using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect :public Geometry{
protected:
    double a,b;
public:
    Rect(double t0,double t1):a(t0),b(t1) {}
    double getArea() {
        return a*b;
    }
};
class Circle:public Geometry {
protected:
    double r;
public:
    Circle(double t):r(t) {}
    double getArea() {
        return 3.14*r*r;
    }
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n) {
        double max = -100;
        for(int i=0;i<n;i++) {
            if(t[i]->getArea() > max) {
                max = t[i]->getArea();
            }
        }
        cout<<fixed<<setprecision(2)<<max;
   }
   //t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
};

int main() {
    int n;

    cin>>n;
    Geometry** p = new Geometry* [n];
    for(int i=0;i<n;i++) {
        int num;
        cin>>num;
        if(num == 1) {
            double a,b;
            cin>>a>>b;
            p[i] = new Rect(a,b);
        }else {
            double r;
            cin>>r;
            p[i] = new Circle(r);
        }
    }

    TotalArea total;
    total.computerTotalArea(p,n);
    for(int i=0;i<n;i++) {
        delete p[i];
    }
    delete []p;

    return 0;
}

------------------------------------------------------
2016154114:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;

class BaseAccount
{
protected:
    string name;
	string account;
	int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
	virtual void deposit(int m)
	{
		balance+=m;
	}
	virtual void withdraw(int m)
	{
		if(m>balance)
			cout<<"insufficient"<<endl;
		else
			balance-=m;
	}
    virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};

class BasePlus:public BaseAccount
{
protected:
	int limit;
	int limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b),limit(5000){}
    void deposit(int m)
	{
		balance+=m;
	}
	void withdraw(int m)
	{
		if(m<=balance)
			balance-=m;
		else if(m>balance && m<balance+limit)
		{
			m-=balance;
			balance=0;
			balance=0;
			limit-=m;
			limit_sum+=m;
		}
		else
			cout<<"insufficient"<<endl;
	}
    void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
		BaseAccount *a;
		string name,account;
		int balance,m1,m2,m3,m4;
        cin>>name>>account>>balance;
        if(account.find("BA")!=string::npos)
		{
			BaseAccount ba(name,account,balance);
			a=&ba;
			cin>>m1>>m2>>m3>>m4;
			a->deposit(m1);
			a->withdraw(m2);
			a->deposit(m3);
			a->withdraw(m4);
			a->display();
		}
		else if(account.find("BP")!=string::npos)
        {
			BasePlus bp(name,account,balance);
			a=&bp;
			cin>>m1>>m2>>m3>>m4;
			a->deposit(m1);
			a->withdraw(m2);
			a->deposit(m3);
			a->withdraw(m4);
			a->display();
        }
    }
	return 0;
}
------------------------------------------------------
2018152010:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    int wide,_long;
public:
    Rect(int w,int l):wide(w),_long(l){}
    double getArea()
    {
        double area;
        area=wide*_long;
        return area;
    }
};

class Circle:public Geometry
{
    int R;
public:
    Circle(int r):R(r){}
    double getArea()
    {
        double area;
        area=R*R*3.14;
        return area;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i,j;
        double area=0;
        for(i=0;i<n;i++)
        {
            if(area<t[i]->getArea())
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<area<<endl;
    }
};

int main()
{
    int n,w,l,r,type,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>w>>l;
            t[i]=new Rect(w,l);
        }
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
}

------------------------------------------------------
2018151031:Problem1120:正确
#include <iostream>
#include <cstring>

using namespace std;

class Animal
{
public:
    virtual void Speak()=0;
};

class tiger:public Animal
{
public:
    tiger(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
private:
    char name[20];
    int age;
};

class dog:public Animal
{
public:
    dog(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
private:
    char name[20];
    int age;
};

class duck:public Animal
{
public:
    duck(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
private:
    char name[20];
    int age;
};

class pig:public Animal
{
public:
    pig(char _name[20],int _age):age(_age)
    {
        strcpy(name,_name);
    }
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
private:
    char name[20];
    int age;
};


int main()
{
	int t,age;
	char name[20],ani[20];
	cin>>t;
	Animal *p;
	while(t--)
    {
        cin>>ani>>name>>age;
        if(!strcmp(ani,"Tiger"))
        {
            tiger a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Dog"))
        {
            dog a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Duck"))
        {
            duck a(name,age);
            p=&a;
            p->Speak();
        }
        else if(!strcmp(ani,"Pig"))
        {
            pig a(name,age);
            p=&a;
            p->Speak();
        }
        else
            cout<<"There is no "<<ani<<" in our Zoo."<<endl;
    }
	return 0;
}
------------------------------------------------------
2018152102:Problem1235:正确
#include <iostream>
#include <iomanip>

using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect :public Geometry{
protected:
    double a,b;
public:
    Rect(double t0,double t1):a(t0),b(t1) {}
    double getArea() {
        return a*b;
    }
};
class Circle:public Geometry {
protected:
    double r;
public:
    Circle(double t):r(t) {}
    double getArea() {
        return 3.14*r*r;
    }
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n) {
        double max = -100;
        for(int i=0;i<n;i++) {
            if(t[i]->getArea() > max) {
                max = t[i]->getArea();
            }
        }
        cout<<"最大面积=";
        cout<<fixed<<setprecision(2)<<max;
   }
   //t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
};

int main() {
    int n;

    cin>>n;
    Geometry** p = new Geometry* [n];
    for(int i=0;i<n;i++) {
        int num;
        cin>>num;
        if(num == 1) {
            double a,b;
            cin>>a>>b;
            p[i] = new Rect(a,b);
        }else {
            double r;
            cin>>r;
            p[i] = new Circle(r);
        }
    }

    TotalArea total;
    total.computerTotalArea(p,n);
    for(int i=0;i<n;i++) {
        delete p[i];
    }
    delete []p;

    return 0;
}

------------------------------------------------------
2018192037:Problem1235:答案错误
#include<bits/stdc++.h>
using namespace std;
class Geometry{

public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class CRect:public Geometry
{
protected:
    int x;
    int y;
public:
    CRect(int x,int y)
    {
        this->x = x;
        this->y = y;
    }
    double getArea()
    {
        return x*y;
    }
};

class CCircle:public Geometry
{
protected:
    int r;
public:
    CCircle(int y)
    {
        this->r = y;
    }
    double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea{
private:
    static double max;
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        for(int i=0;i<n;i++)
        {
            double mid = t[i]->getArea();
            if(mid>max)
                max = mid;
        }
    }
    static double get_max()
    {
        return max;
    }
};

double TotalArea::max;

int main()
{
    int n;
    cin>>n;
    Geometry **t;
    t = new Geometry*[n];
    for(int i=0;i<n;i++)
    {
        int ty,x,y;
        cin>>ty;
        if(ty==1)
        {
            cin>>x>>y;
            CRect rect(x,y);
            t[i] = &rect;
        }
        if(ty==2)
        {
            cin>>x;
            CCircle cri(x);
            t[i] = &cri;
        }
    }
    TotalArea::computerTotalArea(t,n);
    cout<<"最大面积="<<TotalArea::get_max()<<endl;
}



------------------------------------------------------
2018192026:Problem1235:答案错误
#include<iostream>
using namespace std;
class Geometry
{
public:
	virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
	double length,width;
public:
	Rect(double l,double w):length(l),width(w){}
	double getArea()
	{
		return length*width;
	}
};
class Circle:public Geometry
{
protected:
	double radius;
public:
	Circle(double r):radius(r){}
	double getArea()
	{
		return 3.14*radius*radius;
	}
};
class MaxArea
{
public:
	static void getMaxArea(Geometry **t,int n)
	{
		int i;
		double max=t[0]->getArea();
		for(i=1;i<n;i++)
			if(max<t[i]->getArea())
				max=t[i]->getArea();
		cout<<"最大面积="<<max<<endl;
	}
};
int main()
{
	int t,i;
	scanf("%d",&t);
	Geometry **G;
	G=new Geometry *[t];
	for(i=0;i<t;i++)
	{
		int kind;
		double length,width,radius;
		scanf("%d",&kind);
		if(kind-1)
		{
			scanf("%lf",&radius);
			Circle C(radius);
			G[i]=&C;
		}
		else
		{
			scanf("%lf %lf",&length,&width);
			Rect R(length,width);
			G[i]=&R;
		}
	}
	MaxArea area;
	area.getMaxArea(G,t);
	delete []G;
	return 0;
}
	


			

------------------------------------------------------
2017301020:Problem1119:正确
#include <iostream>
#include <cstring>
using namespace std;

class BaseAccount{
protected:
    string name;
    char account[10];
    double balance;
public:
    BaseAccount(string name1,char *account1,double balance1);
    void deposit(double a);
    virtual bool withdraw(double a);
    virtual void display();
    virtual void display1();
};

BaseAccount::BaseAccount(string name1,char *account1,double balance1){
    name=name1;
    balance=balance1;
    int lo=strlen(account1);
    for(int i=0;i<lo;i++){
        account[i]=account1[i];
    }
}

bool BaseAccount::withdraw(double a){
    if(a>balance){
        return 1;
    }
    else{
        balance-=a;
        return 0;
    }
}

void BaseAccount::deposit(double a){
    balance+=a;
}

void BaseAccount::display(){
    cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
}

void BaseAccount::display1(){
    cout<<"insufficient"<<endl;
}

class BasePulus:public BaseAccount{
    double limit=5000;
    double limit_sum=0;
public:
    BasePulus(string name1,char *account1,double balance1):BaseAccount(name1,account1,balance1){}
    virtual bool withdraw(double a);
    virtual void display();
    virtual void display1();
};

bool BasePulus::withdraw(double a){
    if(a>balance+limit-limit_sum){
        return 1;
    }
    else{
        if(a>balance){
            limit-=(a-balance);
            balance=0;
        }
        else
             balance-=a;
        return 0;
    }
}

void BasePulus::display1(){
    cout<<"insufficient"<<endl;
}

void BasePulus::display(){
    cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
}

int main()
{
    int t;
    double balance,m;
    string name;
    char account[10];
    cin>>t;
    while(t--){
        cin>>name>>account>>balance;
        if(account[1]=='A'){
            BaseAccount a(name,account,balance);
            cin>>m;
            a.deposit(m);
            cin>>m;
            if(a.withdraw(m))
                a.display1();
            cin>>m;
            a.deposit(m);
            cin>>m;
            if(a.withdraw(m))
                a.display1();
            a.display();
        }
        else{
            BasePulus a(name,account,balance);
            cin>>m;
            a.deposit(m);
            cin>>m;
            if(a.withdraw(m))
                a.display1();
            cin>>m;
            a.deposit(m);
            cin>>m;
            if(a.withdraw(m))
                a.display1();
            a.display();
        }
    }
    return 0;
}

------------------------------------------------------
2017163101:Problem1119:运行错误
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std; 
class BaseAccount{
	protected:
		string name,account;
		int balance;
	public:
		BaseAccount(){
		}
		virtual void Deposit(int accno){
			balance+=accno;
		}
		virtual void Withdraw(int accno){
			if(balance<accno){
				cout<<"insufficient"<<endl;
			}
			else{
			balance-=accno;
		}
		
		}
		virtual void display(){
			cout<<name<<" "<<account<<" "<<" "<<"Balance:"<<balance;
			cout<<endl;
		}
		BaseAccount(string n,string a,int b):name(n),account(a),balance(b){
			
		}
};
class BasePlus:public BaseAccount{
	private:
		int limit;
		int limit_sum;
	public:
		BasePlus(){
			limit=5000;
			limit_sum=0;
		}
	/*	~BasePlus(){
			delete b;
		}*/
		void Deposit(int accno){
			//balance+=accno;
			if(limit_sum>0){
				if(limit_sum>accno){
					limit_sum-=accno;
					accno=0;
				}
				else {
					accno-=limit_sum;
					limit_sum=0;
				}
			}
			balance+=accno;
		}
		void Withdraw(int accno){
			if(balance>=accno){
				balance-=accno;
			}
			else if(accno<=balance+limit-limit_sum){
				limit_sum+=accno-balance;
				balance=0;
			}
			else{
			//	cout<"insufficient"<<endl;
			cout<<"insufficient"<<endl;
			}
		}
		void display(){
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum;
			cout<<endl;
		}
		BasePlus(string n,string a,int b):BaseAccount(name,account,balance){
			limit=5000;
			limit_sum=0;
		}
};
int main(){
	int t;
	cin>>t;
	while(t--){
		string name,account;
		int balance;
		cin>>name>>account>>balance;
		int d1,w1,d2,w2;
		cin>>d1>>w1>>d2>>w2;
		BaseAccount *b;
		if(account[1]=='A'){
			BaseAccount BA(name,account,balance);
			b=&BA;
			b->Deposit(d1);
			b->Withdraw(w1);
			b->Deposit(d2);
			b->Withdraw(w2);
			b->display();
		//	delete b;
		}
		else{
			BasePlus BP(name,account,balance);
			b=&BP;
			b->Deposit(d1);
			b->Withdraw(w1);
			b->Deposit(d2);
			b->Withdraw(w2);
			b->display();
			//delete b;
		}
		//+delete b;
	}
	return 0;
}
------------------------------------------------------
2018152062:Problem1234:答案错误
#include <iostream>
using namespace std;
/*某小学二年级的数学老师在教学生整数加减法运算时发现：班上的同学可以分成三类，
第一类可以正确地完成加减法运算(GroupA)；第二类可以正确地完成加法运算，
但对于减法运算来说，总是忘记借位的处理(GroupB)；第三类总是忘记加法的进位，
也总是忘记减法的借位(GroupC)。（提示：小学二年级还没学负数。）
现在请模拟当老师在课堂提问某位同学时，同学会给出的回答。
实现时请基于下面的基类框架：*/

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
/*构建出GroupA, GroupB和GroupC三个派出类:
并编写主函数，要求主函数中有一个基类Group指针，通过该指针统一地进行add和sub运算*/
class GroupA:public Group
{
public:
    GroupA(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    GroupB(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx<yy)
                xx=xx+10-yy;
            else
                xx-=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    GroupC(){}
    int add(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx+yy>=10)
                xx=xx+yy-10;
            else
                xx+=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx<yy)
                xx=xx+10-yy;
            else
                xx-=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *p;
        int cnt;
        int x,y;
        char ch;
        cin>>cnt>>x>>ch>>y;
        if(cnt==1)
        {
            GroupA u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(cnt==2)
        {
            GroupB u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else
        {
            GroupC u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192040:Problem1235:编译错误
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
double pi = 3.14;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect:public Geometry{
	double l,w;
public:
	Rect(){
	};
	Rect(double L,double W):l(L),w(W){
	};
	double getArea(){
		return l*w;
	}
};

class Circle:public Geometry{
	double r;
public:
	Circle(){
	};
	Circle(double R):r(R){
	};
	double getArea(){
		return r*r*pi;
	}
};

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n){
   		double max = *t[0]->getArea()
	   	if(max<*t[1]->getArea())
	   		max = *t[1]->getArea();
	   	if(max<*t[2]->getArea())
	   		max = *t[2]->getArea();
	   	cout<<"最大面积="<<setprecision(2)<<max<<endl; 
   }

};


int main(){
	int n;
	cin>>n;
	TotalArea ta;
	Geometry *p = (Geometry*)operator new[](sizeof(Geometry)*n);
	Geometry **p1 = &p;
	for(int i=0;i<n;i++){
		int type,r,w,l;
		cin>>type;
		if(type == 1){
			cin>>l>>w;
			Rect re(l,w);
			p[i] = re;
		}
		if(type == 2){
			cin>>r;
			Circle ci(r);
			p[i] = ci;
		}
	}
	ta.computerTotalArea(p1,n);
}
------------------------------------------------------
2018192037:Problem1235:答案错误
#include<bits/stdc++.h>
using namespace std;
class Geometry{

public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class CRect:public Geometry
{
protected:
    int x;
    int y;
public:
    CRect(int x,int y)
    {
        this->x = x;
        this->y = y;
    }
    double getArea()
    {
        return x*y;
    }
};

class CCircle:public Geometry
{
protected:
    int r;
public:
    CCircle(int y)
    {
        this->r = y;
    }
    double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea{
private:
    static double max;
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        for(int i=0;i<n;i++)
        {
            double mid = t[i]->getArea();
            if(mid>max)
                max = mid;
        }
    }
    static double get_max()
    {
        return max;
    }
};

double TotalArea::max;

int main()
{
    int n;
    cin>>n;
    Geometry **t;
    t = new Geometry*[n];
    for(int i=0;i<n;i++)
    {
        int ty,x,y;
        cin>>ty;
        if(ty==1)
        {
            cin>>x>>y;
            CRect rect(x,y);
            t[i] = &rect;
        }
        if(ty==2)
        {
            cin>>x;
            CCircle cri(x);
            t[i] = &cri;
        }
    }
    TotalArea::computerTotalArea(t,n);
    cout<<setw(2)<<setfill('0')<<"最大面积="<<TotalArea::get_max()<<endl;
}



------------------------------------------------------
2018152087:Problem1235:正确
#include<iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
	Geometry()
	{
		
	}
	virtual double getArea()=0;
};
class Rect:public Geometry
{
	double len;
	double wid;
public:
	Rect(double l,double w)
	{
		len=l;
		wid=w;
	}
	double getArea()
	{
		return len*wid;
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double rr)
	{
		r=rr;
	}
	double getArea()
	{
		return r*r*3.14;
	}
};
class TotalArea
{
	static double max;
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		for(int i=0;i<n;i++)
		{
			double s=t[i]->getArea();
			if(max<s)
				max=s;
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};
double TotalArea::max=0;
int main()
{
	int t;
	cin>>t;
	Geometry *p[500];
	for(int i=0;i<t;i++)
	{
		int flag;
		cin>>flag;
		if(flag==1)
		{
			int l,w;
			cin>>l>>w;
			Rect ex(l,w);
			p[i]=&ex;
		}
		else
		{
			int r;
			cin>>r;
			Circle ex(r);
			p[i]=&ex;
		}
	}
	TotalArea temp;
	temp.computerTotalArea(&(*p),t);
}
------------------------------------------------------
2018192025:Problem1235:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
protected:
    double length;
    double width;
public:
    Rect(double len, double wid):length(len),width(wid) {};
    virtual double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
protected:
    double R;
public:
    Circle(double r):R(r) {};
    virtual double getArea()
    {
        return 3.14*R*R;
    }
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxArea=t[0]->getArea();
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        }
        cout<<"最大面积="<<maxArea<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    Geometry **pv=new Geometry*[t];
    for(int i=0; i<t; i++)
    {
        int m;
        double l,w,r;
        cin>>m;
        if(m==1)
        {
            cin>>l>>w;
            Rect ss(l,w);
            pv[i]=&ss;
        }
        else if(m==2)
        {
            cin>>r;
            Circle ss(r);
            pv[i]=&ss;
        }
    }
    TotalArea k;
    k.computerTotalArea(pv,t);
    delete[]pv;
}

------------------------------------------------------
2018192037:Problem1235:答案错误
#include<bits/stdc++.h>
using namespace std;
class Geometry{

public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class CRect:public Geometry
{
protected:
    int x;
    int y;
public:
    CRect(int x,int y)
    {
        this->x = x;
        this->y = y;
    }
    double getArea()
    {
        return x*y;
    }
};

class CCircle:public Geometry
{
protected:
    int r;
public:
    CCircle(int y)
    {
        this->r = y;
    }
    double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea{
private:
    static double max;
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        for(int i=0;i<n;i++)
        {
            double mid = t[i]->getArea();
            if(mid>max)
                max = mid;
        }
    }
    static double get_max()
    {
        return max;
    }
};

double TotalArea::max;

int main()
{
    int n;
    cin>>n;
    Geometry **t;
    t = new Geometry*[n];
    for(int i=0;i<n;i++)
    {
        int ty,x,y;
        cin>>ty;
        if(ty==1)
        {
            cin>>x>>y;
            CRect rect(x,y);
            t[i] = &rect;
        }
        if(ty==2)
        {
            cin>>x;
            CCircle cri(x);
            t[i] = &cri;
        }
    }
    TotalArea::computerTotalArea(t,n);
    cout<<setw(2)<<setfill('0')<<"最大面积="<<TotalArea::get_max();
}



------------------------------------------------------
2018152019:Problem1120:正确
#include <iostream>

#include<string.h>

using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    virtual void Speak()=0;
    virtual void display()=0;
};

class Tiger:public Animal
{
public:
    Tiger(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"AOOO";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

class Dog:public Animal
{
public:
    Dog(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"WangWang";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

class Duck:public Animal
{
public:
    Duck(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"GAGA";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

class Pig:public Animal
{
public:
    Pig(string n,int a)
    {
        name=n;
        age=a;
    }
    void Speak()
    {
        cout<<"HENGHENG";
    }
    void display()
    {
        cout<<"Hello,I am "<<name<<",";
    }
};

int main()
{
    Animal *panimal;
    int times;
    cin>>times;
    while(times--)
    {
        string type;
        cin>>type;

            if(type=="Tiger")
            {
                string n;
                int a;
                cin>>n>>a;
                Tiger tiger(n,a);
                panimal=&tiger;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else if(type=="Dog")
            {
                string n;
                int a;
                cin>>n>>a;
                Dog dog(n,a);
                panimal=&dog;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else if(type=="Duck")
            {
                string n;
                int a;
                cin>>n>>a;
                Duck duck(n,a);
                panimal=&duck;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else if(type=="Pig")
            {
                string n;
                int a;
                cin>>n>>a;
                Pig pig(n,a);
                panimal=&pig;
                panimal->display();
                panimal->Speak();
                cout<<"."<<endl;
            }
            else
            {
                string n;
                int a;
                cin>>n>>a;
                cout<<"There is no "<<type<<" in our Zoo";
                cout<<"."<<endl;
            }

    }
    return 0;
}

------------------------------------------------------
2018152051:Problem1119:答案错误
#include<iostream>
using namespace std;
class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){}
	BaseAccount(string n,string _acc,int _ba)
	{
		name = n;
		account = _acc;
		balance = _ba;
	}
	virtual void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(num>balance)
		{
			cout<<"insufficient"<<endl;
		}
		else
		{
			balance-=num;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
	}
};
class BasePlus:public BaseAccount
{
	int limit;
public:
	BasePlus(){}
	BasePlus(string n,string _acc,int _ba,int _li)
	{
		name = n;
		account = _acc;
		balance = _ba;
		limit = _li;
	}
	void deposit(int n)
	{
		if(balance==0)
		{
			limit+=n;
			if(limit>5000)
			{
				balance+=(limit-5000);
				limit = 5000;
			}
		}
		else
		{
			balance+=n;
		}
	}
	void withdraw(int m)
	{
		if(m+balance>limit)
		{
			cout<<"insufficient"<<endl;
		}
		else
		{
			balance-=m;
			int tmp = balance;
			if(balance<0)
			{
				balance = 0;
				limit += tmp;
			}
		}
	}
	void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" "<<"limit:"<<limit<<endl;
	}
};
int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		BaseAccount *b;
		string name,_acc;
		int ba,num1,num2,num3,num4,s;
		cin>>name>>_acc>>ba;
		if(_acc[1]=='A')
		{
			BaseAccount bacc(name,_acc,ba);
			b = &bacc;
			cin>>num1;
			b->deposit(num1);
			cin>>num2;
			b->withdraw(num2);
			cin>>num3;
			b->deposit(num3);
			cin>>num4;
			b->withdraw(num4);
			b->display();
		}
		else if(_acc[1]=='P')
		{
			BasePlus bacc2(name,_acc,ba,5000);
			b = &bacc2;
			cin>>num1;
			b->deposit(num1);
			cin>>num2;
			b->withdraw(num2);
			cin>>num3;
			b->deposit(num3);
			cin>>num4;
			b->withdraw(num4);
			b->display();
		}	
	}
}
------------------------------------------------------
2018152021:Problem1120:正确
#include <iostream>
#include <string.h>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak()=0;
};
class Tiger :public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",AOOO."<<endl;
    }
};
class Dog :public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",WangWang."<<endl;
    }
};
class Duck :public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",GAGA."<<endl;
    }
};
class Pig :public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",HENGHENG."<<endl;
    }
};
int main()
{
    int age,t;
    string name,part;
 	Animal *p;
    cin >> t;
    while(t--)
    {
        cin >> part >> name >> age;
        if(part=="Tiger")
        {
            p=new Tiger(name,age);
        }
        else if(part=="Dog")
        {
            p=new Dog(name,age);
        }
        else if(part=="Duck")
        {
            p=new Duck(name,age);
        }
        else if(part=="Pig")
        {
            p=new Pig(name,age);
        }
        else
        {
            cout <<"There is no "<< part <<" in our Zoo."<<endl;
            continue;
        }
        p->Speak();
    }
    return 0;
}
------------------------------------------------------
2018192038:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};

class Rect:public Geometry
{
    double length;
    double width;
public:
    Rect(double ll,double ww):length(ll),width(ww){}
    double getArea()
    {
        return length*width;
    }
    ~Rect(){}
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double rr):r(rr){}
    double getArea()
    {
        return r*r*3.14;
    }
    ~Circle(){}
};


class TotalArea
{
    double res;
public:
    TotalArea():res(0){}
    void computerTotalArea(Geometry** t,int n)
    {
       for(int i=0;i<n;i++)
       {
           if(res< t[i]->getArea())
           {
               res= t[i]->getArea();
           }
       }
       cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};


int main()
{
    double length;
    double width;
    double r;
    int n,type;
    cin>>n;
    Geometry **p=new Geometry*[n];
   // Rect *rr=new Rect[n];
    //Circle *cc=new Circle[n];
   // Geometry **pp=&p;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>length>>width;
            p[i]=new Rect(length,width);
        }
        else if(type==2)
        {
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);

    for(int i=0;i<n;i++)
    {
        delete p[i];
    }
    return 0;
}

------------------------------------------------------
2018192024:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
    friend class TotalArea;
};
class Rect:public Geometry
{
    double a,b;
public:
    Rect(double _a,double _b):a(_a),b(_b){}
    virtual double getArea(){return a*b;}
    friend class TotalArea;
};
class Circle:public Geometry
{
    double r;
public:
    Circle(double _r):r(_r){}
    virtual double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxArea=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t;
    t=new Geometry*[n];
    int type;
    double a,b,r;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rec(a,b);
            t[i]=&rec;
        }
        else if(type==2)
        {
            cin>>r;
            Circle cir(r);
            t[i]=&cir;
        }
    }
    TotalArea cta;
    cta.computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018151031:Problem1129:正确
#include <bits/stdc++.h>
using namespace std;
class travel;
class vip;
class card
{
    long id;
    string CName;
    float Counter;
public:
    friend travel;
    friend vip;
    virtual void initial(long id_in,string n,float c);
    int save(float m);
    int take(float m);
    virtual void info();
};
void card::info()
{
    cout<<id<<'-'<<CName<<'-'<<Counter<<endl;
}   
void card::initial(long id_in,string n,float c)
{
    id=id_in;
    CName=n;
    Counter=c;      
}   
int card::save(float m)
{
    if(m<0)
        return -1;
    if(m!=(int)m)
        return -1;
    if(m<0)
        return -1;
    else
        Counter+=m;
    return 1;
}
int card::take(float m)
{
    if(m<0)
        return -1;
    if(m!=(int)m)
        return -1;
    if(m>Counter)
        return -1;
    else
        Counter-=m;
    return 1;
}
class travel:public card
{
    int Tcounter;
public:
    void initial(long id_in,string n,float c,int t); 
    int transfer(float m);
    void info();
};
void travel::info()
{
    cout<<id<<'-'<<CName<<'-'<<Counter<<'-'<<Tcounter<<endl;
}
int travel::transfer(float m)
{
    if(m<0)
        return -1;
    if(m>Counter)
        return -1;
    else
    {
        Counter-=m;
        Tcounter+=m;    
    }   
} 
void travel::initial(long id_in,string n,float c,int t)
{
    id=id_in;
    CName=n;
    Counter=c;      
    Tcounter=t;
}  
class vip:public card
{
    int Credit;
public:
    void initial(long id_in,string n,float c,int credit);
    int over(int m);
    void info();
};
void vip::info()
{
    cout<<id<<'-'<<CName<<'-'<<Counter<<'-'<<Credit<<endl;
}
int vip::over(int m)
{
    if(m<0)
        return -1;
    if(m>Counter+Credit)
        return -1;
    else
    {
        Credit-=m-Counter;
        Counter=0;
        return 1;
    }
}
void vip::initial(long id_in,string n,float c,int credit)
{
    id=id_in;
    CName=n;
    Counter=c;      
    Credit=credit;
}   
void show(card &obj)
{
    obj.info();
}
int main()
{
    long id;
    string n;
    float balance;
    cin>>id>>n>>balance;
    card c1;
    c1.initial(id,n,balance);
    int tcount_in;
    cin>>id>>n>>balance>>tcount_in;
    travel t;
    t.initial(id,n,balance,tcount_in);
    int o;
    cin>>id>>n>>balance>>o;
    vip v;
    v.initial(id,n,balance,o);
    float A,B,C,D;
    cin>>A>>B>>C>>D;
    c1.save(A);
    c1.save(B);
    c1.take(C);
    c1.take(D);
    cin>>A>>B>>C>>D;
    t.save(A);
    t.take(B);
    t.transfer(C);
    t.transfer(D);
    cin>>A>>B>>C>>D;
    v.save(A);
    v.take(B);
    v.over(C);
    v.over(D);
    card *c;
    c=&c1;
    show(*c);
    c=&t;
    show(*c);
    c=&v;
    show(*c);
}
------------------------------------------------------
2018152008:Problem1235:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
	public:
		virtual double getArea()=0;
};
class Rect:public Geometry
{
	protected:
		float c,k;
	public:
		Rect(float c,float k);
		double getArea();	
};
Rect::Rect(float c1,float k1)
{
	c=c1;
	k=k1;
}
double Rect::getArea()
{
	return c*k;
}
class Circle:public Geometry
{
	protected:
		float radius;
	public:
		Circle(float r);
		double getArea();		
};
Circle::Circle(float r)
{
	radius=r;
}
double Circle::getArea()
{
	return 3.14*radius*radius;
}
class TotalArea
{
	public:
		static void computerTotalArea(Geometry** t,int n)
		{
			int i;
			double max=-1;
			for(i=0;i<n;i++)
			{
				if(t[i]->getArea()>max)
					max=t[i]->getArea();
			}
			cout<<fixed<<setprecision(2)<<"最大面积="<<max<<endl;
		}
};
int main()
{
	int t,i;
	cin>>t;
	Geometry **p=new Geometry*[t];
	for(i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			float c1,k1;
			cin>>c1>>k1;
			p[i]=new Rect(c1,k1);
		}
		else
		{
			float r;
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea::computerTotalArea(p,t);
	for(i=0;i<t;i++)
		delete p[i];
	delete []p;
	return 0;
}

------------------------------------------------------
2018192025:Problem1235:正确
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
protected:
    double length;
    double width;
public:
    Rect(double len, double wid):length(len),width(wid) {};
    virtual double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
protected:
    double R;
public:
    Circle(double r):R(r) {};
    virtual double getArea()
    {
        return 3.14*R*R;
    }
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxArea=t[0]->getArea();
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        }
        cout<<"最大面积="<<setprecision(2)<<setiosflags(ios::fixed)<<maxArea<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    Geometry **pv=new Geometry*[t];
    for(int i=0; i<t; i++)
    {
        int m;
        double l,w,r;
        cin>>m;
        if(m==1)
        {
            cin>>l>>w;
            Rect ss(l,w);
            pv[i]=&ss;
        }
        else if(m==2)
        {
            cin>>r;
            Circle ss(r);
            pv[i]=&ss;
        }
    }
    TotalArea k;
    k.computerTotalArea(pv,t);
    delete[]pv;
}

------------------------------------------------------
2018192026:Problem1235:正确
#include<stdio.h>
class Geometry
{
public:
	virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
	double length,width;
public:
	Rect(double l,double w):length(l),width(w){}
	double getArea()
	{
		return length*width;
	}
};
class Circle:public Geometry
{
protected:
	double radius;
public:
	Circle(double r):radius(r){}
	double getArea()
	{
		return 3.14*radius*radius;
	}
};
class MaxArea
{
public:
	static void getMaxArea(Geometry **t,int n)
	{
		int i;
		double max=t[0]->getArea();
		for(i=1;i<n;i++)
			if(max<t[i]->getArea())
				max=t[i]->getArea();
		printf("最大面积=%.2lf\n",max);
	}
};
int main()
{
	int t,i;
	scanf("%d",&t);
	Geometry **G;
	G=new Geometry *[t];
	for(i=0;i<t;i++)
	{
		int kind;
		double length,width,radius;
		scanf("%d",&kind);
		if(kind-1)
		{
			scanf("%lf",&radius);
			Circle C(radius);
			G[i]=&C;
		}
		else
		{
			scanf("%lf %lf",&length,&width);
			Rect R(length,width);
			G[i]=&R;
		}
	}
	MaxArea area;
	area.getMaxArea(G,t);
	delete []G;
	return 0;
}
	


			

------------------------------------------------------
2018152044:Problem1234:答案错误
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
    GroupA()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=x-y;
        return ressub;
    }
};
class GroupB:public Group
{
public:
    GroupB()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};
class GroupC:public Group
{
public:
    GroupC()
    {
    }
    int add(int x,int y)
    {
        int resadd=0;
        int add[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        if(m>n)
            n=m;
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            add[i]=(savex[i]+savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            resadd+=add[i]*pow(10,n-1-i);
        }
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};

int main()
{
    int n;
    cin>>n;
    Group *s[1000];
    for(int i=0;i<n;i++)
    {
        int type;
        cin>>type;
        int x,y;
        char op;
        cin>>x>>op>>y;
        if(type==1)
        {
            s[i]=new GroupA();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            s[i]=new GroupB();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            s[i]=new GroupC();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018192037:Problem1235:正确
#include<bits/stdc++.h>
using namespace std;
class Geometry{

public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class CRect:public Geometry
{
protected:
    int x;
    int y;
public:
    CRect(int x,int y)
    {
        this->x = x;
        this->y = y;
    }
    double getArea()
    {
        return x*y;
    }
};

class CCircle:public Geometry
{
protected:
    int r;
public:
    CCircle(int y)
    {
        this->r = y;
    }
    double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea{
private:
    static double max;
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        for(int i=0;i<n;i++)
        {
            double mid = t[i]->getArea();
            if(mid>max)
                max = mid;
        }
    }
    static double get_max()
    {
        return max;
    }
};

double TotalArea::max;

int main()
{
    int n;
    cin>>n;
    Geometry **t;
    t = new Geometry*[n];
    for(int i=0;i<n;i++)
    {
        int ty,x,y;
        cin>>ty;
        if(ty==1)
        {
            cin>>x>>y;
            CRect rect(x,y);
            t[i] = &rect;
        }
        if(ty==2)
        {
            cin>>x;
            CCircle cri(x);
            t[i] = &cri;
        }
    }
    TotalArea::computerTotalArea(t,n);
    cout<<setiosflags(ios::fixed);
    cout<<setprecision(2)<<"最大面积="<<TotalArea::get_max();
}



------------------------------------------------------
2018152008:Problem1232:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Vehicle
{
	protected:
		string no;
		int count;
	public:
		virtual void display()=0;
		Vehicle(string n);
};
Vehicle::Vehicle(string n)
{
	no=n;
}
class Car:public Vehicle
{
	protected:
		int weight;
		int sum;
	public:
		Car(string n,int w,int s);
		void display();
};
Car::Car(string n,int w,int s):Vehicle(n)
{
		weight=w;
		sum=s;
};
void Car::display()
{
	count=weight*8+sum*2;
	cout<<setw(3)<<setfill('0')<<no<<" "<<count<<endl;
}
class Truck:public Vehicle
{
	protected:
		int weight;
	public:
		Truck(string n,int w);
		void display();	
};
Truck::Truck(string n,int w):Vehicle(n)
{
	weight=w;
}
void Truck::display()
{
	count=weight*5;
	cout<<setw(3)<<setfill('0')<<no<<" "<<count<<endl;	
}
class Bus:public Vehicle
{
	protected:
		int sum;	
	public:
		Bus(string n,int s);
		void display();
};
Bus::Bus(string n,int s):Vehicle(n)
{
	sum=s;
}
void Bus::display()
{
	count=sum*3;
	cout<<setw(3)<<setfill('0')<<no<<" "<<count<<endl;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Vehicle * pol;
		int kind,s,w;
		string n;
		cin>>kind;
		if(kind==1)
		{
			cin>>n>>w>>s;
			pol=new Car(n,w,s);
			pol->display();
		}
		else if(kind==2)
		{
			cin>>n>>w;
			pol=new Truck(n,w);
			pol->display();
		}
		else
		{
			cin>>n>>s;
			pol=new Bus(n,s);
			pol->display();
		}
		delete pol;
	}
	return 0;
}
------------------------------------------------------
2018152062:Problem1234:正确
#include <iostream>
using namespace std;
/*某小学二年级的数学老师在教学生整数加减法运算时发现：班上的同学可以分成三类，
第一类可以正确地完成加减法运算(GroupA)；第二类可以正确地完成加法运算，
但对于减法运算来说，总是忘记借位的处理(GroupB)；第三类总是忘记加法的进位，
也总是忘记减法的借位(GroupC)。（提示：小学二年级还没学负数。）
现在请模拟当老师在课堂提问某位同学时，同学会给出的回答。
实现时请基于下面的基类框架：*/

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
/*构建出GroupA, GroupB和GroupC三个派出类:
并编写主函数，要求主函数中有一个基类Group指针，通过该指针统一地进行add和sub运算*/
class GroupA:public Group
{
public:
    GroupA(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    GroupB(){}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx<yy)
                xx=xx+10-yy;
            else
                xx-=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    GroupC(){}
    int add(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        int tag;
        if(x<y)
        {
            tag=x;
            x=y;
            y=tag;
        }
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx+yy>=10)
                xx=xx+yy-10;
            else
                xx+=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int xx,yy;
        int sum=0;
        int cnt=1;
        while(1)
        {
            xx=x%10;
            yy=y%10;
            if(!x)
                break;
            if(xx<yy)
                xx=xx+10-yy;
            else
                xx-=yy;
            sum+=xx*cnt;
            cnt*=10;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *p;
        int cnt;
        int x,y;
        char ch;
        cin>>cnt>>x>>ch>>y;
        if(cnt==1)
        {
            GroupA u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(cnt==2)
        {
            GroupB u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else
        {
            GroupC u;
            p=&u;
            if(ch=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192048:Problem1119:编译错误
#include<iostream>
using namespace std;

class BaseAccount{
protected:
	string name,account;
	int balance;
public:
	BaseAccount(){}
	BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
	virtual void deposit(int m){
		balance+=m;
	}
	virtual void withdraw(int m){
		if(balance>=m)
			balance-=m;
		else
			cout<<"insufficient"<<endl;
		
	}
	virtual void display(){
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	~BaseAccount(){}
};

class BasePlus:public BaseAccount{
protected:
	int limit,limit_sum;
public:
	BasePlus(){}
	BasePlus(string n,string a,int b):BaseAccount(n,a,b){
		limit=5000;
		limit_sum=0;
	}
	void deposit(int m){
		balance+=m;
	}
	void withdraw(int m){
		if(balance>=m)
			balance-=m;
		else if(balance<m&&m<=balance+limit){
			limit_sum=m-balance;
			balance=0;
		}
		else if(m>balance+limit)
			cout<<"insufficient"<<endl;
	}
	void display(){
		cout<<BaseAccount::name<<" "<<BaseAccount::account<<" Balance:";
		cout<<balance<<" limit:"<<limit-limit_sum<<endl;
	}
	~BasePlus(){}
};

int main(){
	int t;
	cin>>t;
	while(t--){
		string name,account,balance;
		cin>>name>>account>>balance;
		if(account.at(1)=='A')
			BaseAccount a(name,account,balance);
		else if(account.at(1)=='P')
			BasePlus a(name,account,balance);
		BaseAccount *pv;
		pv=&a;
		for(int i=1;i<=4;i++){
			int m;
			cin>>m;
			if(i%2)
				pv->deposit(m);
			else
				pv->withdraw(m);
		}
		pv->display();
	}
	return 0;
}
------------------------------------------------------
2018192043:Problem1234:正确
#include <iostream>
#include <cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
    ~Group(){}
};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
    ~GroupA(){}
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int result=0,longs=1;
        if(x>y)
        {
            while(x/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        else
        {
            while(y/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        for(int i=longs-1; i>=1; i--)
        {
            int temp1=x/(int)(pow(10,i-1)+0.5);
            int temp2=y/(int)(pow(10,i-1)+0.5);
            if(temp1-temp2<0)
                result+=(temp1+10-temp2)%10*(int)(pow(10,i-1)+0.5);
            else
                result+=(temp1-temp2)%10*(int)(pow(10,i-1)+0.5);
            x-=temp1*(int)(pow(10,i-1)+0.5);
            y-=temp2*(int)(pow(10,i-1)+0.5);
        }
        return result;
    }
    ~GroupB(){}
};
class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int result=0,longs=1;
        if(x>y)
        {
            while(x/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        else
        {
            while(y/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        for(int i=longs-1; i>=1; i--)
        {
            int temp1=x/(int)(pow(10,i-1)+0.5);
            int temp2=y/(int)(pow(10,i-1)+0.5);
            result+=(temp1+temp2)%10*(int)(pow(10,i-1)+0.5);
            x-=temp1*(int)(pow(10,i-1)+0.5);
            y-=temp2*(int)(pow(10,i-1)+0.5);
        }
        return result;
    }
    int sub(int x,int y)
    {
        int result=0,longs=1;
        if(x>y)
        {
            while(x/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        else
        {
            while(y/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        for(int i=longs; i>=1; i--)
        {
            int temp1=x/(int)(pow(10,i-1)+0.5);
            int temp2=y/(int)(pow(10,i-1)+0.5);
            if(temp1-temp2<0)
                result+=(temp1+10-temp2)%10*(int)(pow(10,i-1)+0.5);
            else
                result+=(temp1-temp2)%10*(int)(pow(10,i-1)+0.5);
            x-=temp1*(int)(pow(10,i-1)+0.5);
            y-=temp2*(int)(pow(10,i-1)+0.5);
        }
        return result;
    }
    ~GroupC(){}
};
int main()
{
    int t,x,y,student;
    char type;
    Group *p;
    cin>>t;
    while(t--)
    {
        cin>>student>>x>>type>>y;
        if(student==1)
        {
            GroupA a;
            p=&a;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(student==2)
        {
            GroupB a;
            p=&a;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(student==3)
        {
            GroupC a;
            p=&a;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018152008:Problem1120:运行错误
#include<iostream>
#include<string>
using namespace std;
class Animal
{
	protected:
		string kind;
		string name;
		int age;
	public:
		virtual void speak();	
		void display();
};
void Animal::speak()
{
	;
}
void Animal::display()
{
	cout<<"Hello,I am "<<name<<",";
	speak();
}
class tiger:public Animal
{
	public:
		tiger(string n,int a);
		void speak();
};
tiger::tiger(string n,int a)
{
	kind="tiger";
	name=n;
	age=a;
}
void tiger::speak()
{
	cout<<"AOOO."<<endl;
}
class dog:public Animal
{
	public:
		dog(string n,int a);
		void speak();
};
dog::dog(string n,int a)
{
	kind="dog";
	name=n;
	age=a;
}
void dog::speak()
{
	cout<<"WangWang."<<endl;
}
class duck:public Animal
{
	public:
		duck(string n,int a);
		void speak();	
};
duck::duck(string n,int a)
{
	kind="duck";
	name=n;
	age=a;
}
void duck::speak()
{
	cout<<"GAGA."<<endl;
}
class pig:public Animal
{
	public:
		pig(string n,int a);
		void speak();
};
pig::pig(string n,int a)
{
	kind="pig";
	name=n;
	age=a;
}
void pig::speak()
{
	cout<<"HENGHENG."<<endl;
}
int main()
{
	int t;
	cin>>t;	
	while(t--)
	{
		Animal *p;
		string kind;
		string n;
		int a;
		cin>>kind>>n>>a;
		if(kind=="Tiger")
		{
			p=new tiger(n,a);
			p->display();
		}
		else if(kind=="Pig")
		{
			p=new pig(n,a);
			p->display();
		}
		else if(kind=="Duck")
		{
			p=new duck(n,a);
			p->display();
		}
		else if(kind=="Dog")
		{
			p=new dog(n,a);
			p->display();
		}
		else
		{
			cout<<"There is no "<<kind<<" in our Zoo."<<endl;
		}
		delete p;
	}
	return 0;
}
------------------------------------------------------
2018151044:Problem1235:正确
#include<string>
#include<iostream>
#include<iomanip> 
using namespace std;
class Ge{
public:
    virtual double getArea()=0; 
    virtual ~Ge() {}
};
class Rect: public Ge
{
	int a,b;
public:
	Rect(int a,int b):a(a),b(b){} //最大面积 
	double getArea()
	{
		return a*b;
	}
};
class Circle: public Ge
{
	int r;
public:
	Circle(int r):r(r) {}
	double getArea()
	{
		return 3.14*r*r;
	}
};
class TotalArea{
public:
   static void computerTotalArea(Ge **t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
   {
		double ans=0;
		for(int i=0;i<n;++i)
		{
			ans=ans > t[i]->getArea() ? ans : t[i]->getArea();
		}
		cout<<"最大面积="<<setprecision(2)<<fixed<<ans<<endl; 
   }
};
int main()
{
	int t,a,b,c,n;
	cin>>t;
	n=t;
	Ge** p=new Ge*[t];
	while(t--)
	{
		cin>>a>>b;
		if(a==1)
		{
			cin>>c;
			p[t]=new Rect(b,c);
		}
		else p[t]=new Circle(b); 
	}
	TotalArea::computerTotalArea(p,n);
	for(int i=0;i<n;++i)delete p[i];
	delete p;
}
------------------------------------------------------
2017182013:Problem1235:正确
#include <bits/stdc++.h>

using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
    double x,y;
public:
    Rect(double xv,double yv):x(xv),y(yv){}
    double getArea()
    {
        return x*y;
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(double rv):r(rv)
    {

    }
    double getArea()
    {
        return 3.14*r*r;
    }

};
class TotalArea
{
    static double maxArea;
public:
    static double getMax()
    {
        return maxArea;
    }
    static void computerTotalArea(Geometry **t,int n);
};
void TotalArea::computerTotalArea(Geometry **t,int n)
{
    maxArea = t[0]->getArea();
    for(int i=1; i<n; i++)
    {
        if(maxArea<t[i]->getArea())
            maxArea = t[i]->getArea();
    }
}
double TotalArea::maxArea=0;
int main()
{
    int n;
    cin>>n;
    Geometry **t = new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            double x,y;
            cin>>x>>y;
            Rect r(x,y);
            t[i] = &r;
        }
        else if(type==2)
        {
            int r;
            cin>>r;
            Circle c(r);
            t[i] = &c;
        }
    }
    TotalArea::computerTotalArea(t,n);
    printf("最大面积=%.2f\n",TotalArea::getMax());
    delete[]t;
    return 0;
}

------------------------------------------------------
2018152106:Problem1119:正确
#include<iostream>
using namespace std;

class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){}
	BaseAccount(string n,string a,int ba):name(n),account(a),balance(ba){}
	void setv(string n,string a,int ba)
	{
		name=n;
		account=a;
		balance=ba;
	}
	void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(num<=balance)
			balance-=num;
		else
			cout<<"insufficient"<<endl;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	~BaseAccount(){}
};

class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(){}
	BasePlus(string n,string a,int ba):BaseAccount(n,a,ba),limit(5000),limit_sum(0){}
	void deposit(int num)
	{
		balance+=num;
	}
	void withdraw(int num)
	{
		if(num<=balance)
		{
			balance-=num;
		}
		else if(num>balance&&num<=balance+limit)
		{
			limit_sum+=(num-balance);
			limit-=(num-balance);
			balance=0;
		}
		else
			cout<<"insufficient"<<endl;
	}
	void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<" "<<endl;
	}
};

int main()
{
	int t;
	BaseAccount *p;
	cin>>t;
	while(t--)
	{
		string n,ac;
		int b,x1,y1,x2,y2;
		cin>>n>>ac>>b>>x1>>y1>>x2>>y2;
		if(ac[1]=='A')
		{
			p=new BaseAccount;
			p->setv(n,ac,b);
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
			delete p;
		}
		if(ac[1]=='P')
		{
			BasePlus a(n,ac,b);
			p=&a;
			p->deposit(x1);
			p->withdraw(y1);
			p->deposit(x2);
			p->withdraw(y2);
			p->display();
		}
	}
	
	return 0;
}
------------------------------------------------------
2018192040:Problem1235:运行错误
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
double pi = 3.14;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect:public Geometry{
	double l,w;
public:
	Rect(){
	};
	Rect(double L,double W):l(L),w(W){
	};
	double getArea(){
		return l*w;
	}
};

class Circle:public Geometry{
	double r;
public:
	Circle(){
	};
	Circle(double R):r(R){
	};
	double getArea(){
		return r*r*pi;
	}
};

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n){
   		double max = t[0]->getArea();
	   	if(max<t[1]->getArea())
	   		max = t[1]->getArea();
	   	if(max<t[2]->getArea())
	   		max = t[2]->getArea();
	   	cout<<"最大面积="<<setprecision(2)<<max<<endl; 
   }

};


int main(){
	int n;
	cin>>n;
	TotalArea ta;
	Geometry *p = (Geometry*)operator new[](sizeof(Geometry)*n);
	Geometry **p1 = &p;
	for(int i=0;i<n;i++){
		int type,r,w,l;
		cin>>type;
		if(type == 1){
			cin>>l>>w;
			Rect re(l,w);
			p[i] = re;
		}
		if(type == 2){
			cin>>r;
			Circle ci(r);
			p[i] = ci;
		}
	}
	ta.computerTotalArea(p1,n);
}
------------------------------------------------------
2018192040:Problem1235:运行错误
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
double pi = 3.14;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect:public Geometry{
	double l,w;
public:
	Rect(){
	};
	Rect(double L,double W):l(L),w(W){
	};
	double getArea(){
		return l*w;
	}
};

class Circle:public Geometry{
	double r;
public:
	Circle(){
	};
	Circle(double R):r(R){
	};
	double getArea(){
		return r*r*pi;
	}
};

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n){
   		double max = t[0]->getArea();
   		for(int i=0;i<n;i++)
	   		if(max<t[i]->getArea())
	   			max = t[i]->getArea();
	   	cout<<"最大面积="<<setprecision(2)<<max<<endl; 
   }

};


int main(){
	int n;
	cin>>n;
	TotalArea ta;
	Geometry *p = (Geometry*)operator new[](sizeof(Geometry)*n);
	Geometry **p1 = &p;
	for(int i=0;i<n;i++){
		int type,r,w,l;
		cin>>type;
		if(type == 1){
			cin>>l>>w;
			Rect re(l,w);
			p[i] = re;
		}
		if(type == 2){
			cin>>r;
			Circle ci(r);
			p[i] = ci;
		}
	}
	ta.computerTotalArea(p1,n);
}
------------------------------------------------------
2018152008:Problem1234:正确
#include<iostream>
#include<cstring>
#include<iomanip>
#include<cstdlib>
using namespace std;
class Group
{
	public:
		virtual int add(int x,int y)=0;
		virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
	public:
		int add(int x,int y);
		int sub(int x,int y);
};
int GroupA::add(int x,int y)
{
	return x+y;
}
int GroupA::sub(int x,int y)
{
	return x-y;
}
class GroupB:public GroupA
{
	public:
		int sub(int x,int y);
};
int GroupB::sub(int x,int y)
{
	int z=1;
	int sum=0;
	while(x||y)
	{
		int a=x%10;
		int b=y%10;
		sum+=(a-b)*z;
		if(a<b)
			sum+=z*10;
		x/=10;
		y/=10;
		z*=10;
	}
	return sum;
}
class GroupC:public GroupB
{
	public:
		int add(int x,int y);
};
int GroupC::add(int x,int y)
{
	int z=1;
	int sum=0;
	while(x||y)
	{
		int a=x%10;
		int b=y%10;
		sum+=(a+b)*z;
		if(a+b>9)
			sum-=z*10;
		x/=10;
		y/=10;
		z*=10;
	}
	return sum;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Group *pll;
		int kind;
		cin>>kind;
		char suanshi[100];
		char num1[100];
		char yunsuanfu;
		char num2[100];
		cin>>suanshi;
		int k=strlen(suanshi);
		int i;
		int flag=0;
		int j=0;
		for(i=0;i<k;i++)
		{
			if(flag==0&&suanshi[i]<='9'&&suanshi[i]>='0')
			{
				num1[j]=suanshi[i];
				j++;
			}
			else if(suanshi[i]>'9'||suanshi[i]<'0')
			{
				flag=1;
				num1[j]='\0';
				yunsuanfu=suanshi[i];
				j=0;
			}
			else if(flag==1&&suanshi[i]<='9'&&suanshi[i]>='0')
			{
				num2[j]=suanshi[i];
				j++;
			}
		}
		num2[j]='\0';
		int nu1=atoi(num1);
		int nu2=atoi(num2);
		if(kind==1)
		{
			pll=new GroupA;
			if(yunsuanfu=='+')
				cout<<pll->add(nu1,nu2)<<endl;
			else
				cout<<pll->sub(nu1,nu2)<<endl;
		}
		else if(kind==2)
		{
			pll=new GroupB;
			if(yunsuanfu=='+')
				cout<<pll->add(nu1,nu2)<<endl;
			else
				cout<<pll->sub(nu1,nu2)<<endl;
		}
		else if(kind==3)
		{
			pll=new GroupC;
			if(yunsuanfu=='+')
				cout<<pll->add(nu1,nu2)<<endl;
			else
				cout<<pll->sub(nu1,nu2)<<endl;
		}
		delete pll;
	}
	return 0;
}

------------------------------------------------------
2018191214:Problem1235:答案错误
#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
class Geometry
{
public:
	virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
	double y,x;
public:
	Rect(){}
	Rect(double x1,double y1):x(x1),y(y1){}
	double getArea()
	{
		return x*y;
	}
};
class Circle:public Geometry
{
protected:
	double r;
public:
	Circle(){}
	Circle(double R):r(R){}
	double getArea()
	{
		return r*r*3.14;
	}
};
class TotalArea
{
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		double max=0;
		for(int i=0;i<n;i++)
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
			cout<<"最大面积="<<max<<endl;
	}
};
int main()
{
	int t,kind;
	double x,y,r;
	cin>>t;
	Geometry **p=new Geometry *[t];
	TotalArea TA;
	for(int i=0;i<t;i++)
	{
		cin>>kind;
		if(kind==1)
		{
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		else if(kind==2)
		{
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TA.computerTotalArea(p,t);
	return 0;
}

------------------------------------------------------
2018152008:Problem1129:运行错误
#include<iostream>
#include<string>
using namespace std;
class card
{
	protected:
		string num;
		string id;
		float balance;
	public:
		card(string n,string i,float bal);
		int save(float money);
		int take(float money);
		void virtual info();
};
card::card(string n,string i,float bal)
{
	num=n;
	id=i;
	balance=bal;
}
int card::save(float money)
{
	if(money!=(int)money||money<=0)
		return -1;
	else
		balance+=money;
	return 1;
}
int card::take(float money)
{
	if(money!=(int)money||money<=0||money>balance)
		return -1;
	else
		balance-=money;
	return 1;
}
void card::info()
{
	cout<<num<<"-"<<id<<"-"<<balance<<endl;
}
class trcard:public card
{
	protected:
		float Tcounter;
	public:
		trcard(string n,string i,float bal,float tc);
		int zhuan(float money);
		void info();
};
int trcard::zhuan(float money)
{
	if(money!=(int)money||money<=0||money>balance)
		return -1;
	else
	{
		balance-=money;
		Tcounter+=money;
	}
	return 1;
}
trcard::trcard(string n,string i,float bal,float tc):card(n,i,bal)
{
	Tcounter=tc;
}
void trcard::info()
{
	cout<<num<<"-"<<id<<"-"<<balance<<"-"<<Tcounter<<endl;
}
class vipcard:public card
{
	protected:
		float credit;
	public:
		vipcard(string n,string i,float bal,float cr);
		int over(float money);
		void info();
};
void vipcard::info()
{
	cout<<num<<"-"<<id<<"-"<<balance<<"-"<<credit<<endl;
}
vipcard::vipcard(string n,string i,float bal,float cr):card(n,i,bal)
{
	credit=cr;
}
int vipcard::over(float money)
{
	if(money!=(int)money||money<=0||money>balance+credit)
		return -1;
	else
	{
		money-=balance;
		balance=0;
		credit-=money;
	}
	return 1;
}
int main()
{
	card * pol;
	string n1,n2,n3,i1,i2,i3;
	float bal1,bal2,bal3,tc,cr;
	cin>>n1>>i1>>bal1;
	cin>>n2>>i2>>bal2>>tc;
	cin>>n3>>i3>>bal3>>cr;
	card po1(n1,i1,bal1);
	trcard po2(n2,i2,bal2,tc);
	vipcard po3(n3,i3,bal3,cr);
	float m1,m2,m3,m4;
	cin>>m1>>m2>>m3>>m4;
	po1.save(m1);
	po1.save(m2);
	po1.take(m3);
	po1.take(m4);
	pol=&(po1);
	pol->info();
	cin>>m1>>m2>>m3>>m4;
	po2.save(m1);
	po2.take(m2);
	po2.zhuan(m3);
	po2.zhuan(m4);
	pol=&(po2);
	pol->info();
	cin>>m1>>m2>>m3>>m4;
	po3.save(m1);
	po3.take(m2);
	po3.over(m3);
	po3.over(m4);
	pol=&(po3);
	pol->info();
	delete pol;
	return 0; 
}
------------------------------------------------------
2018152026:Problem1120:答案错误
#include <iostream>
#include <string.h>
using namespace std;

class Animal
{
public:
    char animal[10];
    char name[10];
};

class Tiger:public Animal
{
public:
    void speak1(char name[10]);
};

class Dog:public Animal
{
public:
    void speak2(char name[10]);
};

class Duck:public Animal
{
public:
    void speak3(char name[10]);
};

class Pig:public Animal
{
public:
    void speak4(char name[10]);
};

void Tiger::speak1(char name[10])
{
    cout<<"Hello,I am "<<name<<",AOOO."<<endl;
}

void Dog::speak2(char name[10])
{
    cout<<"Hello,I am "<<name<<",WANGWANG."<<endl;
}

void Duck::speak3(char name[10])
{
    cout<<"Hello,I am "<<name<<",GAGA."<<endl;
}

void Pig::speak4(char name[10])
{
    cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
}


int main()
{
    int t;
    cin>>t;
    while(t--)
    {
     int age;
     Animal a;
     Tiger b;
     Dog c;
     Duck d;
     Pig e;
     cin>>a.animal>>a.name>>age;

     if(strcmp(a.animal,"Tiger")==0)
     {
        b.speak1(a.name);
     }
     else if(strcmp(a.animal,"Dog")==0)
     {
         c.speak2(a.name);
     }
     else if(strcmp(a.animal,"Duck")==0)
     {
         d.speak3(a.name);
     }
     else if(strcmp(a.animal,"Pig")==0)
     {
         e.speak4(a.name);
     }
     else
     {
         cout<<"There is no "<<a.animal<<" in our Zoo."<<endl;
     }
    }
    return 0;
}

------------------------------------------------------
2018192022:Problem1129:正确
#include <iostream>
#include <iomanip>
#include <cstring>
#define PI 3.14
using namespace std;
class NCard
{
protected:
    string ID;
    char CName;
    double balance;
public:
    NCard(){}
    NCard(string a,char b, double c):ID(a),CName(b),balance(c){}
    virtual void initial(string a,char b, double c)
    {
        ID=a;
        CName=b;
        balance=c;
    }
    bool judge(double x)
    {
        int n;
        n=(int)x;
        n=(double)n;
        if(x-n!=0)
            return false;
        else
            return true;
    }
    virtual int save(double x)
    {
        if(x<=0||!judge(x))
            return -1;
        else
        {
            balance+=x;
            return 1;
        }
    }
    virtual int take(double x)
    {
        if(x<=0||!judge(x))
            return -1;
        else if(x>balance)
            return -1;
        else
        {
            balance-=x;
            return 1;
        }
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<balance<<endl;
    }
};
class TrafficCard:public NCard
{
protected:
    double Tbalance;
public:
    TrafficCard(){}
    TrafficCard(string a,char b, double c,double d)
    {
        ID=a;
        CName=b;
        balance=c;
        Tbalance=d;
    }
    int transfer(double x)
    {
        if(x<=0||!judge(x))
            return -1;
        else if(x>balance)
            return -1;
        else
        {
            balance-=x;
            Tbalance+=x;
            return 1;
        }
    }
    void initial(string a,char b, double c,double d)
    {
        ID=a;
        CName=b;
        balance=c;
        Tbalance=d;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<balance<<"-"<<Tbalance<<endl;
    }
};
class VIPCard:public NCard
{
protected:
    double credit;
public:
    VIPCard(){}
    VIPCard(string a,char b, double c,double d)
    {
        ID=a;
        CName=b;
        balance=c;
        credit=d;
    }
    void initial(string a,char b, double c,double d)
    {
        ID=a;
        CName=b;
        balance=c;
        credit=d;
    }
    int over(double x)
    {
        if(x<=0||!judge(x))
            return -1;
        else if(x>balance+credit)
            return -1;
        else if(x<=balance)
        {
            balance-=x;
            return 1;
        }
        else
        {
            credit-=(x-balance);
            balance=0;
            return 1;
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<balance<<"-"<<credit<<endl;
    }
};
void show(NCard& obj)
{
    obj.info();
}
int main()
{
    string ID1,ID2,ID3;
    char name1,name2,name3;
    double balance1,balance2,balance3,Trafficbalance,credit;
    cin>>ID1>>name1>>balance1
        >>ID2>>name2>>balance2>>Trafficbalance
        >>ID3>>name3>>balance3>>credit;
    NCard p1;
    TrafficCard p2;
    VIPCard p3;
    p1.initial(ID1,name1,balance1);
    p2.initial(ID2,name2,balance2,Trafficbalance);
    p3.initial(ID3,name3,balance3,credit);
    double a1,b1,c1,d1;
    double a2,b2,c2,d2;
    double a3,b3,c3,d3;
    cin>>a1>>b1>>c1>>d1
        >>a2>>b2>>c2>>d2
        >>a3>>b3>>c3>>d3;
    p1.save(a1);
    p1.save(b1);
    p1.take(c1);
    p1.take(d1);
    show(p1);
    p2.save(a2);
    p2.take(b2);
    p2.transfer(c2);
    p2.transfer(d2);
    show(p2);
    p3.save(a3);
    p3.take(b3);
    p3.over(c3);
    p3.over(d3);
    show(p3);
    return 0;
}
------------------------------------------------------
2018151027:Problem1235:运行错误
#include <iostream>
#include<cstring>
using namespace std;
class Geometry
{
protected:

public:
    virtual double getArea()=0;
};
class Rect: public Geometry
{
protected:
    int x;
    int y;
public:
    Rect(int xv,int yv):x(xv),y(yv){}
    double getArea()
    {
        return x*y;
    }
};
class Circle: public Geometry
{
protected:
    int r;
public:
    Circle(int rv):r(rv){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
   static void computerTotalArea(Geometry** t,int n)
   {
        double area=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<area;
   }
};
main()
{
    int t,type,x,y,r,n;
    cin>>t;
    n=t;
    Geometry **p=new Geometry*[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            *p=new Rect(x,y);
            p++;
        }
        else
        {
            cin>>r;
            *p=new Circle(r);
            p++;
        }
    }
    TotalArea tt;
    tt.computerTotalArea(p,n);


}

------------------------------------------------------
szuzy:Problem1119:答案错误
#include<iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string n,string _acc,int _ba)
    {
        name = n;
        account = _acc;
        balance = _ba;
    }
    virtual void deposit(int num)
    {
        balance+=num;
    }
    virtual void withdraw(int num)
    {
        if(num>balance)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance-=num;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    int limit;
public:
    BasePlus(){}
    BasePlus(string n,string _acc,int _ba,int _li)
    {
        name = n;
        account = _acc;
        balance = _ba;
        limit = _li;
    }
    /*void deposit(int n)
    {
        if(balance==0)
        {
            limit+=n;
            if(limit>5000)
            {
                balance+=(limit-5000);
                limit = 5000;
            }
        }
        else
        {
            balance+=n;
        }
    }*/
    void withdraw(int m)
    {
        if(m+balance>limit)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance-=m;
            int tmp = balance;
            if(balance<0)
            {
                balance = 0;
                limit += tmp;
            }
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" "<<"limit:"<<limit<<endl;
    }
};
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        BaseAccount *b;
        string name,_acc;
        int ba,num1,num2,num3,num4,s;
        cin>>name>>_acc>>ba;
        if(_acc[1]=='A')
        {
            BaseAccount bacc(name,_acc,ba);
            b = &bacc;
            cin>>num1;
            b->deposit(num1);
            cin>>num2;
            b->withdraw(num2);
            cin>>num3;
            b->deposit(num3);
            cin>>num4;
            b->withdraw(num4);
            b->display();
        }
        else if(_acc[1]=='P')
        {
            BasePlus bacc2(name,_acc,ba,5000);
            b = &bacc2;
            cin>>num1;
            b->deposit(num1);
            cin>>num2;
            b->withdraw(num2);
            cin>>num3;
            b->deposit(num3);
            cin>>num4;
            b->withdraw(num4);
            b->display();
        }
    }
}

------------------------------------------------------
2016150202:Problem1120:正确
#include<iostream>
#include<cstring>
using namespace std;
class Animal{
	protected:
		string name;
		int age;
		public: 
		virtual void display()=0;
	    Animal (string n,int a):name(n),age(a){}
		~Animal(){}
	
}; 

class Tiger: public Animal
{	
		public:
			Tiger(string n,int a):Animal(n,a){}
			~Tiger(){}
		   void display()
			{
			cout<<"Hello,I am "<<name<<",AOOO."<<endl;
			} 
			
};

class Dog :public Animal
{
	protected:
		
		public:
			Dog(string n,int a):Animal(n,a){}
			~Dog(){}
			void display()
			{
				cout<<"Hello,I am "<<name<<",WangWang."<<endl;
               
			}	
};
class Duck : public Animal 
{
	protected:

		public:
			
		Duck(string n,int a):Animal(n,a){}
			~Duck(){}
			void display()
			{
				cout<<"Hello,I am "<<name<<",GAGA."<<endl;
			}
};

class Pig : public Animal 
{
	protected:

		public:
			
		Pig(string n,int a):Animal(n,a){}
			~Pig(){}
			void display()
			{
				cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
			}
};


int main()
{
	int t;
	cin>>t;
	Animal *pv;
	
	while(t--)
	{
		string key;
		string name;
		int age;
		
		cin>>key;
	
		if(key=="Tiger")
		{
			
		 cin>>name>>age;
		 Tiger tt(name,age);
		 pv=&tt;
		 pv->display();
		}
		else if(key=="Pig")
		{
		cin>>name>>age;
		Pig pp(name,age);
		pv=&pp;
		pv->display();
		}
		else if(key=="Dog")
		{
			cin>>name>>age;
			Dog dd(name,age);
			pv=&dd;
			pv->display();	
		}
		
		else if(key=="Duck")
		{
			cin>>name>>age;
			Duck k(name,age);
			pv=&k;
			pv->display();	
		}
		else
		{
			
			cin>>name>>age;
			cout<<"There is no "<<key<<" in our Zoo."<<endl; 
		}
		
   }
	return 0;
}



------------------------------------------------------
2018192006:Problem1129:正确
/* Structure for OpenJudge
 * Version 1.2 
 * Created by Sparky. 2019.3.10
 */
#include <iostream>
using std::cin;using std::cout;
using std::cerr;using std::endl;
   
using std::istream;using std::ostream; 
#include <vector>
using std::vector;
#include <string>
using std::string;
#include <algorithm>
using std::sort;
using std::swap;
   
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <climits>
#include <cmath>
/*Add other "#include"s and namespace usings here if needed.*/
#include <iomanip>
   
/*Debugger before Solution*/
//#define DEBUG
//undefine DEBUG if stop debugging.
#ifdef DEBUG
    #include <fstream>
    using std::ifstream;using std::ofstream;
    ifstream input("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\InputTest.txt",ifstream::in);
    ofstream output("C:\\Users\\StarSparky\\Desktop\\Codes\\OpenJudge Structure(Cpp)\\OutputTest.txt",ofstream::out);
    #define cin input
    #define cout output
#endif
   
/*Add Data Structures Here*/
class show{
	public:
		virtual void printCard()=0;
};
class BaseCard:virtual public show{
    public:
        void setCard();
        void depositCard();
        void withdrawCard();
        void printCard();
    protected:
        string cardID;
        string cardName;
        double value;
          
};
class TraCard : public BaseCard,virtual public show{
    public:
        void setTraCard();
        void depositTraCard();
        void withdrawTraCard();
        void printCard();
        void transfer();
    protected:
        double traVal;
};
class GoldCard : public BaseCard,virtual public show{
    public:
        void setGoldCard();
        void depositGoldCard();
        void withdrawGoldCard();
        void printCard();
    protected:
        double extraVal;
};
/*Add Functions Here*/
void
BaseCard::setCard(){
    cin >> this->cardID >> this->cardName >> this->value;
}
void
TraCard::setTraCard(){
    this->setCard();
    cin >> this->traVal;
}
void
GoldCard::setGoldCard(){
    this->setCard();
    cin >> this->extraVal;
}
  
void
BaseCard::depositCard(){
    double m;
    cin >> m;
    if(m<=0)
        return;
    this->value+=m;
}
void
TraCard::depositTraCard(){
    this->depositCard();
}
void
GoldCard::depositGoldCard(){
    this->depositCard();
}
  
void
BaseCard::withdrawCard(){
    double m;
    cin >> m; 
    if(m<=0)
        return;
    if(m>this->value)
        return;
    this->value-=m;
}
void
TraCard::withdrawTraCard(){
    this->withdrawCard();
}
void
GoldCard::withdrawGoldCard(){
    double m;
    cin >> m; 
    if(m<=0)
        return;
    else if(m>this->value+this->extraVal)
        return;
    else if(m<=this->value+this->extraVal && m>this->value){
        m-=this->value;
        this->value=0;
        this->extraVal-=m;
    }else{
        this->value-=m;
    }
}
void
BaseCard::printCard(){
    cout << this->cardID << "-" << this->cardName << "-" << this->value << endl;
}
void
TraCard::printCard(){
    cout << this->cardID << "-" << this->cardName << "-" << this->value << "-" << this->traVal << endl; 
}
void
GoldCard::printCard(){
    cout << this->cardID << "-" << this->cardName << "-" << this->value << "-" << this->extraVal << endl; 
}
void
TraCard::transfer(){
    double m;
    cin >> m;
    if(m<=0)
        return;
    if(m>this->value)
        return;
    this->value-=m;
    this->traVal+=m;
}
/*Main Function starts here.*/
int main(){
/*define IF_LOOP_NEEDED here if number of test cases are known.*/
//#define IF_LOOP_NEEDED
#ifdef  IF_LOOP_NEEDED
    int round,rounds;
    cin >> rounds;
    /*Preprocessing Here*/
      
    for(round=1;round<=rounds;++round){
  
    }
  
    /*Final process here.*/
      
#endif
    /*Solve Problems here if there are only one test case.*/
    show* ptr;
    BaseCard A;
    TraCard B;
    GoldCard C;
    A.setCard();
    B.setTraCard();
    C.setGoldCard();
    A.depositCard();
    A.depositCard();
    A.withdrawCard();
    A.withdrawCard();
    ptr=&A; 
    ptr->printCard();
    B.depositTraCard();
    B.withdrawTraCard();
    B.transfer();
    B.transfer();
    ptr=&B;
    ptr->printCard();
    C.depositGoldCard();
    C.withdrawGoldCard();
    C.withdrawGoldCard();
    C.withdrawGoldCard();
    ptr=&C;
    ptr->printCard();
/*Debugger after Solution,close output file.*/
#ifdef DEBUG
    input.close();
    output.close();
#endif
    return 0;
}     
   
------------------------------------------------------
2018152008:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;
class BaseAccount
{
	protected:
		string name,account;
		double balance;
	public:
		BaseAccount(string n,string a,double b); 
		void deposit(double money);
		virtual bool withdraw(double money);
		virtual void display();
		virtual void error();
};
void BaseAccount::error()
{
	cout<<"insufficient"<<endl;
}
BaseAccount::BaseAccount(string n,string a,double b)
{
	name=n;
	account=a;
	balance=b;
}
void BaseAccount::deposit(double money)
{
	balance+=money;
}
bool BaseAccount::withdraw(double money)
{
	if(balance>=money)
	{
		balance-=money;
		return true;
	}
	return false;
}
void BaseAccount::display()
{
	cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
}
class BasePlus:public BaseAccount
{
	protected:
		double limit;
		double limit_sum;
	public:
		BasePlus(string n,string a,double b);
		bool withdraw(double money);
		void display();
		void error();
};
void BasePlus::error()
{
	cout<<"insufficient"<<endl;
}
BasePlus::BasePlus(string n,string a,double b):BaseAccount(n,a,b),limit(5000),limit_sum(0)
{
	;
} 
bool BasePlus::withdraw(double money)
{
	if(balance+limit-limit_sum>=money)
	{
		balance-=money;
		if(balance<0)
		{
			limit_sum-=balance;
			limit+=balance;
			balance=0;
		}
		return true;
	}		
	return false;
}
void BasePlus::display()
{
	cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
}
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		BaseAccount *T;
		string n,p;
		double bal;
		cin>>n>>p>>bal;
		if(p[1]=='A')
			T=new BaseAccount(n,p,bal);
		else
			T=new BasePlus(n,p,bal);
		double x1,x2,x3,x4;
		cin>>x1>>x2>>x3>>x4;
		T->deposit(x1);
		if(!T->withdraw(x2))
		{
			T->error();
		}
		T->deposit(x3);
		if(!T->withdraw(x4))
		{
			T->error();
		}
		T->display();
		delete T;
	}
}
------------------------------------------------------
2018152100:Problem1234:答案错误
#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
using namespace std;

int pow(int a)
{
    if (a==0)
        return 1;
    else return 10*pow(a-1);
}

class Group
{
protected:
public:
    Group(){}
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    GroupA(){}
    virtual int add(int x, int y)
    {
        return x+y;
    }
    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    GroupB(){}
    virtual int add(int x, int y)
    {
        return x+y;
    }
    virtual int sub(int x, int y)
    {
        int ans=0,i=0;
        while (x!=0)
        {
            int m;
            if (y!=0)
            {
                if (x%10<y%10)
                {
                    m=x%10-y%10+10;
                }
                else m=x%10-y%10;
                y/=10;

            }
            else m=x%10;
            ans+=m*pow(i);
            i++;
            x/=10;
        }
        return ans;
    }
};

class GroupC:public Group
{
public:
    GroupC(){}
    virtual int add(int x, int y)
    {
        int ans=0,i=0;
        while (x!=0)
        {
            int m;
            m=(x%10+y%10)%10;
            ans+=m*pow(i++);
            x/=10;y/=10;
        }
        return ans;
    }
    virtual int sub(int x, int y)
    {
        int ans=0,i=0;
        while (x!=0)
        {
            int m;
            if (y!=0)
            {
                if (x%10<y%10)
                {
                    m=x%10*10-y%10;
                }
                y/=10;
            }
            else m=x%10;
            ans+=m*pow(i);
            i++;
            x/=10;
        }
        return ans;
    }
};

int main()
{
    int t,m;
    cin >> t;
    Group *p;
    int x,y;
    char ch;
    while (t--)
    {
        cin >> m;
        cin >> x >> ch >> y;
        if (x<y)swap(x,y);
        if (m==1){GroupA aa;p=&aa;}
        else if (m==2) {GroupB bb;p=&bb;}
        else {GroupC cc;p=&cc;}
        if (ch=='+')
            cout << p->add(x,y) << endl;
        else cout << p->sub(x,y) << endl;

    }
    return 0;
}

------------------------------------------------------
2018151092:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;

class BaseAccount
{
	protected:
		string name;
		string account;
		float balance;
	public:
		BaseAccount()
		{
		}
		
		BaseAccount(string n,string a,float b)
		{
			name=n;
			account=a;
			balance=b;
		}
		
		virtual void deposit(float add)
		{
			balance+=add;
		}
		
		virtual void withdraw(float diff)
		{
			if(balance>=diff)
			{
				balance-=diff;
			}
			
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		
		virtual void display()
		{
			cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
		}
		
		~BaseAccount()
		{
		}
};

class BasePlus:public BaseAccount
{
	protected:
		float limit;
		float limit_sum;
	public:
		BasePlus()
		{
		}
		
		BasePlus(string n,string a,float b):BaseAccount(n,a,b)
		{
			limit=5000;
			limit_sum=0;
		}
		
		virtual void deposit(float add)
		{
			balance+=add;
		}
		
		virtual void withdraw(float diff)
		{
			if(diff<=balance+limit-limit_sum)
			{
				if(diff<=balance)
				{
					balance-=diff;
				}
				
				else
				{
					diff-=balance;
					balance=0;
					limit_sum=diff;
					limit-=limit_sum;
				}
			}
			
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		
		virtual void display()
		{
			cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" limit:"<<limit<<endl;
		}
		
		~BasePlus()
		{
		}
};

int main()
{
	string name;
	string account;
	float balance;
	float dep;
	float with;
	int t;
	int i;
	
	cin>>t;
	
	BaseAccount *Ace[t];
	
	for(i=0;i<t;i++)
	{
		cin>>name>>account>>balance;
		
		if(account[1]=='A')
		{
			Ace[i]=new BaseAccount(name,account,balance);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			Ace[i]->display();
		}

		if(account[1]=='P')
		{
			Ace[i]=new BasePlus(name,account,balance);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			Ace[i]->display();
		}
	}
	return 0;
}
	
------------------------------------------------------
2018191214:Problem1235:答案错误
#include<iostream>
#include<cstring>
#include<cmath>
#include<iomanip>
using namespace std;
class Geometry
{
public:
	virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
	double y,x;
public:
	Rect(){}
	Rect(double x1,double y1):x(x1),y(y1){}
	double getArea()
	{
		return x*y;
	}
};
class Circle:public Geometry
{
protected:
	double r;
public:
	Circle(){}
	Circle(double R):r(R){}
	double getArea()
	{
		return r*r*3.14;
	}
};
class TotalArea
{
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		double max=0;
		for(int i=0;i<n;i++)
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
			cout<<"最大面积="<<setprecision(5)<<max<<endl;
	}
};
int main()
{
	int t,kind;
	double x,y,r;
	cin>>t;
	Geometry **p=new Geometry *[t];
	TotalArea TA;
	for(int i=0;i<t;i++)
	{
		cin>>kind;
		if(kind==1)
		{
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		else if(kind==2)
		{
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TA.computerTotalArea(p,t);
	return 0;
}

------------------------------------------------------
2018152100:Problem1234:正确
#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
using namespace std;

int pow(int a)
{
    if (a==0)
        return 1;
    else return 10*pow(a-1);
}

class Group
{
protected:
public:
    Group(){}
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    GroupA(){}
    virtual int add(int x, int y)
    {
        return x+y;
    }
    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    GroupB(){}
    virtual int add(int x, int y)
    {
        return x+y;
    }
    virtual int sub(int x, int y)
    {
        int ans=0,i=0;
        while (x!=0)
        {
            int m;
            if (y!=0)
            {
                if (x%10<y%10)
                {
                    m=x%10-y%10+10;
                }
                else m=x%10-y%10;
                y/=10;

            }
            else m=x%10;
            ans+=m*pow(i);
            i++;
            x/=10;
        }
        return ans;
    }
};

class GroupC:public Group
{
public:
    GroupC(){}
    virtual int add(int x, int y)
    {
        int ans=0,i=0;
        while (x!=0)
        {
            int m;
            m=(x%10+y%10)%10;
            ans+=m*pow(i++);
            x/=10;y/=10;
        }
        return ans;
    }
    virtual int sub(int x, int y)
    {
        int ans=0,i=0;
        while (x!=0)
        {
            int m;
            if (y!=0)
            {
                if (x%10<y%10)
                {
                    m=x%10-y%10+10;
                }
                else m=x%10-y%10;
                y/=10;

            }
            else m=x%10;
            ans+=m*pow(i);
            i++;
            x/=10;
        }
        return ans;
    }
};

int main()
{
    int t,m;
    cin >> t;
    Group *p;
    int x,y;
    char ch;
    while (t--)
    {
        cin >> m;
        cin >> x >> ch >> y;
        if (x<y)swap(x,y);
        if (m==1){GroupA aa;p=&aa;}
        else if (m==2) {GroupB bb;p=&bb;}
        else {GroupC cc;p=&cc;}
        if (ch=='+')
            cout << p->add(x,y) << endl;
        else cout << p->sub(x,y) << endl;

    }
    return 0;
}

------------------------------------------------------
2018151092:Problem1119:运行错误
#include<iostream>
#include<cstring>
using namespace std;

class BaseAccount
{
	protected:
		string name;
		string account;
		float balance;
	public:
		BaseAccount()
		{
		}
		
		BaseAccount(string n,string a,float b)
		{
			name=n;
			account=a;
			balance=b;
		}
		
		virtual void deposit(float add)
		{
			balance+=add;
		}
		
		virtual void withdraw(float diff)
		{
			if(balance>=diff)
			{
				balance-=diff;
			}
			
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		
		virtual void display()
		{
			cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
		}
		
		~BaseAccount()
		{
		}
};

class BasePlus:public BaseAccount
{
	protected:
		float limit;
		float limit_sum;
	public:
		BasePlus()
		{
		}
		
		BasePlus(string n,string a,float b):BaseAccount(n,a,b)
		{
			limit=5000;
			limit_sum=0;
		}
		
		virtual void deposit(float add)
		{
			balance+=add;
		}
		
		virtual void withdraw(float diff)
		{
			if(diff<=balance+limit-limit_sum)
			{
				if(diff<=balance)
				{
					balance-=diff;
				}
				
				else
				{
					diff-=balance;
					balance=0;
					limit_sum=diff;
					limit-=limit_sum;
				}
			}
			
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		
		virtual void display()
		{
			cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" limit:"<<limit<<endl;
		}
		
		~BasePlus()
		{
		}
};

int main()
{
	string name;
	string account;
	float balance;
	float dep;
	float with;
	int t;
	int i;
	
	cin>>t;
	
	BaseAccount *Ace[t];
	
	for(i=0;i<t;i++)
	{
		cin>>name>>account>>balance;
		
		if(account[1]=='A')
		{
			Ace[i]=new BaseAccount(name,account,balance);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			Ace[i]->display();
		}

		if(account[1]=='P')
		{
			Ace[i]=new BasePlus(name,account,balance);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			Ace[i]->display();
		}
	}
	
	delete []Ace;
	return 0;
}
	
------------------------------------------------------
2018151014:Problem1234:答案错误
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <string>

using namespace std;

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
protected:
	
};

class GroupA : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
};

class GroupC : public Group {
public:
	int add(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' + y_str[i] - '0' >= 10) {
				x_str[i] = x_str[i] - '0' + y_str[i] - 10;
			}
			else {
				x_str[i] = x_str[i] - '0' + y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
	
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		int id;
		string eqn;
		Group *g;
		
		cin >> id >> eqn;
		
		if (id == 1) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (id == 2) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (id == 3) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				cout << x_str << ' ' << y_str << endl;
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->sub(x, y) << endl;
			}
		}
	}
	
	return 0;
}
------------------------------------------------------
2018151092:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;

class BaseAccount
{
	protected:
		string name;
		string account;
		float balance;
	public:
		BaseAccount()
		{
		}
		
		BaseAccount(string n,string a,float b)
		{
			name=n;
			account=a;
			balance=b;
		}
		
		virtual void deposit(float add)
		{
			balance+=add;
		}
		
		virtual void withdraw(float diff)
		{
			if(balance>=diff)
			{
				balance-=diff;
			}
			
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		
		virtual void display()
		{
			cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
		}
		
		~BaseAccount()
		{
		}
};

class BasePlus:public BaseAccount
{
	protected:
		float limit;
		float limit_sum;
	public:
		BasePlus()
		{
		}
		
		BasePlus(string n,string a,float b):BaseAccount(n,a,b)
		{
			limit=5000;
			limit_sum=0;
		}
		
		virtual void deposit(float add)
		{
			balance+=add;
		}
		
		virtual void withdraw(float diff)
		{
			if(diff<=balance+limit-limit_sum)
			{
				if(diff<=balance)
				{
					balance-=diff;
				}
				
				else
				{
					diff-=balance;
					balance=0;
					limit_sum=diff;
					limit-=limit_sum;
				}
			}
			
			else
			{
				cout<<"insufficient"<<endl;
			}
		}
		
		virtual void display()
		{
			cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" limit:"<<limit<<endl;
		}
		
		~BasePlus()
		{
		}
};

int main()
{
	string name;
	string account;
	float balance;
	float dep;
	float with;
	int t;
	int i;
	
	cin>>t;
	
	BaseAccount *Ace[t];
	
	for(i=0;i<t;i++)
	{
		cin>>name>>account>>balance;
		
		if(account[1]=='A')
		{
			Ace[i]=new BaseAccount(name,account,balance);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			Ace[i]->display();
		}

		if(account[1]=='P')
		{
			Ace[i]=new BasePlus(name,account,balance);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			cin>>dep;
			Ace[i]->deposit(dep);
			cin>>with;
			Ace[i]->withdraw(with);
			Ace[i]->display();
		}
	}

	return 0;
}
	
------------------------------------------------------
2018182052:Problem1129:正确
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Card
{
protected:
    string ID;
    char CName;
    int balance;
public:
    Card() {}
    Card(const string& i,char n,int b):ID(i),CName(n),balance(b) {}
    void initial(const string& i,char n,int b)
    {
        ID=i;
        CName=n;
        balance=b;
    }
    int save(int am)
    {
        if(am<=0)
            return -1;
        balance+=am;
        return 1;
    }
    int take(int am)
    {
        if(am>balance||am<=0)
            return -1;
        balance-=am;
        return 1;
    }
    virtual void info()const
    {
        cout<<ID<<"-"<<CName<<"-"<<balance<<endl;
    }
};
class Tcard:public Card
{
protected:
    int Tcounter;
public:
    Tcard() {}
    Tcard(const string& i,char n,int b,int c):Card(i,n,b),Tcounter(c) {}
    int transfer(int am)
    {
        if(am<=0||am>balance)
            return -1;
        balance-=am;
        Tcounter+=am;
        return 1;
    }
    virtual void info()const
    {
        cout<<ID<<"-"<<CName<<"-"<<balance<<"-"<<Tcounter<<endl;
    }
};
class VIPcard:public Card
{
protected:
    int Credit;
public:
    VIPcard() {}
    VIPcard(const string& i,char n,int b,int c):Card(i,n,b),Credit(c) {}
    int over(int am)
    {
        if(am<=balance||am>balance+Credit)
            return -1;
        am-=balance;
        balance=0;
        Credit-=am;
    }
    virtual void info()const
    {
        cout<<ID<<"-"<<CName<<"-"<<balance<<"-"<<Credit<<endl;
    }

};
void show(Card& obj)
{
    obj.info();
}
int main()
{
//    freopen(ADDRESS);
    string ID;
    char ch(0);
    int balance(0);
    int other(0);
    cin>>ID>>ch>>balance;
    Card a(ID,ch,balance);
    cin>>ID>>ch>>balance>>other;
    Tcard b(ID,ch,balance,other);
    cin>>ID>>ch>>balance>>other;
    VIPcard c(ID,ch,balance,other);

    int d[4];
    cin>>d[0]>>d[1]>>d[2]>>d[3];
    a.save(d[0]);
    a.save(d[1]);
    a.take(d[2]);
    a.take(d[3]);
    cin>>d[0]>>d[1]>>d[2]>>d[3];
    b.save(d[0]);
    b.take(d[1]);
    b.transfer(d[2]);
    b.transfer(d[3]);
    cin>>d[0]>>d[1]>>d[2]>>d[3];
    c.save(d[0]);
    c.take(d[1]);
    c.over(d[2]);
    c.over(d[3]);

    show(a);
    show(b);
    show(c);

    return 0;
}

------------------------------------------------------
2018151027:Problem1235:答案错误
#include <iostream>
#include<cstring>
using namespace std;
class Geometry
{
protected:

public:
    virtual double getArea()=0;
};
class Rect: public Geometry
{
protected:
    int x;
    int y;
public:
    Rect(int xv,int yv):x(xv),y(yv){}
    double getArea()
    {
        return x*y;
    }
};
class Circle: public Geometry
{
protected:
    int r;
public:
    Circle(int rv):r(rv){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
   static void computerTotalArea(Geometry *t[],int n)
   {
        double area=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<area;
   }
};
main()
{
    int t,type,x,y,r,n,i=0;
    cin>>t;
    n=t;
    Geometry *p[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            p[i]=new Rect(x,y);
            i++;
        }
        else
        {
            cin>>r;
            p[i]=new Circle(r);
            i++;
        }
    }
    TotalArea tt;
    tt.computerTotalArea(p,n);
    

}

------------------------------------------------------
2018152100:Problem1129:正确
#include <iostream>
 
using namespace std;
 
//普通卡类定义
class NCard
{
public:
    int ID;
    char CName;
    unsigned int Counter;
    NCard();
    void initial(int id,char c,unsigned int countt);
    int save(int w);
    int take(int w);
    virtual void info();
 
};
 
//普通卡类实现
NCard::NCard(){}
void NCard::initial(int id,char c,unsigned int countt)
{
    ID=id;
    CName=c;
    Counter=countt;
}
 
int NCard::save(int w)
{
    if (w<=0) return -1;
    Counter+=w;
    return 1;
}
 
int NCard::take(int w)
{
    if (w<=0||w>Counter) return -1;
    Counter-=w;
    return 1;
}
 
void NCard::info()
{
    cout << ID << "-" << CName << "-" << Counter << endl;
}
 
//交通卡类定义
class Tcard:public NCard
{
    int Tcounter;
public:
    Tcard();
    void initial(int id,char c,unsigned int countt,int tcount);
    int transfer(int w);
    void info();
};
 
//交通卡类实现
Tcard::Tcard(){}
void Tcard::initial(int id,char c,unsigned int countt,int tcount)
{
    ID=id;
    CName=c;
    Counter=countt;
    Tcounter=tcount;
}
 
int Tcard::transfer(int w)
{
    if (take(w)==1)
    {
        Tcounter+=w;
        return 1;
    }
    else return -1;
}
void Tcard::info()
{
    cout << ID << "-" << CName << "-" << Counter << "-" << Tcounter << endl;
}
 
//贵宾卡类定义
class Vcard:public NCard
{
    int Credit;
public:
    Vcard();
    void initial(int id,char c,unsigned int countt,int cred);
    int over(int w);
    void info();
};
 
//贵宾卡类实现
Vcard::Vcard(){}
void Vcard::initial(int id,char c,unsigned int countt,int cred)
{
    ID=id;
    CName=c;
    Counter=countt;
    Credit=cred;
}
int Vcard::over(int w)
{
    if (take(w)==-1)
    {
        int m=Counter;
        if (w-m>Credit)
            return -1;
        else
        {
            take(m);
            Credit-=(w-m);
            return 1;
        }
    }
    else return -1;
}
 
void Vcard::info()
{
    cout << ID << "-" << CName << "-" << Counter << "-" << Credit << endl;
}
 
//多态函数
void show(NCard &obj)
{
    obj.info();
}
 
//主函数
int main()
{
    int id,t,cred;
    int w1,w2,w3,w4;
    unsigned int countt;
    char q;
    NCard a;
    Tcard b;
    Vcard c;
 
    cin >> id >> q >> countt;
    a.initial(id,q,countt);
 
    cin >> id >> q >> countt >> t;
    b.initial(id,q,countt,t);
 
    cin >> id >> q >> countt >> cred;
    c.initial(id,q,countt,cred);
 
    cin >> w1 >> w2 >> w3 >> w4;
    a.save(w1);a.save(w2);
    a.take(w3);a.take(w4);
 
    cin >> w1 >> w2 >> w3 >> w4;
    b.save(w1);b.take(w2);
    b.transfer(w3);b.transfer(w4);
 
    cin >> w1 >> w2 >> w3 >> w4;
    c.save(w1);c.take(w2);
    c.over(w3);c.over(w4);
 
    show(a);
    show(b);
    show(c);
 
    return 0;
}
------------------------------------------------------
2018151014:Problem1234:答案错误
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <string>

using namespace std;

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
protected:
	
};

class GroupA : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
};

class GroupC : public Group {
public:
	int add(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' + y_str[i] - '0' >= 10) {
				x_str[i] = x_str[i] - '0' + y_str[i] - 10;
			}
			else {
				x_str[i] = x_str[i] - '0' + y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
	
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		int id;
		string eqn;
		Group *g;
		
		cin >> id >> eqn;
		
		if (id == 1) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (id == 2) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (id == 3) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->sub(x, y) << endl;
			}
		}
	}
	
	return 0;
}
------------------------------------------------------
2018152051:Problem1119:正确
#include<iostream>
using namespace std;
class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(){}
	BaseAccount(string n,string _acc,int _ba)
	{
		name = n;
		account = _acc;
		balance = _ba;
	}
	virtual void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(num>balance)
		{
			cout<<"insufficient"<<endl;
		}
		else
		{
			balance-=num;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
	}
};
class BasePlus:public BaseAccount
{
	int limit;
public:
	BasePlus(){}
	BasePlus(string n,string _acc,int _ba,int _li)
	{
		name = n;
		account = _acc;
		balance = _ba;
		limit = _li;
	}
	/*void deposit(int n)
	{
		if(balance==0)
		{
			limit+=n;
			if(limit>5000)
			{
				balance+=(limit-5000);
				limit = 5000;
			}
		}
		else
		{
			balance+=n;
		}
	}*/
	void withdraw(int m)
	{
		if(m>balance+limit)
		{
			cout<<"insufficient"<<endl;
		}
		else
		{
			balance-=m;
			int tmp = balance;
			if(balance<0)
			{
				balance = 0;
				limit += tmp;
			}
		}
	}
	void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" "<<"limit:"<<limit<<endl;
	}
};
int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		BaseAccount *b;
		string name,_acc;
		int ba,num1,num2,num3,num4,s;
		cin>>name>>_acc>>ba;
		if(_acc[1]=='A')
		{
			BaseAccount bacc(name,_acc,ba);
			b = &bacc;
			cin>>num1;
			b->deposit(num1);
			cin>>num2;
			b->withdraw(num2);
			cin>>num3;
			b->deposit(num3);
			cin>>num4;
			b->withdraw(num4);
			b->display();
		}
		else if(_acc[1]=='P')
		{
			BasePlus bacc2(name,_acc,ba,5000);
			b = &bacc2;
			cin>>num1;
			b->deposit(num1);
			cin>>num2;
			b->withdraw(num2);
			cin>>num3;
			b->deposit(num3);
			cin>>num4;
			b->withdraw(num4);
			b->display();
		}	
	}
}
------------------------------------------------------
2018041051:Problem1234:正确
#include<iostream>
#include<string>
#include<cstring>

using namespace std;

class Group
{

public:

	virtual int add(int x, int y)=0;

	virtual int sub(int x, int y)=0;

};

class GroupA:public Group{
public:
	int add(int x, int y)
	{
		return x+y;
	}
	int sub(int x, int y)
	{
		return x-y;
	}
};

class GroupB:public Group{
public:
	int add(int x, int y)
	{
		return x+y;
	}
	int sub(int x, int y)
	{
		int result=0,flag1=0,flag2=0;
		result=x-y;
		if(x%10<y%10)
		{
			flag1=1;
		}
		if(x%100<y%100)
		{
			flag2=1;
		}
		result=result+flag1*10+flag2*100;
	}
};

class GroupC:public Group{
public:
	int add(int x, int y)
	{
		int result=0,flag1=0,flag2=0;
		result=x+y;
		if((x%10+y%10)>=10)
		{
			flag1=1;
		}
		if((x%100+y%100)>=100)
		{
			flag2=1;
		}
		result=result-flag1*10-flag2*100;
	}
	int sub(int x, int y)
	{
		int result=0,flag1=0,flag2=0;
		result=x-y;
		if(x%10<y%10)
		{
			flag1=1;
		}
		if(x%100<y%100)
		{
			flag2=1;
		}
		result=result+flag1*10+flag2*100;
	}	
};

int main()
{
    Group *G;
    int t;
    cin>>t;

    while(t--)
    {
        int n,num1,num2;
        char c;
        cin>>n>>num1>>c>>num2;
        if(n==1)
            G=new GroupA; 
        else if(n==2)
        	G=new GroupB;
        else
        	G=new GroupC;
        if(c=='+')
        	cout<<G->add(num1,num2)<<endl;
        else
        	cout<<G->sub(num1,num2)<<endl;
    }
	delete []G;
	
    return 0;
}

------------------------------------------------------
2016071031:Problem1119:正确
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class BaseAccount {
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount() {}
    BaseAccount(string name_, string account_, int balance_)
        :name(name_), account(account_), balance(balance_) {}
    virtual void deposit(int amount) {
        balance += amount;
    }

    virtual void withdraw(int amount) {
        if (amount > balance)
            cout<< "insufficient" <<endl;
        else
            balance -= amount;
    }
    virtual void display() {
        cout<< name << " " << account << " Balance:" << balance <<endl;
    }
};

class BasePlus: public BaseAccount {
    int limit;
    int limit_sum;
public:
    BasePlus() {
        limit = 5000;
        limit_sum = 0;
    }
    BasePlus(string name_, string account_, int balance_)
            : BaseAccount(name_, account_, balance_) {
                limit = 5000;
                limit_sum = 0;
            }
    void deposit(int amount) {
    	if (limit_sum > 0) {
    		if (limit_sum >= amount) {
    			limit_sum -= amount;
			} else {
				balance += amount - limit_sum;
				limit_sum = 0;
			}
		} else {
		    balance += amount;
		}
    }

    void withdraw(int amount) {
        if (amount > balance + limit) {
            cout<< "insufficient" <<endl;
        }else if (amount > balance) {
        	limit_sum += amount - balance;
            balance = 0;
        } else {
            balance -= amount;
        }

    }
    void display() {
        cout<< name << " " << account << " Balance:" << balance;
        cout<< " limit:" << limit - limit_sum <<endl;
    }
};


int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, balance, o1, o2, o3, o4;
    string name, account;

    BaseAccount *b;
    cin>>t;
    while (t--) {
        cin>>name>>account>>balance;
        if(account.find('A') != -1) {
            b = new BaseAccount(name, account, balance);
        } else {
            b = new BasePlus(name, account, balance);
        }
        cin>>o1>>o2>>o3>>o4;

        b->deposit(o1);
        b->withdraw(o2);
        b->deposit(o3);
        b->withdraw(o4);
        b->display();

    }
    return 0;
}


------------------------------------------------------
2018152035:Problem1234:正确
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int a,b,sum=0,i=0,num;
        while(x||y)
        {
            a=x%10;
            b=y%10;
            if(a<b)
            {
                num=a+10-b;
            }
            else
            {
                num=a-b;
            }
            int ii;
            ii=i;
            while(ii--)
            {
                num=10*num;
            }
            i++;
            sum+=num;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int a,b,sum=0,i=0,num;
        while(x||y)
        {
            a=x%10;
            b=y%10;
            if(a+b>=10)
            {
                num=a+b-10;
            }
            else
            {
                num=a+b;
            }
            int ii;
            ii=i;
            while(ii--)
            {
                num=10*num;
            }
            i++;
            sum+=num;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
    int sub(int x, int y)
    {
        int a,b,sum=0,i=0,num;
        while(x||y)
        {
            a=x%10;
            b=y%10;
            if(a<b)
            {
                num=a+10-b;
            }
            else
            {
                num=a-b;
            }
            int ii;
            ii=i;
            while(ii--)
            {
                num=10*num;
            }
            i++;
            sum+=num;
            x=x/10;
            y=y/10;
        }
        return sum;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int T;
    cin>>T;
    int t,x,y;
    char type;
    Group *p;
    while(T--)
    {
        cin>>t>>x>>type>>y;
        if(t==1)
        {
            GroupA a;
            p=&a;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(t==2)
        {
            GroupB b;
            p=&b;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(t==3)
        {
            GroupC c;
            p=&c;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2018192013:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rect(a,b);
            t[i]=&rect;
        }
        else if(type==2)
        {
            cin>>r;
            Circle c(r);
            t[i]=&c;
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2016150076:Problem1232:编译错误
#include<iostream>
using namespace std;

class Vehicle

{ protected:

string no;
int charge;


public:
Vehicle(string n):no(n){
}

virtual void display()=0;//应收费用
~Vehicle(){
}

};

class Car:public Vehicle
{
	private:
			int number,weight;
	public:
			Car(string n,int nu,int w):Vehicle(n),number(nu),weight(w){}
			void display()
			{
				charge=number*8+weight*2;
				cout<<no<<" "<<charge<<endl;	
			}
			~Car(){}	
	
};

class Truck:public Vehicle
{
	
		private:
				int weight;
		public:
			Truck(string n,int w):Vehicle(n),weight(w){}
			void display()
			{
				charge=weight*5;
				cout<<no<<" "<<charge<<endl;
				
			}
			~Truck(){}
	
};

class Bus:public Vehicle
{
	
		private:
			int number;
		public:
			Bus(string n,int nu):Vehicle(n),number(nu){}
			void display()
			{
				charge=number*3;
				cout<<no<<" "<<charge<<endl;
			}
			~Bus(){}
};

int main()
{
	int no,number,weight,type,t;
	Vehicle *pv;
	
	cin>>t;
	while(t--)
	{
		cin>>type;
		if(type==1)
		{
			cin>>no>>number>>weight;
			Car a(no,number,weight);
			pv=&a;
			pv->display();
			
		}
		
		if(type==2)
		{
			cin>>no>>weight;
			Truck b(no,weight);
			pv=&b;
			pv->display();
			
		}
		
		if(type==3)
		{
			cin>>no>>number;
			Bus c(no,number);
			pv=&c;
			pv->display();
			
		}
	}
	
	return 0;
	
}
------------------------------------------------------
2018192030:Problem1120:运行错误
#include <iostream>
#include <cstring>
using namespace std;
class Animal
{
protected:
    char name[16];
    int age;
public:
    Animal(char *n,int a):age(a)
    {
        strcpy(name,n);
    }
    virtual void Speak(){}
};
class Tiger:public Animal
{
public:
    Tiger(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int a,t;
    char n[16];
    string kind;
    Animal *p;
    cin>>t;
    while(t--)
    {
        cin>>kind>>n>>a;
        if(kind=="Tiger")
        {
            Tiger tiger(n,a);
            p=&tiger;
        }
        else if(kind=="Dog")
        {
            Dog dog(n,a);
            p=&dog;
        }
        else if(kind=="Duck")
        {
            Duck duck(n,a);
            p=&duck;
        }
        else if(kind=="Pig")
        {
            Pig pig(n,a);
            p=&pig;
        }
        p->Speak();
    }
    return 0;
}
------------------------------------------------------
2018152044:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
    GroupA()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=x-y;
        return ressub;
    }
};
class GroupB:public Group
{
public:
    GroupB()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};
class GroupC:public Group
{
public:
    GroupC()
    {
    }
    int add(int x,int y)
    {
        int resadd=0;
        int add[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        if(m>n)
            n=m;
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            add[i]=(savex[i]+savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            resadd+=add[i]*pow(10,n-1-i);
        }
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};

int main()
{
    int n;
    cin>>n;
    Group *s[1000];
    for(int i=0;i<n;i++)
    {
        int type;
        cin>>type;
        int x,y;
        char op;
        cin>>x>>op>>y;
        if(type==1)
        {
            s[i]=new GroupA();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            s[i]=new GroupB();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            s[i]=new GroupC();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2017182103:Problem1235:运行错误
#include <iostream>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    int length,width;
public:
    Rect(int l,int w):length(l),width(w) {}
    virtual double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    int radius;
public:
    Circle(int r):radius(r) {}
    virtual double getArea()
    {
        return 3.14*radius*radius;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double *sum = new double[n];
        for(int i=0; i<n; i++)
        {
            sum[i] = t[i]->getArea();
        }
        double max = sum[0];
        for(int i=0; i<n; i++)
        {
            if(sum[i]>max)
                max = sum[i];
        }
        cout<<"最大面积="<<max<<endl;
    }
};

int main()
{
    int n;
    cin>>n;

    Geometry **t = new Geometry*[n];

    for(int i=0; i<n; i++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            int l,w;
            cin>>l>>w;
            Rect rect(l,w);
            t[i] = &rect;
        }
        else
        {
            int r;
            cin>>r;
            Circle c(r);
            t[i] = &c;
        }
    }

    TotalArea ta;
    ta.computerTotalArea(t,n);

    for(int i=0; i<n; i++)
    {
        delete []t[i];
    }
    delete t;
    return 0;
}

------------------------------------------------------
2018151027:Problem1235:正确
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
protected:

public:
    virtual double getArea()=0;
};
class Rect: public Geometry
{
protected:
    int x;
    int y;
public:
    Rect(int xv,int yv):x(xv),y(yv){}
    double getArea()
    {
        return x*y;
    }
};
class Circle: public Geometry
{
protected:
    int r;
public:
    Circle(int rv):r(rv){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
   static void computerTotalArea(Geometry *t[],int n)
   {
        double area=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<area;
   }
};
main()
{
    int t,type,x,y,r,n,i=0;
    cin>>t;
    n=t;
    Geometry *p[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            p[i]=new Rect(x,y);
            i++;
        }
        else
        {
            cin>>r;
            p[i]=new Circle(r);
            i++;
        }
    }
    TotalArea tt;
    tt.computerTotalArea(p,n);


}

------------------------------------------------------
2018192050:Problem1235:运行错误
#include<bits/stdc++.h>
using namespace std;
class Geometry{
    public:
        Geometry(){
        }
        ~Geometry(){
        }
        virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    protected:
        int x,y;
    public:
        Rect(){
        }
        Rect(int a,int b){
            x=a;
            y=b;
        }
        ~Rect(){
        }  
        double getArea(){
        	return x*y;
		}
};
class Circle:public Geometry
{
    protected:
        int r;
    public:
        Circle(){
        }
        Circle(int a){
            r=a;
        }
        ~Circle(){
        }
        double getArea(){
        	return r*r*3.14;
		}
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n)
   {
   		double max=0;
   		for(int i=0;i<n;i++)
   		{
   			if(t[i]->getArea()>max)
   				max=t[i]->getArea();
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max;
   }
};
int main(){
	int t,n;
	int x,y,r;
	cin>>t;
	Geometry **p;
	p=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		cin>>n;
		if(n==1)
		{
			cin>>x>>y;
			Rect a(x,y);
			p[i]=&a;
		}
		if(n==2)
		{
			cin>>r;
			Circle a(r);
			p[i]=&a;
		}
	}
	TotalArea a;
	a.computerTotalArea(p,t);
}
------------------------------------------------------
2017182103:Problem1235:运行错误
#include <iostream>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    int length,width;
public:
    Rect(int l,int w):length(l),width(w) {}
    virtual double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    int radius;
public:
    Circle(int r):radius(r) {}
    virtual double getArea()
    {
        return 3.14*radius*radius;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double *sum = new double[n];
        for(int i=0; i<n; i++)
        {
            sum[i] = t[i]->getArea();
        }
        double max = sum[0];
        for(int i=0; i<n; i++)
        {
            if(sum[i]>max)
                max = sum[i];
        }
        cout<<"最大面积="<<max<<endl;

        delete []sum;
    }
};

int main()
{
    int n;
    cin>>n;

    Geometry **t = new Geometry*[n];

    for(int i=0; i<n; i++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            int l,w;
            cin>>l>>w;
            Rect rect(l,w);
            t[i] = &rect;
        }
        else
        {
            int r;
            cin>>r;
            Circle c(r);
            t[i] = &c;
        }
    }

    TotalArea ta;
    ta.computerTotalArea(t,n);

    for(int i=0; i<n; i++)
    {
        delete []t[i];
    }
    delete t;
    return 0;
}

------------------------------------------------------
2018192030:Problem1120:运行错误
#include <iostream>
#include <cstring>
using namespace std;
class Animal
{
protected:
    char name[100];
    int age;
public:
    Animal(char *n,int a):age(a)
    {
        strcpy(name,n);
    }
    virtual void Speak(){}
};
class Tiger:public Animal
{
public:
    Tiger(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int a,t;
    char n[16];
    string kind;
    Animal *p;
    cin>>t;
    while(t--)
    {
        cin>>kind>>n>>a;
        if(kind=="Tiger")
        {
            Tiger tiger(n,a);
            p=&tiger;
        }
        else if(kind=="Dog")
        {
            Dog dog(n,a);
            p=&dog;
        }
        else if(kind=="Duck")
        {
            Duck duck(n,a);
            p=&duck;
        }
        else if(kind=="Pig")
        {
            Pig pig(n,a);
            p=&pig;
        }
        p->Speak();
    }
    return 0;
}
------------------------------------------------------
2018192024:Problem1235:运行错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
    friend class TotalArea;
};
class Rect:public Geometry
{
    double a,b;
public:
    Rect(double _a,double _b):a(_a),b(_b){}
    virtual double getArea(){return a*b;}
    friend class TotalArea;
};
class Circle:public Geometry
{
    double r;
public:
    Circle(double _r):r(_r){}
    virtual double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxArea=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t;
    t=new Geometry*[n];
    int type;
    double a,b,r;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rec(a,b);
            t[i]=&rec;
        }
        else if(type==2)
        {
            cin>>r;
            Circle cir(r);
            t[i]=&cir;
        }
    }
    TotalArea cta;
    cta.computerTotalArea(t,n);
    delete []*t;
    return 0;
}

------------------------------------------------------
2018192044:Problem1129:正确
#include<iostream>
using namespace std;
class commoncard
{
protected:
    string ID;
    char CName;
    int Counter;
public:
    commoncard(){}
    void initial(string i,char n,int c)
    {
        ID=i;
        CName=n;
        Counter=c;
    }
    bool save(int i)
    {
        if(i<0)
            return false;
        else
        {
            Counter+=i;
            return true;
        }
    }
    bool take(int i)
    {
        if(i<0||i>Counter)
            return false;
        else
        {
            Counter-=i;
            return true;
        }
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
class trafficcard:public commoncard
{
    int Tcounter;
public:
    trafficcard(){}
    void initial(string i,char n,int b,int t)
    {
        ID=i;
        CName=n;
        Counter=b;
        Tcounter=t;
    }
    bool transfer(int i)
    {
        if(i>Counter)
            return false;
        else
        {
            Counter-=i;
            Tcounter+=i;
            return true;
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class supercard:public commoncard
{
    int Credit;
public:
    supercard(){}
    void initial(string i,char n,int b,int c)
    {
        ID=i;
        CName=n;
        Counter=b;
        Credit=c;
    }
    bool over(int i)
    {
        if(i>Counter)
        {
            if(i>(Counter)+Credit)
                return false;
            else
            {
                Counter-=i;
                Credit+=Counter;
                Counter=0;
                return true;
            }
        }
    }
    void info()
    {
         cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(commoncard &obj)
{
    obj.info();
}
int main()
{
    string id;
    char name;
    int balance,a;
    cin>>id>>name>>balance;
    commoncard A;
    A.initial(id,name,balance);
    cin>>id>>name>>balance>>a;
    trafficcard B;
    B.initial(id,name,balance,a);
    cin>>id>>name>>balance>>a;
    supercard C;
    C.initial(id,name,balance,a);
    cin>>a;
    A.save(a);
    cin>>a;
    A.save(a);
    cin>>a;
    A.take(a);
    cin>>a;
    A.take(a);
    cin>>a;
    B.save(a);
    cin>>a;
    B.take(a);
    cin>>a;
    B.transfer(a);
    cin>>a;
    B.transfer(a);
    cin>>a;
    C.save(a);
    cin>>a;
    C.take(a);
    cin>>a;
    C.over(a);
    cin>>a;
    C.over(a);
    show(A);
    show(B);
    show(C);
}

------------------------------------------------------
2017182103:Problem1235:答案错误
#include <iostream>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    int length,width;
public:
    Rect(int l,int w):length(l),width(w) {}
    virtual double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    int radius;
public:
    Circle(int r):radius(r) {}
    virtual double getArea()
    {
        return 3.14*radius*radius;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double *sum = new double[n];
        for(int i=0; i<n; i++)
        {
            sum[i] = t[i]->getArea();
        }
        double max = sum[0];
        for(int i=0; i<n; i++)
        {
            if(sum[i]>max)
                max = sum[i];
        }
        cout<<"最大面积="<<max<<endl;

        delete []sum;
    }
};

int main()
{
    int n;
    cin>>n;

    Geometry **t = new Geometry*[n];

    for(int i=0; i<n; i++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            int l,w;
            cin>>l>>w;
            Rect rect(l,w);
            t[i] = &rect;
        }
        else
        {
            int r;
            cin>>r;
            Circle c(r);
            t[i] = &c;
        }
    }

    TotalArea ta;
    ta.computerTotalArea(t,n);

    delete []t;
    return 0;
}

------------------------------------------------------
2018192030:Problem1120:运行错误
#include <iostream>
#include <cstring>
using namespace std;
class Animal
{
protected:
    char name[100];
    int age;
public:
    Animal(char *n,int a):age(a)
    {
        strcpy(name,n);
    }
    virtual void Speak(){}
};
class Tiger:public Animal
{
public:
    Tiger(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<< name <<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(char *n,int a):Animal(n,a){}
    virtual void Speak()
    {
        cout <<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int a,t;
    char n[100];
    string kind;
    Animal *p;
    cin>>t;
    while(t--)
    {
        cin>>kind>>n>>a;
        if(kind=="Tiger")
        {
            Tiger tiger(n,a);
            p=&tiger;
        }
        else if(kind=="Dog")
        {
            Dog dog(n,a);
            p=&dog;
        }
        else if(kind=="Duck")
        {
            Duck duck(n,a);
            p=&duck;
        }
        else if(kind=="Pig")
        {
            Pig pig(n,a);
            p=&pig;
        }
        p->Speak();
    }
    return 0;
}
------------------------------------------------------
2018151020:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Group
{

public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            sum+=(x_s+10-y_s)%10*pow(10,time);
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
class GroupC:public Group
{
    int add(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            sum+=(x_s+y_s)%10*pow(10,time);
            //cout<<"x_s = "<<x_s<<"  y_s =  "<<y_s<<"  sum=  "<<sum<<endl;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            sum+=(x_s+10-y_s)%10*pow(10,time);
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *P;
        int k,x,y;
        char order;
        cin>>k>>x>>order>>y;
        if(k==1)
        {
            GroupA *A = new GroupA;
            P = A;
        }
        else if(k==2)
        {
            GroupB *B = new GroupB;
            P = B;
        }
        else if(k==3)
        {
            GroupC *C = new GroupC;
            P = C;
        }
        if(order=='+')
            cout<<P->add(x,y)<<endl;
        else if(order=='-')
            cout<<P->sub(x,y)<<endl;
    }
    return 0;
}

------------------------------------------------------
2018151014:Problem1234:答案错误
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <string>

using namespace std;

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
protected:
	
};

class GroupA : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
};

class GroupC : public Group {
public:
	int add(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' + y_str[i] - '0' >= 10) {
				x_str[i] = x_str[i] - '0' + y_str[i] - 10;
			}
			else {
				x_str[i] = x_str[i] - '0' + y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
	
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		int x;
		string eqn;
		Group *g;
		
		cin >> x >> eqn;
		
		if (x == 1) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (x == 2) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (x == 3) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->sub(x, y) << endl;
			}
		}
		delete g;
	}
	
	return 0;
}
------------------------------------------------------
2018192046:Problem1234:答案错误
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int flag=0;
        int sum=0;
        int _x=x,_y=y;
        while(_y!=0)
        {
            flag++;
            int a=_x%10;
            int b=_y%10;
            if(a<b)
            {
                sum+=pow(10,flag);
            }
            _x/=10;
            _y/=10;
        }
        return x-y+sum;
    }
};
class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int flag=0;
        int sum=0;
        int _x=x,_y=y;
        while(_y!=0)
        {
            flag++;
            int a=_x%10;
            int b=_y%10;
            if(a+b>10)
            {
                sum=sum+pow(10,flag);
            }
            _x/=10;
            _y/=10;
        }
        sum+=1;
        return x+y-sum;
    }
    int sub(int x,int y)
    {
        int flag=0;
        int sum=0;
        int _x=x,_y=y;
        while(_y!=0)
        {
            flag++;
            int a=_x%10;
            int b=_y%10;
            if(a<b)
            {
                sum+=pow(10,flag);
            }
            _x/=10;
            _y/=10;
        }
        return x-y+sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *pv;
        int type;
        cin>>type;
        int a,b;
        char d;
        cin>>a;
        cin>>d;
        cin>>b;
        if(type==1)
        {
            GroupA P;
            pv=&P;
            if(d=='+')
                cout<<pv->add(a,b)<<endl;
            else if(d=='-')
                cout<<pv->sub(a,b)<<endl;
        }
        else if(type==2)
        {
            GroupB P;
            pv=&P;
            if(d=='+')
                cout<<pv->add(a,b)<<endl;
            else if(d=='-')
                cout<<pv->sub(a,b)<<endl;
        }
        else if(type==3)
        {
            GroupC P;
            pv=&P;
            if(d=='+')
                cout<<pv->add(a,b)<<endl;
            else if(d=='-')
                cout<<pv->sub(a,b)<<endl;
        }
    }
}

------------------------------------------------------
2018152008:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class Animal
{
	protected:
		string kind;
		string name;
		int age;
	public:
		virtual void speak();	
		void display();
};
void Animal::speak()
{
	;
}
void Animal::display()
{
	cout<<"Hello,I am "<<name<<",";
	speak();
}
class tiger:public Animal
{
	public:
		tiger(string n,int a);
		void speak();
};
tiger::tiger(string n,int a)
{
	kind="tiger";
	name=n;
	age=a;
}
void tiger::speak()
{
	cout<<"AOOO."<<endl;
}
class dog:public Animal
{
	public:
		dog(string n,int a);
		void speak();
};
dog::dog(string n,int a)
{
	kind="dog";
	name=n;
	age=a;
}
void dog::speak()
{
	cout<<"WangWang."<<endl;
}
class duck:public Animal
{
	public:
		duck(string n,int a);
		void speak();	
};
duck::duck(string n,int a)
{
	kind="duck";
	name=n;
	age=a;
}
void duck::speak()
{
	cout<<"GAGA."<<endl;
}
class pig:public Animal
{
	public:
		pig(string n,int a);
		void speak();
};
pig::pig(string n,int a)
{
	kind="pig";
	name=n;
	age=a;
}
void pig::speak()
{
	cout<<"HENGHENG."<<endl;
}
int main()
{
	int t;
	cin>>t;	
	while(t--)
	{
		Animal *p;
		string kind;
		string n;
		int a;
		int flag=0;
		cin>>kind>>n>>a;
		if(kind=="Tiger")
		{
			p=new tiger(n,a);
			p->display();
		}
		else if(kind=="Pig")
		{
			p=new pig(n,a);
			p->display();
		}
		else if(kind=="Duck")
		{
			p=new duck(n,a);
			p->display();
		}
		else if(kind=="Dog")
		{
			p=new dog(n,a);
			p->display();
		}
		else
		{
			cout<<"There is no "<<kind<<" in our Zoo."<<endl;
			flag=1;
		}
		if(flag==0)
			delete p;
	}
	return 0;
}
------------------------------------------------------
2018182052:Problem1119:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(const string& n,const string &a,int b):name(n),account(a),balance(b) {}
    void deposit(int amo)
    {
        balance+=amo;
    }
    virtual bool withdraw(int amo)
    {
        if(amo>balance)
        {
            cout<<"insufficient"<<endl;
            return false;
        }
        balance-=amo;
        return true;
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    virtual ~BaseAccount() {}
};
class BasePlus:public BaseAccount
{
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(const string& n,const string &a,int b):BaseAccount(n,a,b),limit(5000.00),limit_sum(0.0) {}
    virtual bool withdraw(int amo)
    {
        if(amo<=balance)
        {
            balance-=amo;
            return true;
        }
        else if(amo>balance&&amo<=balance+limit-limit_sum)
        {
            amo-=balance;
            balance=0.0;
            limit_sum+=amo;
            return true;
        }
        else
        {
            cout<<"insufficient"<<endl;
            return false;
        }
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<(limit-limit_sum)<<endl;
    }
    virtual ~BasePlus() {}
};
int main()
{
    //  freopen(ADDRESS);
    int T(0);
    cin>>T;
    BaseAccount *p;
    string name,acc;
    int d[5];
    while(T--)
    {
        cin>>name>>acc>>d[4]>>d[0]>>d[1]>>d[2]>>d[3];
        if(acc[1]=='A')
        {
            p=new BaseAccount(name,acc,d[4]);
        }
        else if(acc[1]=='P')
        {
            p=new BasePlus(name,acc,d[4]);
        }
        p->deposit(d[0]);
        p->withdraw(d[1]);
        p->deposit(d[2]);
        p->withdraw(d[3]);
        p->display();
        delete p;
    }
    return 0;
}

------------------------------------------------------
2017182103:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
    int length,width;
public:
    Rect(int l,int w):length(l),width(w) {}
    virtual double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    int radius;
public:
    Circle(int r):radius(r) {}
    virtual double getArea()
    {
        return 3.14*radius*radius;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double *sum = new double[n];
        for(int i=0; i<n; i++)
        {
            sum[i] = t[i]->getArea();
        }
        double max = sum[0];
        for(int i=0; i<n; i++)
        {
            if(sum[i]>max)
                max = sum[i];
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;

        delete []sum;
    }
};

int main()
{
    int n;
    cin>>n;

    Geometry **t = new Geometry*[n];

    for(int i=0; i<n; i++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            int l,w;
            cin>>l>>w;
            Rect rect(l,w);
            t[i] = &rect;
        }
        else
        {
            int r;
            cin>>r;
            Circle c(r);
            t[i] = &c;
        }
    }

    TotalArea ta;
    ta.computerTotalArea(t,n);

    delete []t;
    return 0;
}

------------------------------------------------------
2018192014:Problem1129:正确
#include<bits/stdc++.h>
using namespace std;
class CommonCard{
protected:
	long ID;
	string CName;
	unsigned int Counter;
public:
	virtual void initial(long i,string n,unsigned int c)
	{
		ID=i;
		CName=n;
		Counter=c;
	}
	virtual int save(int c)
	{
		if(c<=0)
		return -1;
		Counter+=c;
		return 1;
	}
	virtual int take(int c)
	{
		if(c<=0||c>Counter)
		return -1;
		Counter-=c;
		return 1;
	}
	virtual void info()
	{
		cout<<ID<<'-'<<CName<<'-'<<Counter<<endl;
	}
};
class Transport:virtual public CommonCard{
protected:
	unsigned int Tcounter;
public:
	virtual void initial(long i,string n,unsigned int c,unsigned int t){
		ID=i;
		CName=n;
		Counter=c;
		Tcounter=t;
	}
	int transfer(int c)
	{
		if(c<=0||c>Counter)
		return -1;
		Counter-=c;
		Tcounter+=c;
	} 
	virtual void info()
	{
		cout<<ID<<'-'<<CName<<'-'<<Counter<<'-'<<Tcounter<<endl;
	}
};
class VIPcard:virtual public CommonCard
{
protected:
	int Credit;
public:
	virtual void initial(long i,string n,unsigned int c,int t){
		ID=i;
		CName=n;
		Counter=c;
		Credit=t;
	}
	int over(int c)
	{
		if(c<=0||c>(Credit+Counter))
		return -1;
		if(c<Counter)
		{
			Counter-=c;
			return 1;
		}
		else
		{
			c-=Counter;
			Counter=0;
			Credit-=c;
		}
	}
	virtual void info()
	{
		cout<<ID<<'-'<<CName<<'-'<<Counter<<'-'<<Credit<<endl;
	}
};
void show(CommonCard &obj)
{
	obj.info();
}
int main ()
{
	long id;
	string name;
	int c,t,credit;
	cin>>id>>name>>c;
	CommonCard a;
	a.initial(id,name,c);
	cin>>id>>name>>c>>t;
	Transport b;
	b.initial(id,name,c,t);
	cin>>id>>name>>c>>credit;
	VIPcard c1;
	c1.initial(id,name,c,credit);
	cin>>c;
	a.save(c);
	cin>>c;
	a.save(c);
	cin>>c;
	a.take(c);
	cin>>c;
	a.take(c);
	cin>>c;
	b.save(c);
	cin>>c;
	b.take(c);
	cin>>c;
	b.transfer(c);
	cin>>c;
	b.transfer(c);
	cin>>c;
	c1.save(c);
	cin>>c;
	c1.take(c);
	cin>>c;
	c1.over(c);
	cin>>c;
	c1.over(c);
	show(a);
	show(b);
	show(c1);
	return 0;
}
------------------------------------------------------
2016073026:Problem1235:运行错误
#include <iostream>
#include <iomanip>

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
    double chang,kuan;
public:
    Rect(double c,double k):chang(c),kuan(c){}
    virtual double getArea(){return chang*kuan;}
};

class Circle:public Geometry{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea(){return 3.14*radius*radius;}
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t,int n){
        double max=t[0]->getArea();
        for(int i=1;i<n;i++)
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t;
    double type,r,c,k;
    for(int i=0;i<n;i++){
        cin>>type;
        if(type==1){
            cin>>c>>k;
            t[i]=new Rect(c,k);
        }
        else if(type==2){
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018151066:Problem1234:答案错误
#include<iostream>
using namespace std;
class Group
{
public :
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public :
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
void display(int *t,int n)
{
    for(int i=0; i<n; i++)
        cout<<t[i];
    cout<<endl;
}
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int  *x_=new int;
        int  *y_=new int;
        int len_x=0,len_y=0;
        while(x)
        {
            x_[len_x++]=x%10;
            x/=10;
        }

        while(y)
        {
            y_[len_y++]=y%10;
            y/=10;
        }

        for(int i=0; i<len_y; i++)
        {
            x_[i]-=y_[i];
            if(x_[i]<0)
                x_[i]+=10;
        }

        int ans=0;
        for(int i=0; i<len_x; i++)
        {

            ans=ans*10+x_[len_x-i-1];
        }

        return ans;
    }
};

class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int  *x_=new int;
        int  *y_=new int;
        int len_x=0,len_y=0;
        while(x)
        {
            x_[len_x++]=x%10;
            x/=10;
        }
        while(y)
        {
            y_[len_y++]=y%10;
            y/=10;
        }
        for(int i=0; i<len_y; i++)
        {
            x_[i]+=y_[i];
            if(x_[i]>9)
                x_[i]-=10;
        }
        int ans=0;
        for(int i=0; i<len_x; i++)
        {

            ans=ans*10+x_[len_x-i-1];
        }
        return ans;
    }
    int sub(int x,int y)
    {
        int  *x_=new int;
        int  *y_=new int;
        int len_x=0,len_y=0;
        while(x)
        {
            x_[len_x++]=x%10;
            x/=10;
        }
        while(y)
        {
            y_[len_y++]=y%10;
            y/=10;
        }
        for(int i=0; i<len_y; i++)
        {
            x_[i]-=y_[i];
            if(x_[i]<0)
                x_[i]+=10;
        }
        int ans=0;
        for(int i=0; i<len_x; i++)
        {

            ans=ans*10+x_[len_x-i-1];
        }
        return ans;
    }
};
int main()
{
    int t;
    cin>>t;
    Group *group;
    while(t--)
    {
        int type;
        cin>>type;
        int x,y;
        char cmd;
        cin>>x>>cmd>>y;
        if(type==1)
        {
            group=new GroupA;

        }
        else if(type==2)
        {
            group=new GroupB;
        }
        else if(type==3)
        {
            group=new GroupC;
        }
        if(cmd=='+')
            cout<<group->add(x,y)<<endl;
        else
            cout<<group->sub(x,y)<<endl;
    }
}

------------------------------------------------------
2018152106:Problem1235:答案错误
#include<iostream>
using namespace std;

class Geometry
{
public:
	virtual double getArea()=0;
};

class Rect:public Geometry
{
	double x,y;
public:
    Rect(double x_,double y_):x(x_),y(y_){}
    double getArea()
    {
    	return x*y;
	}
};

class Circle:public Geometry
{
	double r;
public:
	Circle(double r_):r(r_){}
	double getArea()
	{
		return 3.14*r*r;
    }	 
};

class TotalArea
{
public:
	TotalArea(){}
    static void computerTotalArea(Geometry** t,int n)
    {
   	    double max=t[0]->getArea();
   		for(int i=1;i<n;i++)
   	    {
   		    if(t[i]->getArea()>max)
   			{
   				max=t[i]->getArea();
		    }
	    }
	    cout<<"最大面积="<<max<<endl;
    }
};
int main()
{
	int t;
	cin>>t;
	Geometry **p=new Geometry *[t];
	for(int i=0;i<t;i++)
	{
		int type,x,y,r;
		cin>>type;
		if(type==1)
		{
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		else if(type==2)
		{
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea a;
	a.computerTotalArea(p,t);
	for(int i=0;i<t;i++)
	{
		delete p[i];
	}
	delete []p;
}
------------------------------------------------------
2018152087:Problem1234:答案错误
#include<iostream>
#include<math.h> 
using namespace std;
class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		int numx[100]={0};
		int numy[100]={0};
		int ans[100]={0};
		int sumx=0;
		int sumy=0;
		//cout<<"666"<<endl;
		while(x)
		{
			numx[sumx]=x%10;
			x=x/10;
			sumx++;
		}
		while(y)
		{
			numy[sumy]=y%10;
			sumy++;
			y=y/10;
		}
		int maxsum=max(sumx,sumy);
		for(int i=0;i<maxsum;i++)
		{
			ans[i]=numx[i]-numy[i];
			if(ans[i]<0)
				ans[i]=10+numx[i]-numy[i];
		}
		int temp=0;
		for(int i=0;i<maxsum;i++)
			temp+=ans[i]*pow(10,i);
		return temp;
	}
};
class GroupC:public Group
{
public:
	virtual int add(int x, int y)
	{
		int numx[100]={0};
		int numy[100]={0};
		int ans[100]={0};
		int sumx=0;
		int sumy=0;
		while(x)
		{
			numx[sumx]=x%10;
			x=x/10;
			sumx++;
		}
		while(y)
		{
			numy[sumy]=y%10;
			sumy++;
			y=y/10;
		}
		int maxsum=max(sumx,sumy);
		for(int i=0;i<maxsum;i++)
		{
			ans[i]=numx[i]+numy[i];
			if(ans[i]>9)
				ans[i]=numx[i]+numy[i]-10;
		}
		int temp=0;
		for(int i=0;i<maxsum;i++)
			temp+=ans[i]*pow(10,i);
		return temp;
	}
	virtual int sub(int x, int y)
	{
		int numx[100]={0};
		int numy[100]={0};
		int ans[100]={0};
		int sumx=0;
		int sumy=0;
		while(x)
		{
			numx[sumx]=x%10;
			x=x/10;
			sumx++;
		}
		while(y)
		{
			numy[sumy]=y%10;
			sumy++;
			y=y/10;
		}
		int maxsum=max(sumx,sumy);
		cout<<maxsum<<endl;
		for(int i=0;i<maxsum;i++)
		{
			ans[i]=numx[i]-numy[i];
			if(ans[i]<0)
				ans[i]=10+numx[i]-numy[i];
		}
		int temp=0;
		for(int i=0;i<maxsum;i++)
			temp+=ans[i]*pow(10,i);
		return temp;
	}
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Group *p;
		int flag;
		cin>>flag;
		int num1,num2;
		char s;
		int ans;
		if(flag==1)
		{
			GroupA ex;
			cin>>num1>>s>>num2;
			p=&ex;
			if(s=='+')
			{
				ans=p->add(num1,num2);
			}
			else 
			{
				ans=p->sub(num1,num2);
			}
		}
		else if(flag==2)
		{
			GroupB ex;
			cin>>num1>>s>>num2;
			p=&ex;
			if(s=='+')
			{
				ans=p->add(num1,num2);
			}
			else 
			{
				ans=p->sub(num1,num2);
			}
		}
		else if(flag==3)
		{
			GroupC ex;
			cin>>num1>>s>>num2;
			p=&ex;
			if(s=='+')
			{
				ans=p->add(num1,num2);
			}
			else 
			{
				ans=p->sub(num1,num2);
			}
		}
		cout<<ans<<endl;
	}
}
------------------------------------------------------
2018192010:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
};
class A:public Group
{
protected:
    int a,b;
public:
    A(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class B:public Group
{
public:
    B(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i];
        return m;
    }
};
class C:public Group
{
public:
    C(){}
    int add(int x, int y)
    {
        int res[10];
        int k=0;
        if(y>x)
        {
            int temp;
            temp = x;
            x = y;
            y = temp;
        }
        while(x>0)
        {
            res[k++] = (x%10+y%10)%10;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i];
        return m;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i];
        return m;
    }
};
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        Group *p;
        int type;
        int x,y;
        char c;
        cin >> type >> x >> c >> y;
        switch(type)
        {
        case 1:p = new A;break;
        case 2:p = new B;break;
        case 3:p = new C;break;
        }
        if(c == '+')
            cout << p->add(x,y);
        else
            cout << p->sub(x,y);
        cout << endl;
    }
    return 0;
}

------------------------------------------------------
2017152043:Problem1235:运行错误
#include<iostream>
#include<cstring>
using namespace std;

class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
	virtual ~Geometry(){}
};

class Rect:public Geometry{
	double length;
	double width;
public:
	Rect(double l,double w):length(l),width(w){}
	double getArea()
	{
		return length * width;
	}
	~Rect(){}
};

class Circle:public Geometry{
	double radius;
public:
	Circle(double r):radius(r){}
	double getArea()
	{
		return 3.14 * radius * radius;
	}
	~Circle(){}
};

class TotalArea{
public:
	TotalArea(){}
   static void computerTotalArea(Geometry** t,int n)
   {
   		for(int i = 0;i < (n - 1);i++){
		if(t[i]->getArea() > t[i + 1]->getArea())
			swap(t[i],t[i + 1]);
	    }
		cout << "最大面积=" << t[n - 1]->getArea() << endl;
	
   }//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
};




int main(){
	int t;
	Geometry** pg;
	int type;
	double l,w,r;
	cin >> t;
	pg = new Geometry *[t];
	for(int i = 0;i < t;i++){
		cin >> type;
		if(type == 1){
			cin >> l >> w;
			pg[i] = new Rect(l,w);
		}
		else if(type == 2){
			cin >> r;
			pg[i] = new Circle(r);
		}
	}
	TotalArea total;
	total.computerTotalArea(pg,t);
	for(int i = 0;i < t;i++)
		delete []pg[i];
	delete []pg;
	
	return 0;
}
------------------------------------------------------
2018152087:Problem1234:正确
#include<iostream>
#include<math.h> 
using namespace std;
class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		int numx[100]={0};
		int numy[100]={0};
		int ans[100]={0};
		int sumx=0;
		int sumy=0;
		while(x)
		{
			numx[sumx]=x%10;
			x=x/10;
			sumx++;
		}
		while(y)
		{
			numy[sumy]=y%10;
			sumy++;
			y=y/10;
		}
		int maxsum=max(sumx,sumy);
		for(int i=0;i<maxsum;i++)
		{
			ans[i]=numx[i]-numy[i];
			if(ans[i]<0)
				ans[i]=10+numx[i]-numy[i];
		}
		int temp=0;
		for(int i=0;i<maxsum;i++)
			temp+=ans[i]*pow(10,i);
		return temp;
	}
};
class GroupC:public Group
{
public:
	virtual int add(int x, int y)
	{
		int numx[100]={0};
		int numy[100]={0};
		int ans[100]={0};
		int sumx=0;
		int sumy=0;
		while(x)
		{
			numx[sumx]=x%10;
			x=x/10;
			sumx++;
		}
		while(y)
		{
			numy[sumy]=y%10;
			sumy++;
			y=y/10;
		}
		int maxsum=max(sumx,sumy);
		for(int i=0;i<maxsum;i++)
		{
			ans[i]=numx[i]+numy[i];
			if(ans[i]>9)
				ans[i]=numx[i]+numy[i]-10;
		}
		int temp=0;
		for(int i=0;i<maxsum;i++)
			temp+=ans[i]*pow(10,i);
		return temp;
	}
	virtual int sub(int x, int y)
	{
		int numx[100]={0};
		int numy[100]={0};
		int ans[100]={0};
		int sumx=0;
		int sumy=0;
		while(x)
		{
			numx[sumx]=x%10;
			x=x/10;
			sumx++;
		}
		while(y)
		{
			numy[sumy]=y%10;
			sumy++;
			y=y/10;
		}
		int maxsum=max(sumx,sumy);
		for(int i=0;i<maxsum;i++)
		{
			ans[i]=numx[i]-numy[i];
			if(ans[i]<0)
				ans[i]=10+numx[i]-numy[i];
		}
		int temp=0;
		for(int i=0;i<maxsum;i++)
			temp+=ans[i]*pow(10,i);
		return temp;
	}
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Group *p;
		int flag;
		cin>>flag;
		int num1,num2;
		char s;
		int ans;
		if(flag==1)
		{
			GroupA ex;
			cin>>num1>>s>>num2;
			p=&ex;
			if(s=='+')
			{
				ans=p->add(num1,num2);
			}
			else 
			{
				ans=p->sub(num1,num2);
			}
		}
		else if(flag==2)
		{
			GroupB ex;
			cin>>num1>>s>>num2;
			p=&ex;
			if(s=='+')
			{
				ans=p->add(num1,num2);
			}
			else 
			{
				ans=p->sub(num1,num2);
			}
		}
		else if(flag==3)
		{
			GroupC ex;
			cin>>num1>>s>>num2;
			p=&ex;
			if(s=='+')
			{
				ans=p->add(num1,num2);
			}
			else 
			{
				ans=p->sub(num1,num2);
			}
		}
		cout<<ans<<endl;
	}
}
------------------------------------------------------
2018041051:Problem1235:答案错误
#include<iostream>
#include<string>
#include<cstring>

using namespace std;

class Geometry{

public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect:public Geometry
{
protected:
    double dlong,wide;
public:
    Rect(){}
    Rect(double dlong1,double wide1):dlong(dlong1),wide(wide1){}
    double getArea()
    {
        return dlong*wide;
    }
};

class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(){}
    Circle(double r1):r(r1){}
    double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea{

public:

    static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double biggest=0;
        for(int i=0;i<n;i++)
        {
            if(p[i]->getArea()>biggest)
                biggest=(p[i]->getArea());
        }
        cout<<"最大面积="<<biggest<<endl;
    }
};

int main()
{
    Geometry **p;
    int t;
    cin>>t;

    p = new Geometry *[t];

    for(int i=0;i<t;i++)
    {
        int n;
        cin>>n;
        if(n==1)
        {
            int dlong,wide;
            cin>>dlong>>wide;
            p[i]=new Rect(dlong,wide);
        }
        else
        {
            int r;
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea pr;
    pr.computerTotalArea(p,t);

    for(int i=0;i<t;i++)
    {
        delete []p[i];
    }
    delete p;

    return 0;
}

------------------------------------------------------
2018192013:Problem1235:运行错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rect(a,b);
            t[i]=&rect;
        }
        else if(type==2)
        {
            cin>>r;
            Circle c(r);
            t[i]=&c;
        }
    }
    TotalArea::computerTotalArea(t,n);
    for(i=0;i<n;i++)
        delete []t[i];
    delete []t;
    return 0;
}

------------------------------------------------------
2018152106:Problem1235:答案错误
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry
{
public:
	virtual double getArea()=0;
};

class Rect:public Geometry
{
	double x,y;
public:
    Rect(double x_,double y_):x(x_),y(y_){}
    double getArea()
    {
    	return x*y;
	}
};

class Circle:public Geometry
{
	double r;
public:
	Circle(double r_):r(r_){}
	double getArea()
	{
		return 3.14*r*r;
    }	 
};

class TotalArea
{
public:
	TotalArea(){}
    static void computerTotalArea(Geometry** t,int n)
    {
   	    double max=t[0]->getArea();
   		for(int i=1;i<n;i++)
   	    {
   		    if(t[i]->getArea()>max)
   			{
   				max=t[i]->getArea();
		    }
	    }
	    cout<<"最大面积="<<setprecision(2)<<max<<endl;
    }
};
int main()
{
	int t;
	cin>>t;
	Geometry **p=new Geometry *[t];
	for(int i=0;i<t;i++)
	{
		int type,x,y,r;
		cin>>type;
		if(type==1)
		{
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		else if(type==2)
		{
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea a;
	a.computerTotalArea(p,t);
	for(int i=0;i<t;i++)
	{
		delete p[i];
	}
	delete []p;
}
------------------------------------------------------
2018192044:Problem1232:正确
#include <iostream>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(){}
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用
    ~Vehicle(){}
};
class Car:public Vehicle
{
    int number,height;
public:
    Car(string n,int n1,int h):Vehicle(n),number(n1),height(h){}
    void display()
    {
        cout<<no<<" "<<number*8+height*2<<endl;
    }
};
class Truck:public Vehicle
{
    int height;
public:
    Truck(string n,int h):Vehicle(n),height(h){}
    void display()
    {
        cout<<no<<" "<<height*5<<endl;
    }
};
class Bus:public Vehicle
{
    int number;
public:
    Bus(string n,int n1):Vehicle(n),number(n1){}
    void display()
    {
        cout<<no<<" "<<number*3<<endl;
    }
};
int main()
{
    int t,i,number,height;
    string no;
    cin>>t;
    Vehicle *pv;
    while(t--)
    {
        cin>>i>>no;
        if(i==1)
        {
            cin>>number>>height;
            Car A(no,number,height);
            pv=&A;
            pv->display();
        }
        if(i==2)
        {
            cin>>height;
            Truck A(no,height);
            pv=&A;
            pv->display();
        }
        if(i==3)
        {
            cin>>number;
            Bus A(no,number);
            pv=&A;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192046:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int flag=0;
        int sum=0;
        int _x=x,_y=y;
        while(_y!=0)
        {
            flag++;
            int a=_x%10;
            int b=_y%10;
            if(a<b)
            {
                int t=1;
                for(int i=0;i<flag;i++)
                    t*=10;
                sum+=t;
            }
            _x/=10;
            _y/=10;
        }
        return x-y+sum;
    }
};
class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int flag=0;
        int sum=0;
        int _x=x,_y=y;
        while(_y!=0)
        {
            flag++;
            int a=_x%10;
            int b=_y%10;
            if(a+b>10)
            {
                int t=1;
                for(int i=0;i<flag;i++)
                    t*=10;
                sum+=t;
            }
            _x/=10;
            _y/=10;
        }
        return x+y-sum;
    }
    int sub(int x,int y)
    {
        int flag=0;
        int sum=0;
        int _x=x,_y=y;
        while(_y!=0)
        {
            flag++;
            int a=_x%10;
            int b=_y%10;
            if(a<b)
            {
                int t=1;
                for(int i=0;i<flag;i++)
                    t*=10;
                sum+=t;
            }
            _x/=10;
            _y/=10;
        }
        return x-y+sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *pv;
        int type;
        cin>>type;
        int a,b;
        char d;
        cin>>a;
        cin>>d;
        cin>>b;
        if(type==1)
        {
            GroupA P;
            pv=&P;
            if(d=='+')
                cout<<pv->add(a,b)<<endl;
            else if(d=='-')
                cout<<pv->sub(a,b)<<endl;
        }
        else if(type==2)
        {
            GroupB P;
            pv=&P;
            if(d=='+')
                cout<<pv->add(a,b)<<endl;
            else if(d=='-')
                cout<<pv->sub(a,b)<<endl;
        }
        else if(type==3)
        {
            GroupC P;
            pv=&P;
            if(d=='+')
                cout<<pv->add(a,b)<<endl;
            else if(d=='-')
                cout<<pv->sub(a,b)<<endl;
        }
    }
}

------------------------------------------------------
2018192010:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
    ~Group(){}
};
class A:public Group
{
protected:
    int a,b;
public:
    A(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~A(){}
};
class B:public Group
{
public:
    B(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i];
        return m;
    }
    ~B(){}
};
class C:public Group
{
public:
    C(){}
    ~C(){}
    int add(int x, int y)
    {
        int res[10];
        int k=0;
        if(y>x)
        {
            int temp;
            temp = x;
            x = y;
            y = temp;
        }
        while(x>0)
        {
            res[k++] = (x%10+y%10)%10;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i];
        return m;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i];
        return m;
    }
};
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        Group *p;
        int type;
        int x,y;
        char c;
        cin >> type >> x >> c >> y;
        switch(type)
        {
        case 1:p = new A;break;
        case 2:p = new B;break;
        case 3:p = new C;break;
        }
        if(c == '+')
            cout << p->add(x,y);
        else
            cout << p->sub(x,y);
        cout << endl;
        delete p;
    }
    return 0;
}

------------------------------------------------------
2018041051:Problem1119:运行错误
#include<iostream>
#include<string>
#include<cstring>
 
using namespace std;
 
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string name1,string account1,int balance1):name(name1),account(account1),balance(balance1){}
    void deposit(int num)
    {
        balance+=num;
    }
    virtual void withdraw(int num)
    {
        if((balance-num)>=0)
        {
            balance-=num;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
 
class BasePlus:public BaseAccount
{
protected:
    int limit;
public:
    BasePlus()
    {
        limit=5000;
    }
    BasePlus(string name1,string account1,int balance1):BaseAccount(name1,account1,balance1)
    {
        limit=5000;
    }
    virtual void withdraw(int num)
    {
        if((balance-num+limit)>=0)
        {
            balance-=num;
            if(balance<0)
            {
                limit+=balance;
                balance=0;
            }
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
 
 
 
int main()
{
    BaseAccount *BA;
 
    int t;
    cin>>t;
    while(t--)
    {
        int balance;
        string name,account;
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BA=new BaseAccount(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
        else
        {
            BA= new BasePlus(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
    }
 	
 	delete []BA;
 	
    return 0;
}
------------------------------------------------------
2018192044:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t,age;
    string name,type;
    cin>>t;
    Animal *p;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2018192014:Problem1234:正确
#include<bits/stdc++.h>
using namespace std;
class Group
 
{
 
public:
 
virtual int add(int x, int y)=0;//输出加法的运算结果
 
virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:virtual public Group
 
{
 
public:
 
virtual int add(int x, int y)//输出加法的运算结果
{
    return x+y;
} 
 
virtual int sub(int x, int y)//输出减法的运算结果
{
    return x-y;
}
};
class GroupB:virtual public Group
 
{
 
public:
 
virtual int add(int x, int y)//输出加法的运算结果
{
    return x+y;
} 
 
virtual int sub(int x, int y)//输出减法的运算结果
{
    int n,m,times=1,x1=x,y1=y;
    while(x1)
    {
        n=x1%10;
        m=y1%10;
        x1=x1/10;
        y1=y1/10;
        if(n<m)
        {
            x=x+pow(10,times);
        }
        times++;
    }
    return x-y;
}
};
class GroupC:virtual public Group
 
{
 
public:
 
virtual int add(int x, int y)//输出加法的运算结果
{
    int n,m,times=1,x1=x,y1=y;
    while(x1)
    {
        n=x1%10;
        m=y1%10;
        x1=x1/10;
        y1=y1/10;
        if(n+m>=10)
        {
            x-=pow(10,times);
        }
        times++;
    }
    return x+y;
} 
 
virtual int sub(int x, int y)//输出减法的运算结果
{
    int n,m,times=1,x1=x,y1=y;
    while(x1)
    {
        n=x1%10;
        m=y1%10;
        x1=x1/10;
        y1=y1/10;
        if(n<m)
        {
            x+=pow(10,times);
        }
        times++;
    }
    return x-y;
}
};
int main ()
{
    Group *group;
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int command;
        int a,b;
        char ch;
        cin>>command;
        if(command==1)
        {
            cin>>a>>ch>>b;
            group=new GroupA;
            if(ch=='+')
            cout<<group->add(a,b)<<endl;
            else
            cout<<group->sub(a,b)<<endl;
        }
        else if(command==2)
        {
            cin>>a>>ch>>b;
            group=new GroupB;
            if(ch=='+')
            cout<<group->add(a,b)<<endl;
            else
            cout<<group->sub(a,b)<<endl;
        }
        else if(command==3)
        {
            cin>>a>>ch>>b;
            group=new GroupC;
            if(ch=='+')
            cout<<group->add(a,b)<<endl;
            else
            cout<<group->sub(a,b)<<endl;
        }
        delete group;
    }
    return 0;
}
------------------------------------------------------
2018192044:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak()=0;
    ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t,age;
    string name,type;
    cin>>t;
    Animal *p;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}

------------------------------------------------------
2016073026:Problem1235:答案错误
#include <iostream>
#include <iomanip>

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
    double chang,kuan;
public:
    Rect(double c,double k):chang(c),kuan(c){}
    virtual double getArea(){return chang*kuan;}
};

class Circle:public Geometry{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea(){return 3.14*radius*radius;}
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t,int n){
        double max=t[0]->getArea();
        for(int i=1;i<n;i++)
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t =new Geometry*[n];
    double type,r,c,k;
    for(int i=0;i<n;i++){
        cin>>type;
        if(type==1){
            cin>>c>>k;
            t[i]=new Rect(c,k);
        }
        else if(type==2){
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018151051:Problem1119:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
	char name[10];
	char account[10];
	double balance;
public:
	BaseAccount(){}
	BaseAccount(char n[],char a[],double b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;	
	}
	virtual void deposit(double money)
	{
		balance=balance+money;
	}
	virtual void withdraw(double money)
	{
		if((balance-money)<0)
			cout<<"insufficient"<<endl;
		else if((balance-money)>=0)
			balance=balance-money;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};
class BasePlus:public BaseAccount
{
	double limit;
	double limit_sum;
public:
	BasePlus(){}
	BasePlus(char n[],char a[],double b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;
		limit=5000;
		limit_sum=0;
	}
	virtual void deposit(double money)
	{
		if(balance==0)
		{
			if((limit_sum-money)>=0)
				limit_sum=limit_sum-money;
			else
			{
				limit_sum=0;
				balance=balance+(money-limit_sum);
			}
		}
		else if(balance>0)
		{
			balance=balance+money;
		}
	}
	virtual void withdraw(double money)
	{
		double value;
		value=limit-limit_sum+balance;
		if(value-money<0)
			cout<<"insufficient"<<endl;
		else if(value-money>=0)
		{
			if(balance==0)
			{
				limit_sum=limit_sum+money;
			}
			else if(balance>0)
			{
				double s;
				s=money-balance;
				if(s<=0)
					balance=balance-money;
				else if(s>0)
				{
					balance=0;
					limit_sum=limit_sum+s;
				}
			}
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
	}
};
int main()
{
	int n,i;
	cin>>n;
	for(i=1;i<=n;i++)
	{
		char name[10];
		char account[10];
		double balance;
		cin>>name>>account>>balance;
		BaseAccount *p;
		if(account[1]=='A')
		{
			p=new BaseAccount(name,account,balance);
		}
		else if(account[1]=='P')
		{
			p=new BasePlus(name,account,balance);
		}
		for(int j=1;j<=4;j++)
		{
			int money;
			cin>>money;
			if(j%2!=0)
				p->deposit(money);
			else if(j%2==0)
				p->withdraw(money);
		}
		p->display();
		delete []p;
	}
	return 0;
}
------------------------------------------------------
2018152106:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry
{
public:
	virtual double getArea()=0;
};

class Rect:public Geometry
{
	double x,y;
public:
    Rect(double x_,double y_):x(x_),y(y_){}
    double getArea()
    {
    	return x*y;
	}
};

class Circle:public Geometry
{
	double r;
public:
	Circle(double r_):r(r_){}
	double getArea()
	{
		return 3.14*r*r;
    }	 
};

class TotalArea
{
public:
	TotalArea(){}
    static void computerTotalArea(Geometry** t,int n)
    {
   	    double max=t[0]->getArea();
   		for(int i=1;i<n;i++)
   	    {
   		    if(t[i]->getArea()>max)
   			{
   				max=t[i]->getArea();
		    }
	    }
	    cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
    }
};
int main()
{
	int t;
	cin>>t;
	Geometry **p=new Geometry *[t];
	for(int i=0;i<t;i++)
	{
		int type,x,y,r;
		cin>>type;
		if(type==1)
		{
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		else if(type==2)
		{
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea a;
	a.computerTotalArea(p,t);
	for(int i=0;i<t;i++)
	{
		delete p[i];
	}
	delete []p;
}
------------------------------------------------------
2018192044:Problem1119:正确
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int a)
    {
        balance+=a;
    }
    virtual void withdraw(int a)
    {
        if(a>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=a;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    ~BaseAccount(){}
};
class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b),limit(5000),limit_sum(0){}
    void withdraw(int a)
    {
        if(a>(balance+limit-limit_sum))
            cout<<"insufficient"<<endl;
        else
        {
            balance-=a;
            if(balance<0)
            {
                limit_sum+=(-balance);
                balance=0;
            }
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int t,balance,a;
    string name,account;
    cin>>t;
    BaseAccount *p;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccount A(name,account,balance);
            p=&A;
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            p->display();
        }
        else
        {
            BasePlus A(name,account,balance);
            p=&A;
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018152100:Problem1235:正确
#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
using namespace std;

const double PI=3.14;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
    virtual ~Geometry(){}
};

class Rect:public Geometry
{
private:
    double a,b;
public:
    Rect(double aa,double bb):a(aa),b(bb){}
    double getArea(){return a*b;}
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double rr):r(rr){}
    double getArea(){return PI*r*r;}
};

class TotalArea
{
public:
    static double biggest;
    static void computerTotalArea(Geometry** t,int n)
    {
        for (int i=0;i<n;i++)
        {
            if (biggest<(t[i]->getArea()))
                biggest=t[i]->getArea();
        }
    }
};

double TotalArea::biggest=0;

int main()
{
    int n,m;
    cin >> n;
    int n1=n;
    Geometry **t=new Geometry*[n];
    double a,b,r;
    int i=0;
    while (n--)
    {
        cin >> m;
        if (m==1)
        {
            cin >> a >> b;
            t[i++]=new Rect(a,b);
        }
        else if (m==2)
        {
            cin >> r;
            t[i++]=new Circle(r);
        }

    }
    TotalArea::computerTotalArea(t,n1);
    cout << "最大面积=";
    cout << fixed << setprecision(2) << TotalArea::biggest << endl;
    for (int i=0;i<n;i++)
        delete []t[i];
    delete []t;
    return 0;
}
------------------------------------------------------
2017133026:Problem1129:正确
#include <iostream>

using namespace std;
class BaseCard{
protected:
    int ID;
    char Cname;
    int Counter;
public:
    BaseCard(){

    }
    void initial(int ID1,char Cname1,int Counter1){
        ID=ID1;
        Cname=Cname1;
        Counter=Counter1;
    }
    int save(int v){
        if(v>0){
            Counter+=v;
            return 1;
        }
        return -1;
    }
    int take(int v){
        if(v>0 && v<=Counter){
            Counter-=v;
            return 1;
        }
        return -1;
    }
    virtual void info(){
        cout<<ID<<"-"<<Cname<<"-"<<Counter<<endl;
    }
};

class TransCard:public BaseCard{
protected:
    int Tcounter;
public:
    TransCard(){

    }
    void initial(int ID1,char Cname1,int Counter1,int Tcounter1){
        ID=ID1;
        Cname=Cname1;
        Counter=Counter1;
        Tcounter=Tcounter1;
    }
    int transfer(int v){
        if(v<=Counter){
            Tcounter+=v;
            Counter-=v;
            return 1;
        }
        return -1;
    }
    virtual void info(){
        cout<<ID<<"-"<<Cname<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};

class VIPCard:public BaseCard{
protected:
    int Credit;
public:
    VIPCard(){

    }
    void initial(int ID1,char Cname1,int Counter1,int Credit1){
        ID=ID1;
        Cname=Cname1;
        Counter=Counter1;
        Credit=Credit1;
    }
    int over(int v){
        if(v<=Counter+Credit){
            Credit-=(v-Counter);
            Counter=0;
            return 1;
        }
        return -1;
    }
    virtual void info(){
        cout<<ID<<"-"<<Cname<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(BaseCard *c){
    c->info();
}
int main()
{
    int ID;
    char Cname;
    int balance,tb,credit;
    cin>>ID>>Cname>>balance;
    BaseCard b;
    b.initial(ID,Cname,balance);
    cin>>ID>>Cname>>balance>>tb;
    TransCard t1;
    t1.initial(ID,Cname,balance,tb);
    cin>>ID>>Cname>>balance>>credit;
    VIPCard V1;
    V1.initial(ID,Cname,balance,credit);
    int value;
    cin>>value;
    b.save(value);
    cin>>value;
    b.save(value);
    cin>>value;
    b.take(value);
    cin>>value;
    b.take(value);

    cin>>value;
    t1.save(value);
    cin>>value;
    t1.take(value);
    cin>>value;
    t1.transfer(value);
    cin>>value;
    t1.transfer(value);

    cin>>value;
    V1.save(value);
    cin>>value;
    V1.take(value);
    cin>>value;
    V1.over(value);
    cin>>value;
    V1.over(value);
    show(&b);
    show(&t1);
    show(&V1);
    return 0;
}


------------------------------------------------------
2018151051:Problem1119:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
	char name[10];
	char account[10];
	double balance;
public:
	BaseAccount(){}
	BaseAccount(char n[],char a[],double b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;	
	}
	virtual void deposit(double money)
	{
		balance=balance+money;
	}
	virtual void withdraw(double money)
	{
		if((balance-money)<0)
			cout<<"insufficient"<<endl;
		else if((balance-money)>=0)
			balance=balance-money;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
};
class BasePlus:public BaseAccount
{
	double limit;
	double limit_sum;
public:
	BasePlus(){}
	BasePlus(char n[],char a[],double b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;
		limit=5000;
		limit_sum=0;
	}
	virtual void deposit(double money)
	{
		if(balance==0)
		{
			if((limit_sum-money)>=0)
				limit_sum=limit_sum-money;
			else
			{
				limit_sum=0;
				balance=balance+(money-limit_sum);
			}
		}
		else if(balance>0)
		{
			balance=balance+money;
		}
	}
	virtual void withdraw(double money)
	{
		double value;
		value=limit-limit_sum+balance;
		if(value-money<0)
			cout<<"insufficient"<<endl;
		else if(value-money>=0)
		{
			if(balance==0)
			{
				limit_sum=limit_sum+money;
			}
			else if(balance>0)
			{
				double s;
				s=money-balance;
				if(s<=0)
					balance=balance-money;
				else if(s>0)
				{
					balance=0;
					limit_sum=limit_sum+s;
				}
			}
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
	}
};
int main()
{
	int n,i;
	cin>>n;
	for(i=1;i<=n;i++)
	{
		char name[10];
		char account[10];
		double balance;
		cin>>name>>account>>balance;
		BaseAccount *p;
		if(account[1]=='A')
		{
			p=new BaseAccount(name,account,balance);
		}
		else if(account[1]=='P')
		{
			p=new BasePlus(name,account,balance);
		}
		for(int j=1;j<=4;j++)
		{
			int money;
			cin>>money;
			if(j%2!=0)
				p->deposit(money);
			else if(j%2==0)
				p->withdraw(money);
		}
		p->display();
		//delete []p;
	}
	return 0;
}
------------------------------------------------------
2018182052:Problem1235:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Geometay
{
public:
    virtual double get_area()const=0;
    virtual ~Geometay(){}
};

class Rect:public Geometay
{
    double x,y;
public:
    Rect(double xx,double yy):x(xx),y(yy) {}
    virtual double get_area()const
    {
        return x*y;
    }
    virtual ~Rect(){}
};
class Circle:public Geometay
{
    double r;
public:
    Circle(double rr):r(rr) {}
    virtual double get_area()const
    {
        return 3.14*r*r;
    }
    virtual ~Circle(){}
};
class TotalArea
{
public:
    static void computeTotalArea(Geometay** t,int n)
    {
        if(n<=0)
            return;
        double ans(t[0]->get_area());
        for(int i=1; i<n; ++i)
        {
            double k=t[i]->get_area();
            if(ans<k)
                ans=k;
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<ans<<endl;
    }
};
int main()
{
 //   freopen(ADDRESS);
    int n(0);
    cin>>n;
    Geometay** pp=new Geometay*[n];
    int cmd(0);
    double d[2];
    for(int i=0; i<n; ++i)
    {
        cin>>cmd;
        if(cmd==1)
        {
            cin>>d[0]>>d[1];
            pp[i]=new Rect(d[0],d[1]);
        }
        else if(cmd==2)
        {
            cin>>d[0];
            pp[i]=new Circle(d[0]);
        }
    }
    TotalArea tem;
    tem.computeTotalArea(pp,n);
    for(int i=0; i<n; ++i)
        delete pp[i];
    delete []pp;
    return 0;
}
------------------------------------------------------
2017182103:Problem1234:答案错误

#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum[10];
        for(int i=1;i<100;i++)
        {
            if(x/(10*i)==0&&y/(10*i)==0)
                break;
            int xx = x%(10*i);
            int yy = y%(10*i);
            sum[i-1]=xx-yy;
        }
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
      
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else  if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2016073026:Problem1235:答案错误
#include <iostream>
#include <iomanip>

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
    double chang,kuan;
public:
    Rect(double c,double k):chang(c),kuan(c){}
    virtual double getArea(){return chang*kuan;}
};

class Circle:public Geometry{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea(){return 3.14*radius*radius;}
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t,int n){
        double max=t[0]->getArea();
        for(int i=1;i<n;i++)
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t =new Geometry*[n];
    double type,r,c,k;
    for(int i=0;i<n;i++){
        cin>>type;
        if(type==1){
            cin>>c>>k;
            t[i]=new Rect(c,k);
        }
        else if(type==2){
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018192048:Problem1119:答案错误
#include<iostream>
using namespace std;
 
class BaseAccount{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string n,string a,int b){
		name=n;
		account=a;
		balance=b;
	}
    virtual void deposit(int m){
        balance+=m;
    }
    virtual void withdraw(int m){
        if(balance>=m)
            balance-=m;
        else
            cout<<"insufficient"<<endl;
         
    }
    virtual void display(){
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    ~BaseAccount(){}
};
 
class BasePlus:public BaseAccount{
protected:
    int limit,limit_sum;
public:
    BasePlus(){}
    BasePlus(string n,string a,int b):BaseAccount(n,a,b){
        limit=5000;
        limit_sum=0;
    }
    void deposit(int m){
        balance+=m;
    }
    void withdraw(int m){
        if(balance>=m)
            balance-=m;
        else if(balance<m&&m<=balance+limit){
            limit_sum=m-balance;
            balance=0;
        }
        else if(m>balance+limit)
            cout<<"insufficient"<<endl;
    }
    void display(){
        cout<<BaseAccount::name<<" "<<BaseAccount::account<<" Balance:";
        cout<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
    ~BasePlus(){}
};
 
int main(){
    int t;
    cin>>t;
    BaseAccount *pv;
    while(t--){
        string name,account;
		int balance;
        cin>>name>>account>>balance;
        if(account.at(1)=='A'){
        	BaseAccount a(name,account,balance);
        	pv=&a;
        	for(int i=1;i<=4;i++){
	            int m;
	            cin>>m;
	            if(i%2)
	                pv->deposit(m);
	            else
	                pv->withdraw(m);
        	}
        	pv->display();
		}
		else if(account.at(1)=='P'){
			BasePlus b(name,account,balance);
        	pv=&b;
        	for(int i=1;i<=4;i++){
	            int m;
	            cin>>m;
	            if(i%2)
	                pv->deposit(m);
	            else
	                pv->withdraw(m);
        	}
        	pv->display();
		}
            
    }
    return 0;
}
------------------------------------------------------
2018152010:Problem1234:答案错误
#include<iostream>
#include<iomanip>
#include<cmath>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class Group1:public Group
{
public:
    int add(int x, int y){return x+y;}
    int sub(int x, int y){return x-y;}
};

class Group2:public Group
{
    int add(int x, int y){return x+y;}
    int sub(int x, int y)
    {
        int a,b,c;
        a=(x%10+10-y%10)%10;
        b=(((x/10)%10+10)-(y/10)%10)%10*10;
        c=(x/100)-(y/100)*100;
        return a+b+c;
    }
};

class Group3:public Group
{
    int add(int x, int y)
    {
        int a,b,c;
        a=(x%10+y%10)%10;
        b=(((x/10)%10+(y/10)%10)%10)*10;
        c=(((x/100)+(y/100))%10)*100;
        return a+b+c;
    }
    int sub(int x, int y)
    {
        int a,b,c;
        a=(x%10*10-y%10)%10;
        b=(((x/10)%10+10)-(y/10)%10)%10*10;
        c=(x/100)-(y/100);
        return a+b+c;
    }
};
int main()
{
    Group *p;
    Group1 p1;
    Group2 p2;
    Group3 p3;
    int n,a,b,m;
    char f;
    cin>>n;
    while(n--)
    {
        cin>>m>>a>>f>>b;
        if(m==1)
            p=&p1;
        else if(m==2)
            p=&p2;
        else
            p=&p3;
        if(f=='+')
            cout<<p->add(a,b)<<endl;
        else
            cout<<p->sub(a,b)<<endl;
    }
}

------------------------------------------------------
2017182013:Problem1234:编译错误
#include <bits/stdc++.h>

using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
    int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }
    int sub(int x, int y)//输出减法的运算结果
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }
    int sub(int x, int y)//输出减法的运算结果
    {
        int xv,yv;
        xv = x/10;
        x %= 10;
        yv = y/10;
        y %= 10;
        if(x-y<0)
        {
            x+=10;
        }
        return (xv-yx)*10+x-y;
    }
};
class GroupC:public Group
{
public:
    int add(int x, int y)//输出加法的运算结果
    {
        int xv,yv;
        xv = x/10;
        x %= 10;
        yv = y/10;
        y %= 10;
        if(x+y>10)
        {
            x-=10;
        }
        if(xv+yv>10)
        {
            xv-=10;
        }
        return (xv+yx)*10+x+y;
    }
    int sub(int x, int y)//输出减法的运算结果
    {
        int xv,yv;
        xv = x/10;
        x %= 10;
        yv = y/10;
        y %= 10;
        if(x-y<0)
        {
            x+=10;
        }
        return (xv-yx)*10+x-y;
    }
};
int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        Group *g;
        int type;
        cin>>type;
        if(type==1)
        {
            GroupA a;
            g = &a;
            string str;
            cin>>str;
            int x=0,y=0,i;
            for(i=0;str[i]!='-'||str[i]!='+'; i++)
            {
                x=str[i]-'0'+x*10;
            }
            for(i=i+1;i<str.length(); i++)
            {
                y=str[i]-'0'+y*10;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2017144045:Problem1119:正确
#include <iostream>
#include <cstring>
using namespace std;
class BaseAccount
{
protected:
	string name;
	string account;
	int balance;	
public:
	BaseAccount()
	{
	}
	BaseAccount(string n,string a,int b)
	{
		name=n;
		account=a;
		balance=b;
	}
	void deposit(int money)
	{
		balance=balance+money;
	}
	virtual void withdraw(int money)
	{
		balance=balance-money;
		if(balance<0)
		{
			cout<<"insufficient"<<endl;
			balance=balance+money;
		}
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
	}
};

class BasePlus:public BaseAccount
{
	int limit;
    int limit_sum;
public:
	BasePlus(string n,string a,int b):BaseAccount(n,a,b)
	{
		limit=5000;
		limit_sum=5000;
	}
    virtual void withdraw(int money)
	{
		balance=balance-money;
		if(balance<0-limit)
		{
			cout<<"insufficient"<<endl;
			balance=balance+money;
		}
		if(balance<0)
		{
			limit_sum=limit+balance;
		}
	}
	virtual void display()
	{
		if(balance<0)
		    balance=0;
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" limit:"<<limit_sum<<endl;
	}
};

int main()
{
	int t;
	string n;
	string a;
	int b;
	int c,d,e,f;
	int money;
	cin>>t;
	while(t--)
	{
		BaseAccount *ac;
		cin>>n>>a>>b;
		//cout<<a<<endl;
		//cout<<a[1]<<endl;
		if(a[1]=='P')
		{
			ac=new BasePlus(n,a,b);
		}
		else
		{
			ac=new BaseAccount(n,a,b);
		}
		cin>>c>>d>>e>>f;
		ac->deposit(c);
		ac->withdraw(d);
		ac->deposit(e);
		ac->withdraw(f);
		ac->display();
	 } 
}
------------------------------------------------------
2018151020:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Group
{

public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
class GroupC:public Group
{
    int add(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            //cout<<pow(10,time)<<endl;
            //cout<<"x_s = "<<x_s<<"  y_s =  "<<y_s<<"  sum=  "<<sum<<endl;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum = (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *P;
        int k,x,y;
        char order;
        cin>>k>>x>>order>>y;
        if(k==1)
        {
            GroupA *A = new GroupA;
            P = A;
        }
        else if(k==2)
        {
            GroupB *B = new GroupB;
            P = B;
        }
        else if(k==3)
        {
            GroupC *C = new GroupC;
            P = C;
        }
        if(order=='+')
            cout<<P->add(x,y)<<endl;
        else if(order=='-')
            cout<<P->sub(x,y)<<endl;
    }
    return 0;
}

------------------------------------------------------
2018192009:Problem1234:答案错误
#include <iostream>
#include <cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};
class GroupB:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y)
    {
        int wei=1;
        int i,yy;
        int xx=x;
        while(xx/10>=10)
        {
            wei++;
            xx=xx/10;
        }
        int *x1=new int[wei];
        x1[wei-1]=x/pow(10,wei-1);
        int *y1=new int[wei];
        //y1[0]=y%10;
        int *answer=new int[wei];
        xx=x;
        yy=y;
        for(i=0;i<wei-1;i++)
        {
            x1[i]=xx%10;
            xx=xx/10;
        }
        for(i=0;i<wei-1;i++)
        {
            y1[i]=y%10;
            yy=yy/10;
        }
        for(i=0;i<wei;i++)
            answer[i]=(int)abs(x1[i]-y1[i]);
        int an=0;
        for(i=0;i<wei;i++)
            an+=answer[i]*pow(10,i);
        return an;
    }
};
int main()
{
    int t;
    cin>>t;
    int a,b,level;
    char m;
    Group *p;
    while(t--)
    {
        cin>>level>>a>>m>>b;
        if(level==1)
        {
            GroupA aa;
            p=&aa;
            if(m=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(level==2)
        {
            GroupB bb;
            p=&bb;
            if(m=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192043:Problem1129:正确
#include <iostream>
#include <cmath>
using namespace std;
class Ncard
{
protected:
    string ID,CName;
    int Counter;
public:
    virtual void initial(string IDs,string CNames,int Counters)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
    }
    int save(int m)
    {
        if(m<=0)
            return -1;
        Counter+=m;
        return 1;
    }
    int take(int m)
    {
        if(m<=0 || Counter-m<0)
            return -1;
        Counter-=m;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
class TCard:public Ncard
{
    int Tcounter;
public:
    void initial(string IDs,string CNames,int Counters,int Tcounters)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
        Tcounter=Tcounters;
    }
    int transfer(int m)
    {
        if(m<0 || Counter-m<0)
            return -1;
        Counter-=m;
        Tcounter+=m;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VCard:public Ncard
{
    int Credit;
public:
    void initial(string IDs,string CNames,int Counters,int Credits)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
        Credit=Credits;
    }
    int over(int m)
    {
        if(m<0 || Counter+Credit-m<0)
            return -1;
        Credit+=Counter-m;
        Counter=0;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(Ncard &obj)
{
    obj.info();
}
int main()
{
    string ID,CName;
    int Counter,Tcounter,Credit,m;
    Ncard x1;
    TCard x2;
    VCard x3;
    cin>>ID>>CName>>Counter;
    x1.initial(ID,CName,Counter);
    cin>>ID>>CName>>Counter>>Tcounter;
    x2.initial(ID,CName,Counter,Tcounter);
    cin>>ID>>CName>>Counter>>Credit;
    x3.initial(ID,CName,Counter,Credit);
    cin>>m;
    x1.save(m);
    cin>>m;
    x1.save(m);
    cin>>m;
    x1.take(m);
    cin>>m;
    x1.take(m);
    cin>>m;
    x2.save(m);
    cin>>m;
    x2.take(m);
    cin>>m;
    x2.transfer(m);
    cin>>m;
    x2.transfer(m);
    cin>>m;
    x3.save(m);
    cin>>m;
    x3.take(m);
    cin>>m;
    x3.over(m);
    cin>>m;
    x3.over(m);
    show(x1);
    show(x2);
    show(x3);
    return 0;
}

------------------------------------------------------
2018151020:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Group
{

public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
class GroupC:public Group
{
    int add(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            //cout<<pow(10,time)<<endl;
            //cout<<"x_s = "<<x_s<<"  y_s =  "<<y_s<<"  sum=  "<<sum<<endl;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *P;
        int k,x,y;
        char order;
        cin>>k>>x>>order>>y;
        if(k==1)
        {
            GroupA *A = new GroupA;
            P = A;
        }
        else if(k==2)
        {
            GroupB *B = new GroupB;
            P = B;
        }
        else if(k==3)
        {
            GroupC *C = new GroupC;
            P = C;
        }
        if(order=='+')
            cout<<P->add(x,y)<<endl;
        else if(order=='-')
            cout<<P->sub(x,y)<<endl;
    }
    return 0;
}

------------------------------------------------------
2018151044:Problem1234:正确
#include<iostream>
#include<string>
using namespace std;
class G
{
public:
	virtual ~G() {}
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class G1:public G
{
public:
	virtual int add(int x, int y)//输出加法的运算结果
	{
		return x+y;
	}
	virtual int sub(int x, int y)//输出减法的运算结果
	{
		return x-y;
	}
};
class G2:public G
{
public:
	virtual int add(int x, int y)//输出加法的运算结果
	{
		return x+y;
	}
	virtual int sub(int x, int y)//输出减法的运算结果
	{
		int ans[10],cnt=0;
		while(x||y)
		{
			ans[cnt++]=(10+x%10-y%10)%10;
			x/=10;
			y/=10; 
		}
		int res=0;
		for(int i=cnt-1;i>=0;--i)
		{
			res=res*10+ans[i];
		}
		return res;
	}
};
class G3:public G
{
public:
	virtual int add(int x, int y)//输出加法的运算结果
	{
		int ans[10],cnt=0;
		while(x||y)
		{
			ans[cnt++]=(x%10+y%10)%10;
			x/=10;
			y/=10; 
		}
		int res=0;
		for(int i=cnt-1;i>=0;--i)
		{
			res=res*10+ans[i];
		}
		return res;
	}
	virtual int sub(int x, int y)//输出减法的运算结果
	{
		int ans[10],cnt=0;
		while(x||y)
		{
			ans[cnt++]=(10+x%10-y%10)%10;
			x/=10;
			y/=10; 
		}
		int res=0;
		for(int i=cnt-1;i>=0;--i)
		{
			res=res*10+ans[i];
		}
		return res;
	}
};
int main()
{
	int t;
	cin>>t;
	G *p; 
	while(t--)
	{
		int no,a,c;
		char b;
		cin>>no>>a>>b>>c;
		if(no==1)p=new G1;
		else if(no==2)p=new G2;
		else p=new G3;
		if(b=='+')cout<<p->add(a,c)<<endl;
		else cout<<p->sub(a,c)<<endl;
		delete p;
	} 
}
------------------------------------------------------
2018151066:Problem1234:正确
#include<iostream>
using namespace std;
class Group
{
public :
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public :
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
void display(int *t,int n)
{
    for(int i=0; i<n; i++)
        cout<<t[i];
    cout<<endl;
}
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int  *x_=new int;
        int  *y_=new int;
        int len_x=0,len_y=0;
        while(x)
        {
            x_[len_x++]=x%10;
            x/=10;
        }

        while(y)
        {
            y_[len_y++]=y%10;
            y/=10;
        }

        for(int i=0; i<len_y; i++)
        {
            x_[i]-=y_[i];
            if(x_[i]<0)
                x_[i]+=10;
        }

        int ans=0;
        for(int i=0; i<len_x; i++)
        {

            ans=ans*10+x_[len_x-i-1];
        }

        return ans;
    }
};

class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int  *x_=new int;
        int  *y_=new int;
        int len_x=0,len_y=0;
        while(x)
        {
            x_[len_x++]=x%10;
            x/=10;
        }
        while(y)
        {
            y_[len_y++]=y%10;
            y/=10;
        }
        int len_m=(len_y>len_x?len_y:len_x);
        int *c=new int[len_m];
        for(int i=0; i<len_y+len_x-len_m; i++)
        {
            c[i]=x_[i]+y_[i];
            if(c[i]>9)
                c[i]-=10;
        }
        if(len_y>len_x)
        {
            for(int i=len_y+len_x-len_m; i<len_m; i++)
                c[i]=y_[i];
        }
        else
        {
            for(int i=len_y+len_x-len_m; i<len_m; i++)
                c[i]=x_[i];
        }
        int ans=0;
        for(int i=0; i<len_m; i++)
        {

            ans=ans*10+c[len_m-i-1];
        }
        return ans;
    }
    int sub(int x,int y)
    {
        int  *x_=new int;
        int  *y_=new int;
        int len_x=0,len_y=0;
        while(x)
        {
            x_[len_x++]=x%10;
            x/=10;
        }
        while(y)
        {
            y_[len_y++]=y%10;
            y/=10;
        }
        for(int i=0; i<len_y; i++)
        {
            x_[i]-=y_[i];
            if(x_[i]<0)
                x_[i]+=10;
        }
        int ans=0;
        for(int i=0; i<len_x; i++)
        {

            ans=ans*10+x_[len_x-i-1];
        }
        return ans;
    }
};
int main()
{
    int t;
    cin>>t;
    Group *group;
    while(t--)
    {
        int type;
        cin>>type;
        int x,y;
        char cmd;
        cin>>x>>cmd>>y;
        if(type==1)
        {
            group=new GroupA;

        }
        else if(type==2)
        {
            group=new GroupB;
        }
        else if(type==3)
        {
            group=new GroupC;
        }
        if(cmd=='+')
            cout<<group->add(x,y)<<endl;
        else
            cout<<group->sub(x,y)<<endl;
    }
}

------------------------------------------------------
2018152007:Problem1234:正确
#include <iostream>

using namespace std;
class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        int a;
        a=x+y;
        return a;
    }
    int sub(int x,int y)
    {
        int a;
        a=x-y;
        return a;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        int a;
        a=x+y;
        return a;
    }
    int sub(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]<b[f])
                a[f]=a[f]+10;
            g=a[f]-b[f]+g;
        }
        return g;
    }
};
class GroupC:public Group
{
public:
      int add(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]+b[f]>10)
                a[f]=a[f]-10;
            g=a[f]+b[f]+g;
        }
        return g;
    }
      int sub(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]<b[f])
                a[f]=a[f]+10;
            g=a[f]-b[f]+g;
        }
        return g;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        Group *g;
        int type;
        cin>>type;
        if(type==1)
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupA p;
           g=&p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
        }
        else if(type==2)
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupB p;
           g=&p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
        }
        else
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupC p;
           g=&p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
        }

    }
    return 0;
}

------------------------------------------------------
2018152114:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(string _name,string _account,int _balance):name(_name),account(_account),balance(_balance)
	{
	}
	void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(num>balance)
			cout<<"insufficient"<<endl;
		else
			balance-=num;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<endl;
	}
		virtual ~BaseAccount()
	{
	}
};
class BasePlus:public BaseAccount
{
protected:
	int limit;
	int limit_sum;
public:
	BasePlus(string _name,string _account,int _balance):BaseAccount(_name,_account,_balance)
	{
		limit=5000;
	}
	virtual void withdraw(int num)
	{
		if(num>balance+limit)
			cout<<"insufficient"<<endl;
		else if(balance<=num&&num<=balance+limit)
		{
			limit_sum=num-balance;
			limit-=limit_sum;
			balance=0;
		}
		else if(num<balance)
		{
			balance-=num;
			limit=5000;
		}

	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" "<<"Balance:"<<balance<<" "<<"limit:"<<limit<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	string _name,_account;
	int _balance;
	int num1,num2,num3,num4;
	BaseAccount* ps;
	while(t--)
	{
		cin>>_name>>_account>>_balance;
		cin>>num1>>num2>>num3>>num4;
		if(_account[1]=='A')
		{
			BaseAccount ba(_name,_account,_balance);
			ps=&ba;
			ps->deposit(num1);
			ps->withdraw(num2);
			ps->deposit(num3);
			ps->withdraw(num4);
			ps->display();
		}
		else if(_account[1]=='P')
		{
			BasePlus bp(_name,_account,_balance);
			ps=&bp;
			ps->deposit(num1);
			ps->withdraw(num2);
			ps->deposit(num3);
			ps->withdraw(num4);
			ps->display();
		}
	}
	return 0;
}

------------------------------------------------------
2017133026:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry{
    int w,h;
public:
    Rect(int _w,int _h){
        w=_w;
        h=_h;
    }
    double getArea(){
        return w*h;
    }
};

class Circle:public Geometry{
    int r;
public:
    Circle(int _r){
        r=_r;
    }
    double getArea(){
        return 3.14*r*r;
    }

};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n){
    double max=0;
    for(int i=0;i<n;i++){
        double temp=t[i]->getArea();
        if(temp>max){
            max=temp;
        }
    }
    cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
   }
};

int main()
{
    int t;
    cin>>t;
    int type,w,h,r;
    Geometry** t1=new Geometry*[t];
    int pos=0;
    while(t--){
        cin>>type;
        if(type==1){
            cin>>w>>h;
            Rect r1(w,h);
            t1[pos++]=&r1;
        }else if(type==2){
            cin>>r;
            Circle c1(r);
            t1[pos++]=&c1;
        }
    }
    TotalArea::computerTotalArea(t1,pos);
    return 0;
}

------------------------------------------------------
2016073026:Problem1235:答案错误
#include <iostream>
#include <iomanip>

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
    double chang,kuan;
public:
    Rect(double c,double k):chang(c),kuan(c){}
    virtual double getArea(){return chang*kuan;}
};

class Circle:public Geometry{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea(){return 3.14*radius*radius;}
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t,int n){
        double maxArea=t[0]->getArea();
        for(int i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t =new Geometry*[n];
    double type,r,c,k;
    for(int i=0;i<n;i++){
        cin>>type;
        if(type==1){
            cin>>c>>k;
            t[i]=new Rect(c,k);
        }
        else if(type==2){
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018191214:Problem1235:正确
#include<iostream>
#include<cstring>
#include<cmath>
#include<iomanip>
using namespace std;
class Geometry
{
public:
	virtual double getArea()=0;
};
class Rect:public Geometry
{
protected:
	double y,x;
public:
	Rect(){}
	Rect(double x1,double y1):x(x1),y(y1){}
	double getArea()
	{
		return x*y;
	}
};
class Circle:public Geometry
{
protected:
	double r;
public:
	Circle(){}
	Circle(double R):r(R){}
	double getArea()
	{
		return r*r*3.14;
	}
};
class TotalArea
{
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		double max=0;
		for(int i=0;i<n;i++)
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
			cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};
int main()
{
	int t,kind;
	double x,y,r;
	cin>>t;
	Geometry **p=new Geometry *[t];
	TotalArea TA;
	for(int i=0;i<t;i++)
	{
		cin>>kind;
		if(kind==1)
		{
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		else if(kind==2)
		{
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TA.computerTotalArea(p,t);
	return 0;
}
------------------------------------------------------
2018192025:Problem1234:正确
#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }
    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }
    virtual int sub(int x, int y)
    {
        int flag=0,i=0;
        while(x || y)
        {

            flag+=((10+x%10-y%10)%10)*pow(10,i);
            x/=10;
            y/=10;
            i+=1;
        }
        return flag;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int flag=0,i=0;
        while(x || y)
        {
            flag+=((x%10+y%10)%10)*pow(10,i);
            x/=10;
            y/=10;
            i+=1;
        }
        return flag;
    }
    virtual int sub(int x, int y)
    {
        int flag=0,i=0;
        while(x || y)
        {

            flag+=((10+x%10-y%10)%10)*pow(10,i);
            x/=10;
            y/=10;
            i+=1;
        }
        return flag;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int m,sum,x,y;
        Group *pv;
        char ch;
        cin>>m;
        if(m==1)
        {
            GroupA ss;
            pv=&ss;
            cin>>x>>ch>>y;
            if(ch=='+')
                sum=pv->add(x,y);
            else
                sum=pv->sub(x,y);
        }
        else if(m==2)
        {
            GroupB ss;
            pv=&ss;
            cin>>x>>ch>>y;
            if(ch=='+')
                sum=pv->add(x,y);
            else
                sum=pv->sub(x,y);
        }
        else if(m==3)
        {
            GroupC ss;
            pv=&ss;
            cin>>x>>ch>>y;
            if(ch=='+')
                sum=pv->add(x,y);
            else
                sum=pv->sub(x,y);
        }
        cout<<sum<<endl;
    }

}

------------------------------------------------------
2018192050:Problem1235:正确
#include<bits/stdc++.h>
using namespace std;
class Geometry{
    public:
        Geometry(){
        }
        virtual ~Geometry(){
        }
        virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    protected:
        int x,y;
    public:
        Rect(){
        }
        Rect(int a,int b){
            x=a;
            y=b;
        }
        ~Rect(){
        }  
        double getArea(){
        	return x*y;
		}
};
class Circle:public Geometry
{
    protected:
        int r;
    public:
        Circle(){
        }
        Circle(int a){
            r=a;
        }
        ~Circle(){
        }
        double getArea(){
        	return r*r*3.14;
		}
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n)
   {
   		double max=0,tmp;
   		for(int i=0;i<n;i++)
   		{
   			tmp=t[i]->getArea();
   			if(tmp>max)
   				max=tmp;
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max;
   }
};
int main(){
	int t,n;
	int x,y,r;
	cin>>t;
	Geometry **p;
	p=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		cin>>n;
		if(n==1)
		{
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		if(n==2)
		{
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea b;
	b.computerTotalArea(p,t);
	for(int i=0;i<t;i++)
	{
		delete p[i];
	}
	delete []p;
}
------------------------------------------------------
2016073026:Problem1235:答案错误
#include <iostream>
#include <iomanip>

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
    double chang,kuan;
public:
    Rect(double c,double k):chang(c),kuan(c){}
    virtual double getArea(){return chang*kuan;}
};

class Circle:public Geometry{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea(){return radius*radius*3.14;}
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t,int n){
        double maxArea=t[0]->getArea();
        for(int i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t =new Geometry*[n];
    double type,r,c,k;
    for(int i=0;i<n;i++){
        cin>>type;
        if(type==1){
            cin>>c>>k;
            t[i]=new Rect(c,k);
        }
        else if(type==2){
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2016071031:Problem1235:答案错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
};

class TotalArea {
public:
    static void computerTotalArea(Geometry** t,int n);
};

void computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << max <<endl;
}

int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    computerTotalArea(g, t);

    return 0;
}


------------------------------------------------------
2017163058:Problem1234:正确
#include <iostream>
#include <fstream>
#include <iomanip>
#include <stack>
using namespace std;
//某小学二年级的数学老师在教学生整数加减法运算时发现：班上的同学可以分成三类，
//
//第一类可以正确地完成加减法运算(GroupA)；
//
//第二类可以正确地完成加法运算，但对于减法运算来说，总是忘记借位的处理(GroupB)；
//
//第三类总是忘记加法的进位，也总是忘记减法的借位(GroupC)。（提示：小学二年级还没学负数。）
//
//现在请模拟当老师在课堂提问某位同学时，同学会给出的回答。
//
//实现时请基于下面的基类框架：
class Group
{
public:
    virtual int add(int x, int y) = 0;
    virtual int sub(int x, int y) = 0;
};
class GroupA:public Group
{
public:
    int add(int x, int y)
    {
        return x + y;
    }
    int sub(int x, int y)
    {
        return x - y;
    }
};
class GroupB:public Group
{
public:
    int add(int x, int y)
    {
        return x + y;
    }
    int sub(int x,int y)
    {
        stack<int> X, Y;
        int result = 0, temp;
        while(x)
        {
            X.push(x % 10);
            x /= 10;
        }
        while(y)
        {
            Y.push(y % 10);
            y /= 10;
        }
        while(X.size() > Y.size())
        {
            result = result*10 + X.top();
            X.pop();
        }
        while(!X.empty())
        {
            temp = (X.top() - Y.top());
            if(temp < 0)
            {
                temp += 10;
            }
            result = result*10 + temp;
            X.pop();
            Y.pop();
        }
        return result;
    }
};
class GroupC:public Group
{
public:
    int add(int x, int y)
    {
        stack<int> X, Y;
        int result = 0, temp = 0;
        while(x)
        {
            X.push(x % 10);
            x /= 10;
        }
        while(y)
        {
            Y.push(y % 10);
            y /= 10;
        }
        while(X.size() > Y.size())
        {
            result = result*10 + X.top();
            X.pop();
        }
        while(X.size() < Y.size())
        {
            result = result*10 + Y.top();
            Y.pop();
        }
        while(!X.empty())
        {
            temp = (X.top() + Y.top()) % 10;
            result = result*10 + temp;
            X.pop();
            Y.pop();
        }
        return result;
    }
    int sub(int x, int y)
    {
        stack<int> X, Y;
        int result = 0, temp;
        while(x)
        {
            X.push(x % 10);
            x /= 10;
        }
        while(y)
        {
            Y.push(y % 10);
            y /= 10;
        }
        while(X.size() > Y.size())
        {
            result = result*10 + X.top();
            X.pop();
        }
        while(!X.empty())
        {
            temp = (X.top() - Y.top());
            if(temp < 0)
            {
                temp += 10;
            }
            result = result*10 + temp;
            X.pop();
            Y.pop();
        }
        return result;
    }
};
int main()
{
//    freopen("C:\\Users\\acer\\Desktop\\in.txt", "r", stdin);
    int x, y, sign,t;
    char op;
    cin>>t;
    Group *p;
    while(t --)
    {
        cin>>sign>>x>>op>>y;

        switch(sign)
        {
        case 1:
            {
                GroupA student;
                p = &student;
                if(op == '+')
                {
                    cout<<p->add(x, y)<<endl;
                }
                else
                {
                    cout<<p->sub(x, y)<<endl;
                }
                break;
            }
        case 2:
            {
                GroupB student;
                p = &student;
                if(op == '+')
                {
                    cout<<p->add(x, y)<<endl;
                }
                else
                {
                    cout<<p->sub(x, y)<<endl;
                }
                break;
            }
        case 3:
            {
                GroupC student;
                p = &student;
                if(op == '+')
                {
                    cout<<p->add(x, y)<<endl;
                }
                else
                {
                    cout<<p->sub(x, y)<<endl;
                }
            }
        }
    }
}

------------------------------------------------------
2018192048:Problem1119:正确
#include<iostream>
using namespace std;
 
class BaseAccount{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string n,string a,int b){
		name=n;
		account=a;
		balance=b;
	}
    virtual void deposit(int m){
        balance+=m;
    }
    virtual void withdraw(int m){
        if(balance>=m)
            balance-=m;
        else
            cout<<"insufficient"<<endl;
         
    }
    virtual void display(){
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    ~BaseAccount(){}
};
 
class BasePlus:public BaseAccount{
protected:
    int limit,limit_sum;
public:
    BasePlus(){}
    BasePlus(string n,string a,int b):BaseAccount(n,a,b){
        limit=5000;
        limit_sum=0;
    }
    void deposit(int m){
        balance+=m;
    }
    void withdraw(int m){
        if(balance>=m)
            balance-=m;
        else if(balance<m&&m<=balance+limit){
            int temp=m-balance;
			limit_sum+=temp;
            balance=0;
        }
        else if(m>balance+limit)
            cout<<"insufficient"<<endl;
    }
    void display(){
        cout<<BaseAccount::name<<" "<<BaseAccount::account<<" Balance:";
        cout<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
    ~BasePlus(){}
};
 
int main(){
    int t;
    cin>>t;
    BaseAccount *pv;
    while(t--){
        string name,account;
		int balance;
        cin>>name>>account>>balance;
        if(account.at(1)=='A'){
        	BaseAccount a(name,account,balance);
        	pv=&a;
        	for(int i=1;i<=4;i++){
	            int m;
	            cin>>m;
	            if(i%2)
	                pv->deposit(m);
	            else
	                pv->withdraw(m);
        	}
        	pv->display();
		}
		else if(account.at(1)=='P'){
			BasePlus b(name,account,balance);
        	pv=&b;
        	for(int i=1;i<=4;i++){
	            int m;
	            cin>>m;
	            if(i%2)
	                pv->deposit(m);
	            else
	                pv->withdraw(m);
        	}
        	pv->display();
		}
            
    }
    return 0;
}
------------------------------------------------------
2017151066:Problem1120:答案错误
#include<iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	Animal(string n):name(n){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
	    Tiger(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
};
class Dog:public Animal
{
public:
	    Dog(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
};
class Duck:public Animal
{
public:
	    Duck(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
};
class Pig:public Animal
{
public:
	    Pig(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
};
int main()
{
    Animal *p_animal;
	int t;
	cin>>t;
	while(t--)
	{
		string ming,name;
		int ego;
		cin>>ming>>name>>ego;
		if(ming=="Tiger")
		{
        	p_animal=new Tiger(name);
        	p_animal->Speak();
		}
		else if(ming=="Pig")
		{
        	p_animal=new Pig(name);
        	p_animal->Speak();
		}
		else if(ming=="Duck")
		{
			p_animal=new Duck(name);
        	p_animal->Speak();
		}
		else if(ming=="Dog")
		{
			p_animal=new Dog(name);
        	p_animal->Speak();
		}
		else
		{
			cout<<"There is no Rabbit in our Zoo."<<endl;
		}

	}
	return 0;
}
------------------------------------------------------
2018192010:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
    ~Group(){}
};
class A:public Group
{
protected:
    int a,b;
public:
    A(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~A(){}
};
class B:public Group
{
public:
    B(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i]+0.5;
        return m;
    }
    ~B(){}
};
class C:public Group
{
public:
    C(){}
    ~C(){}
    int add(int x, int y)
    {
        int res[10]={0};
        int k=0;
        if(y>x)
        {
            int temp;
            temp = x;
            x = y;
            y = temp;
        }
        while(x>0)
        {
            res[k] = (x%10+y%10)%10;
            cout << res[k] << endl;
            cout << "x=" << x << endl;
            cout << "y=" << y << endl;
            x /=10;
            y /=10;
            k++;
        }
        int m=0;
        for(int i=0;i<k;i++)
        {
            m = m+pow(10,i)*res[i]+0.5;
            cout << "m=" << m <<endl;
        }
        return m;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i]+0.5;
        return m;
    }
};
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        Group *p;
        int type;
        int x,y;
        char c;
        cin >> type >> x >> c >> y;
        switch(type)
        {
        case 1:p = new A;break;
        case 2:p = new B;break;
        case 3:p = new C;break;
        }
        if(c == '+')
            cout << p->add(x,y);
        else
            cout << p->sub(x,y);
        cout << endl;
        delete p;
    }
    return 0;
}

------------------------------------------------------
2018152007:Problem1234:正确
#include <iostream>

using namespace std;
class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        int a;
        a=x+y;
        return a;
    }
    int sub(int x,int y)
    {
        int a;
        a=x-y;
        return a;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        int a;
        a=x+y;
        return a;
    }
    int sub(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]<b[f])
                a[f]=a[f]+10;
            g=a[f]-b[f]+g;
        }
        return g;
    }
};
class GroupC:public Group
{
public:
      int add(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]+b[f]>10)
                a[f]=a[f]-10;
            g=a[f]+b[f]+g;
        }
        return g;
    }
      int sub(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]<b[f])
                a[f]=a[f]+10;
            g=a[f]-b[f]+g;
        }
        return g;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        Group *g;
        int type;
        cin>>type;
        if(type==1)
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupA *p=new GroupA();
           g=p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
        }

        else if(type==2)
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupB *p=new GroupB();
           g=p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
        }
        else
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupC *p=new GroupC();
           g=p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
        }

    }
    return 0;
}

------------------------------------------------------
2018192043:Problem1129:正确
#include <iostream>
#include <cmath>
using namespace std;
class Ncard
{
protected:
    string ID,CName;
    int Counter;
public:
    void initial(string IDs,string CNames,int Counters)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
    }
    int save(int m)
    {
        if(m<=0)
            return -1;
        Counter+=m;
        return 1;
    }
    int take(int m)
    {
        if(m<=0 || Counter-m<0)
            return -1;
        Counter-=m;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
class TCard:public Ncard
{
    int Tcounter;
public:
    void initial(string IDs,string CNames,int Counters,int Tcounters)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
        Tcounter=Tcounters;
    }
    int transfer(int m)
    {
        if(m<0 || Counter-m<0)
            return -1;
        Counter-=m;
        Tcounter+=m;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VCard:public Ncard
{
    int Credit;
public:
    void initial(string IDs,string CNames,int Counters,int Credits)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
        Credit=Credits;
    }
    int over(int m)
    {
        if(m<0 || Counter+Credit-m<0)
            return -1;
        Credit+=Counter-m;
        Counter=0;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(Ncard &obj)
{
    obj.info();
}
int main()
{
    string ID,CName;
    int Counter,Tcounter,Credit,m;
    Ncard x1;
    TCard x2;
    VCard x3;
    cin>>ID>>CName>>Counter;
    x1.initial(ID,CName,Counter);
    cin>>ID>>CName>>Counter>>Tcounter;
    x2.initial(ID,CName,Counter,Tcounter);
    cin>>ID>>CName>>Counter>>Credit;
    x3.initial(ID,CName,Counter,Credit);
    cin>>m;
    x1.save(m);
    cin>>m;
    x1.save(m);
    cin>>m;
    x1.take(m);
    cin>>m;
    x1.take(m);
    cin>>m;
    x2.save(m);
    cin>>m;
    x2.take(m);
    cin>>m;
    x2.transfer(m);
    cin>>m;
    x2.transfer(m);
    cin>>m;
    x3.save(m);
    cin>>m;
    x3.take(m);
    cin>>m;
    x3.over(m);
    cin>>m;
    x3.over(m);
    show(x1);
    show(x2);
    show(x3);
    return 0;
}

------------------------------------------------------
2016071031:Problem1235:答案错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
};

class TotalArea {
public:
    static void computerTotalArea(Geometry** t,int n);
};

void computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << setprecision(2) << max <<endl;
}

int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    computerTotalArea(g, t);

    return 0;
}


------------------------------------------------------
2018192026:Problem1234:答案错误
#include<stdio.h>
#include<math.h>
class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10+10-y%10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
class GroupC:public Group
{
public:
	int add(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10+y%10>10)
				sum+=(x%10-10+y%10)*pow(10,i);
			else
				sum+=(x%10+y%10)*pow(10,i);
		}
		return sum;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10+10-y%10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		Group *person;
		int kind,x,y;
		char ch;
		scanf("%d %d%c%d",&kind,&x,&ch,&y);
		if(kind==1)
		{
			GroupA A;
			person=&A;
		}
		else if(kind==2)
		{
			GroupB B;
			person=&B;
		}
		else if(kind==3)
		{
			GroupC C;
			person=&C;
		}
		if(ch=='+')
			printf("%d\n",person->add(x,y));
		else
			printf("%d\n",person->sub(x,y));
	}
	return 0;
}


------------------------------------------------------
2018152007:Problem1234:正确
#include <iostream>

using namespace std;
class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        int a;
        a=x+y;
        return a;
    }
    int sub(int x,int y)
    {
        int a;
        a=x-y;
        return a;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        int a;
        a=x+y;
        return a;
    }
    int sub(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]<b[f])
                a[f]=a[f]+10;
            g=a[f]-b[f]+g;
        }
        return g;
    }
};
class GroupC:public Group
{
public:
      int add(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]+b[f]>10)
                a[f]=a[f]-10;
            g=a[f]+b[f]+g;
        }
        return g;
    }
      int sub(int x,int y)
    {
        int a[10]={0},b[10]={0},c=0,d=0,e,f,g=0,h,i=0;
        while(x)
        {
            a[c]=x%10;
            c++;
            x=x/10;
        }
        while(y)
        {
            b[d]=y%10;
            d++;
            y=y/10;
        }
        if(d<c)
        {
            e=c;
        }
        else
        {
            e=d;
        }
        for(f=e-1;f>=0;f--)
        {
            g=g*10;
            if(a[f]<b[f])
                a[f]=a[f]+10;
            g=a[f]-b[f]+g;
        }
        return g;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        Group *g;
        int type;
        cin>>type;
        if(type==1)
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupA *p=new GroupA();
           g=p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
            delete p;
        }

        else if(type==2)
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupB *p=new GroupB();
           g=p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
            delete p;
        }
        else
        {
           int a,b,result;
           char c;
           cin>>a>>c>>b;
           GroupC *p=new GroupC();
           g=p;
           if(c=='+')
                result=g->add(a,b);
            else
                result=g->sub(a,b);
            cout<<result<<endl;
            delete p;
        }


    }
    return 0;
}

------------------------------------------------------
2018192010:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
    ~Group(){}
};
class A:public Group
{
protected:
    int a,b;
public:
    A(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~A(){}
};
class B:public Group
{
public:
    B(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i]+0.5;
        return m;
    }
    ~B(){}
};
class C:public Group
{
public:
    C(){}
    ~C(){}
    int add(int x, int y)
    {
        int res[10]={0};
        int k=0;
        if(y>x)
        {
            int temp;
            temp = x;
            x = y;
            y = temp;
        }
        while(x>0)
        {
            res[k] = (x%10+y%10)%10;
            cout << res[k] << endl;
            x /=10;
            y /=10;
            k++;
        }
        int m=0;
        for(int i=0;i<k;i++)
        {
            m = m+pow(10,i)*res[i]+0.5;
        }
        return m;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0;
        for(int i=0;i<=k;i++)
            m = m+pow(10,i)*res[i]+0.5;
        return m;
    }
};
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        Group *p;
        int type;
        int x,y;
        char c;
        cin >> type >> x >> c >> y;
        switch(type)
        {
        case 1:p = new A;break;
        case 2:p = new B;break;
        case 3:p = new C;break;
        }
        if(c == '+')
            cout << p->add(x,y);
        else
            cout << p->sub(x,y);
        cout << endl;
        delete p;
    }
    return 0;
}

------------------------------------------------------
2018152102:Problem1234:正确
#include <iostream>
#include <iomanip>

using namespace std;
class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group {
public:
    int add(int x,int y) {
        return x+y;
    }
    int sub(int x,int y) {
        return x-y;
    }
};
class GroupB:public Group {
public:
   int add(int x,int y) {
        return x+y;
    }
    int sub(int x,int y) {
        int sum = 0;
        int a,b;
        int bit = 1;
        while(1) {
            a = x%10;
            b = y%10;
            x = x/10;
            y = y/10;
            sum = sum + (a-b+10)%10*bit;
            bit = bit * 10;
            if(x==0 && y==0) break;
        }
        return sum;
    }
};
class GroupC:public Group {
public:
    int add(int x,int y) {
        int sum = 0;
        int a,b;
        int bit = 1;
        while(1) {
            a = x%10;
            b = y%10;
            x = x/10;
            y = y/10;
            sum = sum + (a+b)%10*bit;
            bit = bit * 10;
            if(x==0 && y==0) break;
        }
        return sum;
    }
    int sub(int x,int y) {
        int sum = 0;
        int a,b;
        int bit = 1;
        while(1) {
            a = x%10;
            b = y%10;
            x = x/10;
            y = y/10;
            sum = sum + (a-b+10)%10*bit;
            bit = bit * 10;
            if(x==0 && y==0) break;
        }
        return sum;
    }
};
int main() {
    int t;

    cin>>t;
    while(t--) {
        int num;
        int x,y;
        char type;
        Group * p;

        cin>>num;
        cin>>x>>type>>y;
        if(num == 1) {
            p = new GroupA;
        }else if(num == 2) {
            p = new GroupB;
        }else {
            p = new GroupC;
        }

        if(type == '+') {
            cout<<p->add(x,y)<<endl;
        }else {
            cout<<p->sub(x,y)<<endl;
        }

        delete p;
    }

    return 0;
}

------------------------------------------------------
2016071031:Problem1235:编译错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
};

class TotalArea {
public:
    static void computerTotalArea(Geometry** t,int n);
};

void computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << fixed(0) << setprecision(2) << max <<endl;
}

int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    computerTotalArea(g, t);

    return 0;
}


------------------------------------------------------
2018151020:Problem1234:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Group
{

public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x||y)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
class GroupC:public Group
{
    int add(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x||y)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            //cout<<pow(10,time)<<endl;
            //cout<<"x_s = "<<x_s<<"  y_s =  "<<y_s<<"  sum=  "<<sum<<endl;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x||y)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *P;
        int k,x,y;
        char order;
        cin>>k>>x>>order>>y;
        if(k==1)
        {
            GroupA *A = new GroupA;
            P = A;
        }
        else if(k==2)
        {
            GroupB *B = new GroupB;
            P = B;
        }
        else if(k==3)
        {
            GroupC *C = new GroupC;
            P = C;
        }
        if(order=='+')
            cout<<P->add(x,y)<<endl;
        else if(order=='-')
            cout<<P->sub(x,y)<<endl;
    }
    return 0;
}

------------------------------------------------------
2018152010:Problem1234:答案错误
#include<iostream>
#include<iomanip>
#include<cmath>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class Group1:public Group
{
public:
    int add(int x, int y){return x+y;}
    int sub(int x, int y){return x-y;}
};

class Group2:public Group
{
    int add(int x, int y){return x+y;}
    int sub(int x, int y)
    {
        int a,b,c;
        a=(x%10+10-y%10)%10;
        b=(((x/10)%10+10)-(y/10)%10)%10*10;
        c=((x/100)-(y/100))*100;
        return a+b+c;
    }
};

class Group3:public Group
{
    int add(int x, int y)
    {
        int a,b,c;
        a=(x%10+y%10)%10;
        b=(((x/10)%10+(y/10)%10)%10)*10;
        c=(((x/100)+(y/100))%10)*100;
        return a+b+c;
    }
    int sub(int x, int y)
    {
        int a,b,c;
        a=(x%10*10-y%10)%10;
        b=(((x/10)%10+10)-(y/10)%10)%10*10;
        c=((x/100)-(y/100))*100;
        return a+b+c;
    }
};
int main()
{
    Group *p;
    Group1 p1;
    Group2 p2;
    Group3 p3;
    int n,a,b,m;
    char f;
    cin>>n;
    while(n--)
    {
        cin>>m>>a>>f>>b;
        if(m==1)
            p=&p1;
        else if(m==2)
            p=&p2;
        else
            p=&p3;
        if(f=='+')
            cout<<p->add(a,b)<<endl;
        else
            cout<<p->sub(a,b)<<endl;
    }
}


------------------------------------------------------
2018152062:Problem1235:答案错误
#include <iostream>
#include <iomanip>
using namespace std;
/*请编写程序，从图形数组中找出最大面积。基类框架如下所示：
以Geometry为基类，构建出Rect（矩形，数据成员为长和宽）和Circle（圆，数据成员为半径）两个类，
重写etArea()方法，其他方法根据需要自拟。
写一个TotalArea类，该类结构如下：
生成上述四个类并编写主函数，结果保留两位小数。*/
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
protected:
    float length;
    float width;
public:
    Rect(float _length,float _width):length(_length),width(_width){}
    double getArea()
    {
        return length*width;
    }
};
class Circle:public Geometry
{
protected:
    float r;
public:
    Circle(float _r):r(_r){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        float maxS=-999999;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxS)
                maxS=t[i]->getArea();
        }
        cout<<setiosflags(ios::fixed)<<setprecision(2)<<maxS<<endl;
    }
    //t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小

};
int main()
{
    int n;
    cin>>n;
    Geometry **u=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        int cnt;
        float length,width,r;
        cin>>cnt;
        if(cnt==1)
        {
            cin>>length>>width;
            u[i]=new Rect(length,width);
        }
        else
        {
            cin>>r;
            u[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(u,n);
    for(int i=0;i<n;i++)
        delete u[i];
    delete []u;
}

------------------------------------------------------
szuzy:Problem1235:答案错误
#include<iostream> 
#include<cstring> 
using namespace std; 
  
class Geometry{ 
public: 
    virtual double getArea()=0; //计算面积，结果保留小数点后两位 
    virtual ~Geometry(){} 
}; 
  
class Rect:public Geometry{ 
    double length; 
    double width; 
public: 
    Rect(double l,double w):length(l),width(w){} 
    double getArea() 
    { 
        return length * width; 
    } 
    ~Rect(){} 
}; 
  
class Circle:public Geometry{ 
    double radius; 
public: 
    Circle(double r):radius(r){} 
    double getArea() 
    { 
        return 3.14 * radius * radius; 
    } 
    ~Circle(){} 
}; 
  
class TotalArea{ 
public: 
    TotalArea(){} 
   static void computerTotalArea(Geometry** t,int n) 
   { 
        for(int i = 0;i < (n - 1);i++){ 
        if(t[i]->getArea() > t[i + 1]->getArea()) 
            swap(t[i],t[i + 1]); 
        } 
        cout << "最大面积=" << t[n - 1]->getArea() << endl; 
      
   }//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小 
}; 
  
  
  
  
int main(){ 
    int t; 
    Geometry** pg; 
    int type; 
    double l,w,r; 
    cin >> t; 
    pg = new Geometry *[t]; 
    for(int i = 0;i < t;i++){ 
        cin >> type; 
        if(type == 1){ 
            cin >> l >> w; 
            pg[i] = new Rect(l,w); 
        } 
        else if(type == 2){ 
            cin >> r; 
            pg[i] = new Circle(r); 
        } 
    } 
    TotalArea total; 
    total.computerTotalArea(pg,t); 
    for(int i = 0;i < t;i++) 
        delete pg[i]; 
    delete []pg; 
      
    return 0; 
} 

------------------------------------------------------
2016140066:Problem1119:答案错误
#include <iostream>
#include<string>
using namespace std;
class BaseAccount
{
protected:
    string account,name;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string N,string A,int B):name(N),account(A),balance(B){}
    void deposit(int money)
    {
        balance=balance+money;
    }
    virtual void withdraw(int money)
    {
        if(balance<money)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance=balance-money;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    int limit,limit_num;
public:
    BasePlus(){}
    BasePlus(string N,string A,int B):BaseAccount(N,A,B){limit=5000;limit_num=0;}
    virtual void withdraw(int money)
    {
        if((balance+limit)<money)
        {
            cout<<"insufficient2"<<endl;
        }
        else
        {
            if(balance<money)
            {
                limit_num=limit_num+(money-balance);
                balance=0;
                limit=5000-limit_num;
            }
            else
            {
                balance=balance-money;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
void diaoyong(BaseAccount *p,int d1,int w1,int d2,int w2)
{
    p->deposit(d1);
    p->withdraw(w1);
    p->deposit(d2);
    p->withdraw(w2);
    p->display();
}
int main()
{
    int t,B,d1,w1,d2,w2;
    string N,A;
    cin>>t;
    while(t--)
    {
        cin>>N>>A>>B>>d1>>w1>>d2>>w2;
        if(A[1]=='A')
        {
            BaseAccount *s=new BaseAccount(N,A,B);
            diaoyong(s,d1,w1,d2,w2);
            delete s;
        }
        else
        {
            BasePlus *s=new BasePlus(N,A,B);
            diaoyong(s,d1,w1,d2,w2);
            delete s;
        }

    }
    return 0;
}
------------------------------------------------------
2018151051:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(){}
    virtual void display()=0;
};
class Car:public Vehicle
{
    int member;
    int zhongliang;
public:
    Car(string n,int m,int z)
    {
        no=n;
        member=m;
        zhongliang=z;
    }
    virtual void display()
    {
        int money;
        money=member*8+zhongliang*2;
        cout<<no<<" "<<money<<endl;
    }
};
class Truck:public Vehicle
{
    int zhongliang1;
public:
    Truck(string n,int z)
    {
        no=n;
        zhongliang1=z;  
    }
    virtual void display()
    {
        int money;
        money=zhongliang1*5;
        cout<<no<<" "<<money<<endl;
    }
};
class Bus:public Vehicle
{
    int member1;
public:
    Bus(string n,int m)
    {
        no=n;
        member1=m;  
    }
    virtual void display()
    {
        int money;
        money=member1*3;
        cout<<no<<" "<<money<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        Vehicle *p;
        int type;
        cin>>type;
        if(type==1)
        {
            string no;
            int member;
            int zhongliang;
            cin>>no>>member>>zhongliang;
            p=new Car(no,member,zhongliang);
            p->display();
        }
        else if(type==2)
        {
            string no;
            int zhongliang;
            cin>>no>>zhongliang;
            p=new Truck(no,zhongliang);
            p->display();
        }
        else if(type==3)
        {
            string no;
            int member;
            cin>>no>>member;
            p=new Bus(no,member);
            p->display();
        }
        delete p;
    }
    return 0;
}
------------------------------------------------------
2018152062:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
/*请编写程序，从图形数组中找出最大面积。基类框架如下所示：
以Geometry为基类，构建出Rect（矩形，数据成员为长和宽）和Circle（圆，数据成员为半径）两个类，
重写etArea()方法，其他方法根据需要自拟。
写一个TotalArea类，该类结构如下：
生成上述四个类并编写主函数，结果保留两位小数。*/
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
protected:
    float length;
    float width;
public:
    Rect(float _length,float _width):length(_length),width(_width){}
    double getArea()
    {
        return length*width;
    }
};
class Circle:public Geometry
{
protected:
    float r;
public:
    Circle(float _r):r(_r){}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        float maxS=-999999;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxS)
                maxS=t[i]->getArea();
        }
        cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<maxS<<endl;
    }
    //t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小

};
int main()
{
    int n;
    cin>>n;
    Geometry **u=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        int cnt;
        float length,width,r;
        cin>>cnt;
        if(cnt==1)
        {
            cin>>length>>width;
            u[i]=new Rect(length,width);
        }
        else
        {
            cin>>r;
            u[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(u,n);
    for(int i=0;i<n;i++)
        delete u[i];
    delete []u;
}

------------------------------------------------------
2018192008:Problem1234:正确
#include<iostream>

using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        int index=0;
        int sum=0,i=1;
        while(x||y)
        {
            int a,b;
            a=x%10;
            b=y%10;
            if(a<b)
                index=a+10-b;
            else
                index=a-b;
            x/=10;
            y/=10;
            sum+=index*i;
            i*=10;
        }
        return sum;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x,int y)
    {
       int index=0;
       int sum=0,i=1;
        while(x||y)
        {
            int a,b;
            a=x%10;
            b=y%10;
            if(a+b>=10)
                index=a+b-10;
            else
                index=a+b;
            x/=10;
            y/=10;
            sum+=index*i;
            i*=10;
        }
        return sum;
    }
    virtual int sub(int x,int y)
    {
         int index=0;
        int sum=0,i=1;
        while(x||y)
        {
            int a,b;
            a=x%10;
            b=y%10;
            if(a<b)
                index=a+10-b;
            else
                index=a-b;
            x/=10;
            y/=10;
            sum+=index*i;
            i*=10;
        }
        return sum;
    }
};
int main()
{
    int t;
    cin>>t;
    Group *g;
    GroupA ga;
    GroupB gb;
    GroupC gc;
    while(t--)
    {
        int k,x,y;
        char f;
        cin>>k>>x>>f>>y;
        if(k==1)
        {
            g=&ga;
            if(f=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(k==2)
        {
            g=&gb;
            if(f=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(k==3)
        {
            g=&gc;
            if(f=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2018151092:Problem1235:答案错误
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;

class Geometry
{
	public:
		Geometry()
		{
		}
    	virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
	protected:
		double length;
		double width;
	public:
		Rect()
		{
		}
		
		Rect(double l,double w)
		{
			length=l;
			width=w;
		}
		
		virtual double getArea()
		{
			return length*width;
		}
		
		~Rect()
		{
		}
};

class Circle:public Geometry
{
	protected:
		double radius;
	public:
		Circle()
		{
		}
		
		Circle(double r)
		{
			radius=r;
		}
		
		virtual double getArea()
		{
			return 3.14*radius*radius;
		}
		
		~Circle()
		{
		}
};

class TotalArea
{
	public:
		TotalArea()
		{
		}
		
   		static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
   		{
   			double max=0;
   			int i;
   			
   			for(i=0;i<n;i++)
   			{
   				if(t[i]->getArea()>max)
   				{
   					max=t[i]->getArea();
				}
			}
			
			cout<<"最大值="<<fixed<<setprecision(2)<<max<<endl;
		}

};

int main()
{
	int t;
	int i;
	int type;
	double L;
	double W;
	double R;
	
	cin>>t;
	
	Geometry *Ace[t];
	
	for(i=0;i<t;i++)
	{
		cin>>type;
		
		if(type==1)
		{
			cin>>L>>W;
			Ace[i]=new Rect(L,W);
		}
		
		else if(type==2)
		{
			cin>>R;
			Ace[i]=new Circle(R);
		}
	}
	
	TotalArea Summary;
	
	Summary.computerTotalArea(Ace,t);
	
	return 0;
}
------------------------------------------------------
2018151031:Problem1129:正确
#include <bits/stdc++.h>
using namespace std;
//类定义 
class travel;
class vip;
class card
{
    long id;
    string CName;
    float Counter;
public:
    friend travel;
    friend vip;
    virtual void initial(long id_in,string n,float c);
    int save(float m);
    int take(float m);
    virtual void info();
};
class travel:public card
{
    int Tcounter;
public:
    void initial(long id_in,string n,float c,int t); 
    int transfer(float m);
    void info();
};
class vip:public card
{
    int Credit;
public:
    void initial(long id_in,string n,float c,int credit);
    int over(int m);
    void info();
};
//类实现 
void card::info()
{
    cout<<id<<'-'<<CName<<'-'<<Counter<<endl;
}   
void card::initial(long id_in,string n,float c)
{
    id=id_in;
    CName=n;
    Counter=c;      
}   
int card::save(float m)
{
    if(m<0)
        return -1;
    if(m!=(int)m)
        return -1;
    if(m<0)
        return -1;
    else
        Counter+=m;
    return 1;
}
int card::take(float m)
{
    if(m<0)
        return -1;
    if(m!=(int)m)
        return -1;
    if(m>Counter)
        return -1;
    else
        Counter-=m;
    return 1;
}
void travel::info()
{
    cout<<id<<'-'<<CName<<'-'<<Counter<<'-'<<Tcounter<<endl;
}
int travel::transfer(float m)
{
    if(m<0)
        return -1;
    if(m>Counter)
        return -1;
    else
    {
        Counter-=m;
        Tcounter+=m;    
    }   
} 
void travel::initial(long id_in,string n,float c,int t)
{
    id=id_in;
    CName=n;
    Counter=c;      
    Tcounter=t;
}  
void vip::info()
{
    cout<<id<<'-'<<CName<<'-'<<Counter<<'-'<<Credit<<endl;
}
int vip::over(int m)
{
    if(m<0)
        return -1;
    if(m>Counter+Credit)
        return -1;
    else
    {
        Credit-=m-Counter;
        Counter=0;
        return 1;
    }
}
void vip::initial(long id_in,string n,float c,int credit)
{
    id=id_in;
    CName=n;
    Counter=c;      
    Credit=credit;
}   
void show(card &obj)
{
    obj.info();
}
//主函数 
int main()
{
    long id;
    string n;
    float balance;
    cin>>id>>n>>balance;
    card c1;
    c1.initial(id,n,balance);
    int tcount_in;
    cin>>id>>n>>balance>>tcount_in;
    travel t;
    t.initial(id,n,balance,tcount_in);
    int o;
    cin>>id>>n>>balance>>o;
    vip v;
    v.initial(id,n,balance,o);
    float A,B,C,D;
    cin>>A>>B>>C>>D;
    c1.save(A);
    c1.save(B);
    c1.take(C);
    c1.take(D);
    cin>>A>>B>>C>>D;
    t.save(A);
    t.take(B);
    t.transfer(C);
    t.transfer(D);
    cin>>A>>B>>C>>D;
    v.save(A);
    v.take(B);
    v.over(C);
    v.over(D);
    card *c;
    c=&c1;
    show(*c);
    c=&t;
    show(*c);
    c=&v;
    show(*c);
}
------------------------------------------------------
2017163101:Problem1235:答案错误
#include<iostream>
#include<cstdio>
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:public Geometry{
	private:
		double l,h;
	public:
		double getArea(){
			double area=l*h;
			return area;
		}
		Rect(double _l,double _h):l(_l),h(_h){
			
		}
};
class Circle:public Geometry{
	private:
		double r;
	public:
		double getArea(){
			double area=3.14*r*r;
		}
		Circle(double _r):r(_r){
			
		}
};
/*
class TotalArea{
public:
   static void computerTotalArea(Geometry* t,int n){
   	double area=t[0].getArea();
   	for(int i=0;i<n;i++){
   		//area=t.getArea();
   		if(area>t[i].getArea())
   		area=t[i].getArea();
	   }
   	cout<<"最大面积="<<area<<endl;
   }
};*/
int main(){
	int t;
	cin>>t;
	double area=0.0;
	while(t--){
		Geometry *g;
		int flag;
		double l,h,r;
		cin>>flag;
		if(flag==1){
			cin>>l>>h;
			g=new Rect(l,h);
			if(g->getArea()>area)
			area=g->getArea();
			//t.computerTotalArea(g,t);
		}
		else{
			cin>>r;
			g=new Circle(r);
			//g->getArea();
			if(g->getArea()>area)
			area=g->getArea();
		}
	}
	cout<<"最大面积="<<area;
	return 0;
}
------------------------------------------------------
2016071031:Problem1235:内存超限
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
};

class TotalArea {
public:
    static void computerTotalArea(Geometry** t,int n);
};

void computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << fixed << setprecision(2) << max <<endl;
}

int main() {
	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    computerTotalArea(g, t);

    return 0;
}


------------------------------------------------------
2018151092:Problem1235:正确
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;

class Geometry
{
	public:
		Geometry()
		{
		}
    	virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
	protected:
		double length;
		double width;
	public:
		Rect()
		{
		}
		
		Rect(double l,double w)
		{
			length=l;
			width=w;
		}
		
		virtual double getArea()
		{
			return length*width;
		}
		
		~Rect()
		{
		}
};

class Circle:public Geometry
{
	protected:
		double radius;
	public:
		Circle()
		{
		}
		
		Circle(double r)
		{
			radius=r;
		}
		
		virtual double getArea()
		{
			return 3.14*radius*radius;
		}
		
		~Circle()
		{
		}
};

class TotalArea
{
	public:
		TotalArea()
		{
		}
		
   		static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
   		{
   			double max=0;
   			int i;
   			
   			for(i=0;i<n;i++)
   			{
   				if(t[i]->getArea()>max)
   				{
   					max=t[i]->getArea();
				}
			}
			
			cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
		}

};

int main()
{
	int t;
	int i;
	int type;
	double L;
	double W;
	double R;
	
	cin>>t;
	
	Geometry *Ace[t];
	
	for(i=0;i<t;i++)
	{
		cin>>type;
		
		if(type==1)
		{
			cin>>L>>W;
			Ace[i]=new Rect(L,W);
		}
		
		else if(type==2)
		{
			cin>>R;
			Ace[i]=new Circle(R);
		}
	}
	
	TotalArea Summary;
	
	Summary.computerTotalArea(Ace,t);
	
	return 0;
}
------------------------------------------------------
2018192010:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
    ~Group(){}
};
class A:public Group
{
protected:
    int a,b;
public:
    A(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~A(){}
};
class B:public Group
{
public:
    B(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0,p=1;
        for(int i=0;i<=k;i++)
        {
            m = m+p*res[i];
            p*=10;
        }
        return m;
    }
    ~B(){}
};
class C:public Group
{
public:
    C(){}
    ~C(){}
    int add(int x, int y)
    {
        int res[10]={0};
        int k=0;
        if(y>x)
        {
            int temp;
            temp = x;
            x = y;
            y = temp;
        }
        while(x>0)
        {
            res[k] = (x%10+y%10)%10;
            x /=10;
            y /=10;
            k++;
        }
        int m=0,p=1;
        for(int i=0;i<k;i++)
        {
            m = m+p*res[i];
            p*=10;
        }
        return m;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0,p=1;
        for(int i=0;i<=k;i++)
       {
           m = m+pow(10,i)*res[i];
           p*=10;
       }
        return m;
    }
};
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        Group *p;
        int type;
        int x,y;
        char c;
        cin >> type >> x >> c >> y;
        switch(type)
        {
        case 1:p = new A;break;
        case 2:p = new B;break;
        case 3:p = new C;break;
        }
        if(c == '+')
            cout << p->add(x,y);
        else
            cout << p->sub(x,y);
        cout << endl;
        delete p;
    }
    return 0;
}

------------------------------------------------------
2016071031:Problem1235:正确
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
};

class TotalArea {
public:
    static void computerTotalArea(Geometry** t,int n);
};

void computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << fixed << setprecision(2) << max <<endl;
}

int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    computerTotalArea(g, t);

    return 0;
}


------------------------------------------------------
2016140066:Problem1119:正确
#include <iostream>
#include<string>
using namespace std;
class BaseAccount
{
protected:
    string account,name;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string N,string A,int B):name(N),account(A),balance(B){}
    void deposit(int money)
    {
        balance=balance+money;
    }
    virtual void withdraw(int money)
    {
        if(balance<money)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance=balance-money;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    int limit,limit_num;
public:
    BasePlus(){}
    BasePlus(string N,string A,int B):BaseAccount(N,A,B){limit=5000;limit_num=0;}
    virtual void withdraw(int money)
    {
        if((balance+limit)<money)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            if(balance<money)
            {
                limit_num=limit_num+(money-balance);
                balance=0;
                limit=5000-limit_num;
            }
            else
            {
                balance=balance-money;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
void diaoyong(BaseAccount *p,int d1,int w1,int d2,int w2)
{
    p->deposit(d1);
    p->withdraw(w1);
    p->deposit(d2);
    p->withdraw(w2);
    p->display();
}
int main()
{
    int t,B,d1,w1,d2,w2;
    string N,A;
    cin>>t;
    while(t--)
    {
        cin>>N>>A>>B>>d1>>w1>>d2>>w2;
        if(A[1]=='A')
        {
            BaseAccount *s=new BaseAccount(N,A,B);
            diaoyong(s,d1,w1,d2,w2);
            delete s;
        }
        else
        {
            BasePlus *s=new BasePlus(N,A,B);
            diaoyong(s,d1,w1,d2,w2);
            delete s;
        }

    }
    return 0;
}
------------------------------------------------------
2018192045:Problem1235:正确
#include<iostream>
using namespace std;
#include<cstring>
#include<iomanip>
class Geometry
{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:public Geometry
{
    int chang,kuang;
public:
    Rect(int c,int k):chang(c),kuang(k) {}
    double getArea()
    {
        return chang*kuang;
    }

};
class Circle:public Geometry
{
    int r;
public:
    Circle(int r1):r(r1) {}
    double getArea()
    {
        return 3.14*r*r;
    }

};
class TotalArea
{

public:

    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        Geometry *temp;
        int i,j;

        for(i=0; i<n-1; i++)
        {
            for(j=0; j<n-i-1; j++)
            {

                if((t[j]->getArea())>(t[j+1]->getArea()))
                {
                    temp=t[j+1];
                    t[j+1]=t[j];
                    t[j]=temp;

                }
            }
        }
        cout<<"最大面积="<<setprecision(2)<<setiosflags(ios::fixed)<<t[n-1]->getArea()<<endl;
    }

};
int main()
{
    int type,chang,kuang,r,i=0,t,flag,j;
    cin>>t;
    flag=t;
    Geometry **p;
    TotalArea C;
    p=new Geometry*[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>chang>>kuang;
            Rect A(chang,kuang);
            p[i]=&A;
        }
        if(type==2)
        {
            cin>>r;
            Circle B(r);
            p[i]=&B;
        }
        i++;
    }
    C.computerTotalArea(p,flag);
}

------------------------------------------------------
2018151051:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class Animal
{
protected:
    string name;
    int year;
public:
    Animal(){}
    virtual void speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        Animal *p;
        string ask;
        cin>>ask;
        string name;
        int year;
        cin>>name>>year;
        if(ask=="Tiger")
        {
            p=new Tiger(name,year);
            p->speak();
            delete p;
        }
        else if(ask=="Dog")
        {
            p=new Dog(name,year);
            p->speak();
            delete p;
        }
        else if(ask=="Duck")
        {
            p=new Duck(name,year);
            p->speak();
            delete p;
        }
        else if(ask=="Pig")
        {
            p=new Pig(name,year);
            p->speak();
            delete p;
        }
        else
        {
            cout<<"There is no "<<ask<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018041051:Problem1235:运行错误
#include<iostream>
#include<string>
#include<cstring>
 
using namespace std;
 
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string name1,string account1,int balance1):name(name1),account(account1),balance(balance1){}
    void deposit(int num)
    {
        balance+=num;
    }
    virtual void withdraw(int num)
    {
        if((balance-num)>=0)
        {
            balance-=num;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
 
class BasePlus:public BaseAccount
{
protected:
    int limit;
public:
    BasePlus()
    {
        limit=5000;
    }
    BasePlus(string name1,string account1,int balance1):BaseAccount(name1,account1,balance1)
    {
        limit=5000;
    }
    virtual void withdraw(int num)
    {
        if((balance-num+limit)>=0)
        {
            balance-=num;
            if(balance<0)
            {
                limit+=balance;
                balance=0;
            }
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
 
 
 
int main()
{
    BaseAccount *BA;
 
    int t;
    cin>>t;
    while(t--)
    {
        int balance;
        string name,account;
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BA=new BaseAccount(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
        else
        {
            BA= new BasePlus(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
    }
 	
 	delete []BA;
 	
    return 0;
}
------------------------------------------------------
2018192010:Problem1234:正确
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
    ~Group(){}
};
class A:public Group
{
protected:
    int a,b;
public:
    A(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~A(){}
};
class B:public Group
{
public:
    B(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0,p=1;
        for(int i=0;i<k;i++)
        {
            m = m+p*res[i];
            p*=10;
        }
        return m;
    }
    ~B(){}
};
class C:public Group
{
public:
    C(){}
    ~C(){}
    int add(int x, int y)
    {
        int res[10]={0};
        int k=0;
        if(y>x)
        {
            int temp;
            temp = x;
            x = y;
            y = temp;
        }
        while(x>0)
        {
            res[k] = (x%10+y%10)%10;
            x /=10;
            y /=10;
            k++;
        }
        int m=0,p=1;
        for(int i=0;i<k;i++)
        {
            m = m+p*res[i];
            p*=10;
        }
        return m;
    }
    int sub(int x, int y)
    {
        int res[10];
        int k=0;
        while(x>0)
        {
            res[k] = ((10+x%10)-y%10)%10;
            k++;
            x /=10;
            y /=10;
        }
        int m=0,p=1;
        for(int i=0;i<k;i++)
       {
           m = m+p*res[i];
           p*=10;
       }
        return m;
    }
};
int main()
{
    int n;
    cin >> n;
    while(n--)
    {
        Group *p;
        int type;
        int x,y;
        char c;
        cin >> type >> x >> c >> y;
        switch(type)
        {
        case 1:p = new A;break;
        case 2:p = new B;break;
        case 3:p = new C;break;
        }
        if(c == '+')
            cout << p->add(x,y);
        else
            cout << p->sub(x,y);
        cout << endl;
        delete p;
    }
    return 0;
}

------------------------------------------------------
2017152043:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
	virtual ~Geometry(){}
};

class Rect:public Geometry{
	double length;
	double width;
public:
	Rect(double l,double w):length(l),width(w){}
	double getArea()
	{
		return length * width;
	}
	~Rect(){}
};

class Circle:public Geometry{
	double radius;
public:
	Circle(double r):radius(r){}
	double getArea()
	{
		return 3.14 * radius * radius;
	}
	~Circle(){}
};

class TotalArea{
public:
	TotalArea(){}
   static void computerTotalArea(Geometry** t,int n)
   {
   		double max = t[0]->getArea();
   		for(int i = 1;i < n;i++){
			if(t[i]->getArea() > max)
				max = t[i]->getArea();
	    }
		cout << "最大面积=" << fixed << setprecision(2) << t[n - 1]->getArea() << endl;
	
   }//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
};




int main(){
	int t;
	Geometry** pg;
	int type;
	double l,w,r;
	cin >> t;
	pg = new Geometry *[t];
	for(int i = 0;i < t;i++){
		cin >> type;
		if(type == 1){
			cin >> l >> w;
			pg[i] = new Rect(l,w);
		}
		else if(type == 2){
			cin >> r;
			pg[i] = new Circle(r);
		}
	}
	TotalArea total;
	total.computerTotalArea(pg,t);
	for(int i = 0;i < t;i++)
		delete pg[i];
	delete []pg;
	
	return 0;
}

------------------------------------------------------
2018041051:Problem1235:正确
#include<iostream>
#include<string>
#include<cstring>
#include<iomanip>

using namespace std;

class Geometry{

public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};

class Rect:public Geometry
{
protected:
    double dlong,wide;
public:
    Rect(){}
    Rect(double dlong1,double wide1):dlong(dlong1),wide(wide1){}
    double getArea()
    {
        return dlong*wide;
    }
    ~Rect(){}
};

class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(){}
    Circle(double r1):r(r1){}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle(){}
};

class TotalArea{

public:

    static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double biggest=0;
        for(int i=0;i<n;i++)
        {
            if(p[i]->getArea()>biggest)
                biggest=(p[i]->getArea());
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<biggest<<endl;
    }
};

int main()
{
    Geometry **p;
    int t;
    cin>>t;

    p = new Geometry *[t];

    for(int i=0;i<t;i++)
    {
        int n;
        cin>>n;
        if(n==1)
        {
            int dlong,wide;
            cin>>dlong>>wide;
            p[i]=new Rect(dlong,wide);
        }
        else
        {
            int r;
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea pr;
    pr.computerTotalArea(p,t);

    for(int i=0;i<t;i++)
    {
        delete p[i];
    }
    delete []p;

    return 0;
}

------------------------------------------------------
2018152102:Problem1129:正确
#include <iostream>
#include <string>
 
using namespace std;
 
class CARD{
protected:
    int ID;
    string CName;
    int Counter;
public:
    CARD(int id,string cname,int counter = 0):ID(id),CName(cname),Counter(counter) {}
    int save(int mon);
    int take(int mon);
    virtual void info();
};
 
class Traffic_card:public CARD{
protected:
    int T_account;
public:
    Traffic_card(int id,string cname,int counter,int t_account)
        :CARD(id,cname,counter),T_account(t_account) {}
    int transfer(int mon);
    void info();
};
 
class VIP_card:public CARD {
protected:
    int Credit;
public:
    VIP_card(int credit,int id,string cname,int counter)
        :CARD(id,cname,counter),Credit(credit) {}
    int over(int mon);
    void info();
};
 
void show(CARD& card);
 
int main() {
    int ID;
    string CName;
    int Counter;
    int T_account;
    int Credit;
    int mon;
 
    cin>>ID>>CName>>Counter;
    CARD card(ID,CName,Counter);
    cin>>ID>>CName>>Counter>>T_account;
    Traffic_card t_card(ID,CName,Counter,T_account);
    cin>>ID>>CName>>Counter>>Credit;
    VIP_card vip_card(Credit,ID,CName,Counter);
 
    //common_card
    for(int i=0;i<2;i++) {
        cin>>mon;
        card.save(mon);
    }
    for(int i=0;i<2;i++) {
        cin>>mon;
        card.take(mon);
    }
 
    //traffic_card
    cin>>mon;
    t_card.save(mon);
    cin>>mon;
    t_card.take(mon);
    for(int i=0;i<2;i++) {
        cin>>mon;
        t_card.transfer(mon);
    }
 
    //vip_card
    cin>>mon;
    vip_card.save(mon);
    cin>>mon;
    vip_card.take(mon);
    for(int i=0;i<2;i++) {
        cin>>mon;
        vip_card.over(mon);
    }
 
    show(card);
    show(t_card);
    show(vip_card);
 
    return 0;
}
 
 
 
 
void show(CARD& card) {
    card.info();
}
 
int CARD::save(int mon) {
    if(mon <= 0) return -1;
 
    Counter += mon;
    return 1;
}
 
int CARD::take(int mon) {
    if(mon > 0 && mon <= Counter) {
        Counter -= mon;
        return 1;
    }
    return -1;
}
 
void CARD::info() {
    cout<<ID<<"-"<<CName<<"-"<<Counter;
    cout<<endl;
}
 
int Traffic_card::transfer(int mon) {
    if(mon > 0 && mon <= Counter) {
        T_account += mon;
        Counter -= mon;
        return 1;
    }
    return -1;
}
 
void Traffic_card::info() {
    cout<<ID<<"-"<<CName<<"-"<<Counter;
    cout<<"-"<<T_account;
    cout<<endl;
}
 
int VIP_card::over(int mon) {
    if(mon > Counter && mon - Counter <= Credit) {
        mon -= Counter;
        Counter = 0; //余额清零
        Credit -= mon;
        return 1;
    }
    return -1;
}
 
void VIP_card::info() {
     cout<<ID<<"-"<<CName<<"-"<<Counter;
     cout<<"-"<<Credit;
     cout<<endl;
}
 
------------------------------------------------------
2018192048:Problem1235:编译错误
#include<iostream>
using namespace std;

class Geometry{
public:
	virtual double getArea()=0;
}
class Rect:public Geometry{
protected:
	double x,y;
public:
	Rect(){}
	Rect(double x_,double y_){
		x=x_;
		y=y_;
	}
	double getArea(){
		return x*y;
	}
	~Rect(){}
}
class Circle:public Geometry{
protected:
	double r;
public:
	Circle(){}
	Circle(double r_){
		r=r_;
	}
	double getArea(){
		return 3.14*r*r;
	}
	~Circle(){}
}

class TotalArea{
public:
	static void computerTotalArea(Geometry**t,int n)
};
------------------------------------------------------
2017163101:Problem1235:答案错误
#include<iostream>
#include<iomanip>
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; 

};
class Rect:public Geometry{
	private:
		double l,h;
	public:
		double getArea(){
			double area=l*h;
			return area;
		}
		Rect(double _l,double _h):l(_l),h(_h){
			
		}
};
class Circle:public Geometry{
	private:
		double r;
	public:
		double getArea(){
			double area=3.14*r*r;
		}
		Circle(double _r):r(_r){
			
		}
};
/*
class TotalArea{
public:
   static void computerTotalArea(Geometry* t,int n){
   	double area=t[0].getArea();
   	for(int i=0;i<n;i++){
   		//area=t.getArea();
   		if(area>t[i].getArea())
   		area=t[i].getArea();
	   }
   	cout<<"最大面积="<<area<<endl;
   }
};*/
int main(){
	int t;
	cin>>t;
	double area=0.0;
	while(t--){
		Geometry *g;
		int flag;
		double l,h,r;
		cin>>flag;
		if(flag==1){
			cin>>l>>h;
			g=new Rect(l,h);
			if(g->getArea()>area)
			area=g->getArea();
			//t.computerTotalArea(g,t);
		}
		else{
			cin>>r;
			g=new Circle(r);
			//g->getArea();
			if(g->getArea()>area)
			area=g->getArea();
		}
	}
	cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<area;
	return 0;
}
------------------------------------------------------
2018151058:Problem1119:答案错误
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string num;
    int balance;
public:
    BaseAccount() {};
    BaseAccount(string n,string n1,int b)
    {
        name=n;
        num=n1;
        balance=b;
    }
    virtual void desposit(int n)
    {
        balance+=n;
    }
    virtual bool withdraw(int n)
    {
        if(n>balance)
        {
             cout<<"insufficient"<<endl;
             return 0;
        }

        else
            balance-=n;
            return 1;
    }
    virtual void display()
    {
        cout<<name<<" "<<num<<" Balance:"<<balance<<endl;
    }

};
class BasePlus:public BaseAccount
{
protected:
    int limit,limit_sum;
public:
    BasePlus() {};
    BasePlus(string n,string n1,int b):BaseAccount(n,n1,b)
    {
        limit=5000;
        limit_sum=0;
    }
    int getlimit(){return limit;}
    virtual void desposit(int n)
    {
        if(limit_sum==0)
        {
            balance+=n;
        }
        if(limit_sum>0&&balance==0)
        {
            limit_sum-=n;
            limit+=n;
            if(limit_sum<0)
            {
                balance=0-limit_sum;
                limit_sum=0;
                limit=5000;
            }

        }


    }
        virtual bool withdraw(int n)
        {
            if(n>balance+limit)
            {
                cout<<"insufficient"<<endl;
                return 0;
            }

            else
            {
                if(balance>=n)
                {
                    balance-=n;
                    return 1;
                }
                else if(balance<n)
                {
                    limit_sum+=n-balance;
                    balance=0;
                    limit-=limit_sum;
                    return 1;
                }
            }
            return 1;
        }
        virtual void display()
        {
            cout<<name<<" "<<num<<" Balance:"<<balance<<" limit:"<<limit<<endl;
        }

    };


int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *p;
        string name;
        string num;
        int balance;
        int a,b,c,d;
        cin>>name>>num;
        if(num.find('P',0)==1)
        {
            cin>>balance;
            BasePlus a1(name,num,balance);
            p=&a1;
            cin>>a>>b>>c>>d;
            p->desposit(a);
            cout<<a1.getlimit()<<endl;
            p->withdraw(b);cout<<a1.getlimit()<<endl;
            p->desposit(c);cout<<a1.getlimit()<<endl;
            p->withdraw(d);cout<<a1.getlimit()<<endl;
            p->display();
        }
        else
        {
            cin>>balance;
            BaseAccount b1(name,num,balance);
            cin>>a>>b>>c>>d;
            p=&b1;
            p->desposit(a);
            p->withdraw(b);
            p->desposit(c);
            p->withdraw(d);
            p->display();
        }


    }
    return 0;
}

------------------------------------------------------
2018192044:Problem1234:正确
#include <iostream>
using namespace std;
#include<iomanip>
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
    ~Group(){}
};
class GroupA:public Group
{
public:
    GroupA() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    GroupB() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
};
class GroupC:public Group
{
public:
    GroupC() {}
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
    int add(int x,int y)
    {
        int sum=0,t1,t2,total=1,x1,y1;
        x1=x;
        y1=y;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0&&x1>y1)
                break;
            if(y==0&&x1<y1)
                break;
            if(t1+t2>=10)
                t1=(t1+t2)%10;
            else
                t1+=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
};
int main()
{
    int t,type,num1,num2;
    char o;
    cin>>t;
    Group *p;
    while(t--)
    {
        cin>>type>>num1>>o>>num2;
        if(type==1)
        {
            GroupA A;
            p=&A;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else if(type==2)
        {
            GroupB B;
            p=&B;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else
        {
            GroupC C;
            p=&C;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2017151066:Problem1120:答案错误
#include<iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	Animal(string n):name(n){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
	    Tiger(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
};
class Dog:public Animal
{
public:
	    Dog(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
};
class Duck:public Animal
{
public:
	    Duck(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
};
class Pig:public Animal
{
public:
	    Pig(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
};
int main()
{
    Animal *p_animal;
	int t;
	cin>>t;
	while(t--)
	{
		string ming,name;
		int ego;
		cin>>ming>>name>>ego;
		if(ming=="Tiger")
		{
        	p_animal=new Tiger(name);
        	p_animal->Speak();
		}
		else if(ming=="Pig")
		{
        	p_animal=new Pig(name);
        	p_animal->Speak();
		}
		else if(ming=="Duck")
		{
			p_animal=new Duck(name);
        	p_animal->Speak();
		}
		else if(ming=="Dog")
		{
			p_animal=new Dog(name);
        	p_animal->Speak();
		}
		else
		{
			cout<<"There is no Rabbit in our Zoo."<<endl;
		}

	}
	return 0;
}
------------------------------------------------------
szuzy:Problem1232:正确
#include<iostream>
using namespace std;

class Vehicle

{
protected:

    string no;
    int charge;


public:
    Vehicle(string n):no(n)
    {
    }

    virtual void display()=0;//应收费用
    ~Vehicle()
    {
    }

};

class Car:public Vehicle
{
private:
    int number,weight;
public:
        Car(string n,int nu,int w):Vehicle(n),number(nu),weight(w) {}
    void display()
    {
        charge=number*8+weight*2;
        cout<<no<<" "<<charge<<endl;
    }
    ~Car() {}

};

class Truck:public Vehicle
{

private:
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w) {}
    void display()
    {
        charge=weight*5;
        cout<<no<<" "<<charge<<endl;

    }
    ~Truck() {}

};

class Bus:public Vehicle
{

private:
    int number;
public:
    Bus(string n,int nu):Vehicle(n),number(nu) {}
    void display()
    {
        charge=number*3;
        cout<<no<<" "<<charge<<endl;
    }
    ~Bus() {}
};

int main()
{
    int number,weight,type,t;
    string no;
    Vehicle *pv;

    cin>>t;
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>no>>number>>weight;
            Car a(no,number,weight);
            pv=&a;
            pv->display();

        }

        if(type==2)
        {
            cin>>no>>weight;
            Truck b(no,weight);
            pv=&b;
            pv->display();

        }

        if(type==3)
        {
            cin>>no>>number;
            Bus c(no,number);
            pv=&c;
            pv->display();

        }
    }

    return 0;

}

------------------------------------------------------
2016071031:Problem1235:运行错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    ~Geometry() {}
};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
    ~Rect(){}
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
    ~Circle(){}
};

class TotalArea {
public:
    static void computerTotalArea(Geometry** t,int n);
    ~TotalArea() {}
};

void computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << fixed << setprecision(2) << max <<endl;
}

int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    computerTotalArea(g, t);

    for (int i = 0; i < t; i++) {
        delete []g[i];
    }

    delete []g;

    return 0;
}


------------------------------------------------------
2018192024:Problem1234:答案错误
#include <iostream>
#include <cmath>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};
class GroupB:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y)
    {
        double p[10],flag=0,sum=0;
        for(int i=0;;i++)
        {
            p[i]=x%10-y%10;
            if(p[i]<0)
                p[i]+=10;
            x/=10;
            y/=10;
            if(x==0&&y==0)
                break;
            flag++;
        }
        for(int i=flag;i>=0;i--)
            sum+=p[i]*pow(10,i);
        return (int)sum;
    }
};
class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        double p[10],flag=0,sum=0;
        for(int i=0;;i++)
        {
            p[i]=x%10+y%10;
            if(p[i]>=10)
                p[i]-=10;
            x/=10;
            y/=10;
            if(x==0&&y==0)
                break;
            flag++;
        }
        for(int i=flag;i>=0;i--)
            sum+=p[i]*pow(10,i);
        return (int)sum;
    }
    virtual int sub(int x, int y){return x-y;}
};


int main()
{
    int t,x,y;
    cin>>t;
    Group** g=new Group*[t];
    for(int i=0;i<t;i++)
    {
        int type;
        char cmd;
        cin>>type>>x>>cmd>>y;
        if(type==1)
        {
            GroupA a;
            g[i]=&a;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB b;
            g[i]=&b;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC c;
            g[i]=&c;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151058:Problem1119:正确
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string num;
    int balance;
public:
    BaseAccount() {};
    BaseAccount(string n,string n1,int b)
    {
        name=n;
        num=n1;
        balance=b;
    }
    virtual void desposit(int n)
    {
        balance+=n;
    }
    virtual bool withdraw(int n)
    {
        if(n>balance)
        {
             cout<<"insufficient"<<endl;
             return 0;
        }

        else
            balance-=n;
            return 1;
    }
    virtual void display()
    {
        cout<<name<<" "<<num<<" Balance:"<<balance<<endl;
    }

};
class BasePlus:public BaseAccount
{
protected:
    int limit,limit_sum;
public:
    BasePlus() {};
    BasePlus(string n,string n1,int b):BaseAccount(n,n1,b)
    {
        limit=5000;
        limit_sum=0;
    }
    int getlimit(){return limit;}
    virtual void desposit(int n)
    {
        if(limit_sum==0)
        {
            balance+=n;
        }
        if(limit_sum>0&&balance==0)
        {
            limit_sum-=n;
            limit+=n;
            if(limit_sum<0)
            {
                balance=0-limit_sum;
                limit_sum=0;
                limit=5000;
            }

        }


    }
        virtual bool withdraw(int n)
        {
            if(n>balance+limit)
            {
                cout<<"insufficient"<<endl;
                return 0;
            }

            else
            {
                if(balance>=n)
                {
                    balance-=n;
                    return 1;
                }
                else if(balance<n)
                {
                    limit_sum+=n-balance;
                    balance=0;
                    limit-=limit_sum;
                    return 1;
                }
            }
            return 1;
        }
        virtual void display()
        {
            cout<<name<<" "<<num<<" Balance:"<<balance<<" limit:"<<limit<<endl;
        }

    };


int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *p;
        string name;
        string num;
        int balance;
        int a,b,c,d;
        cin>>name>>num;
        if(num.find('P',0)==1)
        {
            cin>>balance;
            BasePlus a1(name,num,balance);
            p=&a1;
            cin>>a>>b>>c>>d;
            p->desposit(a);
            p->withdraw(b);
            p->desposit(c);
            p->withdraw(d);
            p->display();
        }
        else
        {
            cin>>balance;
            BaseAccount b1(name,num,balance);
            cin>>a>>b>>c>>d;
            p=&b1;
            p->desposit(a);
            p->withdraw(b);
            p->desposit(c);
            p->withdraw(d);
            p->display();
        }


    }
    return 0;
}

------------------------------------------------------
2016150076:Problem1232:正确
#include<iostream>
using namespace std;

class Vehicle

{ protected:

string no;
int charge;


public:
Vehicle(string n):no(n){
}

virtual void display()=0;//应收费用
~Vehicle(){
}

};

class Car:public Vehicle
{
	private:
			int number,weight;
	public:
			Car(string n,int nu,int w):Vehicle(n),number(nu),weight(w){}
			void display()
			{
				charge=number*8+weight*2;
				cout<<no<<" "<<charge<<endl;	
			}
			~Car(){}	
	
};

class Truck:public Vehicle
{
	
		private:
				int weight;
		public:
			Truck(string n,int w):Vehicle(n),weight(w){}
			void display()
			{
				charge=weight*5;
				cout<<no<<" "<<charge<<endl;
				
			}
			~Truck(){}
	
};

class Bus:public Vehicle
{
	
		private:
			int number;
		public:
			Bus(string n,int nu):Vehicle(n),number(nu){}
			void display()
			{
				charge=number*3;
				cout<<no<<" "<<charge<<endl;
			}
			~Bus(){}
};

int main()
{
	int number;
	int weight,type,t;
	string no;
	Vehicle *pv;
	
	cin>>t;
	while(t--)
	{
		cin>>type;
		if(type==1)
		{
			cin>>no>>number>>weight;
			Car a(no,number,weight);
			pv=&a;
			pv->display();
			
		}
		
		if(type==2)
		{
			cin>>no>>weight;
			Truck b(no,weight);
			pv=&b;
			pv->display();
			
		}
		
		if(type==3)
		{
			cin>>no>>number;
			Bus c(no,number);
			pv=&c;
			pv->display();
			
		}
	}
	
	return 0;
	
}
------------------------------------------------------
2018152037:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry
{
	public:
		Geometry()
		{
		}
		virtual double getArea()=0;
};

class Rect:public Geometry
{
	double x;
	double y;
public:
	Rect(double x1,double y1)
	{
		x=x1;
		y=y1;
	}
	double getArea()
	{
		return x*y;
	}
};

class Circle:public Geometry
{
	double bj;
public:
	Circle(double b)
	{
		bj=b;
	}
	double getArea()
	{
		return 3.14*bj*bj;
	}
};

class TotalArea
{
public:
	static void computerTotalArea(Geometry** t,int n)
	{
		double max;
		max=t[0]->getArea();
		for(int i=1;i<n;i++)
		{
			if(max<t[i]->getArea())
				max=t[i]->getArea();
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	Geometry **p;
	p=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		int pd;
		cin>>pd;
		if(pd==1)
		{
			int x,y;
			cin>>x>>y;
			Rect a1(x,y);
			p[i]=&a1;
		}
		if(pd==2)
		{
			int r;
			cin>>r;
			Circle a1(r);
			p[i]=&a1;
		}
	}
	TotalArea ak;
	ak.computerTotalArea(p,t);
	delete []p;
	return 0;
}
------------------------------------------------------
2018041051:Problem1119:正确
#include<iostream>
#include<string>
#include<cstring>
 
using namespace std;
 
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(){}
    BaseAccount(string name1,string account1,int balance1):name(name1),account(account1),balance(balance1){}
    void deposit(int num)
    {
        balance+=num;
    }
    virtual void withdraw(int num)
    {
        if((balance-num)>=0)
        {
            balance-=num;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    virtual ~BaseAccount(){}
};
 
class BasePlus:public BaseAccount
{
protected:
    int limit;
public:
    BasePlus()
    {
        limit=5000;
    }
    BasePlus(string name1,string account1,int balance1):BaseAccount(name1,account1,balance1)
    {
        limit=5000;
    }
    virtual void withdraw(int num)
    {
        if((balance-num+limit)>=0)
        {
            balance-=num;
            if(balance<0)
            {
                limit+=balance;
                balance=0;
            }
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
    ~BasePlus(){}
};
 
 
 
int main()
{
    BaseAccount *BA;
 
    int t;
    cin>>t;
    while(t--)
    {
        int balance;
        string name,account;
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BA=new BaseAccount(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
        else
        {
            BA= new BasePlus(name,account,balance);
            for(int i=1;i<=4;i++)
            {
                int num;
                cin>>num;
                if(i%2==1)
                {
                    BA->deposit(num);
                }
                else
                {
                    BA->withdraw(num);
                }
            }
            BA->display();
        }
        delete BA;
    }
    
 	
    return 0;
}
------------------------------------------------------
2017151066:Problem1120:编译错误
#include<iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	Animal(string n):name(n){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
	    Tiger(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
};
class Dog:public Animal
{
public:
	    Dog(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
};
class Duck:public Animal
{
public:
	    Duck(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
};
class Pig:public Animal
{
public:
	    Pig(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
};
int main()
{
    Animal *p_animal;
	int t;
	cin>>t;
	while(t--)
	{
		string ming,name;
		int ego;
		cin>>ming>>name>>ego;
		if(ming=="Tiger")
		{
        	p_animal=new Tiger(name);
        	p_animal->Speak();
		}
		else if(ming=="Pig")
		{
        	p_animal=new Pig(name);
        	p_animal->Speak();
		}
		else if(ming=="Duck")
		{
			p_animal=new Duck(name);
        	p_animal->Speak();
		}
		else if(ming=="Dog")
		
			p_animal=new Dog(name);
        	p_animal->Speak();
		}
		else
		{
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
		}

	}
	return 0;
}
------------------------------------------------------
2016071031:Problem1235:运行错误
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry() {}
};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
    ~Rect(){}
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
    ~Circle(){}
};

class TotalArea {
public:
    static void computerTotalArea(Geometry** t,int n);
    ~TotalArea() {}
};

void computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << fixed << setprecision(2) << max <<endl;
}

int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    computerTotalArea(g, t);

    for (int i = 0; i < t; i++) {
        delete []g[i];
    }

    delete []g;

    return 0;
}


------------------------------------------------------
2017163101:Problem1235:答案错误
#include<iostream>
#include<iomanip>
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; 

};
class Rect:public Geometry{
	private:
		double l,h;
	public:
		double getArea(){
			double area=l*h;
			return area;
		}
		Rect(double _l,double _h):l(_l),h(_h){
			
		}
};
class Circle:public Geometry{
	private:
		double r;
	public:
		double getArea(){
			double area=3.14*r*r;
		}
		Circle(double _r):r(_r){
			
		}
};
/*
class TotalArea{
public:
   static void computerTotalArea(Geometry* t,int n){
   	double area=t[0].getArea();
   	for(int i=0;i<n;i++){
   		//area=t.getArea();
   		if(area>t[i].getArea())
   		area=t[i].getArea();
	   }
   	cout<<"最大面积="<<area<<endl;
   }
};*/
int main(){
	int t;
	cin>>t;
	double area=0;
	while(t--){
		Geometry *g;
		int flag;
		double l,h,r;
		cin>>flag;
		if(flag==1){
			cin>>l>>h;
			g=new Rect(l,h);
			if(g->getArea()>area)
			area=g->getArea();
		}
		else{
			cin>>r;
			g=new Circle(r);
			if(g->getArea()>area)
			area=g->getArea();
		}
	}
	cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<area;
	return 0;
}
------------------------------------------------------
2018151066:Problem1119:运行错误
#include<iostream>
#include<string>
using namespace std;
class  BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount();
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b) {}
    virtual void deposit(int n)
    {
        balance+=n;
    }
    virtual void withdraw(int n)
    {
        if(n>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=n;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:virtual public BaseAccount
{
protected:
    int limit,limit_sum;
public:
    BasePlus(string name,string a,int balance):limit(5000),limit_sum(0),BaseAccount(name,a,balance) {};
    void deposit(int n)
    {
        if(balance>0)
            balance+=n;
        else if(n>limit_sum)
        {
            balance+=n-limit_sum;
            limit_sum=0;
        }
        else if(limit_sum>=n)
        {
            limit_sum-=n;
        }
    }
    void withdraw(int n)
    {
        if(n+limit_sum>limit)
            cout<<"insufficient"<<endl;
        else if(n>balance)
        {
            limit_sum=n-balance;
            balance=0;
        }
        else if(n<=balance)
        {
            balance-=n;
        }

    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }

};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *pv;
        string name,account;
        int balance;
        cin>>name>>account>>balance;
        int d1,w1,d2,w2;
        cin>>d1>>w1>>d2>>w2;

        if(account[1]=='A')
        {
            pv=new BaseAccount(name,account,balance);
        }
        else
        {
            pv=new BasePlus(name,account,balance);
        }
        pv->deposit(d1);
        pv->withdraw(w1);
        pv->deposit(d2);
        pv->withdraw(w2);
        pv->display();
        delete pv;
    }
}

------------------------------------------------------
2017151066:Problem1120:编译错误
#include<iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	Animal(string n):name(n){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
	    Tiger(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
};
class Dog:public Animal
{
public:
	    Dog(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
};
class Duck:public Animal
{
public:
	    Duck(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
};
class Pig:public Animal
{
public:
	    Pig(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
};

int main()
{
    Animal *p_animal;
	int t;
	cin>>t;
	while(t--)
	{
		string ming,name;
		int ego;
		cin>>ming>>name>>ego;
		if(ming=="Tiger")
		{
        	p_animal=new Tiger(name);
        	p_animal->Speak();
		}
		else if(ming=="Pig")
		{
        	p_animal=new Pig(name);
        	p_animal->Speak();
		}
		else if(ming=="Duck")
		{
			p_animal=new Duck(name);
        	p_animal->Speak();
		}
		else if(ming=="Dog")
		
			p_animal=new Dog(name);
        	p_animal->Speak();
		}
		else
		{
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018041051:Problem1232:正确
#include<iostream>
#include<string>
 
using namespace std;
 
class Vehicle
 
{
protected:
 
    string num;//编号
 
public:
    Vehicle(){}
    Vehicle(string num1):num(num1){}
    virtual void display()=0;//应收费用
	virtual ~Vehicle(){
	}
};
 
class Car:public Vehicle{
protected:
    int passenge,weight;
public:
    Car(){}
    Car(string num1,int passenge1,int weight1):Vehicle(num1),passenge(passenge1),weight(weight1){}
    void display()
    {
        int fee;
        fee=passenge*8+weight*2;
        cout<<num<<" "<<fee<<endl;
    }
    ~Car(){
	}
};
 
class Truck:public Vehicle{
protected:
    int weight;
public:
    Truck(){}
    Truck(string num1,int weight1):Vehicle(num1),weight(weight1){}
    void display()
    {
        int fee;
        fee=weight*5;
        cout<<num<<" "<<fee<<endl;
    }
    ~Truck(){
	}
};
 
class Bus:public Vehicle{
protected:
    int passenge;
public:
    Bus(){}
    Bus(string num1,int passenge1):Vehicle(num1),passenge(passenge1){}
    void display()
    {
        int fee;
        fee=passenge*3;
        cout<<num<<" "<<fee<<endl;
    }
    ~Bus(){
	}
};
 
int main()
{
    Vehicle *pv;
 
    int t;
    cin>>t;
    while(t--)
    {
        int n,passenge,weight;
        string num;
        cin>>n;
        if(n==1)
        {
            cin>>num>>passenge>>weight;
            pv=new Car(num,passenge,weight);
            pv->display();
        }
        else if(n==2)
        {
            cin>>num>>weight;
            pv=new Truck(num,weight);
            pv->display();
        }
        else
        {
            cin>>num>>passenge;
            pv=new Bus(num,passenge);
            pv->display();
        }
        delete pv;
    }
 
    return 0;
}
------------------------------------------------------
2018192026:Problem1234:答案错误
#include<stdio.h>
#include<math.h>
class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10-y%10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
class GroupC:public Group
{
public:
	int add(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10+y%10>=10)
				sum+=(x%10-10+y%10)*pow(10,i);
			else
				sum+=(x%10+y%10)*pow(10,i);
		}
		return sum;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10+10-y%10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		Group *person;
		int kind,x,y;
		char ch;
		scanf("%d %d%c%d",&kind,&x,&ch,&y);
		if(kind==1)
		{
			GroupA A;
			person=&A;
		}
		else if(kind==2)
		{
			GroupB B;
			person=&B;
		}
		else if(kind==3)
		{
			GroupC C;
			person=&C;
		}
		if(ch=='+')
			printf("%d\n",person->add(x,y));
		else
			printf("%d\n",person->sub(x,y));
	}
	return 0;
}


------------------------------------------------------
2017151066:Problem1120:答案错误
#include<iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	Animal(string n):name(n){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
	    Tiger(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
};
class Dog:public Animal
{
public:
	    Dog(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
};
class Duck:public Animal
{
public:
	    Duck(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
};
class Pig:public Animal
{
public:
	    Pig(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
};

int main()
{
    Animal *p_animal;
	int t;
	cin>>t;
	while(t--)
	{
		string ming,name;
		int ego;
		cin>>ming>>name>>ego;
		if(ming=="Tiger")
		{
        	p_animal=new Tiger(name);
        	p_animal->Speak();
		}
		else if(ming=="Pig")
		{
        	p_animal=new Pig(name);
        	p_animal->Speak();
		}
		else if(ming=="Duck")
		{
			p_animal=new Duck(name);
        	p_animal->Speak();
		}
		else if(ming=="Dog")
		{
			p_animal=new Dog(name);
        	p_animal->Speak();
		}
		else
			cout<<"There is no "<<name<<" in our Zoo."<<endl;
	}
	return 0;
}
------------------------------------------------------
2018151066:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;
class  BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount();
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b) {}
    virtual void deposit(int n)
    {
        balance+=n;
    }
    virtual void withdraw(int n)
    {
        if(n>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=n;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:virtual public BaseAccount
{
protected:
    int limit,limit_sum;
public:
    BasePlus(string name,string a,int balance):limit(5000),limit_sum(0),BaseAccount(name,a,balance) {};
    void deposit(int n)
    {
        if(balance>0)
            balance+=n;
        else if(n>limit_sum)
        {
            balance+=n-limit_sum;
            limit_sum=0;
        }
        else if(limit_sum>=n)
        {
            limit_sum-=n;
        }
    }
    void withdraw(int n)
    {
        if(n+limit_sum>limit)
            cout<<"insufficient"<<endl;
        else if(n>balance)
        {
            limit_sum=n-balance;
            balance=0;
        }
        else if(n<=balance)
        {
            balance-=n;
        }

    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }

};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        BaseAccount *pv;
        string name,account;
        int balance;
        cin>>name>>account>>balance;
        int d1,w1,d2,w2;
        cin>>d1>>w1>>d2>>w2;

        if(account[1]=='A')
        {
            pv=new BaseAccount(name,account,balance);
        }
        else
        {
            pv=new BasePlus(name,account,balance);
        }
        pv->deposit(d1);
        pv->withdraw(w1);
        pv->deposit(d2);
        pv->withdraw(w2);
        pv->display();
    }
}

------------------------------------------------------
2017047011:Problem1234:答案错误
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Group
{

public:
	virtual int add(int x, int y)=0;
	virtual int sub(int x, int y)=0;

};
//------------------------
class groupA:public Group{
	
public:
	groupA(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		return x-y;
	}	
};
//------------------------
class groupB:public Group{
	
public:
	groupB(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100],b[100],c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng1-1;i++)
			a[i]=x%int(pow(10,i+1));
		a[i]=x/pow(10,i);
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2-1;i++)
			b[i]=y%int(pow(10,i+1));
		b[i]=y/pow(10,i);
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
class groupC:public Group{
	
public:
	groupC(){}
	int add(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		
		for(i=0;i<length;i++){
			if(a[i]+b[i]>=10)
				c[i]=(a[i]+b[i])%10;
			else 
				c[i]=a[i]+b[i];
		}
		
		
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		
		return res;
	}
	
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100],b[100],c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng2;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
int main()
{
	int t,i,j,k;
	int num1,num2,kind;
	string ask;
	char fuhao;
	Group *p;
	
	cin>>t;
	while(t--)
	{
		cin>>kind>>ask;
		for(i=0;i<ask.length();i++)
			if(ask[i]=='+'||ask[i]=='-'){
				j=i;
				break;
			}
			
		fuhao=ask[j];
		num1=num2=0;
		k=j;
		
		for(i=0;i<j;i++){
			num1+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}
		
		k=ask.length()-j-1;
		for(i=j+1;i<ask.length();i++){
			num2+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}		
		
		if(kind==1){
			groupA g1;
			p=&g1;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==2){
			groupB g2;
			p=&g2;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==3){
			groupC g3;
			p=&g3;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		cout<<endl;	
	}
}
------------------------------------------------------
2017044015:Problem1120:正确
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Animal{
protected:
    string name;
    int age;
public:
    virtual void Speak() = 0;
};

class Tiger: public Animal{
public:
    Tiger(string s, int a){
        name = s;
        age = a;
    }
    virtual void Speak(){
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class Pig: public Animal{
public:
    Pig(string s, int a){
        name = s;
        age = a;
    }
    virtual void Speak(){
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};

class Dog: public Animal{
public:
    Dog (string s, int a){
        name = s;
        age = a;
    }
    virtual void Speak(){
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class Duck : public Animal{
public:
    Duck  (string s, int a){
        name = s;
        age = a;
    }
    virtual void Speak(){
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

int main()
{
    Animal* animal;
    int t, a;
    string name, type;
    cin>>t;
    while(t--){
        cin>>type>>name>>a;
        if(type == "Tiger"){
            Tiger tiger(name, a);
            animal = &tiger;
            animal->Speak();
        }
        else if(type == "Pig"){
            Pig pig(name, a);
            animal = &pig;
            animal->Speak();
        }
        else if(type == "Duck"){
            Duck duck(name, a);
            animal = &duck;
            animal->Speak();
        }
        else if(type == "Dog"){
            Dog dog(name, a);
            animal = &dog;
            animal->Speak();
        }
        else{
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2017151066:Problem1120:正确
#include<iostream>
using namespace std;
class Animal
{
protected:
	string name;
public:
	Animal(string n):name(n){}
    virtual void Speak()=0;
};

class Tiger:public Animal
{
public:
	    Tiger(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
};
class Dog:public Animal
{
public:
	    Dog(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
};
class Duck:public Animal
{
public:
	    Duck(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
};
class Pig:public Animal
{
public:
	    Pig(string name):Animal(name){}
        virtual void Speak()
    	{
        	cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
};

int main()
{
    Animal *p_animal;
	int t;
	cin>>t;
	while(t--)
	{
		string ming,name;
		int ego;
		cin>>ming>>name>>ego;
		if(ming=="Tiger")
		{
        	p_animal=new Tiger(name);
        	p_animal->Speak();
		}
		else if(ming=="Pig")
		{
        	p_animal=new Pig(name);
        	p_animal->Speak();
		}
		else if(ming=="Duck")
		{
			p_animal=new Duck(name);
        	p_animal->Speak();
		}
		else if(ming=="Dog")
		{
			p_animal=new Dog(name);
        	p_animal->Speak();
		}
		else
			cout<<"There is no "<<ming<<" in our Zoo."<<endl;
	}
	return 0;
}
------------------------------------------------------
2018192026:Problem1234:答案错误
#include<stdio.h>
#include<math.h>
class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10-y%10+10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
class GroupC:public Group
{
public:
	int add(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10+y%10>=10)
				sum+=(x%10-10+y%10)*pow(10,i);
			else
				sum+=(x%10+y%10)*pow(10,i);
		}
		return sum;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10+10-y%10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		Group *person;
		int kind,x,y;
		char ch;
		scanf("%d %d%c%d",&kind,&x,&ch,&y);
		if(kind==1)
		{
			GroupA A;
			person=&A;
		}
		else if(kind==2)
		{
			GroupB B;
			person=&B;
		}
		else if(kind==3)
		{
			GroupC C;
			person=&C;
		}
		if(ch=='+')
			printf("%d\n",person->add(x,y));
		else
			printf("%d\n",person->sub(x,y));
	}
	return 0;
}


------------------------------------------------------
2017047011:Problem1234:答案错误
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Group
{

public:
	virtual int add(int x, int y)=0;
	virtual int sub(int x, int y)=0;
};
//------------------------
class groupA:public Group{
	
public:
	groupA(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		return x-y;
	}	
};
//------------------------
class groupB:public Group{
	
public:
	groupB(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng1-1;i++)
			a[i]=x%int(pow(10,i+1));
		a[i]=x/pow(10,i);
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2-1;i++)
			b[i]=y%int(pow(10,i+1));
		b[i]=y/pow(10,i);
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
class groupC:public Group{
	
public:
	groupC(){}
	int add(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		
		for(i=0;i<length;i++){
			if(a[i]+b[i]>=10)
				c[i]=(a[i]+b[i])%10;
			else 
				c[i]=a[i]+b[i];
		}
		
		
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		
		return res;
	}
	
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng2;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
int main()
{
	int t,i,j,k;
	int num1,num2,kind;
	string ask;
	char fuhao;
	Group *p;
	
	cin>>t;
	while(t--)
	{
		cin>>kind>>ask;
		for(i=0;i<ask.length();i++)
			if(ask[i]=='+'||ask[i]=='-'){
				j=i;
				break;
			}
			
		fuhao=ask[j];
		num1=num2=0;
		k=j;
		
		for(i=0;i<j;i++){
			num1+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}
		
		k=ask.length()-j-1;
		for(i=j+1;i<ask.length();i++){
			num2+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}		
		
		if(kind==1){
			groupA g1;
			p=&g1;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==2){
			groupB g2;
			p=&g2;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==3){
			groupC g3;
			p=&g3;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		cout<<endl;	
	}
}
------------------------------------------------------
2018041051:Problem1120:正确
#include<iostream>
#include<string>
#include<cstring>
 
using namespace std;
 
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){}
    Animal(string name1,int age1):name(name1),age(age1){}
    virtual void Speak()=0;
    virtual ~Animal(){}
};
 
class Tiger:public Animal
{
public:
    Tiger(){}
    Tiger(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
 
class Pig:public Animal
{
public:
    Pig(){}
    Pig(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig(){}
};
 
class Dog:public Animal
{
public:
    Dog(){}
    Dog(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
 
class Duck:public Animal
{
public:
    Duck(){}
    Duck(string name1,int age1):Animal(name1,age1){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
 
int main()
{
    Animal *a;
 
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        string type,name;
        cin>>type>>name>>n;
        if(type=="Tiger")
        {
            a=new Tiger(name,n);
            a->Speak();
        }
        else if(type=="Pig")
        {
            a=new Pig(name,n);
            a->Speak();
        }
        else if(type=="Duck")
        {
            a=new Duck(name,n);
            a->Speak();
        }
        else if(type=="Dog")
        {
            a=new Dog(name,n);
            a->Speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }	
    }
    delete a;
    return 0;
}
------------------------------------------------------
2017047011:Problem1234:答案错误
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Group
{

public:
	virtual int add(int x, int y)=0;
	virtual int sub(int x, int y)=0;
};
//------------------------
class groupA:public Group{
	
public:
	groupA(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		return x-y;
	}	
};
//------------------------
class groupB:public Group{
	
public:
	groupB(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
class groupC:public Group{
	
public:
	groupC(){}
	int add(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		
		for(i=0;i<length;i++){
			if(a[i]+b[i]>=10)
				c[i]=(a[i]+b[i])%10;
			else 
				c[i]=a[i]+b[i];
		}
		
		
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		
		return res;
	}
	
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100];
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<x)
			leng1++;
		
		for(i=0;i<leng2;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
int main()
{
	int t,i,j,k;
	int num1,num2,kind;
	string ask;
	char fuhao;
	Group *p;
	
	cin>>t;
	while(t--)
	{
		cin>>kind>>ask;
		for(i=0;i<ask.length();i++)
			if(ask[i]=='+'||ask[i]=='-'){
				j=i;
				break;
			}
			
		fuhao=ask[j];
		num1=num2=0;
		k=j;
		
		for(i=0;i<j;i++){
			num1+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}
		
		k=ask.length()-j-1;
		for(i=j+1;i<ask.length();i++){
			num2+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}		
		
		if(kind==1){
			groupA g1;
			p=&g1;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==2){
			groupB g2;
			p=&g2;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==3){
			groupC g3;
			p=&g3;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		cout<<endl;	
	}
}
------------------------------------------------------
2016154114:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
protected:
	double length;
	double width;
public:
    Rect(double l,double w):length(l),width(w){}
    double getArea()
	{
		return length*width;
	}
};

class Circle:public Geometry
{
protected:
	double r;
public:
    Circle(double _r):r(_r){}
    double getArea()
	{
		return 3.14*r*r;
	}
};

class TotalArea
{
public:
	static void computerTotalArea(Geometry** t,int n)
	{
		double max=0;
		for(int i=0;i<n;i++)
		{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};

int main()
{
	Geometry** t;
	int n;
	cin>>n;
	t=new Geometry* [n];
    for(int i=0;i<n;i++)
    {
		int type;
        cin>>type;
        if(type==1)
		{
			int l,w;
			cin>>l>>w;
			Rect rect(l,w);
			t[i]=&rect;
		}
		else if(type==2)
        {
			int r;
			cin>>r;
			Circle circle(r);
			t[i]=&circle;
        }
    }
	TotalArea::computerTotalArea(t,n);
	return 0;
}
------------------------------------------------------
2017133026:Problem1234:正确
#include <iostream>

using namespace std;
class Group
{
public:
    Group(){}
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group{
public:
    virtual int add(int x,int y){
        return x+y;
    }
    virtual int sub(int x,int y){
        return x-y;
    }
};

class GroupB:public Group{
public:
    virtual int add(int x,int y){
        return x+y;
    }
    virtual int sub(int x,int y){
        int sum=0;
        int base=1;
        while(x!=0 || y!=0){
            if(x%10<y%10){
                sum+=((x%10+10-y%10)%10)*base;
            }else{
                sum+=((x%10-y%10)%10)*base;
            }
            base*=10;
            x/=10;
            y/=10;
        }
        sum=sum+x+y;
        return sum;
    }
};

class GroupC:public Group{
public:
    virtual int add(int x,int y){
        int sum=0;
        int base=1;
        while(x!=0 || y!=0){
            sum+=((x%10+y%10)%10)*base;
            base*=10;
            x/=10;
            y/=10;
        }
        sum=sum+x+y;
        return sum;
    }
    virtual int sub(int x,int y){
        int sum=0;
        int base=1;
        while(x!=0 || y!=0){
            if(x%10<y%10){
                sum+=((x%10+10-y%10)%10)*base;
            }else{
                sum+=((x%10-y%10)%10)*base;
            }
            base*=10;
            x/=10;
            y/=10;
        }
        sum=sum+x+y;
        return sum;
    }
};
int main()
{
    int t,x,y;
    cin>>t;
    int type;
    Group *g;
    char op;
    while(t--){
        cin>>type;
        cin>>x>>op>>y;
        if(type==1){
            GroupA a;
            g=&a;
        }else if(type==2){
            GroupB b;
            g=&b;
        }else if(type==3){
            GroupC c;
            g=&c;
        }
        if(op=='+'){
            cout<<g->add(x,y)<<endl;
        }else if(op=='-'){
            cout<<g->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018041051:Problem1234:正确
#include<iostream>
#include<string>
#include<cstring>
 
using namespace std;
 
class Group
{
 
public:
 
    virtual int add(int x, int y)=0;
 
    virtual int sub(int x, int y)=0;

	virtual ~Group(){}
};
 
class GroupA:public Group{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~GroupA(){}
};
 
class GroupB:public Group{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int result=0,flag1=0,flag2=0;
        result=x-y;
        if(x%10<y%10)
        {
            flag1=1;
        }
        if(x%100<y%100)
        {
            flag2=1;
        }
        result=result+flag1*10+flag2*100;
    }
    ~GroupB(){}
};
 
class GroupC:public Group{
public:
    int add(int x, int y)
    {
        int result=0,flag1=0,flag2=0;
        result=x+y;
        if((x%10+y%10)>=10)
        {
            flag1=1;
        }
        if((x%100+y%100)>=100)
        {
            flag2=1;
        }
        result=result-flag1*10-flag2*100;
    }
    int sub(int x, int y)
    {
        int result=0,flag1=0,flag2=0;
        result=x-y;
        if(x%10<y%10)
        {
            flag1=1;
        }
        if(x%100<y%100)
        {
            flag2=1;
        }
        result=result+flag1*10+flag2*100;
    }
    ~GroupC(){}
};
 
int main()
{
    Group *G;
    int t;
    cin>>t;
 
    while(t--)
    {
        int n,num1,num2;
        char c;
        cin>>n>>num1>>c>>num2;
        if(n==1)
            G=new GroupA; 
        else if(n==2)
            G=new GroupB;
        else
            G=new GroupC;
        if(c=='+')
            cout<<G->add(num1,num2)<<endl;
        else
            cout<<G->sub(num1,num2)<<endl;
        delete G;
    }
    
     
    return 0;
}
------------------------------------------------------
2018151014:Problem1129:正确
#include <iostream>

using namespace std;

class Card {
public:
	
	void initial(int id, char ch, int b) {
		ID = id;
		name = ch;
		balance = b;
	}
	
	int deposit(int s) {
		if (s <= 0) {
			return -1;
		}
		balance += s;
		return 1;
	}
	
	virtual int take(int s) {
		if (s <= 0 || s > balance) {
			return -1;
		}
		balance -= s;
		return 1;
	}
	
	virtual void info() {
		cout << ID << '-' << name << '-' << balance << endl;
	}
	
protected:
	int ID;
	char name;
	int balance;
};

class TransCard : public Card {
public:
	void initial(int id, char ch, int b, int t_b) {
		ID = id;
		name = ch;
		balance = b;
		t_balance = t_b;
	}
	
	int transfer(int s) {
		if (s > balance) {
			return -1;
		}
		
		balance -= s;
		t_balance += s;
	}
	
	void info() {
		cout << ID << '-' << name << '-' << balance << '-' << t_balance << endl;
	}
	
private:
	int t_balance;
};

class VIPCard : public Card {
public:
	void initial(int id, char ch, int b, int cre) {
		ID = id;
		name = ch;
		balance = b;
		credit = cre;
	}
	
	int take(int s) {
		if (s > balance) {
			if (s > balance + credit) {
				return -1;
			}
			else {
				int loss = s - balance;
				balance = 0;
				credit -= loss;
				return 1;
			}
		}
		else {
			balance -= s;
		}
	}
	
	void info() {
		cout << ID << '-' << name << '-' << balance << '-' << credit << endl;
	}
private:
	int credit;
};

void show(Card &obj) {
	obj.info();
}

int main(void) {
	
	int ID;
	char name;
	int balance;
	int t_balance;
	int credit;
	
	Card c1;
	TransCard c2;
	VIPCard c3;
	
	cin >> ID >> name >> balance;
	c1.initial(ID, name, balance);
	cin >> ID >> name >> balance >> t_balance;
	c2.initial(ID, name, balance, t_balance);
	cin >> ID >> name >> balance >> credit;
	c3.initial(ID, name, balance, credit);
	
	int a, b, c, d;
	// normal card
	{
		cin >> a >> b >> c >> d;
		c1.deposit(a);
		c1.deposit(b);
		c1.take(c);
		c1.take(d);
	}
	// trans card
	{
		cin >> a >> b >> c >> d;
		c2.deposit(a);
		c2.take(b);
		c2.transfer(c);
		c2.transfer(d);
	}
	// vip card
	{
		cin >> a >> b >> c >> d;
		c3.deposit(a);
		c3.take(b);
		c3.take(c);
		c3.take(d);
	}
	
	show(c1);
	show(c2);
	show(c3);
	return 0;
}
------------------------------------------------------
2018192043:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};
class Rect:public Geometry
{
    int longs,shorts;
public:
    Rect(int ls,int ss):longs(ls),shorts(ss) {}
    double getArea()
    {
        return longs*shorts;
    }
    ~Rect() {}
};
class Circle:public Geometry
{
    int r;
public:
    Circle(int rs):r(rs) {}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle() {}
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double area=t[0]->getArea();
        for(int i=1;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<area<<endl;
    }
};
int main()
{
    Geometry **p;
    int t,type,shorts,longs,r,counts=0;
    cin>>t;
    p=new Geometry*[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>shorts>>longs;
            p[counts]=new Rect(longs,shorts);
        }
        else
        {
            cin>>r;
            p[counts]=new Circle(r);
        }
        counts++;
    }
    TotalArea x;
    x.computerTotalArea(p,counts);
    for(int i=0;i<counts;i++)
    	delete p[i];
    delete p;
    return 0;
}
------------------------------------------------------
2018192050:Problem1234:答案错误
#include<bits/stdc++.h>
using namespace std;
class Group
{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
    public:
        int add(int a,int b)
        {
        	return a+b;
		}
		int sub(int a,int b)
		{
			return a-b;
		}
};
class GroupB:public Group{
    public:
        int add(int a,int b)
        {
        	return a+b;
		}
		int sub(int a,int b){
			int w;
			w=a-b;
			if(a%10-b%10<0)
			{
				w=w+10;
			}
			return w;
		}
};
class GroupC:public Group{
    public:
		int add(int a,int b)
		{
			int w;
			w=a+b;
			if(a%10+b%10>10)
			{
				w=w-10;
			}
			if(a%100+b%100>10)
			{
				w=w-100;
			}
			return w;
		}
		int sub(int a,int b){
			int w;
			w=a-b;
			if(a%10-b%10<0)
			{
				w=w+10;
			}
		}
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,n1,n2;
		char ch;
		cin>>n;
		cin>>n1>>ch>>n2;
		if(n==1)
		{
			GroupA a;
			if(ch=='+')
				cout<<a.add(n1,n2)<<endl;
			else
				cout<<a.sub(n1,n2)<<endl;
		}
		if(n==2)
		{
			GroupB b;
			if(ch=='+')
				cout<<b.add(n1,n2)<<endl;
			else
				cout<<b.sub(n1,n2)<<endl;
		}
		if(n==3)
		{
			GroupC c;
			if(ch=='+')
				cout<<c.add(n1,n2)<<endl;
			else
				cout<<c.sub(n1,n2)<<endl;
		}
	}
}
------------------------------------------------------
2018192044:Problem1232:正确
#include <iostream>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用
    virtual ~Vehicle(){}
};
class Car:public Vehicle
{
    int number,height;
public:
    Car(string n,int n1,int h):Vehicle(n),number(n1),height(h){}
    void display()
    {
        cout<<no<<" "<<number*8+height*2<<endl;
    }
    ~Car(){}
};
class Truck:public Vehicle
{
    int height;
public:
    Truck(string n,int h):Vehicle(n),height(h){}
    void display()
    {
        cout<<no<<" "<<height*5<<endl;
    }
    ~Truck(){}
};
class Bus:public Vehicle
{
    int number;
public:
    Bus(string n,int n1):Vehicle(n),number(n1){}
    void display()
    {
        cout<<no<<" "<<number*3<<endl;
    }
    ~Bus(){}
};
int main()
{
    int t,i,number,height;
    string no;
    cin>>t;
    Vehicle *pv;
    while(t--)
    {
        cin>>i>>no;
        if(i==1)
        {
            cin>>number>>height;
            Car A(no,number,height);
            pv=&A;
            pv->display();
        }
        if(i==2)
        {
            cin>>height;
            Truck A(no,height);
            pv=&A;
            pv->display();
        }
        if(i==3)
        {
            cin>>number;
            Bus A(no,number);
            pv=&A;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017163101:Problem1235:答案错误
#include<iostream>
#include<iomanip>
using namespace std;
class Geometry{
public:
    virtual double getArea()=0; 

};
class Rect:public Geometry{
	private:
		double l,h;
	public:
		double getArea(){
			double area=l*h;
			return area;
		}
		Rect(double _l,double _h):l(_l),h(_h){
			
		}
};
class Circle:public Geometry{
	private:
		double r;
	public:
		double getArea(){
			double area=3.14*r*r;
		}
		Circle(double _r):r(_r){
			
		}
};
/*
class TotalArea{
public:
   static void computerTotalArea(Geometry* t,int n){
   	double area=t[0].getArea();
   	for(int i=0;i<n;i++){
   		//area=t.getArea();
   		if(area>t[i].getArea())
   		area=t[i].getArea();
	   }
   	cout<<"最大面积="<<area<<endl;
   }
};*/
int main(){
	int t;
	cin>>t;
	double area=0;
	while(t--){
		Geometry *g;
		int flag;
		float l,h,r;
		cin>>flag;
		if(flag==1){
			cin>>l>>h;
			g=new Rect(l,h);
			if(g->getArea()>area)
			area=g->getArea();
		}
		else{
			cin>>r;
			g=new Circle(r);
			if(g->getArea()>area)
			area=g->getArea();
		}
	}
	cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<area;
	return 0;
}
------------------------------------------------------
2018192014:Problem1235:正确
#include<bits/stdc++.h>
using namespace std;
class Geometry{
 
public:
 
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry()
    {
	}
};
class Rect:virtual public Geometry{
protected:
    double a,b;
public:
    Rect(double a1,double b1):
        a(a1),b(b1){    
        }
    virtual double getArea(){
        return a*b;
    }
    virtual ~Rect(){
	}
};
class Circle:virtual public Geometry{
protected:
    double r;
public:
    Circle(double r1):
        r(r1){
        }
    virtual double getArea(){
        return r*r*3.14;
    }
    virtual ~Circle(){
	}
};
class TotalArea{
 
public:
 
   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double res;
        for(int i=0;i<n;i++)
        {
            if(res<t[i]->getArea())
            {
                res=t[i]->getArea();
            }
        }
        cout<<"最大面积="<<fixed<<showpoint<<setprecision(2)<<res;
    }
};
int main ()
{
    Geometry **t;
    int n;
    cin>>n;
    t=new Geometry*[n];
    for(int i=0;i<n;i++)
    {
        int command;
        double a,b,r;
        cin>>command;
        if(command==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea a;
    a.computerTotalArea(t,n); 
	for(int i=0;i<n;i++)
    {
    	delete t[i];
	}
	delete []t;
    return 0;
}
------------------------------------------------------
2018152087:Problem1129:正确
#include<iostream>
#include<string>
using namespace std;
class CommonCard
{
protected:
	int id;
	string cname;
	int counter;
public:
	void initial(int i,string cn,int c);
	int save(int num);
	int take(int num);
	virtual void info();
};
void CommonCard::initial(int i,string cn,int c)
{
	id=i;
	cname=cn;
	counter=c;
}
int CommonCard::save(int num)
{
	if(num>0)
	{
		counter+=num;
		return 1;
	}
	else 
		return -1;
}
int CommonCard::take(int num)
{
	if(counter<num||num<=0)
		return -1;
	else
		counter-=num;
	return 1;
}
void CommonCard::info()
{
	cout<<id<<"-"<<cname<<"-"<<counter<<endl;
}

class TCard:public CommonCard
{
	int Tcounter;
public:
	void initial(int i,string cn,int c,int t);
	int transfer(int num);
	virtual void info();
};
void TCard::initial(int i,string cn,int c,int t)
{
	id=i;
	cname=cn;
	counter=c;
	Tcounter=t;
}
int TCard::transfer(int num)
{
	if(num>counter)
		return -1;
	else
	{
		counter-=num;
		Tcounter+=num;
		return 1;
	}
}
void TCard::info()
{
	cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<Tcounter<<endl;
}

class VIPcard:public CommonCard
{
	int credit;
public:
	void initial(int i,string cn,int c,int cr);
	int over(int num);
	virtual void info();
};
void VIPcard::initial(int i,string cn,int c,int cr)
{
	id=i;
	cname=cn;
	counter=c;
	credit=cr;
}
int VIPcard::over(int num)
{
	/*cout<<counter<<endl;
	cout<<credit<<endl;
	cout<<num<<endl;*/
	if(counter+credit<num)
		return -1;
	else
	{
		credit=credit+counter-num;
		counter=0;
	//	cout<<credit<<endl;
		return 1;
	}
}
void VIPcard::info()
{
	cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<credit<<endl;
}

void show(CommonCard &obj)
{
	obj.info();
}
int main()
{
	CommonCard exc;
	TCard ext;
	VIPcard exv;
	int idc;
	string namec;
	int bc;
	cin>>idc>>namec>>bc;
	exc.initial(idc,namec,bc);
	int idt;
	string namet;
	int bt,tt;
	cin>>idt>>namet>>bt>>tt;
	ext.initial(idt,namet,bt,tt);
	int idv,bv,cv;
	string namev;
	cin>>idv>>namev>>bv>>cv;
	exv.initial(idv,namev,bv,cv);
	
	int num1,num2,num3,num4;
	cin>>num1>>num2>>num3>>num4;
	exc.save(num1);
	exc.save(num2);
	exc.take(num3);
	exc.take(num4);
	int num11,num22,num33,num44;
	cin>>num11>>num22>>num33>>num44;
	ext.save(num11);
	ext.take(num22);
	ext.transfer(num33);
	ext.transfer(num44);
	int num111,num222,num333,num444;
	cin>>num111>>num222>>num333>>num444;
	exv.save(num111);
	exv.take(num222);
	exv.over(num333);
	exv.over(num444);
	show(exc);
	show(ext);
	show(exv);
	return 0;
}
------------------------------------------------------
2018192043:Problem1234:正确
#include <iostream>
#include <cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
    virtual ~Group(){}
};
class GroupA:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
    ~GroupA(){}
};
class GroupB:public Group
{
public:
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int result=0,longs=1;
        if(x>y)
        {
            while(x/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        else
        {
            while(y/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        for(int i=longs-1; i>=1; i--)
        {
            int temp1=x/(int)(pow(10,i-1)+0.5);
            int temp2=y/(int)(pow(10,i-1)+0.5);
            if(temp1-temp2<0)
                result+=(temp1+10-temp2)%10*(int)(pow(10,i-1)+0.5);
            else
                result+=(temp1-temp2)%10*(int)(pow(10,i-1)+0.5);
            x-=temp1*(int)(pow(10,i-1)+0.5);
            y-=temp2*(int)(pow(10,i-1)+0.5);
        }
        return result;
    }
    ~GroupB(){}
};
class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int result=0,longs=1;
        if(x>y)
        {
            while(x/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        else
        {
            while(y/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        for(int i=longs-1; i>=1; i--)
        {
            int temp1=x/(int)(pow(10,i-1)+0.5);
            int temp2=y/(int)(pow(10,i-1)+0.5);
            result+=(temp1+temp2)%10*(int)(pow(10,i-1)+0.5);
            x-=temp1*(int)(pow(10,i-1)+0.5);
            y-=temp2*(int)(pow(10,i-1)+0.5);
        }
        return result;
    }
    int sub(int x,int y)
    {
        int result=0,longs=1;
        if(x>y)
        {
            while(x/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        else
        {
            while(y/pow(10,longs)!=0)
            {
                longs++;
            }
        }
        for(int i=longs; i>=1; i--)
        {
            int temp1=x/(int)(pow(10,i-1)+0.5);
            int temp2=y/(int)(pow(10,i-1)+0.5);
            if(temp1-temp2<0)
                result+=(temp1+10-temp2)%10*(int)(pow(10,i-1)+0.5);
            else
                result+=(temp1-temp2)%10*(int)(pow(10,i-1)+0.5);
            x-=temp1*(int)(pow(10,i-1)+0.5);
            y-=temp2*(int)(pow(10,i-1)+0.5);
        }
        return result;
    }
    ~GroupC(){}
};
int main()
{
    int t,x,y,student;
    char type;
    Group *p;
    cin>>t;
    while(t--)
    {
        cin>>student>>x>>type>>y;
        if(student==1)
        {
            GroupA a;
            p=&a;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(student==2)
        {
            GroupB a;
            p=&a;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(student==3)
        {
            GroupC a;
            p=&a;
            if(type=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}
 
------------------------------------------------------
2018192044:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void Speak()=0;
    virtual ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int a):Animal(n,a){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig(){}
};
int main()
{
    int t,age;
    string name,type;
    cin>>t;
    Animal *p;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Dog")
        {
            Dog A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Duck")
        {
            Duck A(name,age);
            p=&A;
            p->Speak();
        }
        else if(type=="Pig")
        {
            Pig A(name,age);
            p=&A;
            p->Speak();
        }
        else
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
    }
    return 0;
}
------------------------------------------------------
2018152010:Problem1234:正确
#include<iostream>
#include<iomanip>
#include<cmath>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class Group1:public Group
{
public:
    int add(int x, int y){return x+y;}
    int sub(int x, int y){return x-y;}
};

class Group2:public Group
{
    int add(int x, int y){return x+y;}
    int sub(int x, int y)
    {
        int a,b,c;
        a=(x%10+10-y%10)%10;
        b=(((x/10)%10+10)-(y/10)%10)%10*10;
        c=((x/100)-(y/100))*100;
        return a+b+c;
    }
};

class Group3:public Group
{
    int add(int x, int y)
    {
        int a,b,c;
        a=(x%10+y%10)%10;
        b=(((x/10)%10+(y/10)%10)%10)*10;
        c=(((x/100)+(y/100))%10)*100;
        return a+b+c;
    }
    int sub(int x, int y)
    {
        int a,b,c;
        a=(x%10+10-y%10)%10;
        b=(((x/10)%10+10)-(y/10)%10)%10*10;
        c=((x/100)-(y/100))*100;
        return a+b+c;
    }
};
int main()
{
    Group *p;
    Group1 p1;
    Group2 p2;
    Group3 p3;
    int n,a,b,m;
    char f;
    cin>>n;
    while(n--)
    {
        cin>>m>>a>>f>>b;
        if(m==1)
            p=&p1;
        else if(m==2)
            p=&p2;
        else
            p=&p3;
        if(f=='+')
            cout<<p->add(a,b)<<endl;
        else
            cout<<p->sub(a,b)<<endl;
    }
}

------------------------------------------------------
2018152026:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;
class animal
{
protected:
    string name;
    int age;
public:
    animal(string n,int a):name(n),age(a)
    {}
    ~animal() {}
    virtual void speak()=0;
};
class tiger:public animal
{
public:
    tiger(string n,int a):animal(n,a) {}
    void virtual speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class dog:public animal
{
public:
    dog(string n,int a):animal(n,a) {}
    ~dog() {}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class duck:public animal
{
public:
    duck(string n,int a):animal(n,a) {}
    ~duck() {}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class pig:public animal
{
public:
    pig(string n,int a):animal(n,a ) {}
    ~pig() {}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int t,age;
    animal *a;
    string type,name;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            tiger b(name,age);
            a=&b;
            a->speak();
        }
        else if(type=="Pig")
        {
            pig b(name,age);
            a=&b;
            a->speak();
        }
        else if(type=="Duck")
        {
            duck b(name,age);
            a=&b;
            a->speak();
        }
        else if(type=="Dog")
        {
            dog b(name,age);
            a=&b;
            a->speak();
        }
        else
            cout<<"There is no "<<type
            <<" in our Zoo."<<endl;
    }
}
------------------------------------------------------
2018192050:Problem1234:正确
#include<bits/stdc++.h>
using namespace std;
class Group
{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
    public:
        int add(int a,int b)
        {
        	return a+b;
		}
		int sub(int a,int b)
		{
			return a-b;
		}
};
class GroupB:public Group{
    public:
        int add(int a,int b)
        {
        	return a+b;
		}
		int sub(int a,int b){
			int w;
			w=a-b;
			if(a%10-b%10<0)
			{
				w=w+10;
			}
			if(a%100-b%100<0)
			{
				w+=100;
			}
			return w;
		}
};
class GroupC:public Group{
    public:
		int add(int a,int b)
		{
			int w;
			w=a+b;
			if(a%10+b%10>10)
			{
				w=w-10;
			}
			if(a%100+b%100>10)
			{
				w=w-100;
			}
			return w;
		}
		int sub(int a,int b){
			int w;
			w=a-b;
			if(a%10-b%10<0)
			{
				w=w+10;
			}
			if(a%100-b%100<0)
			{
				w+=100;
			}
			return w;
		}
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,n1,n2;
		char ch;
		cin>>n;
		cin>>n1>>ch>>n2;
		if(n==1)
		{
			GroupA a;
			if(ch=='+')
				cout<<a.add(n1,n2)<<endl;
			else
				cout<<a.sub(n1,n2)<<endl;
		}
		if(n==2)
		{
			GroupB b;
			if(ch=='+')
				cout<<b.add(n1,n2)<<endl;
			else
				cout<<b.sub(n1,n2)<<endl;
		}
		if(n==3)
		{
			GroupC c;
			if(ch=='+')
				cout<<c.add(n1,n2)<<endl;
			else
				cout<<c.sub(n1,n2)<<endl;
		}
	}
}
------------------------------------------------------
2018192013:Problem1234:答案错误
#include <iostream>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y){return x-y;}
};

class GroupB:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=(y-y%10)/10;
            }
            else
                s+=x%10*i;
            x=(x-x%10)/10;
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                s+=(x%10+y%10)%10*i;
                y=(y-y%10)/10;
            }
            else
                s+=x%10*i;
            x=(x-x%10)/10;
        }
        return s;
    }
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=(y-y%10)/10;
            }
            else
                s+=x%10*i;
            x=(x-x%10)/10;
        }
        return s;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *p;
    while(t--)
    {
        int type,x,y;
        char op;
        cin>>type>>x>>op>>y;
        if(type==1)
        {
            GroupA ga;
            p=&ga;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB gb;
            p=&gb;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC gc;
            p=&gc;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192044:Problem1119:正确
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
    void deposit(int a)
    {
        balance+=a;
    }
    virtual void withdraw(int a)
    {
        if(a>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=a;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    virtual ~BaseAccount(){}
};
class BasePlus:public BaseAccount
{
    int limit,limit_sum;
public:
    BasePlus(string n,string a,int b):BaseAccount(n,a,b),limit(5000),limit_sum(0){}
    void withdraw(int a)
    {
        if(a>(balance+limit-limit_sum))
            cout<<"insufficient"<<endl;
        else
        {
            balance-=a;
            if(balance<0)
            {
                limit_sum+=(-balance);
                balance=0;
            }
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
    ~BasePlus(){}
};
int main()
{
    int t,balance,a;
    string name,account;
    cin>>t;
    BaseAccount *p;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[1]=='A')
        {
            BaseAccount A(name,account,balance);
            p=&A;
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            p->display();
        }
        else
        {
            BasePlus A(name,account,balance);
            p=&A;
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            cin>>a;
            p->deposit(a);
            cin>>a;
            p->withdraw(a);
            p->display();
        }
    }
    return 0;
}
------------------------------------------------------
2016071031:Problem1235:正确
#include <iostream>
#include <bits/stdc++.h>
// 考察向下转换
using namespace std;

class Geometry{
public:
    Geometry() {}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry() {}
};

class Rect: public Geometry {
    int width;
    int height;
public:
    Rect(){}
    Rect(int width_, int height_):Geometry(){
        width = width_;
        height = height_;
    }
    double getArea() { return width * height * 1.0; }
    ~Rect(){}
};

class Circle: public Geometry {
    int radius;
public:
    Circle() {}
    Circle(int radius_): Geometry() {
        radius = radius_;
    }
    double getArea() { return 3.14 * pow(radius, 2);}
    ~Circle(){}
};

class TotalArea {
public:
    TotalArea(){}
    static void computerTotalArea(Geometry** t,int n);
    ~TotalArea() {}
};

void TotalArea::computerTotalArea(Geometry** g,int n) {
    double max = 0;
    for (int i = 0; i < n; i++) {
        double tmp = g[i]->getArea();
        if ( tmp > max)
            max = tmp;
    }
    cout<< "最大面积=" << fixed << setprecision(2) << max <<endl;
}

int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, width, height, radius;

    cin>>t;
    Geometry **g = new Geometry*[t];
    for (int i = 0; i < t; i++) {
        cin>>type;
        if (type == 1) {
            cin>>width>>height;
            g[i] = new Rect(width, height);
        } else {
            cin>>radius;
            g[i] = new Circle(radius);
        }
    }

    TotalArea to;
    to.computerTotalArea(g, t);

    for (int i = 0; i < t; i++) {
        delete g[i];
    }

    delete []g;

    return 0;
}


------------------------------------------------------
2018192040:Problem1129:答案错误
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class card{
protected:
	int ID,counter;
	string name;
public:
	card(){
	};
	card(int id,int c,string n):ID(id),counter(c),name(n){
	};
	void initial(){
		cin>>ID>>name>>counter;
	}
	int save(double n){
		if(n/10!=0||n<0)
			return -1;
		counter += n;
		return 1;
	}
	int take(int n){
		if(n/10!=0 || n>counter||n<0)
			return -1;
		counter -= n;
		return 1;
	}
	virtual void show(){
		cout<<ID<<"-"<<name<<"-"<<counter<<endl;
	}
};

class tcard:public card{
	int tcounter;
public:
	tcard(){
	};
	tcard(int id,int c,string n,int t):card(id,c,n),tcounter(t){
	};
	int transfer(double n){
		if(n/10!=0 || counter < n||n<0)
			return -1;
		counter -= n;
		tcounter += n;
	}
	void show(){
		cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<tcounter<<endl;
	}

};

class creCard:public card{
	int credit;
public:
	creCard(){
	};
	creCard(int id,int c,string n,int cr):card(id,c,n),credit(cr){
	};
	int over(double n){
		if(n/10!=0 || n>credit+counter || n<0)
			return -1;
		else if(n<counter){
			counter -= n;
		}
		else{
			counter = 0;
			credit -= (n-counter);
		}
	}
	void show(){
		cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<credit<<endl;
	}
};

int main(){
	int id,counter,tcounter,credit;
	string name;
	cin>>id>>name>>counter;
	card c1(id,counter,name);
	cin>>id>>name>>counter>>tcounter;
	tcard c2(id,counter,name,tcounter);
	cin>>id>>name>>counter>>credit;
	creCard c3(id,counter,name,credit);
	int n1,n2,n3,n4;
	cin>>n1>>n2>>n3>>n4;
	c1.save(n1);
	c1.save(n2);
	c1.take(n3);
	c1.take(n4);
	c1.show();
	cin>>n1>>n2>>n3>>n4;
	c2.save(n1);
	c2.take(n2);
	c2.transfer(n3);
	c2.transfer(n4);
	c2.show();
	cin>>n1>>n2>>n3>>n4;
	c3.save(n1);
	c3.take(n2);
	c3.over(n3);
	c3.over(n3);
	c3.show();
}
------------------------------------------------------
2017301020:Problem1235:正确
#include <iostream>
#include <cstring>
#include <iomanip>
using namespace std;

class Geometry{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};

class Rect:public Geometry{
    double length,width;
public:
    Rect(double length1,double width1):length(length1),width(width1){}
    virtual double getArea();
};

double Rect::getArea(){
    return length*width;
}

class Circle:public Geometry{
    double r;
public:
    Circle(double r1):r(r1){}
    virtual double getArea();
    ~Circle(){}
};

double Circle::getArea(){
    return 3.14*r*r;
}

class TotalArea{
public:
    TotalArea(){}
    static void computerTotalarea(Geometry** t,int n);
};

void TotalArea::computerTotalarea(Geometry** t,int n){
    double s=t[0]->getArea();
    for(int i=0;i<n-1;i++){
        if(t[i]->getArea()<t[i+1]->getArea())
            s=t[i+1]->getArea();
    }
    cout<<"最大面积="<<fixed<<setprecision(2)<<s<<endl;
}

int main()
{
    int t,type;
    double x,y,r;
    Geometry **M;
    cin>>t;
    M=new Geometry*[t];
    for(int i=0;i<t;i++){
        cin>>type;
        if(type==1){
            cin>>x>>y;
            M[i]=new Rect(x,y);
        }
        else{
            cin>>r;
            M[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalarea(M,t);
    for(int i=0;i<t;i++)
        delete M[i];
    delete []M;
    return 0;
}

------------------------------------------------------
2018192026:Problem1234:正确
#include<stdio.h>
#include<math.h>
class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10-y%10+10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
class GroupC:public Group
{
public:
	int add(int x,int y)
	{
		int i,sum=0;
		for(i=0;x||y;i++,x/=10,y/=10)
		{
			if(x%10+y%10>=10)
				sum+=(x%10-10+y%10)*pow(10,i);
			else
				sum+=(x%10+y%10)*pow(10,i);
		}
		return sum;
	}
	int sub(int x,int y)
	{
		int i,sum=0;
		for(i=0;x;i++,x/=10,y/=10)
		{
			if(x%10<y%10)
				sum+=(x%10+10-y%10)*pow(10,i);
			else
				sum+=(x%10-y%10)*pow(10,i);
		}
		return sum;
	}
};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		Group *person;
		int kind,x,y;
		char ch;
		scanf("%d %d%c%d",&kind,&x,&ch,&y);
		if(kind==1)
		{
			GroupA A;
			person=&A;
		}
		else if(kind==2)
		{
			GroupB B;
			person=&B;
		}
		else if(kind==3)
		{
			GroupC C;
			person=&C;
		}
		if(ch=='+')
			printf("%d\n",person->add(x,y));
		else
			printf("%d\n",person->sub(x,y));
	}
	return 0;
}


------------------------------------------------------
2018151014:Problem1234:正确
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <string>

using namespace std;

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
protected:
	
};

class GroupA : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
};

class GroupC : public Group {
public:
	int add(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' + y_str[i] - '0' >= 10) {
				x_str[i] = x_str[i] - '0' + y_str[i] - 10;
			}
			else {
				x_str[i] = x_str[i] - '0' + y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
	
	int sub(int x, int y) {
		int result;
		stringstream ssx, ssy;
		ssx << x;
		ssy << y;
		
		string x_str;
		string y_str;
		ssx >> x_str;
		ssy >> y_str;
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		stringstream ssre;
		ssre << x_str;
		ssre >> result;
		return result;
	}
	
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		int x;
		string eqn;
		Group *g;
		
		cin >> x >> eqn;
		
		if (x == 1) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupA;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (x == 2) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupB;
				cout << g->sub(x, y) << endl;
			}
		}
		else if (x == 3) {
			int id = eqn.find('+');
			stringstream ssx, ssy;
			int x, y;
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->add(x, y) << endl;
			}
			
			id = eqn.find('-');
			if (id >= 0) {
				string x_str = "";
				for (int i = 0; i < id; i++) {
					x_str += eqn[i];
				}
				
				string y_str = "";
				for (int i = id+1; i < eqn.size(); i++) {
					y_str += eqn[i];
				}
				ssx << x_str;
				ssx >> x;
				ssy << y_str;
				ssy >> y;
				
				g = new GroupC;
				cout << g->sub(x, y) << endl;
			}
		}
		delete g;
	}
	
	return 0;
}
------------------------------------------------------
2018192043:Problem1129:正确
#include <iostream>
#include <cmath>
using namespace std;
class Ncard
{
protected:
    string ID,CName;
    int Counter;
public:
    void initial(string IDs,string CNames,int Counters)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
    }
    int save(int m)
    {
        if(m<=0)
            return -1;
        Counter+=m;
        return 1;
    }
    int take(int m)
    {
        if(m<=0 || Counter-m<0)
            return -1;
        Counter-=m;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
    virtual ~Ncard(){}
};
class TCard:public Ncard
{
    int Tcounter;
public:
    void initial(string IDs,string CNames,int Counters,int Tcounters)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
        Tcounter=Tcounters;
    }
    int transfer(int m)
    {
        if(m<0 || Counter-m<0)
            return -1;
        Counter-=m;
        Tcounter+=m;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
    ~TCard(){}
};
class VCard:public Ncard
{
    int Credit;
public:
    void initial(string IDs,string CNames,int Counters,int Credits)
    {
        ID=IDs;
        CName=CNames;
        Counter=Counters;
        Credit=Credits;
    }
    int over(int m)
    {
        if(m<0 || Counter+Credit-m<0)
            return -1;
        Credit+=Counter-m;
        Counter=0;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
    ~VCard(){}
};
void show(Ncard &obj)
{
    obj.info();
}
int main()
{
    string ID,CName;
    int Counter,Tcounter,Credit,m;
    Ncard x1;
    TCard x2;
    VCard x3;
    cin>>ID>>CName>>Counter;
    x1.initial(ID,CName,Counter);
    cin>>ID>>CName>>Counter>>Tcounter;
    x2.initial(ID,CName,Counter,Tcounter);
    cin>>ID>>CName>>Counter>>Credit;
    x3.initial(ID,CName,Counter,Credit);
    cin>>m;
    x1.save(m);
    cin>>m;
    x1.save(m);
    cin>>m;
    x1.take(m);
    cin>>m;
    x1.take(m);
    cin>>m;
    x2.save(m);
    cin>>m;
    x2.take(m);
    cin>>m;
    x2.transfer(m);
    cin>>m;
    x2.transfer(m);
    cin>>m;
    x3.save(m);
    cin>>m;
    x3.take(m);
    cin>>m;
    x3.over(m);
    cin>>m;
    x3.over(m);
    show(x1);
    show(x2);
    show(x3);
    return 0;
}
------------------------------------------------------
2018151051:Problem1235:运行错误
#include<iostream>
#include<cstring>
using namespace std;
class Geometry
{
public:
	virtual double getArea()=0;	
};
class Rect:public Geometry
{
	double chang;
	double kuan;
public:
	Rect(double c,double k)
	{
		chang=c;
		kuan=k;
	}
	virtual double getArea()
	{
		double s;
		s=chang*kuan;
		return s;
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double _r)
	{
		r=_r;
	}
	virtual double getArea()
	{
		double s;
		s=3.14*r*r;
		return s;
	}
};
class TotalArea
{
public:
	static void computerTotalArea(Geometry** t,int n)
	{
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
		}
		cout<<"最大面积="<<max<<endl;
	}
};
int main()
{
    int n,i;
    cin>>n;
    Geometry** t;
    for(i=0;i<n;i++)
    {
    	int type;
    	cin>>type;
    	if(type==1)
    	{
    		double chang;
    		double kuan;
    		cin>>chang>>kuan;
    		t[i]=new Rect(chang,kuan);
		}
		else if(type==2)
		{
			double r;
			cin>>r;
			t[i]=new Circle(r);
		}
    }
    TotalArea p;
    p.computerTotalArea(t,n);
    for(i=0;i<n;i++)
    {
    	delete t[i];
	}
    return 0;
}
------------------------------------------------------
2018192044:Problem1235:正确
#include <iostream>
using namespace std;
#include<iomanip>
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};
class Rect:public Geometry
{
    double l,h;
public:
    Rect(double l1,double h1):l(l1),h(h1){}
    double getArea()
    {
        return l*h;
    }
    ~Rect(){}
};
class Circle:public Geometry
{
    int r;
public:
    Circle(int r1):r(r1){}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle(){}
};
class TotalArea
{
public:
   static void computerTotalArea(Geometry** t,int n)
   {
        double max=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
   }
};
int main()
{
    int t,r,i,type;
    double l,h;
    cin>>t;
    Geometry **p=new Geometry*[t];
    for(i=0;i<t;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>l>>h;
            p[i]=new Rect(l,h);
        }
        else
        {
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(p,t);
    for(i=0;i<t;i++)
        delete p[i];
    delete []p;
    return 0;
}
------------------------------------------------------
2018192043:Problem1119:正确
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    int balance;
public:
    BaseAccount(string ns,string as,int bs):name(ns),account(as),balance(bs){}
    void deposit(int m)
    {
        balance+=m;
    }
    virtual void withdraw(int m)
    {
        if(balance-m<0)
            cout<<"insufficient"<<endl;
        else
            balance-=m;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    virtual ~BaseAccount(){}
};
class BasePlus:public BaseAccount
{
    int limit;
public:
    BasePlus(string ns,string as,int bs,int ls=5000):BaseAccount(ns,as,bs),limit(ls){}
    void withdraw(int m)
    {
        if(balance+limit-m<0)
            cout<<"insufficient"<<endl;
        else if(balance-m<0)
        {
            limit+=balance-m;
            balance=0;
        }
        else
            balance-=m;
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
    ~BasePlus(){}
};
int main()
{
    int t,balance,m;
    string name,account;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        if(account[0]=='B' && account[1]=='A')
        {
            BaseAccount a(name,account,balance);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            a.display();
        }
        else
        {
            BasePlus a(name,account,balance);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            cin>>m;
            a.deposit(m);
            cin>>m;
            a.withdraw(m);
            a.display();
        }
    }
    return 0;
}
 
------------------------------------------------------
2018192014:Problem1119:正确
#include<bits/stdc++.h>
using namespace std;
class BaseAccount{
protected:
    string name,account;
    double balance;
public:
    BaseAccount(string n,string a,double b):
        name(n),account(a),balance(b){
        }
    virtual void deposit(double b)
    {
        balance+=b;
    }
    virtual void withdraw(double b)
    {
        if(balance<b)
        {
            cout<<"insufficient"<<endl;
            return ;
        }
        else
        {
            balance-=b;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    virtual ~BaseAccount()
    {
	}
};
class BasePlus:virtual public BaseAccount{
protected:
    double limit,limit_sum;
public:
    BasePlus(string n,string a,double b,double l=5000,double ls=0):
    BaseAccount(n,a,b),limit(l),limit_sum(ls){
         
    }
    virtual void deposit(double b)
    {
        balance+=b;
    }
    virtual void withdraw(double b)
    {
        double m=limit-limit_sum;
        if(balance+m<b)
        {
            cout<<"insufficient"<<endl;
            return ;
        }
        else
        {
            if(balance<b)
            {
                m=b-balance;
                limit-=m;
                limit_sum+=m;
                balance=0;
            }
            else
            {
                balance-=b;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
	virtual ~BasePlus()
    {
	}   
};
int main ()
{
    BaseAccount *ba;
    int t;
    cin>>t;
    while(t--)
    {
        string n,a;
        double b;
        cin>>n>>a>>b;
        if(a[1]=='A')
        {
            ba=new BaseAccount(n,a,b);
             
        }
        else
        {
            ba=new BasePlus(n,a,b);
        }
        cin>>b;
        ba->deposit(b);
        cin>>b;
        ba->withdraw(b);
        cin>>b;
        ba->deposit(b);
        cin>>b;
        ba->withdraw(b);
        ba->display();
        delete ba;
    }
    return 0;
}
------------------------------------------------------
2018192013:Problem1234:答案错误
#include <iostream>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y){return x-y;}
};

class GroupB:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>=y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=(y-y%10)/10;
            }
            else
                s+=x%10*i;
            x=(x-x%10)/10;
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                s+=(x%10+y%10)%10*i;
                y=(y-y%10)/10;
            }
            else
                s+=x%10*i;
            x=(x-x%10)/10;
        }
        return s;
    }
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>=y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=(y-y%10)/10;
            }
            else
                s+=x%10*i;
            x=(x-x%10)/10;
        }
        return s;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *p;
    while(t--)
    {
        int type,x,y;
        char op;
        cin>>type>>x>>op>>y;
        if(type==1)
        {
            GroupA ga;
            p=&ga;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB gb;
            p=&gb;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC gc;
            p=&gc;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018192009:Problem1129:正确
#include <iostream>
#include <cmath>
using namespace std;
class normal
{
protected:
    int id;
    string CName;
    int counter;
public:
    normal(){}
    normal(int d,string name,int c):id(d),CName(name),counter(c){}
    void initial(){}
    int save(int money)
    {
        if(money<0)
            return -1;
        counter+=money;
        return 1;
    }
    int take(int money)
    {
        if(money>counter||money<0)
            return -1;
        counter-=money;
        return 1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<CName<<"-"<<counter<<endl;
    }
};
class tran:public normal
{
    int tcounter;
public:
    tran(int d,string name,int c,int tc):normal(d,name,c),tcounter(tc){}
    int transfer(int money)
    {
        if(money>counter)
            return -1;
        counter-=money;
        tcounter+=money;
        return 1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<CName<<"-"<<counter<<"-"<<tcounter<<endl;
    }
};
class credit:public normal
{
    int limit;
public:
    credit(int d,string name,int c,int tc):normal(d,name,c),limit(tc){}
    int over(int money)
    {
        if(money>counter+limit)
            return -1;
        counter-=money;
        limit+=counter;
        counter=0;
        return 1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<CName<<"-"<<counter<<"-"<<limit<<endl;
    }
};
void show(normal &a)
{
    a.info();
}
int main()
{
    int id,counter;
    string name;
    int tc,limit;
    int money;

    cin>>id>>name>>counter;
    normal a(id,name,counter);
    cin>>id>>name>>counter>>tc;
    tran b(id,name,counter,tc);
    cin>>id>>name>>counter>>limit;
    credit c(id,name,counter,limit);

    cin>>money;
    a.save(money);
    cin>>money;
    a.save(money);
    cin>>money;
    a.take(money);
    cin>>money;
    a.take(money);

    cin>>money;
    b.save(money);
    cin>>money;
    b.take(money);
    cin>>money;
    b.transfer(money);
    cin>>money;
    b.transfer(money);

    cin>>money;
    c.save(money);
    cin>>money;
    c.take(money);
    cin>>money;
    c.over(money);
    cin>>money;
    c.over(money);

    show(a);
    show(b);
    show(c);
    return 0;
}

------------------------------------------------------
2018192044:Problem1234:正确
#include <iostream>
using namespace std;
#include<iomanip>
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
    virtual ~Group(){}
};
class GroupA:public Group
{
public:
    GroupA() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
    ~GroupA(){}
};
class GroupB:public Group
{
public:
    GroupB() {}
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
    ~GroupB(){}
};
class GroupC:public Group
{
public:
    GroupC() {}
    int sub(int x,int y)
    {
        int sum=0,t1,t2,total=1;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0)
                break;
            if(t1<t2)
                t1=t1+10-t2;
            else
                t1-=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
    int add(int x,int y)
    {
        int sum=0,t1,t2,total=1,x1,y1;
        x1=x;
        y1=y;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(x==0&&x1>y1)
                break;
            if(y==0&&x1<y1)
                break;
            if(t1+t2>=10)
                t1=(t1+t2)%10;
            else
                t1+=t2;
            sum+=t1*total;
            total*=10;
            x/=10;
            y/=10;
        }
        return sum;
    }
    ~GroupC(){}
};
int main()
{
    int t,type,num1,num2;
    char o;
    cin>>t;
    Group *p;
    while(t--)
    {
        cin>>type>>num1>>o>>num2;
        if(type==1)
        {
            GroupA A;
            p=&A;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else if(type==2)
        {
            GroupB B;
            p=&B;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
        else
        {
            GroupC C;
            p=&C;
            if(o=='+')
            {
                cout<<p->add(num1,num2)<<endl;
            }
            else
            {
                cout<<p->sub(num1,num2)<<endl;
            }
        }
    }
    return 0;
}
------------------------------------------------------
2018182052:Problem1129:正确
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Card
{
protected:
    string ID;
    char CName;
    int balance;
public:
    Card();
    Card(const string& i,char n,int b);
    void initial(const string& i,char n,int b);
    int save(int am);
    int take(int am);
    virtual void info()const;
};

Card::Card() {}
Card::Card(const string& i,char n,int b):ID(i),CName(n),balance(b) {}
void Card::initial(const string& i,char n,int b)
{
    ID=i;
    CName=n;
    balance=b;
}
int Card::save(int am)
{
    if(am<=0)
        return -1;
    balance+=am;
    return 1;
}
int Card::take(int am)
{
    if(am>balance||am<=0)
        return -1;
    balance-=am;
    return 1;
}
void Card::info()const
{
    cout<<ID<<"-"<<CName<<"-"<<balance<<endl;
}

class Tcard:public Card
{
protected:
    int Tcounter;
public:
    Tcard();
    Tcard(const string& i,char n,int b,int c);
    int transfer(int am);
    virtual void info()const;
};
Tcard::Tcard() {}
Tcard::Tcard(const string& i,char n,int b,int c):Card(i,n,b),Tcounter(c) {}
int Tcard::transfer(int am)
{
    if(am<=0||am>balance)
        return -1;
    balance-=am;
    Tcounter+=am;
    return 1;
}
void Tcard::info()const
{
    cout<<ID<<"-"<<CName<<"-"<<balance<<"-"<<Tcounter<<endl;
}
class VIPcard:public Card
{
protected:
    int Credit;
public:
    VIPcard();
    VIPcard(const string& i,char n,int b,int c);
    int over(int am);
    virtual void info()const;
};
VIPcard::VIPcard() {}
VIPcard::VIPcard(const string& i,char n,int b,int c):Card(i,n,b),Credit(c) {}
int VIPcard::over(int am)
{
    if(am<=balance||am>balance+Credit)
        return -1;
    am-=balance;
    balance=0;
    Credit-=am;
    return 1;
}
void VIPcard::info()const
{
    cout<<ID<<"-"<<CName<<"-"<<balance<<"-"<<Credit<<endl;
}
void show(Card& obj)
{
    obj.info();
}
int main()
{
//    freopen(ADDRESS);
    string ID;
    char ch(0);
    int balance(0);
    int other(0);
    cin>>ID>>ch>>balance;
    Card a(ID,ch,balance);
    cin>>ID>>ch>>balance>>other;
    Tcard b(ID,ch,balance,other);
    cin>>ID>>ch>>balance>>other;
    VIPcard c(ID,ch,balance,other);

    int d[4];
    cin>>d[0]>>d[1]>>d[2]>>d[3];
    a.save(d[0]);
    a.save(d[1]);
    a.take(d[2]);
    a.take(d[3]);
    cin>>d[0]>>d[1]>>d[2]>>d[3];
    b.save(d[0]);
    b.take(d[1]);
    b.transfer(d[2]);
    b.transfer(d[3]);
    cin>>d[0]>>d[1]>>d[2]>>d[3];
    c.save(d[0]);
    c.take(d[1]);
    c.over(d[2]);
    c.over(d[3]);

    show(a);
    show(b);
    show(c);

    return 0;
}
------------------------------------------------------
2018192014:Problem1120:运行错误
#include<bits/stdc++.h>
using namespace std;
class Animal{
protected:
	string name;
	int age;
public:
	Animal(string n,int a):
		name(n),age(a){
		}
	virtual void speak()=0;
};
class Tiger:virtual public Animal{
protected:
public:
	Tiger(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Pig:virtual public Animal{
protected:
public:
	Pig(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};
class Duck:virtual public Animal{
protected:
public:
	Duck(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
class Dog:virtual public Animal{
protected:
public:
	Dog(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};
int main ()
{
	Animal *an;
	int t;
	cin>>t;
	while(t--)
	{
		string n;
		int a;
		string command;
		cin>>command;
		if(command=="Tiger")
		{
			cin>>n>>a;
			an=new Tiger(n,a);
			an->speak();
		}
		else if(command=="Pig")
		{
			cin>>n>>a;
			an=new Pig(n,a);
			an->speak();
		}
		else if(command=="Duck")
		{
			cin>>n>>a;
			an=new Duck(n,a);
			an->speak();
		}
		else if(command=="Dog")
		{
			cin>>n>>a;
			an=new Dog(n,a);
			an->speak();
		}
		else
		{
			cin>>n>>a;
			cout<<"There is no "<<command<<" in our Zoo."<<endl;
		}
		delete an;
	}
	return 0;
}
------------------------------------------------------
2018192043:Problem1120:编译错误
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string names,int ages):name(names),age(ages){}
    virtual void speak()=0;
    virtual ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
class Duck:public Animal
{
public:
    Duck(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
class Pig:public Animal
{
public:
    Pig(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig(){}
};
int main()
{
    Animal *p;
    int t,age;
    string type,name;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger a(name,age);
            p=&a;
        }
        else if(type=="Pig")
        {
            Pig a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Dog")
        {
            Dog a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck a(name,age);
            p=&a;
            p->speak();
        }
        p->speak();
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
 
------------------------------------------------------
2018192038:Problem1129:正确
#include <iostream>

using namespace std;

class NCard
{
protected:
    int ID;
    char CName;
    int Counter;
public:
    NCard(){}
    NCard(int id,char name,int cnt):ID(id),CName(name),Counter(cnt){}
    void initial(int id,char name,int cnt)
    {
        ID=id;
        CName=name;
        Counter=cnt;
    }
    int save(int m)
    {
        if(m<0)
        {
            return -1;
        }
        else
        {
            Counter+=m;
            return 1;
        }
    }
    int take(int m)
    {
        if(m<0)
        {
            return -1;
        }
        else
        {
            if(Counter>m)
            {
                Counter-=m;
                return 1;
            }
            else
            {
                return -1;
            }

        }
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }

};

class TCard:public NCard
{
    int Tcounter;
public:
    TCard(){}
    void initial(int id,char name,int cnt,int tco)
    {
        ID=id;
        CName=name;
        Counter=cnt;
        Tcounter=tco;
    }
    int transfer(int m)
    {
        if(m<=Counter)
        {
            Tcounter+=m;
            Counter-=m;
            return 1;
        }
        else return -1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};

class VCard:public NCard
{
    int Credit;
public:
    VCard(){}
    void initial(int id,char name,int cnt,int cre)
    {
        ID=id;
        CName=name;
        Counter=cnt;
        Credit=cre;
    }
    int over(int m)
    {
        if(m<=Counter+Credit)
        {
            Credit-=(m-Counter);
            Counter=0;
            return 1;
        }
        else
        {
            return -1;
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
//----多态函数----
void show(NCard &obj)
{
    obj.info();
}
//----主函数----
int main()
{
    int ID;
    char CName;
    int Counter;
    int Tcounter;
    int Credit;
    int money;
    NCard nc;
    TCard tc;
    VCard vc;

    cin>>ID>>CName>>Counter;
    nc.initial(ID,CName,Counter);
    cin>>ID>>CName>>Counter>>Tcounter;
    tc.initial(ID,CName,Counter,Tcounter);
    cin>>ID>>CName>>Counter>>Credit;
    vc.initial(ID,CName,Counter,Credit);

    cin>>money;
    nc.save(money);
    cin>>money;
    nc.save(money);
    cin>>money;
    nc.take(money);
    cin>>money;
    nc.take(money);

    cin>>money;
    tc.save(money);
    cin>>money;
    tc.take(money);
    cin>>money;
    tc.transfer(money);
    cin>>money;
    tc.transfer(money);

    cin>>money;
    vc.save(money);
    cin>>money;
    vc.take(money);
    cin>>money;
    vc.over(money);
    cin>>money;
    vc.over(money);

    show(nc);
    show(tc);
    show(vc);

    return 0;
}

------------------------------------------------------
2018192043:Problem1120:答案错误
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string names,int ages):name(names),age(ages){}
    virtual void speak()=0;
    virtual ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
class Duck:public Animal
{
public:
    Duck(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
class Pig:public Animal
{
public:
    Pig(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig(){}
};
int main()
{
    Animal *p;
    int t,age;
    string type,name;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger a(name,age);
            p=&a;
        }
        else if(type=="Pig")
        {
            Pig a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Dog")
        {
            Dog a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck a(name,age);
            p=&a;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
 
------------------------------------------------------
2018192014:Problem1120:运行错误
#include<bits/stdc++.h>
using namespace std;
class Animal{
protected:
	string name;
	int age;
public:
	Animal(string n,int a):
		name(n),age(a){
		}
	virtual void speak()=0;
};
class Tiger:virtual public Animal{
protected:
public:
	Tiger(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
};
class Pig:virtual public Animal{
protected:
public:
	Pig(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
};
class Duck:virtual public Animal{
protected:
public:
	Duck(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
};
class Dog:virtual public Animal{
protected:
public:
	Dog(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
};
int main ()
{
	Animal *an;
	int t;
	cin>>t;
	while(t--)
	{
		string n;
		int a;
		string command;
		cin>>command;
		if(command=="Tiger")
		{
			cin>>n>>a;
			an=new Tiger(n,a);
			an->speak();
			delete an;
		}
		else if(command=="Pig")
		{
			cin>>n>>a;
			an=new Pig(n,a);
			an->speak();
			delete an;
		}
		else if(command=="Duck")
		{
			cin>>n>>a;
			an=new Duck(n,a);
			an->speak();
			delete an;
		}
		else if(command=="Dog")
		{
			cin>>n>>a;
			an=new Dog(n,a);
			an->speak();
			delete an;
		}
		else
		{
			cin>>n>>a;
			cout<<"There is no "<<command<<" in our Zoo."<<endl;
		}
		
	}
	return 0;
}
------------------------------------------------------
2018151051:Problem1235:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Geometry
{
public:
	virtual double getArea()=0;	
};
class Rect:public Geometry
{
	double chang;
	double kuan;
public:
	Rect(double c,double k)
	{
		chang=c;
		kuan=k;
	}
	virtual double getArea()
	{
		double s;
		s=chang*kuan;
		return s;
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double _r)
	{
		r=_r;
	}
	virtual double getArea()
	{
		double s;
		s=3.14*r*r;
		return s;
	}
};
class TotalArea
{
public:
	static void computerTotalArea(Geometry** t,int n)
	{
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
		}
		cout<<"最大面积="<<max<<endl;
	}
};
int main()
{
    int n,i;
    cin>>n;
    Geometry** t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
    	int type;
    	cin>>type;
    	if(type==1)
    	{
    		double chang;
    		double kuan;
    		cin>>chang>>kuan;
    		t[i]=new Rect(chang,kuan);
		}
		else if(type==2)
		{
			double r;
			cin>>r;
			t[i]=new Circle(r);
		}
    }
    TotalArea p;
    p.computerTotalArea(t,n);
    for(i=0;i<n;i++)
    {
    	delete t[i];
	}
    return 0;
}
------------------------------------------------------
2018192043:Problem1120:正确
#include <iostream>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string names,int ages):name(names),age(ages){}
    virtual void speak()=0;
    virtual ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
public:
    Dog(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~Dog(){}
};
class Duck:public Animal
{
public:
    Duck(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
class Pig:public Animal
{
public:
    Pig(string names,int ages):Animal(names,ages){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~Pig(){}
};
int main()
{
    Animal *p;
    int t,age;
    string type,name;
    cin>>t;
    while(t--)
    {
        cin>>type>>name>>age;
        if(type=="Tiger")
        {
            Tiger a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Pig")
        {
            Pig a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Dog")
        {
            Dog a(name,age);
            p=&a;
            p->speak();
        }
        else if(type=="Duck")
        {
            Duck a(name,age);
            p=&a;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
 
------------------------------------------------------
2018192043:Problem1232:正确
#include <iostream>
 
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string nos):no(nos) {}
    virtual void display()=0;//应收费用
    virtual ~Vehicle() {}
};
class Car:public Vehicle
{
    int people,weight;
public:
    Car(string no,int peoples,int weights):Vehicle(no),people(peoples),weight(weights) {}
    void display()
    {
        cout<<no<<" "<<people*8+weight*2<<endl;
    }
    ~Car() {}
};
class Truck:public Vehicle
{
    int weight;
public:
    Truck(string no,int weights):Vehicle(no),weight(weights) {}
    void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
    ~Truck() {}
};
class Bus:public Vehicle
{
    int people;
public:
    Bus(string no,int peoples):Vehicle(no),people(peoples) {}
    void display()
    {
        cout<<no<<" "<<people*3<<endl;
    }
    ~Bus() {}
};
int main()
{
    Vehicle *pv;
    int t,people,weight;
    string no;
    char type;
    cin>>t;
    while(t--)
    {
        cin>>type>>no;
        if(type=='1')
        {
            cin>>people>>weight;
            Car a(no,people,weight);
            pv=&a;
            pv->display();
        }
        else if(type=='2')
        {
            cin>>weight;
            Truck a(no,weight);
            pv=&a;
            pv->display();
        }
        else if(type=='3')
        {
            cin>>people;
            Bus a(no,people);
            pv=&a;
            pv->display();
        }
    }
    return 0;
}
 
------------------------------------------------------
2018152114:Problem1235:答案错误
#include<iostream>
#include<cstring>
using namespace std;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){
	}

};
class Rect:public Geometry
{
	double x,y;
public:
	Rect(double _x,double _y):x(_x),y(_y){}
	virtual double getArea()
	{
		return x*y;
	}
	~Rect()
	{
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double _r):r(_r){}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle()
	{
	}
};
class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		double _max=-1.0;
		for(int i=0;i<n;i++)
		{
			double temp=t[i]->getArea();
			if(_max<temp)
				_max=temp;
		}
		cout<<"最大面积="<<_max<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	int type;
	double _x,_y,_r;
	Geometry** M;
	M=new Geometry*[t];
	for(int i=0;i<t;i++){
		cin>>type;
		switch(type){
			case 1:
				cin>>_x>>_y;
				M[i]=new Rect(_x,_y);
				break;
			case 2:
				cin>>_r;
				M[i]=new Circle(_r);
				break;
		}
	}
	TotalArea::computerTotalArea(M,t);
}
------------------------------------------------------
2018192014:Problem1120:正确
#include<bits/stdc++.h>
using namespace std;
class Animal{
protected:
	string name;
	int age;
public:
	Animal(string n,int a):
		name(n),age(a){
		}
	virtual void speak()=0;
	virtual ~Animal(){
	}
};
class Tiger:virtual public Animal{
protected:
public:
	Tiger(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}
	~Tiger(){
	}
};
class Pig:virtual public Animal{
protected:
public:
	Pig(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
	~Pig()
	{
		
	}
};
class Duck:virtual public Animal{
protected:
public:
	Duck(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
	~Duck()
	{
		
	}
};
class Dog:virtual public Animal{
protected:
public:
	Dog(string n,int a):Animal(n,a){
	}
	virtual void speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
	~Dog()
	{
		
	}
};
int main ()
{
	Animal *an;
	int t;
	cin>>t;
	while(t--)
	{
		string n;
		int a;
		string command;
		cin>>command;
		if(command=="Tiger")
		{
			cin>>n>>a;
			an=new Tiger(n,a);
			an->speak();
			delete an;
		}
		else if(command=="Pig")
		{
			cin>>n>>a;
			an=new Pig(n,a);
			an->speak();
			delete an;
		}
		else if(command=="Duck")
		{
			cin>>n>>a;
			an=new Duck(n,a);
			an->speak();
			delete an;
		}
		else if(command=="Dog")
		{
			cin>>n>>a;
			an=new Dog(n,a);
			an->speak();
			delete an;
		}
		else
		{
			cin>>n>>a;
			cout<<"There is no "<<command<<" in our Zoo."<<endl;
		}
		
	}
	return 0;
}
------------------------------------------------------
2018192024:Problem1235:运行错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
    friend class TotalArea;
};
class Rect:public Geometry
{
    double a,b;
public:
    Rect(double _a,double _b):a(_a),b(_b){}
    virtual double getArea(){return a*b;}
    friend class TotalArea;
};
class Circle:public Geometry
{
    double r;
public:
    Circle(double _r):r(_r){}
    virtual double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxArea=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t;
    t=new Geometry*[n];
    int type;
    double a,b,r;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rec(a,b);
            t[i]=&rec;
        }
        else if(type==2)
        {
            cin>>r;
            Circle cir(r);
            t[i]=&cir;
        }
    }
    TotalArea cta;
    cta.computerTotalArea(t,n);
    for(int i=0;i<n;i++)
        delete t[i];
    delete []t;
    return 0;
}

------------------------------------------------------
2018152026:Problem1119:正确
#include<iostream>
#include<cstdio>
#include<string>
 
using namespace std;
 
class BaseAccount 
{
protected:
    string name, account;
    int balance;
public:
    BaseAccount() {}
    BaseAccount(string name, string account, int balance)
      :name(name),account(account),balance(balance) {}
    virtual void deposit(int x) 
    {
        balance += x;
    }
    virtual void withdraw(int x) 
    {
        if (balance < x) 
        {
            cout << "insufficient" << endl;
        } else 
        {
            balance -= x;
        }
    }
    virtual void display() 
    {
        cout << name << " " << account << " " << "Balance:" << balance << endl;
    }
};
 
class BasePlus: public BaseAccount
{
private:
    int limitsum;
    int limit;
public:
    BasePlus() 
    {
      limit = 5000;
      limitsum = 0;
    }
    BasePlus(string name,string account,int balance)
        :BaseAccount(name,account,balance) 
    {
        limit = 5000;
        limitsum = 0;
    }
    void deposit(int x) 
    {
       
      if (limitsum) 
      {
         
        if (limitsum > x) 
        {
          limitsum -= x;
          x = 0;
        } 
        else 
        {
          x -= limitsum;
          limitsum = 0;
        }
      }
       
      balance += x;
    }
    void withdraw(int x) 
    {
         
        if (balance >= x) 
        {
            balance -= x;
        } 
        else if (balance + limit - limitsum >= x) 
        {
            limitsum += x - balance;
            balance = 0;
        } 
        else 
        {
            cout << "insufficient" << endl;
        }
    }
    void display() 
    {
        cout << name << " " << account << " " << "Balance:" << balance << " limit:" << limit - limitsum << endl;
    }
};
 
int main() 
{
    int t;
    cin >> t;
    while (t--)
    {
        string name, account;
        int balance;
        cin >> name >> account >> balance;
        int a, b, c, d;
        cin >> a >> b >> c >> d;
        BaseAccount *p;
        if (account[1] == 'A') 
        {
            BaseAccount tmp(name, account, balance);
            p = &tmp;
            p->deposit(a);
            p->withdraw(b);
            p->deposit(c);
            p->withdraw(d);
            p->display();
        } 
        else 
        {
            BasePlus tmp(name, account, balance);
            p = &tmp;
            p->deposit(a);
            p->withdraw(b);
            p->deposit(c);
            p->withdraw(d);
            p->display();
        }
    }
    return 0;
}
------------------------------------------------------
2017047011:Problem1234:答案错误
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Group
{

public:
	virtual int add(int x, int y)=0;
	virtual int sub(int x, int y)=0;
};
//------------------------
class groupA:public Group{
	
public:
	groupA(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		return x-y;
	}	
};
//------------------------
class groupB:public Group{
	
public:
	groupB(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100]={0};
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<=x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<=y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
class groupC:public Group{
	
public:
	groupC(){}
	int add(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100]={0};
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<=x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<=y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		
		for(i=0;i<length;i++){
			if(a[i]+b[i]>=10)
				c[i]=(a[i]+b[i])%10;
			else 
				c[i]=a[i]+b[i];
		}
		
		for(i=0;i<leng1;i++)
			cout<<a[i]<<" ";
		cout<<"!"<<endl;
		
		
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		
		return res;
	}
	
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100]={0};
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<=x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<=y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
int main()
{
	int t,i,j,k;
	int num1,num2,kind;
	string ask;
	char fuhao;
	Group *p;
	
	cin>>t;
	while(t--)
	{
		cin>>kind>>ask;
		for(i=0;i<ask.length();i++)
			if(ask[i]=='+'||ask[i]=='-'){
				j=i;
				break;
			}
			
		fuhao=ask[j];
		num1=num2=0;
		k=j;
		
		for(i=0;i<j;i++){
			num1+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}
		
		k=ask.length()-j-1;
		for(i=j+1;i<ask.length();i++){
			num2+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}		
		
		if(kind==1){
			groupA g1;
			p=&g1;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==2){
			groupB g2;
			p=&g2;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==3){
			groupC g3;
			p=&g3;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		cout<<endl;	
	}
}
------------------------------------------------------
2018192013:Problem1235:运行错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rect(a,b);
            t[i]=&rect;
        }
        else if(type==2)
        {
            cin>>r;
            Circle c(r);
            t[i]=&c;
        }
    }
    TotalArea::computerTotalArea(t,n);
    for(i=0;i<n;i++)
        delete t[i];
    delete []t;
    return 0;
}

------------------------------------------------------
2017047011:Problem1234:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Group
{

public:
	virtual int add(int x, int y)=0;
	virtual int sub(int x, int y)=0;
};
//------------------------
class groupA:public Group{
	
public:
	groupA(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		return x-y;
	}	
};
//------------------------
class groupB:public Group{
	
public:
	groupB(){}
	int add(int x, int y){
		return x+y;
	}
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100]={0};
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<=x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<=y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
class groupC:public Group{
	
public:
	groupC(){}
	int add(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100]={0};
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<=x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<=y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		
		for(i=0;i<length;i++){
			if(a[i]+b[i]>=10)
				c[i]=(a[i]+b[i])%10;
			else 
				c[i]=a[i]+b[i];
		}
		
		
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		
		return res;
	}
	
	int sub(int x, int y){
		int leng1,leng2,res,i,j;
		int a[100]={0},b[100]={0},c[100]={0};
		leng1=leng2=res=0;
		
		while(pow(10,leng1)<=x)
			leng1++;
		
		for(i=0;i<leng1;i++){
			a[i]=x%10;
			x/=10;
		}
		
		while(pow(10,leng2)<=y)
			leng2++;
		for(i=0;i<leng2;i++){
			b[i]=y%10;
			y/=10;
		}
		
		int length=leng1>leng2?leng1:leng2;
		for(i=0;i<length;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else 
				c[i]=a[i]+10-b[i];
		}
		for(i=0;i<length;i++)
			res+=c[i]*pow(10,i);
		return res;
	}
};
//------------------------
int main()
{
	int t,i,j,k;
	int num1,num2,kind;
	string ask;
	char fuhao;
	Group *p;
	
	cin>>t;
	while(t--)
	{
		cin>>kind>>ask;
		for(i=0;i<ask.length();i++)
			if(ask[i]=='+'||ask[i]=='-'){
				j=i;
				break;
			}
			
		fuhao=ask[j];
		num1=num2=0;
		k=j;
		
		for(i=0;i<j;i++){
			num1+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}
		
		k=ask.length()-j-1;
		for(i=j+1;i<ask.length();i++){
			num2+=(ask[i]-'0')*pow(10,k-1);
			k--;
		}		
		
		if(kind==1){
			groupA g1;
			p=&g1;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==2){
			groupB g2;
			p=&g2;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		
		else if(kind==3){
			groupC g3;
			p=&g3;
			if(fuhao=='+')
				cout<<p->add(num1,num2);
			if(fuhao=='-')
				cout<<p->sub(num1,num2);
		}
		cout<<endl;	
	}
}
------------------------------------------------------
2018152035:Problem1129:正确
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;

class commoncard
{
protected:
    int id;
    char name;
    int balance;
public:
    commoncard(int i,char n,int b):id(i),name(n),balance(b) {}
    virtual int save(int m)
    {
        if(m>0)
        {
            balance+=m;
            return 1;
        }
        else
            return -1;
    }
    virtual int take(int m)
    {
        if(m>0)
        {
            if(balance-m>0)
            {
                balance-=m;
                return 1;
            }
            else
                return -1;
        }
        else
            return -1;
    }
    virtual void info()
    {
        cout<<id<<'-'<<name<<'-'<<balance<<endl;
    }
};
class transportcard:public commoncard
{
    int Tcounter;
public:
    transportcard(int i,char n,int b,int t):commoncard(i,n,b),Tcounter(t) {}
    int transfer(int m)
    {
        if(m>0)
        {
            if(m<=balance)
            {
                balance-=m;
                Tcounter+=m;
                return 1;
            }
            else
                return -1;
        }
        else
            return -1;
    }
    void info()
    {
        cout<<id<<'-'<<name<<'-'<<balance<<'-'<<Tcounter<<endl;
    }
};
class vipcard:public commoncard
{
    int Credit;
public:
    vipcard(int i,char n,int b,int c):commoncard(i,n,b),Credit(c) {}
    int over(int m)
    {
        if(m>0)
        {
            if(balance+Credit>=m)
            {
                Credit-=(m-balance);
                balance=0;
                return 1;
            }
            else
                return -1;
        }
        else
            return -1;
    }
    void info()
    {
        cout<<id<<'-'<<name<<'-'<<balance<<'-'<<Credit<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int id,b,c,t,num;
    char name;
    commoncard *p;
    cin>>id>>name>>b;
    commoncard a(id,name,b);
    cin>>id>>name>>b>>t;
    transportcard aa(id,name,b,t);
    cin>>id>>name>>b>>c;
    vipcard aaa(id,name,b,c);

    p=&a;
    cin>>num;
    p->save(num);
    cin>>num;
    p->save(num);
    cin>>num;
    p->take(num);
    cin>>num;
    p->take(num);
    p->info();

    p=&aa;
    cin>>num;
    p->save(num);
    cin>>num;
    p->take(num);
    cin>>num;
    aa.transfer(num);
    cin>>num;
    aa.transfer(num);
    p->info();

    p=&aaa;
    cin>>num;
    p->save(num);
    cin>>num;
    p->take(num);
    cin>>num;
    aaa.over(num);
    cin>>num;
    aaa.over(num);
    p->info();

}

------------------------------------------------------
2018152037:Problem1234:正确
#include<iostream>
using namespace std;

class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};



class GroupA:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};

class GroupB:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int xx1[100]={0},yy1[100]={0};
		int xx=x,yy=y,weix=1,weiy=1,wei;
		while(xx/10!=0)
		{
			xx1[weix]=xx%10;
			weix++;
			xx=xx/10;
		}
		xx1[weix]=xx;
		while(yy/10!=0)
		{
			yy1[weiy]=yy%10;
			weiy++;
			yy=yy/10;
		}
		yy1[weiy]=yy;
		if(weix>weiy)
			wei=weix;
		else
			wei=weiy;
		int sum=0;
		for(int i=0;i<wei;i++)
		{
			if(xx1[wei-i]>=yy1[wei-i])
				sum=sum*10+xx1[wei-i]-yy1[wei-i];
			else
				sum=sum*10+xx1[wei-i]+10-yy1[wei-i];
		}
		return sum;
	}
};

class GroupC:public Group
{
public:
	int add(int x,int y)
	{
		int xx1[100]={0},yy1[100]={0};
		int xx=x,yy=y,weix=1,weiy=1,wei;
		while(xx/10!=0)
		{
			xx1[weix]=xx%10;
			weix++;
			xx=xx/10;
		}
		xx1[weix]=xx;
		while(yy/10!=0)
		{
			yy1[weiy]=yy%10;
			weiy++;
			yy=yy/10;
		}
		yy1[weiy]=yy;
		if(weix>weiy)
			wei=weix;
		else
			wei=weiy;
		int sum=0;
		for(int i=0;i<wei;i++)
		{
			if(xx1[wei-i]+yy1[wei-i]<10)
				sum=sum*10+xx1[wei-i]+yy1[wei-i];
			else
				sum=sum*10+xx1[wei-i]+yy1[wei-i]-10;
		}
		return sum;
	}
	int sub(int x,int y)
	{
		int xx1[100]={0},yy1[100]={0};
		int xx=x,yy=y,weix=1,weiy=1,wei;
		while(xx/10!=0)
		{
			xx1[weix]=xx%10;
			weix++;
			xx=xx/10;
		}
		xx1[weix]=xx;
		while(yy/10!=0)
		{
			yy1[weiy]=yy%10;
			weiy++;
			yy=yy/10;
		}
		yy1[weiy]=yy;
		if(weix>weiy)
			wei=weix;
		else
			wei=weiy;
		int sum=0;
		for(int i=0;i<wei;i++)
		{
			if(xx1[wei-i]>=yy1[wei-i])
				sum=sum*10+xx1[wei-i]-yy1[wei-i];
			else
				sum=sum*10+xx1[wei-i]+10-yy1[wei-i];
		}
		return sum;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		Group *aa;
		int zl,n1,n2;
		char ch;
		cin>>zl>>n1>>ch>>n2;
		if(zl==1)
		{
			aa=new GroupA;
			if(ch=='+')
				cout<<aa->add(n1,n2)<<endl;
			if(ch=='-')
				cout<<aa->sub(n1,n2)<<endl;
		}
		if(zl==2)
		{
			aa=new GroupB;
			if(ch=='+')
				cout<<aa->add(n1,n2)<<endl;
			if(ch=='-')
				cout<<aa->sub(n1,n2)<<endl;
		}
		if(zl==3)
		{
			aa=new GroupC;
			if(ch=='+')
				cout<<aa->add(n1,n2)<<endl;
			if(ch=='-')
				cout<<aa->sub(n1,n2)<<endl;
		}
		delete aa;
	}
	return 0;
}
------------------------------------------------------
2018192014:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;
class Vehicle
{ 
protected:

string no;//编号

public:
Vehicle(string n):no(n){
}
virtual void display()=0;//应收费用
virtual ~Vehicle(){
}
};
class Car:virtual public Vehicle{
protected:
	int guest,weight;
public:
	Car(string n,int g,int w):
		Vehicle(n),guest(g),weight(w){
		}
	virtual void display(){
		cout<<no<<" "<<guest*8+weight*2<<endl;
	}
	~Car(){
	} 
};
class Truck:virtual public Vehicle{
protected:
	int weight;
public:
	Truck(string n,int w):
		Vehicle(n),weight(w){
		}
	virtual void display(){
		cout<<no<<" "<<weight*5<<endl;
	}
	~Truck()
	{
		
	 } 
};
class Bus:virtual public Vehicle{
protected:
	int guest;
public:
	Bus(string n,int g):
		Vehicle(n),guest(g){
		}
	virtual void display(){
		cout<<no<<" "<<guest*3<<endl;
	}
	~Bus()
	{
		
	}
};
int main ()
{
	Vehicle *pv;
	int t;
	cin>>t;
	while(t--)
	{
		string n;
		int g,w;
		int command;
		cin>>command;
		if(command==1)
		{
			cin>>n>>g>>w;
			pv=new Car(n,g,w);
			pv->display();
		}
		if(command==2)
		{
			cin>>n>>w;
			pv=new Truck(n,w);
			pv->display();
		}
		if(command==3)
		{
			cin>>n>>g;
			pv=new Bus(n,g);
			pv->display();
		}
		delete pv;
	}
	return 0;
}
------------------------------------------------------
2018182052:Problem1234:正确
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
    virtual ~Group(){}
};
class GroupA:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        return x-y;
    }
    virtual ~GroupA(){};
};
class GroupB:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        int temp=x-y;
        int wei=1;
        while(y>0&&x>0)
        {
            if(x%10<y%10)
                temp+=pow(10,wei);
            x/=10;
            y/=10;
            ++wei;
        }
        return temp;
    }
    virtual ~GroupB(){}
};
class GroupC:public Group
{
public:
    virtual int add(int x,int y)
    {
        int temp=x+y;
        int wei=1;
        while(x>0&&y>0)
        {
            if(x%10+y%10>=10)
                temp-=pow(10,wei);
            x/=10;
            y/=10;
            ++wei;
        }
        return temp;
    }
    virtual int sub(int x,int y)
    {
        int temp=x-y;
        int wei=1;
        while(y>0&&x>0)
        {
            if(x%10<y%10)
                temp+=pow(10,wei);

            x/=10;
            y/=10;
            ++wei;
        }
        return temp;
    }
    virtual ~GroupC(){}
};
void get_num(char str[],int &x,int &y,int &type)
{
    int cur=0;
    int n=strlen(str);
    while(str[cur]>='0'&&str[cur]<='9')
    {
        x=x*10+str[cur]-'0';
        ++cur;
    }
    if(str[cur]=='+')
        type=1;
    else if(str[cur]=='-')
        type=2;
    ++cur;
    while(cur<n)
    {
        y=y*10+str[cur]-'0';
        ++cur;
    }
}
int main()
{
 //   freopen(ADDRESS);
    int T(0);
    cin>>T;
    Group *pp;
    char str[20];
    while(T--)
    {
        int cmd(0);
        int x(0),y(0),type(0);
        cin>>cmd;
        if(cmd==1)
            pp=new GroupA;
        else if(cmd==2)
            pp=new GroupB;
        else if(cmd==3)
            pp=new GroupC;
        cin>>str;
        get_num(str,x,y,type);
        if(type==1)
            cout<<pp->add(x,y)<<endl;
        else if(type==2)
            cout<<pp->sub(x,y)<<endl;
        delete pp;
    }
    return 0;
}
------------------------------------------------------
2018192024:Problem1235:答案错误
#include <iostream>
#include <cmath>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};
class GroupB:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y)
    {
        double p[10],flag=0,sum=0;
        for(int i=0;;i++)
        {
            p[i]=x%10-y%10;
            if(p[i]<0)
                p[i]+=10;
            cout<<p[i]<<" ";
            x/=10;
            y/=10;
            if(x==0&&y==0)
                break;
            flag++;
        }
        for(int i=flag;i>=0;i--)
            sum+=p[i]*pow(10,i);
        return (int)sum;
    }
};
class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        double p[10],flag=0,sum=0;
        for(int i=0;;i++)
        {
            p[i]=x%10+y%10;
            if(p[i]>=10)
                p[i]-=10;
            x/=10;
            y/=10;
            if(x==0&&y==0)
                break;
            flag++;
        }
        for(int i=flag;i>=0;i--)
            sum+=p[i]*pow(10,i);
        return (int)sum;
    }
    virtual int sub(int x, int y){return x-y;}
};


int main()
{
    int t,x,y;
    cin>>t;
    Group** g=new Group*[t];
    for(int i=0;i<t;i++)
    {
        int type;
        char cmd;
        cin>>type>>x>>cmd>>y;
        if(type==1)
        {
            GroupA a;
            g[i]=&a;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB b;
            g[i]=&b;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC c;
            g[i]=&c;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018152035:Problem1235:运行错误
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    double l,w;
public:
    Rect(int ll,int ww):l(ll),w(ww) {}
    double getArea()
    {
        return l*w;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(int rr):r(rr) {}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double maxx=0;
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxx<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int n,t,w,l,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        cin>>t;
        if(t==1)
        {
            cin>>l>>w;
            Rect r(l,w);
            p[i]=&r;
        }
        if(t==2)
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea q;
    q.computerTotalArea(p,n);
    for(int i=0;i<n;i++)
    {
        delete []p[i];
    }
    delete []p;
}

------------------------------------------------------
2018192046:Problem1129:正确
#include<iostream>
using namespace std;
class normal
{
protected:
    string ID,CName;
    int Counter;
public:
    normal(string _ID="0",string _CName="0",int _Counter=0):ID(_ID),CName(_CName),Counter(_Counter){}
    void initial(string _ID,string _CName,int _Counter)
    {
        ID=_ID;
        CName=_CName;
        Counter=_Counter;
    }
    int save(int a)
    {
        if(a<0)
            return -1;
        Counter+=a;
        return 1;
    }
    int take(int a)
    {
        if(a<0||Counter<a)
            return -1;
        Counter-=a;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
class Traffic:public normal
{
    int Tcounter;
public:
    Traffic(string _ID="0",string _CName="0",int _Counter=0,int _Tcounter=0):normal(_ID,_CName,_Counter),Tcounter(_Tcounter){}
    void initial(string _ID,string _CName,int _Counter,int _Tcounter)
    {
        ID=_ID;
        CName=_CName;
        Counter=_Counter;
        Tcounter=_Tcounter;
    }
    int transfer(int a)
    {
        if(a>Counter||a<0)
            return -1;
        Counter-=a;
        Tcounter+=a;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VIP:public normal
{
    int Credit;
public:
    VIP(string _ID="0",string _CName="0",int _Counter=0,int _Credit=0):normal(_ID,_CName,_Counter),Credit(_Credit){}
    void initial(string _ID,string _CName,int _Counter,int _Credit)
    {
        ID=_ID;
        CName=_CName;
        Counter=_Counter;
        Credit=_Credit;
    }
    int over(int a)
    {
        if(a<0||a>(Credit+Counter))
            return -1;
        else
        {
            if(Counter<a)
            {
                a-=Counter;
                Counter=0;
                Credit-=a;
            }
            else
            {
                Counter-=a;
            }
        }
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(normal *obj)
{
    obj->info();
}
int main()
{
    normal P1;
    Traffic P2;
    VIP P3;
    string ID,name;
    int counter;
    cin>>ID>>name>>counter;
    P1.initial(ID,name,counter);
    int Tcounter;
    cin>>ID>>name>>counter>>Tcounter;
    P2.initial(ID,name,counter,Tcounter);
    int credit;
    cin>>ID>>name>>counter>>credit;
    P3.initial(ID,name,counter,credit);
    int a,b,c,d;
    cin>>a>>b>>c>>d;
    P1.save(a),P1.save(b),P1.take(c),P1.take(d);
    cin>>a>>b>>c>>d;
    P2.save(a),P2.take(b),P2.transfer(c),P2.transfer(d);
    cin>>a>>b>>c>>d;
    P3.save(a),P3.take(b),P3.over(c),P3.over(d);
    normal *_P;
    _P=&P1;
    show(_P);
    _P=&P2;
    show(_P);
    _P=&P3;
    show(_P);
}

------------------------------------------------------
2018152106:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;

class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};

class GroupB
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int rx,ry,result=0,i=0;
		while(x!=0||y!=0)
		{
			rx=x%10;
			ry=y%10;
			if(rx<ry)
			{
				result+=(10+rx-ry)*pow(10,i);
			}
			else
			{
				result+=(rx-ry)*pow(10,i);
			}
			x/=10;
			y/=10;
			i++;
		}
		return result;
	}	
};

class GroupC
{
public:
	int add(int x,int y)
	{
		int rx,ry,result=0,i=0;
		while(x!=0||y!=0)
		{
			rx=x%10;
			ry=y%10;
			if(rx+ry<10)
			{
				result+=(rx+ry)*pow(10,i);
			}
			else
			{
				result+=(rx+ry-10)*pow(10,i);
			}
			x/=10;
			y/=10;
			i++;
		}
		return result;
	}
	int sub(int x,int y)
	{
		int rx,ry,result=0,i=0;
		while(x!=0||y!=0)
		{
			rx=x%10;
			ry=y%10;
			if(rx<ry)
			{
				result+=(10+rx-ry)*pow(10,i);
			}
			else
			{
				result+=(rx-ry)*pow(10,i);
			}
			x/=10;
			y/=10;
			i++;
		}
		return result;
	}	
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int type,a,b;
		char ch;
		cin>>type>>a>>ch>>b;
		if(type==1)
		{
			GroupA boy;
			if(ch=='+')
				cout<<boy.add(a,b)<<endl;
			else
				cout<<boy.sub(a,b)<<endl;
		}
		else if(type==2)
		{
			GroupB boy;
			if(ch=='+')
				cout<<boy.add(a,b)<<endl;
			else
				cout<<boy.sub(a,b)<<endl;
		}
		else if(type==3)
		{
			GroupC boy;
			if(ch=='+')
				cout<<boy.add(a,b)<<endl;
			else
				cout<<boy.sub(a,b)<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018192048:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry{
public:
	virtual double getArea()=0;
};

class Rect:public Geometry{
protected:
	double x,y;
public:
	Rect(){}
	Rect(double x_,double y_){
		x=x_;
		y=y_;
	}
	double getArea(){
		return x*y;
	}
	~Rect(){}
};
class Circle:public Geometry{
protected:
	double r;
public:
	Circle(){}
	Circle(double r_){
		r=r_;
	}
	double getArea(){
		return 3.14*r*r;
	}
	~Circle(){}
};

class TotalArea{
public:
	static void computerTotalArea(Geometry**t,int n);
};
void TotalArea::computerTotalArea(Geometry**t,int n){
	double s=0;
	for(int i=0;i<n;i++)
		if(s<t[i]->getArea())
			s=t[i]->getArea();
	cout<<"最大面积="<<fixed<<setprecision(2)<<s<<endl;
}

int main(){
	int t;
	cin>>t;
	Geometry **p;
	p=new Geometry *[t];
	for(int i=0;i<t;i++){
		int type;
		cin>>type;
		if(type==1){
			double x,y;
			cin>>x>>y;
			p[i]=new Rect(x,y);
		}
		else if(type==2){
			double r;
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea a;
		a.computerTotalArea(p,t);
	return 0;
}
------------------------------------------------------
2016150076:Problem1119:编译错误
#include<iostream>
using namespace std;

class BaseAccount
{
	protected:
				string name,account;
				int balance;
				
	public:
			BaseAccount(string n)
			virtual void deposit(int m)
			{
			
				balance+=m;
				
						}
						
			virtual void withdraw(int m)
			{
				if(m<balance)
					balance-=m;
				else 
					cout<<"insufficient"<<endl;	
			}	
						
			virtual void display(int m)
			{
				cout<<name<<account<<" Balance:"<<balance<<endl;
				
						}	
						
			
};

class BasePlus:public BaseAccount
{
	private:
		int limit,limit_sum;
	public:
		  	void deposit(int m)
			{
				if(limit_sum>m)
				limit_sum-=m;
				
				else if(limit_sum>0&&limit_sum<m)
				balance=m-limit_sum;
				
				else
					balance+=m;
				
						}
						
			 void withdraw(int m)
			{
				if(m<balance)
					balance-=m;
						
				else if (m>balance&&m<balance+limit)
				{
					limit_sum=m-balance;
					limit=limit+balance-m;
					balance=0;
					
						}		
						
				else 
					cout<<"insufficient"<<endl;	
			}	
						
			void display(int m)
			{
				cout<<name<<account<<" Balance:"<<balance<<endl;
				
						}	
		
}


int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		cin>>name>>account>>balance;
		cin>>a>>b>>c>>d;
		
		if
		
		
		
	}
}

------------------------------------------------------
2018182052:Problem1120:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Animal
{
protected:
    string name;
    int wei;
    int age;
public:
    Animal() {}
    Animal(const string& n,int a):name(n),wei(60),age(a) {}
    virtual void speak()const=0;
};
class Tiger:public Animal
{
public:
    Tiger(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(const string& n,int a):Animal(n,a) {}
    void speak()const
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
  //  freopen(ADDRESS);
    int T(0);
    cin>>T;
    string cmd;
    string name;
    int age;
    Animal* p;
    while(T--)
    {
        cin>>cmd>>name>>age;
        if(cmd=="Tiger")
        {
            Tiger te(name,age);
            p=&te;
            p->speak();
        }
        else if(cmd=="Pig")
        {
            Pig te(name,age);
            p=&te;
            p->speak();
        }
        else if(cmd=="Duck")
        {
            Duck te(name,age);
            p=&te;
            p->speak();
        }
        else if(cmd=="Dog")
        {
            Dog te(name,age);
            p=&te;
            p->speak();
        }
        else
        {
            cout<<"There is no "<<cmd<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018151005:Problem1119:编译错误
#include<iostream>
#include<string>
#include<cstring>
using namespace std;
/*某银行的支票账户分为两类，一类为基本支票账户BaseAccount，另一类为具有透支保护特性的BasePlus支票账户。


BaseAccount支票账户的信息包括：客户姓名(name)、账户(account)、当前结余(balance)；BaseAccount支票账户可
以执行的操作包括：存款(deposit)、取款(withdraw)、显示账户信息(display)。注意：取款金额不能透支，否则显
式出错信息“insufficient”。*/

class BaseAccount
{
protected:
    string name;
    char account[8];
    float balance;
public:
    BaseAccount(){}
    BaseAccount(string name0,char* account0,float balance0):name(name0),balance(balance0)
    {
        strcpy(account,account0);
    }
    virtual void deposit(float money)
    {
        balance+=money;
    }
    virtual void withdraw(float money)
    {
        if(balance>=money)
        {
            balance-=money;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
/*BasePlus支票账户除包含BaseAccount的所有信息外，还包括以下信息：透支上限(limit：默认为5000)，当前透支总
额(limit_sum)；BasePlus支票账户可执行的操作与BaseAccount相同，但有两种操作的实现不同：(1)对于取款操作，
可以在透支上限范围内透支，超过则显示出错信息“insufficient”；(2)对
于显示操作，必须显示BasePlus的其他信息。*/


class BasePlus:public BaseAccount
{
private:
    float limit;
    float limit_sum;
public:
    BasePlus():limit(5000),limit_sum(0){}
    BasePlus(string name0,char* account0,float balance0):BaseAccount(name0,account0,balance0),
        limit(5000),limit_sum(0){}
    virtual void deposit(float money)
    {
        int balance_real=balance-limit_sum+money;
        if(balance_real>=0)
        {
            balance=balance_real;
            limit_sum=0;
        }
        else
        {
            balance=0;
            limit_sum=-balance_real;
        }
    }
    virtual void withdraw(float money)
    {
        int balance_real=balance-limit_sum-money;
        if(balance_real>=0)
        {
            balance=balance_real;
            limit_sum=0;
        }
        else if(balance_real<0&&balance_real>=-limit)
        {
            balance=0;
            limit_sum=-balance_real;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
/*请实现BaseAccount类和BasePlus类，其中BasePlus类继承于BaseAccount类，注意BaseAccount账户名称以BA开头，
BasePlus账户名称以BP开头。

要求只使用一个基类指针，指向所建立的对象，然后使用指针调用类中的方法。*/
int main()
{
    int t;
    cin>>t;
    BaseAccount* pa;
    while(t--)
    {
        string name;
        char account[8];
        float balance;
        cin>>name>>account>>balance;
        char type[3];
        type[0]=account[0];
        type[1]=account[1];
        type[2]='\0';
        if(strcmp(type,"BA")==0)
        {
            BaseAccount a(name,account,balance);
            pa=&a;
        }
        else if(strcmp(type,"BP")==0)
        {
            BasePlus b(name,account,balance);
            pa=&a;
        }
        float m1,m2,m3,m4;
        cin>>m1>>m2>>m3>>m4;
        pa->deposit(m1);
        pa->withdraw(m2);
        pa->deposit(m3);
        pa->withdraw(m4);
        pa->display();
    }
}

------------------------------------------------------
2018151044:Problem1129:正确
#include<iostream>
#include<string>
using namespace std;
class C
{
protected:
	int id;
	char name;
	int ba;
public:
	C(int a,char b,int c):id(a),name(b),ba(c) {}
	int save(int v)
	{
		if(v<0)return -1;
		ba+=v;
		return 1;
	}
	int take(int v)
	{
		if(v<0)return -1;
		if(ba>=v){
			ba-=v;
			return 1;
		}
		return -1;
	}
	virtual void info()
	{
		cout<<id<<'-'<<name<<'-'<<ba<<endl;
	}
};
class C1:public C
{
	int tba;
public:
	C1(int a,char b,int c,int d):C(a,b,c),tba(d) {}
	int transfer(int v)
	{
		if(v<0)return -1;
		if(ba>=v)
		{
			ba-=v;
			tba+=v;
			return 1;
		}
		return -1;
	}
	virtual void info()
	{
		cout<<id<<'-'<<name<<'-'<<ba<<'-'<<tba<<endl;
	}	
};
class C2:public C
{
	int credit;
public:
	C2(int a,char b,int c,int d):C(a,b,c),credit(d) {}
	int over(int v)
	{
		if(v<0)return -1;
		if(credit+ba>=v)
		{
			if(ba>=v)
			{
				ba-=v;
			}
			else
			{
				v-=ba;
				credit-=v;
				ba=0;
			}
			return 1;
		}
		return -1;
	}
	virtual void info()
	{
		cout<<id<<'-'<<name<<'-'<<ba<<'-'<<credit<<endl;
	}	
};
void show(C& x)
{
	x.info();
} 
int main()
{
	int a,c,d;
	char b;
	cin>>a>>b>>c;
	C x(a,b,c);
	cin>>a>>b>>c>>d;
	C1 y(a,b,c,d);
	cin>>a>>b>>c>>d;
	C2 z(a,b,c,d);
	cin>>a>>c;
	x.save(a);
	x.save(c);
	cin>>a>>c;
	x.take(a);
	x.take(c);
	cin>>a>>c;
	y.save(a);
	y.take(c);
	cin>>a>>c;
	y.transfer(a);
	y.transfer(c);
	cin>>a>>c;
	z.save(a);
	z.take(c);
	cin>>a>>c;
	z.over(a);
	z.over(c);
	show(x),show(y),show(z);
} 
------------------------------------------------------
2018151051:Problem1235:正确
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; 
};
class Rect:public Geometry
{
    double chang;
    double kuan;
public:
    Rect(double c,double k)
    {
        chang=c;
        kuan=k;
    }
    virtual double getArea()
    {
        double s;
        s=chang*kuan;
        return s;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(double _r)
    {
        r=_r;
    }
    virtual double getArea()
    {
        double s;
        s=3.14*r*r;
        return s;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        int i;
        double max=0;
        for(i=0;i<n;i++)
        {
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    Geometry** t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            double chang;
            double kuan;
            cin>>chang>>kuan;
            t[i]=new Rect(chang,kuan);
        }
        else if(type==2)
        {
            double r;
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea p;
    p.computerTotalArea(t,n);
    for(i=0;i<n;i++)
    {
        delete t[i];
    }
    return 0;
}
------------------------------------------------------
2018151005:Problem1119:答案错误
#include<iostream>
#include<string>
#include<cstring>
using namespace std;
/*某银行的支票账户分为两类，一类为基本支票账户BaseAccount，另一类为具有透支保护特性的BasePlus支票账户。


BaseAccount支票账户的信息包括：客户姓名(name)、账户(account)、当前结余(balance)；BaseAccount支票账户可
以执行的操作包括：存款(deposit)、取款(withdraw)、显示账户信息(display)。注意：取款金额不能透支，否则显
式出错信息“insufficient”。*/

class BaseAccount
{
protected:
    string name;
    char account[8];
    float balance;
public:
    BaseAccount(){}
    BaseAccount(string name0,char* account0,float balance0):name(name0),balance(balance0)
    {
        strcpy(account,account0);
    }
    virtual void deposit(float money)
    {
        balance+=money;
    }
    virtual void withdraw(float money)
    {
        if(balance>=money)
        {
            balance-=money;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
/*BasePlus支票账户除包含BaseAccount的所有信息外，还包括以下信息：透支上限(limit：默认为5000)，当前透支总
额(limit_sum)；BasePlus支票账户可执行的操作与BaseAccount相同，但有两种操作的实现不同：(1)对于取款操作，
可以在透支上限范围内透支，超过则显示出错信息“insufficient”；(2)对
于显示操作，必须显示BasePlus的其他信息。*/


class BasePlus:public BaseAccount
{
private:
    float limit;
    float limit_sum;
public:
    BasePlus():limit(5000),limit_sum(0){}
    BasePlus(string name0,char* account0,float balance0):BaseAccount(name0,account0,balance0),
        limit(5000),limit_sum(0){}
    virtual void deposit(float money)
    {
        int balance_real=balance-limit_sum+money;
        if(balance_real>=0)
        {
            balance=balance_real;
            limit_sum=0;
        }
        else
        {
            balance=0;
            limit_sum=-balance_real;
        }
    }
    virtual void withdraw(float money)
    {
        int balance_real=balance-limit_sum-money;
        if(balance_real>=0)
        {
            balance=balance_real;
            limit_sum=0;
        }
        else if(balance_real<0&&balance_real>=-limit)
        {
            balance=0;
            limit_sum=-balance_real;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
/*请实现BaseAccount类和BasePlus类，其中BasePlus类继承于BaseAccount类，注意BaseAccount账户名称以BA开头，
BasePlus账户名称以BP开头。

要求只使用一个基类指针，指向所建立的对象，然后使用指针调用类中的方法。*/
int main()
{
    int t;
    cin>>t;
    BaseAccount* pa;
    while(t--)
    {
        string name;
        char account[8];
        float balance;
        cin>>name>>account>>balance;
        char type[3];
        type[0]=account[0];
        type[1]=account[1];
        type[2]='\0';
        if(strcmp(type,"BA")==0)
        {
            BaseAccount a(name,account,balance);
            pa=&a;
        }
        else if(strcmp(type,"BP")==0)
        {
            BasePlus a(name,account,balance);
            pa=&a;
        }
        float m1,m2,m3,m4;
        cin>>m1>>m2>>m3>>m4;
        pa->deposit(m1);
        pa->withdraw(m2);
        pa->deposit(m3);
        pa->withdraw(m4);
        pa->display();
    }
}

------------------------------------------------------
2018152035:Problem1235:运行错误
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    double l,w;
public:
    Rect(int ll,int ww):l(ll),w(ww) {}
    double getArea()
    {
        return l*w;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(int rr):r(rr) {}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double maxx=0;
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxx<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int n,t,w,l,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        cin>>t;
        if(t==1)
        {
            cin>>l>>w;
            Rect r(l,w);
            p[i]=&r;
        }
        if(t==2)
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea::computerTotalArea(p,n);
    for(int i=0;i<n;i++)
    {
        delete (p[i]);
    }
    delete []p;
}

------------------------------------------------------
2018182052:Problem1232:正确
#include<cstdio>
#include<iostream>
#include<iomanip>
#include<string>
#define ADDRESS "D:\\in.txt","r",stdin
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(const string& n):no(n) {}
    virtual void display()const=0;
};
class Car:public Vehicle
{
protected:
    int cnt_peo;
    int wei;
public:
    Car(const string &n,int c,int w):Vehicle(n),cnt_peo(c),wei(w) {}
    virtual void display()const
    {
        cout<<no<<" "<<cnt_peo*8+wei*2<<endl;
    }
};
class Truck:public Vehicle
{
protected:
    int wei;
public:
    Truck(const string &n,int w):Vehicle(n),wei(w) {}
    virtual void display()const
    {
        cout<<no<<" "<<wei*5<<endl;
    }
};
class Bus:public Vehicle
{
protected:
    int cnt_peo;
public:
    Bus(const string &n,int c):Vehicle(n),cnt_peo(c) {}
    virtual void display()const
    {
        cout<<no<<" "<<cnt_peo*3<<endl;
    }
};
int main()
{
 //   freopen(ADDRESS);
    int T(0);
    cin>>T;
    Vehicle *p;
    while(T--)
    {
        int type;
        string no;
        cin>>type>>no;
        int d[2];
        if(type==1)
        {
            cin>>d[0]>>d[1];
            Car tem(no,d[0],d[1]);
            p=&tem;
            p->display();
        }
        else if(type==2)
        {
            cin>>d[0];
            Truck tem(no,d[0]);
            p=&tem;
            p->display();
        }
        else if(type==3)
        {
            cin>>d[1];
            Bus tem(no,d[1]);
            p=&tem;
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2016073026:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};
class GroupB:public Group{
public:
    virtual int add(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x%10!=x){
            ar1[j++]=x%10;
        }
        while(y%10!=y){
            ar2[k++]=y%10;
        }
        int result,i;
        for(i=0;i<min(j,k);i++)
            result+=(ar1[i]+ar2[i])%10 * pow(10,i);
        if(j>k)
            while(i<j)
                result+=ar1[i]*pow(10,i);
        if(k>j)
            while(i<k)
                result+=ar1[i]*pow(10,i);
        return result;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--){
        int group;
        
    }
    return 0;
}

------------------------------------------------------
2017163058:Problem1129:正确
#include <iostream>
#include <fstream>
#include <iomanip>
#include <stack>
using namespace std;
//某银行卡分为普通卡、交通卡、贵宾卡三种，其中普通卡是最简单的卡，具有属性包括卡号（ID）、户名（CName）、余额（Counter），方法包括：初始化（initial），存款（save），取款（take）、查询（info）。普通卡的属性和方法说明如下:
//1.卡号是一串数字，户名用单个字母表示，余额是一个非负整数
//2.存款操作是余额增加一笔款项，款项必须是正整数，不合法数据直接返回-1，执行成功则返回1
//3.取款操作是余额减少一笔款项，款项必须是正整数且不能超过余额，不合法数据直接返回-1，执行成功则返回1
//4.查询操作是输出卡的相关信息，包括卡号、户名、余额，信息之间用单个短划线连接

class RegularCard
{
protected:
    string ID;
    char name;
    int balance;
public:
    virtual void initial(string id, char n, int b)
    {
        ID = id;
        name = n;
        balance = b;
    }
    int save(int money)
    {
        if(money < 0)
        {
            return -1;
        }
        balance += money;
        return 1;
    }
    int take(int money)
    {
        if(money < 0 || money > balance)
        {
            return -1;
        }
        balance -= money;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<name<<"-"<<balance<<endl;
    }

};
class TrafficCard:public RegularCard
{
private:
    int Tbalance;
public:
    void initial(string id, char n, unsigned int b, int Tb)
    {
        ID = id;
        name = n;
        balance = b;
        Tbalance = Tb;
    }
    int transfer(int money)
    {
       if(money > balance)
       {
           return -1;
       }
       Tbalance += money;
       balance -= money;
       return 1;
    }
    void info()
    {
         cout<<ID<<"-"<<name<<"-"<<balance<<"-"<<Tbalance<<endl;
    }
};
class VIPCard:public RegularCard
{
private:
    int Credit;
public:
    void initial(string id, char n, unsigned int b, int c)
    {
        ID = id;
        name = n;
        balance = b;
        Credit = c;
    }
    int over(int money)
    {
        if(money > balance + Credit)
        {
            return -1;
        }
        Credit -= (money-balance);
        balance = 0;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<name<<"-"<<balance<<"-"<<Credit<<endl;
    }
};
void show(RegularCard &card)
{
    card.info();
}
int main()
{
//    freopen("C:\\Users\\acer\\Desktop\\in.txt", "r", stdin);
    string ID;
    char name;
    int balance, Tbalance, Credit, money;

    RegularCard regularCard;
    TrafficCard trafficCard;
    VIPCard vipCard;
    cin>>ID>>name>>balance;
    regularCard.initial(ID, name, balance);
    cin>>ID>>name>>balance>>Tbalance;
    trafficCard.initial(ID, name, balance, Tbalance);
    cin>>ID>>name>>balance>>Credit;
    vipCard.initial(ID, name, balance, Credit);

    for(int i=0; i<2; i++)
    {
        cin>>money;
        regularCard.save(money);
    }
    for(int i=0; i<2; i++)
    {
        cin>>money;
        regularCard.take(money);
    }
    show(regularCard);

    cin>>money;
    trafficCard.save(money);
    cin>>money;
    trafficCard.take(money);
    for(int i=0;i<2;i++)
    {
        cin>>money;
        trafficCard.transfer(money);
    }
    show(trafficCard);

    cin>>money;
    vipCard.save(money);
    cin>>money;
    vipCard.take(money);
    for(int i=0;i<2;i++)
    {
        cin>>money;
        vipCard.over(money);
    }
    show(vipCard);
}















------------------------------------------------------
2018152114:Problem1235:正确
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){
	}

};
class Rect:public Geometry
{
	double x,y;
public:
	Rect(double _x,double _y):x(_x),y(_y){}
	virtual double getArea()
	{
		return x*y;
	}
	~Rect()
	{
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double _r):r(_r){}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle()
	{
	}
};
class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		double _max=-1.0;
		for(int i=0;i<n;i++)
		{
			double temp=t[i]->getArea();
			if(_max<temp)
				_max=temp;
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<_max<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	int type;
	double _x,_y,_r;
	Geometry** M;
	M=new Geometry*[t];
	for(int i=0;i<t;i++){
		cin>>type;
		switch(type){
			case 1:
				cin>>_x>>_y;
				M[i]=new Rect(_x,_y);
				break;
			case 2:
				cin>>_r;
				M[i]=new Circle(_r);
				break;
		}
	}
	TotalArea::computerTotalArea(M,t);
}
------------------------------------------------------
2018152035:Problem1235:运行错误
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    double l,w;
public:
    Rect(int ll,int ww):l(ll),w(ww) {}
    double getArea()
    {
        return l*w;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(int rr):r(rr) {}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double maxx=0;
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxx<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int n,t,w,l,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        cin>>t;
        if(t==1)
        {
            cin>>l>>w;
            Rect r(l,w);
            p[i]=&r;
        }
        if(t==2)
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea::computerTotalArea(p,n);
    for(int i=0;i<n;i++)
    {
        delete p[i];
    }
    delete []p;
}

------------------------------------------------------
2018191214:Problem1234:正确
#include<iostream>
#include<cstring>
#include<cmath>
#include<iomanip>
using namespace std;
class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		int x1,y1,s1,x2,y2,x3,y3,s2,s3;
		x1=x%10;
		y1=y%10;
		if(x1<y1)
			s1=fabs(x1+10-y1);
		else
		s1=x1-y1;
		x2=(x/10)%10;
		y2=(y/10)%10;
	    if(x2<y2)
		s2=fabs(x2+10-y2);
		else
			s2=x2-y2;
		x3=x/100;
		y3=y/100;
		s3=x3-y3;
		return s3*100+s2*10+s1;
	}
};
class GroupC:public Group
{
public:
   int sub(int x,int y)
	{
		int x1,y1,s1,x2,y2,x3,y3,s2,s3;
		x1=x%10;
		y1=y%10;
		if(x1<y1)	
			s1=fabs(x1+10-y1);
		else
		s1=x1-y1;
		x2=(x/10)%10;
		y2=(y/10)%10;
	    if(x2<y2)
		s2=fabs(x2+10-y2);
		else
			s2=x2-y2;
		x3=x/100;
		y3=y/100;
		s3=x3-y3;
		return s3*100+s2*10+s1;
	}
   int add(int x,int y)
   {
	   int s1,s2,s3,x1,x2,x3,y1,y2,y3;
	   x1=x%10;
	   y1=y%10;
	   if(x1+y1>=10)
		   s1=x1+y1-10;
	   else
		   s1=x1+y1;
       x2=(x/10)%10;
	   y2=(y/10)%10;
	   if(x2+y2>=10)
		   s2=(x2+y2-10)*10;
	   else
		   s2=(x2+y2)*10;
       x3=x/100;
	   y3=y/100;
	   if(x3+y3>=10)
		   s3=(x3+y3-10)*100;
	   else
		   s3=(x3+y3)*100;
	   return s1+s2+s3;
   }
};
int main()
{
	int t,kind,num1,num2;
	char f;
	Group *g;
	cin>>t;
	while(t--)
	{
		cin>>kind;
		if(kind==1)
		{
			g=new GroupA;
			cin>>num1>>f>>num2;
			if(f=='+')
				cout<<g->add(num1,num2)<<endl;
			else if(f=='-')
				cout<<g->sub(num1,num2)<<endl;
		}
		else if(kind==2)
		{
			g=new GroupB;
			cin>>num1>>f>>num2;
			if(f=='+')
				cout<<g->add(num1,num2)<<endl;
			else if(f=='-')
				cout<<g->sub(num1,num2)<<endl;
		}
		else if(kind==3)
		{
			g=new GroupC;
			cin>>num1>>f>>num2;
			if(f=='+')
				cout<<g->add(num1,num2)<<endl;
			else if(f=='-')
				cout<<g->sub(num1,num2)<<endl;
		}
	}
	return 0;
}

------------------------------------------------------
2016073026:Problem1235:答案错误
#include <iostream>
#include <iomanip>

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
    double chang,kuan;
public:
    Rect(double c,double k):chang(c),kuan(c){}
    virtual double getArea(){return chang*kuan;}
};

class Circle:public Geometry{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea(){return radius*radius*3.14;}
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t,int n){
        double maxArea=0;
        for(int i=0;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t =new Geometry*[n];
    double type,r,c,k;
    for(int i=0;i<n;i++){
        cin>>type;
        if(type==1){
            cin>>c>>k;
            t[i]=new Rect(c,k);
        }
        else if(type==2){
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2017144045:Problem1235:正确
#include <iostream>
#include <cstring>
#include <iomanip>
using namespace std;
class Geometry
{
public:
	Geometry()
	{
	}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
	double chang;
	double kuan;
public:
	Rect(double x,double y)
	{
		chang=x;
		kuan=y;
	}
    virtual double getArea()
	{
		return chang*kuan;
	}	
};

class Circle:public Geometry
{
	double radius;
public:
	Circle(double r)
	{
		radius=r;
	}
	virtual double getArea()
	{
		return 3.14*radius*radius;
	}
};

class TotalArea
{
public:
	TotalArea()
	{
	}
    static void computerTotalArea(Geometry** t,int n)
    {
    	double max=0.0;
    	//cout<<t[1]->getArea()<<endl;
    	for(int i=0;i<n;i++)
    	{
    		if(t[i]->getArea()>max)
    		{
    			max=t[i]->getArea();
			}
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl; 
	}
		
};

int main()
{
	int t;
	int a;
	int num;
	double x,y,r;
	cin>>t;
	num=t;
	double Area[t];
	Geometry *tu[t];
	int i=0;
	while(t--)
	{
		cin>>a;
		if(a==1)
		{
			cin>>x>>y;
			tu[i]=new Rect(x,y);
			Area[i]=tu[i]->getArea(); 
		}
		else if(a==2)
		{
			cin>>r;
			tu[i]=new Circle(r);
			Area[i]=tu[i]->getArea(); 
		}		
		i++;
	}
	TotalArea area;
	area.computerTotalArea(tu,num);
}
------------------------------------------------------
2018182052:Problem1119:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(const string& n,const string &a,int b):name(n),account(a),balance(b) {}
    void deposit(int amo)
    {
        balance+=amo;
    }
    virtual bool withdraw(int amo)
    {
        if(amo>balance)
        {
            cout<<"insufficient"<<endl;
            return false;
        }
        balance-=amo;
        return true;
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    virtual ~BaseAccount() {}
};
class BasePlus:public BaseAccount
{
protected:
    int limit;
    int limit_sum;
public:
    BasePlus(const string& n,const string &a,int b):BaseAccount(n,a,b),limit(5000.00),limit_sum(0.0) {}
    virtual bool withdraw(int amo)
    {
        if(amo<=balance)
        {
            balance-=amo;
            return true;
        }
        else if(amo>balance&&amo<=balance+limit-limit_sum)
        {
            amo-=balance;
            balance=0.0;
            limit_sum+=amo;
            return true;
        }
        else
        {
            cout<<"insufficient"<<endl;
            return false;
        }
    }
    virtual void display()const
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<(limit-limit_sum)<<endl;
    }
    virtual ~BasePlus() {}
};
int main()
{
    //  freopen(ADDRESS);
    int T(0);
    cin>>T;
    BaseAccount *p;
    string name,acc;
    int d[5];
    while(T--)
    {
        cin>>name>>acc>>d[4]>>d[0]>>d[1]>>d[2]>>d[3];
        if(acc[1]=='A')
        {
            p=new BaseAccount(name,acc,d[4]);
        }
        else if(acc[1]=='P')
        {
            p=new BasePlus(name,acc,d[4]);
        }
        p->deposit(d[0]);
        p->withdraw(d[1]);
        p->deposit(d[2]);
        p->withdraw(d[3]);
        p->display();
        delete p;
    }
    return 0;
}
------------------------------------------------------
2016073026:Problem1235:正确
#include <iostream>
#include <iomanip>

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
    double chang,kuan;
public:
    Rect(double c,double k):chang(c),kuan(k){}
    virtual double getArea(){return chang*kuan;}
};

class Circle:public Geometry{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea(){return radius*radius*3.14;}
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t,int n){
        double maxArea=0;
        for(int i=0;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry** t =new Geometry*[n];
    double type,r,c,k;
    for(int i=0;i<n;i++){
        cin>>type;
        if(type==1){
            cin>>c>>k;
            t[i]=new Rect(c,k);
        }
        else if(type==2){
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    return 0;
}

------------------------------------------------------
2018192024:Problem1234:正确
#include <iostream>
#include <cmath>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};
class GroupB:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y)
    {
        double p[10],flag=0,sum=0;
        for(int i=0;;i++)
        {
            p[i]=x%10-y%10;
            if(p[i]<0)
                p[i]+=10;
            x/=10;
            y/=10;
            if(x==0&&y==0)
                break;
            flag++;
        }
        for(int i=flag;i>=0;i--)
            sum+=p[i]*pow(10,i);
        return (int)sum;
    }
};
class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        double p[10],flag=0,sum=0;
        for(int i=0;;i++)
        {
            p[i]=x%10+y%10;
            if(p[i]>=10)
                p[i]-=10;
            x/=10;
            y/=10;
            if(x==0&&y==0)
                break;
            flag++;
        }
        for(int i=flag;i>=0;i--)
            sum+=p[i]*pow(10,i);
        return (int)sum;
    }
    virtual int sub(int x, int y)
    {
        double p[10],flag=0,sum=0;
        for(int i=0;;i++)
        {
            p[i]=x%10-y%10;
            if(p[i]<0)
                p[i]+=10;
            x/=10;
            y/=10;
            if(x==0&&y==0)
                break;
            flag++;
        }
        for(int i=flag;i>=0;i--)
            sum+=p[i]*pow(10,i);
        return (int)sum;
    }
};


int main()
{
    int t,x,y;
    cin>>t;
    Group** g=new Group*[t];
    for(int i=0;i<t;i++)
    {
        int type;
        char cmd;
        cin>>type>>x>>cmd>>y;
        if(type==1)
        {
            GroupA a;
            g[i]=&a;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB b;
            g[i]=&b;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC c;
            g[i]=&c;
            if(cmd=='+')
                cout<<g[i]->add(x,y)<<endl;
            else if(cmd=='-')
                cout<<g[i]->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151014:Problem1119:正确
#include <iostream>
#include <string>

using namespace std;

class BaseAccount {
public:
	BaseAccount(string n, string acc, float b) : name(n), account(acc), balance(b) {
		
	}
	
	virtual void deposit(int s) {
		balance += s;
	}
	
	virtual void withdraw(int s) {
		
		if (s > balance) {
			cout << "insufficient\n";
			return;
		}
		else {
			balance -= s;
		}
	}
	
	virtual void display() {
		cout << name << ' ' << account << " Balance:" << balance << endl;
	}
protected:
	string name;
	string account;
	float balance;
};

class BasePlus : public BaseAccount {
public:
	BasePlus(string name, string acc, float b) : BaseAccount(name, acc, b) {
		limit = 5000;
		limit_sum = 0;
	}
	
	void deposit(int s) {
		if (limit_sum != 0) {
			if (limit + s >= 5000) {
				balance = limit + s - 5000;
				limit = 5000;
				limit_sum = 0;
			}
			else {
				limit += s;
				limit_sum -= s;
			}
		}
		else {
			balance += s;
		}
	}
	
	void withdraw(int s) {
		if (s > balance) {
			int sub = s - balance;
			if (sub <= limit) {
				balance = 0;
				limit_sum += sub;
				limit -= sub;
			}
			else {
				cout << "insufficient\n";
			}
		}
		else {
			balance -= s;
		}
	}
	
	void display() {
		cout << name << ' ' << account << " Balance:" << balance << " limit:" << limit << endl;
	}
private:
	int limit;
	int limit_sum;
};

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		BaseAccount *ptr;
		string name;
		string acc;
		float balance;
		
		cin >> name >> acc >> balance;
		
		if (acc[1] == 'A') {
			ptr = new BaseAccount(name, acc, balance);
			
			int in1, out1, in2, out2;
			cin >> in1 >> out1 >> in2 >> out2;
			ptr->deposit(in1);
			ptr->withdraw(out1);
			ptr->deposit(in2);
			ptr->withdraw(out2);
			ptr->display();
			delete ptr;
		}
		else if (acc[1] == 'P') {
			ptr = new BasePlus(name, acc, balance);
			
			int in1, out1, in2, out2;
			cin >> in1 >> out1 >> in2 >> out2;
			
			ptr->deposit(in1);
			ptr->withdraw(out1);
			ptr->deposit(in2);
			ptr->withdraw(out2);
			ptr->display();
			delete ptr;
		}
		
	}
	
	return 0;
}
------------------------------------------------------
2018192008:Problem1129:正确
#include <iostream>

using namespace std;

class Ncard
{
protected:
    int ID,Counter;
    char name;
public:
    Ncard(int i,char n,int c):ID(i),name(n),Counter(c){}
    int save(int m)
    {
        if(m>0)
            Counter+=m;
        else
            return -1;
        return 1;
    }
    virtual int take(int m)
    {
        if(m>Counter||m<=0)
            return -1;
        else
            Counter-=m;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<name<<"-"<<Counter<<endl;
    }
};

class TranCard:public Ncard
{
    int Tcounter;
public:

    TranCard(int i,char n,int c,int t):Ncard(i,n,c),Tcounter(t){}
    int transfer(int m)
    {
        if(m>Counter)
            return -1;
        else
        {
            Tcounter+=m;
            Counter-=m;
        }
        return 1;
    }
     virtual void info()
    {
        cout<<ID<<"-"<<name<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};

class VIP:public Ncard
{
    int Credit;
public:
    VIP(int i,char n,int c,int cr):Ncard(i,n,c),Credit(cr){}
    int over(int m)
    {
        if(m>Counter+Credit)
            return -1;
        else
        {
            if(m>Counter)
            {
                m-=Counter;
                Counter=0;
                Credit-=m;
            }
            else
                Counter-=m;
        }
    }
     virtual void info()
    {
        cout<<ID<<"-"<<name<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(Ncard &obj)
{
    obj.info();
}
int main()
{
    int n1,n2,n3,t1;
    char a1,a2,a3;
    int c1,c2,c3,cr;
    cin>>n1>>a1>>c1;
    cin>>n2>>a2>>c2>>t1;
    cin>>n3>>a3>>c3>>cr;
    Ncard p1(n1,a1,c1);
    TranCard p2(n2,a2,c2,t1);
    VIP p3(n3,a3,c3,cr);
    int x1,x2,x3,x4;
    cin>>x1>>x2>>x3>>x4;
    p1.save(x1);
    p1.save(x2);
    p1.take(x3);
    p1.take(x4);
    cin>>x1>>x2>>x3>>x4;
    p2.save(x1);
    p2.take(x2);
    p2.transfer(x3);
    p2.transfer(x4);
    cin>>x1>>x2>>x3>>x4;
    p3.save(x1);
    p3.take(x2);
    p3.over(x3);
    p3.over(x4);
    show(p1);
    show(p2);
    show(p3);

}

------------------------------------------------------
2018152044:Problem1129:正确
#include<iostream>
#include<string>
using namespace std;
class normal
{
protected:
    int ID;
    string CName;
    int Counter;
public:
    normal()
    {
    }
    normal(int ID_,string CName_,int Counter_)
    {
        ID=ID_;
        CName=CName_;
        Counter=Counter_;
    }
    void initial(int ID_,string CName_,int Counter_)
    {
        ID=ID_;
        CName=CName_;
        Counter=Counter_;
    }
    int save(int x)
    {
        if(x<=0)
            return -1;
        Counter+=x;
        return 1;
    }
    int take(int x)
    {
        if(x<=0)
            return -1;
        if(Counter<x)
            return -1;
        Counter-=x;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};

class trans:public normal
{
protected:
    int Tcounter;
public:
    trans()
    {
        Tcounter=0;
    }
    void initial(int ID_,string CName_,int Counter_,int x)
    {
        ID=ID_;
        CName=CName_;
        Counter=Counter_;
        Tcounter=x;
    }
    int transfer(int x)
    {
        if(x<=0)
            return -1;
        if(Counter<x)
            return -1;
        Counter-=x;
        Tcounter+=x;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VIP:public normal
{
protected:
    int Credit;
public:
    VIP()
    {
        Credit=0;
    }
    void initial(int ID_,string CName_,int Counter_,int x)
    {
        ID=ID_;
        CName=CName_;
        Counter=Counter_;
        Credit=x;
    }
    int over(int x)
    {
        if(Credit+Counter<x)
            return -1;
        if(Counter<x)
        {
            Credit=Credit+Counter-x;
            Counter=0;
            return 1;
        }
        Counter-=x;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};

void show(normal &obj)
{
    obj.info();
}

int main()
{
    int ID;
    string name;
    int Counter;
    int x;
    cin>>ID>>name>>Counter;
    normal a;
    a.initial(ID,name,Counter);
    cin>>ID>>name>>Counter>>x;
    trans b;
    b.initial(ID,name,Counter,x);
    cin>>ID>>name>>Counter>>x;
    VIP c;
    c.initial(ID,name,Counter,x);
    int a1,b1,c1,d1;
    cin>>a1>>b1>>c1>>d1;
    a.save(a1);
    a.save(b1);
    a.take(c1);
    a.take(d1);
    show(a);
    cin>>a1>>b1>>c1>>d1;
    b.save(a1);
    b.take(b1);
    b.transfer(c1);
    b.transfer(d1);
    show(b);
    cin>>a1>>b1>>c1>>d1;
    c.save(a1);
    c.take(b1);
    c.over(c1);
    c.over(d1);
    show(c);
    return 0;
}
------------------------------------------------------
2018182052:Problem1235:正确
#include <iostream>
#include<cstdio>
#include<cstring>
#include <string>
#include<iomanip>
#define ADDRESS "C:\\Users\\241\\Desktop\\in.txt","r",stdin
using namespace std;
class Geometay
{
public:
    virtual double get_area()const=0;
    virtual ~Geometay(){}
};

class Rect:public Geometay
{
    double x,y;
public:
    Rect(double xx,double yy):x(xx),y(yy) {}
    virtual double get_area()const
    {
        return x*y;
    }
    virtual ~Rect(){}
};
class Circle:public Geometay
{
    double r;
public:
    Circle(double rr):r(rr) {}
    virtual double get_area()const
    {
        return 3.14*r*r;
    }
    virtual ~Circle(){}
};
class TotalArea
{
public:
    static void computeTotalArea(Geometay** t,int n)
    {
        if(n<=0)
            return;
        double ans(t[0]->get_area());
        for(int i=1; i<n; ++i)
        {
            double k=t[i]->get_area();
            if(ans<k)
                ans=k;
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<ans<<endl;
    }
};
int main()
{
 //   freopen(ADDRESS);
    int n(0);
    cin>>n;
    Geometay** pp=new Geometay*[n];
    int cmd(0);
    double d[2];
    for(int i=0; i<n; ++i)
    {
        cin>>cmd;
        if(cmd==1)
        {
            cin>>d[0]>>d[1];
            pp[i]=new Rect(d[0],d[1]);
        }
        else if(cmd==2)
        {
            cin>>d[0];
            pp[i]=new Circle(d[0]);
        }
    }
    TotalArea tem;
    tem.computeTotalArea(pp,n);
    for(int i=0; i<n; ++i)
        delete pp[i];
    delete []pp;
    return 0;
}
------------------------------------------------------
2018192043:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};
class Rect:public Geometry
{
    int longs,shorts;
public:
    Rect(int ls,int ss):longs(ls),shorts(ss) {}
    double getArea()
    {
        return longs*shorts;
    }
    ~Rect() {}
};
class Circle:public Geometry
{
    int r;
public:
    Circle(int rs):r(rs) {}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle() {}
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double area=t[0]->getArea();
        for(int i=1;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<area<<endl;
    }
};
int main()
{
    Geometry **p;
    int t,type,shorts,longs,r,counts=0;
    cin>>t;
    p=new Geometry*[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>shorts>>longs;
            p[counts]=new Rect(longs,shorts);
        }
        else
        {
            cin>>r;
            p[counts]=new Circle(r);
        }
        counts++;
    }
    TotalArea x;
    x.computerTotalArea(p,counts);
    for(int i=0;i<counts;i++)
        delete p[i];
    delete []p;
    return 0;
}

------------------------------------------------------
2018192040:Problem1235:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
double pi = 3.14;
class Geometry{
 
public:
 
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
 
};
 
class Rect:public Geometry{
    double l,w;
public:
    Rect(){
    };
    Rect(double L,double W):l(L),w(W){
    };
    double getArea(){
        return l*w;
    }
};
 
class Circle:public Geometry{
    double r;
public:
    Circle(){
    };
    Circle(double R):r(R){
    };
    double getArea(){
        return r*r*pi;
    }
};
 
class TotalArea{
 
public:
 
   static void computerTotalArea(Geometry** t,int n){
        double max = t[0]->getArea();
        for(int i=0;i<n;i++)
            if(max<t[i]->getArea())
                max = t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl; 
   }
 
};
 
 
int main(){
    int n;
    cin>>n;
    TotalArea ta;
    Geometry **p1;
    p1 = new Geometry*[n];
    for(int i=0;i<n;i++){
        int type,r,w,l;
        cin>>type;
        if(type == 1){
            cin>>l>>w;
            Rect re(l,w);
            p1[i] = new Rect(l,w);
        }
        if(type == 2){
            cin>>r;
            p1[i] = new Circle(r);
        }
    }
    ta.computerTotalArea(p1,n);
    for(int i=0;i<n;i++)
    	delete p1[i];
    delete []p1;
}
------------------------------------------------------
2018152108:Problem1234:正确
#include<iostream>
#include<string>
#include<cmath>
#include<cstdlib>
#include<cstdio>
using namespace std;

class Group
{
public:
	virtual int add(int x, int y)=0;
	virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
	int add(int x,int y)
	{
		return x+y;
	}
	int sub(int x,int y)
	{
		return x-y;
	}
};

class GroupB:public Group
{
public:
	int add(int x, int y)
	{
		return x+y;
	}
	int sub(int x, int y)
	{
		int result=0,time=1,per,a,b;
		while(x!=0||y!=0)
		{
			a=x%10;
			b=y%10;
			if(a>b)
				per=(a-b);
			else
				per=(a+10-b);
			result=result+time*per;
			time*=10;
			x/=10;
			y/=10;
		}
		return result;
	}
};

class GroupC:public Group
{
public:
	int add(int x, int y)
	{
		int result=0,time=1,per,a,b;
		while(x!=0||y!=0)
		{
			a=x%10;
			b=y%10;
			per=(a+b)%10;
			result=result+time*per;
			time*=10;
			x/=10;
			y/=10;
		}
		return result;
	}
	int sub(int x, int y)
	{
		int result=0,time=1,per,a,b;
		while(x!=0||y!=0)
		{
			a=x%10;
			b=y%10;
			if(a>b)
				per=(a-b);
			else
				per=(a+10-b);
			result=result+time*per;
			time*=10;
			x/=10;
			y/=10;
		}
		return result;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int type,x,y,i,j;
		string ss,xx,yy,cz;
		Group *p;
		cin>>type>>ss;
		for(i=0;i<ss.size();i++)
		{
			if(ss[i]=='+'||ss[i]=='-')
			{
				cz=ss[i];
				for(j=i+1;j<ss.size();j++)
				{
					yy+=ss[j];
				}
				break;
			}
			else
			{
				xx+=ss[i];
			}
		}
		x=atoi(xx.c_str());
		y=atoi(yy.c_str()); 
		if(type==1)
		{
			p = new GroupA;
			if(cz=="+")
			{
				cout<<p->add(x,y)<<endl;
			}
			if(cz=="-")
			{
				cout<<p->sub(x,y)<<endl;
			}
		}
		if(type==2)
		{
			p = new GroupB;
			if(cz=="+")
			{
				cout<<p->add(x,y)<<endl;
			}
			if(cz=="-")
			{
				cout<<p->sub(x,y)<<endl;
			}
		}
		if(type==3)
		{
			p = new GroupC;
			if(cz=="+")
			{
				cout<<p->add(x,y)<<endl;
			}
			if(cz=="-")
			{
				cout<<p->sub(x,y)<<endl;
			}
		}
	}
	return 0;
}
------------------------------------------------------
2018152035:Problem1235:正确
#include <iostream>
#include<stdio.h>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
class Rect:public Geometry
{
    double l,w;
public:
    Rect(int ll,int ww):l(ll),w(ww) {}
    double getArea()
    {
        return l*w;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(int rr):r(rr) {}
    double getArea()
    {
        return 3.14*r*r;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {
        double maxx=0;
        for(int i=0; i<n; i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxx<<endl;
    }
};
int main()
{
    //freopen("C:\\Users\\241\\Desktop\\1.txt","r",stdin);
    int n,t,w,l,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(int i=0; i<n; i++)
    {
        cin>>t;
        if(t==1)
        {
            cin>>l>>w;
            p[i]=new Rect(l,w);
        }
        if(t==2)
        {
            cin>>r;
            p[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(p,n);
    for(int i=0;i<n;i++)
    {
        delete p[i];
    }
    delete []p;
}

------------------------------------------------------
2018192045:Problem1234:答案错误
#include<iostream>
using namespace std;
#include<cstring>
#include<iomanip>
class Group
{

public:

    virtual int add(int x, int y)=0;//输出加法的运算结果

    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{

public:

    int add(int x, int y)
    {
        return x+y;
    }

    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }

    int sub(int x, int y)
    {
        int sum_;
        sum_=x-y;
        if(x%10<y%10)
            sum_+=10;
        if(x%100<y%100)
            sum_+=100;
        if(x%100<y%100)
            sum_+=1000;
        return sum_;
    }

};
class GroupC:public Group
{

public:
    int add(int x, int y)
    {
        int sum;
        sum=x+y;
        if(x%10+y%10>=10)
            sum-=10;
        if(((x-x%10)%100)+((y-y%10)%100)>=100)
            sum-=100;
        return sum;
    }

    int sub(int x, int y)
    {
        int sum_;
        sum_=x-y;
        if(x%10<y%10)
            sum_+=10;
        if(x%100<y%100)
            sum_+=100;
        if(x%1000<y%1000)
            sum_+=1000;
        return sum_;
    }
};
int main()
{
    int num1,num2,t,group;
    char type;
    Group *p;
    cin>>t;
    while(t--)
    {
        cin>>group;
        int i;
        cin>>num1>>type>>num2;
        if(group==1)
        {
            GroupA A;
            p=&A;
            if(type=='+')
                cout<<p->add(num1,num2)<<endl;
            if(type=='-')
                cout<<p->sub(num1,num2)<<endl;
        }
        if(group==2)
        {
            GroupB A;
            p=&A;
            if(type=='+')
                cout<<p->add(num1,num2)<<endl;
            if(type=='-')
                cout<<p->sub(num1,num2)<<endl;
        }
        if(group==3)
        {
            GroupC A;
            p=&A;
            if(type=='+')
                cout<<p->add(num1,num2)<<endl;
            if(type=='-')
                cout<<p->sub(num1,num2)<<endl;
        }
    }
}

------------------------------------------------------
2017161025:Problem1232:正确
#include<iostream>
#include <string>
using namespace std;
class Vehicle
{
protected:
	string NO;
public:
	Vehicle(string n) { NO = n; }
	virtual int fee() = 0;
};

class Car :Vehicle
{
public:
	int guest, weight;

	Car(string no1, int guest1, int weight1) :Vehicle(no1)
	{
		weight = weight1;
		guest = guest1;
	}

	int fee() { return guest * 8 + weight * 2; }
};
class Truck :Vehicle
{
public:
	int weight;

	Truck(string no1, int weight1) :Vehicle(no1), weight(weight1) {}

	int fee() { return weight * 5; }
};
class Bus :Vehicle
{
public:
	int guest;

	Bus(string no1, int guest1) :Vehicle(no1), guest(guest1) {}

	int fee() { return guest * 3; }
};
int main()
{
	Car c("", 0, 0);
	Truck t("", 0);
	Bus b("", 0);
	int i, repeat, ty, weight, guest;
	string no;

	cin >> repeat;

	for (i = 0; i < repeat; i++) 
	{
		cin >> ty >> no;

		switch (ty) 
		{
		case 1: cin >> guest >> weight; c = Car(no, guest, weight); cout << no << ' ' << c.fee() << endl; break;
		case 2: cin >> weight; t = Truck(no, weight); cout << no << ' ' << t.fee() << endl; break;
		case 3: cin >> guest; b = Bus(no, guest); cout << no << ' ' << b.fee() << endl; break;
		}
	}

	return 0;
}
------------------------------------------------------
2017161025:Problem1120:正确
#pragma warning (disable: 4996)
#include <iostream>
#include <cstring>
#include <string>
using namespace std;

const int maxn = 512;

class Animal
{
protected:
	char name[maxn];
	int age;
public:
	Animal(char *n, int a) :age(a) { strcpy(name, n); }

	virtual void Speak()
	{
		cout << "Hello,I am " << name << "(Fake)" << endl;
	}
};

class Tiger :public Animal
{
public:
	Tiger(char *n, int a) :Animal(n, a) {}

	virtual void Speak()
	{
		cout << "Hello,I am " << name << ",AOOO." << endl;
	}
};
class Dog :public Animal
{
public:
	Dog(char *n, int a) :Animal(n, a) {}

	virtual void Speak()
	{
		cout << "Hello,I am " << name << ",WangWang." << endl;
	}
};
class Duck :public Animal
{
public:
	Duck(char *n, int a) :Animal(n, a) {}

	virtual void Speak()
	{
		cout << "Hello,I am " << name << ",GAGA." << endl;
	}
};
class Pig :public Animal
{
public:
	Pig(char *n, int a) :Animal(n, a) {}

	virtual void Speak()
	{
		cout << "Hello,I am " << name << ",HENGHENG." << endl;
	}
};


int main()
{
	int age, t;
	char name[maxn];
	string kind;

	Animal *p;
	cin >> t;
	while (t--)
	{
		cin >> kind >> name >> age;
		if (kind == "Tiger")
		{
			Tiger tiger(name, age);
			p = &tiger;
		}
		else if (kind == "Dog")
		{
			Dog dog(name, age);
			p = &dog;
		}
		else if (kind == "Duck")
		{
			Duck duck(name, age);
			p = &duck;
		}
		else if (kind == "Pig")
		{
			Pig pig(name, age);
			p = &pig;
		}
		else
		{
			cout << "There is no " << kind << " in our Zoo." << endl;
			continue;
		}
		p->Speak();
	}
	return 0;
}
------------------------------------------------------
2018151085:Problem1119:答案错误
#include<bits/stdc++.h>
using namespace std;

class BaseAccount
{ 
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(string Name,string Account,int Balance):name(Name),account(Account),balance(Balance){}
	virtual int deposit(int num1,int num2)//存款 
	{
		return balance=balance+num1+num2;
	}
	
	virtual int withdraw(int num3,int num4)//取款 
	{
		return balance=balance-num3-num4;
	}
	
	virtual void display()
	{
		if(balance<0)
			cout<<"insufficient"<<endl;
		else
			cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	
};

class BasePuls:public BaseAccount
{ 
protected:
	int limit;
	int limit_sum;
public:
	BasePuls(string Name,string Account,int Balance):BaseAccount(Name,Account,Balance),limit(5000){}
	virtual int deposit(int num1,int num2)//存款
	{
		return balance=balance+num1+num2;
	}
	
	virtual int withdraw(int num3,int num4)//取款 
	{
		balance=balance-num3-num4;
		if(balance>-5000)
			return balance=0;
	}
	
	
	virtual void display()
	{
		limit_sum=balance+limit;
		if(limit_sum<0)
			cout<<"insufficient"<<endl;
		else
			cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	
	BaseAccount *p;
	string name,account;
	int balance,n1,n2,n3,n4;
	while(t--)
	{
		cin>>name>>account;
		
		if(account[1]=='A')
		{
			cin>>balance;
			p=new BaseAccount(name,account,balance);
			cin>>n1>>n2>>n3>>n4;
			p->deposit(n1,n3);
			p->withdraw(n2,n4);
			p->display();
			delete p;
		}
		
		else 
		{
			cin>>balance;
			p=new BasePuls(name,account,balance);
			cin>>n1>>n2>>n3>>n4;
			p->deposit(n1,n3);
			p->withdraw(n2,n4);
			p->display();
			delete p;
		}
	}
		
}
------------------------------------------------------
2017161025:Problem1234:正确
#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;

class Group
{

public:

	virtual int add(int x, int y) = 0;//输出加法的运算结果

	virtual int sub(int x, int y) = 0;//输出减法的运算结果

};

class GroupA : public Group
{
	virtual int add(int x, int y)
	{
		return x + y;
	}

	virtual int sub(int x, int y)
	{
		return x - y;
	}
};

class GroupB : public Group
{
	virtual int add(int x, int y)
	{
		return x + y;
	}

	virtual int sub(int x, int y)
	{
		int res = 0;
		int flag = 0;

		while (max(x, y))
		{
			int tmp = x % 10 - y % 10;

			if (tmp < 0)
				tmp += 10;

			res += tmp * pow(10, flag++);

			x /= 10;
			y /= 10;
		}

		return res;
	}
};

class GroupC : public Group
{
	virtual int add(int x, int y)
	{
		int res = 0;
		int flag = 0;

		while (max(x, y))
		{
			int tmp = x % 10 + y % 10;

			if (tmp > 9)
				tmp -= 10;

			res += tmp * pow(10, flag++);

			x /= 10;
			y /= 10;
		}

		return res;
	}

	virtual int sub(int x, int y)
	{
		int res = 0;
		int flag = 0;

		while (max(x, y))
		{
			int tmp = x % 10 - y % 10;

			if (tmp < 0)
				tmp += 10;

			res += tmp * pow(10, flag++);

			x /= 10;
			y /= 10;
		}

		return res;
	}
};

int main()
{
	int t;
	cin >> t;

	while (t--)
	{
		int type;
		cin >> type;

		Group * p = nullptr;

		if (type == 1)
			p = new GroupA();
		else if (type == 2)
			p = new GroupB();
		else
			p = new GroupC();

		int x, y;
		char sym;

		cin >> x >> sym >> y;

		cout << (sym == '+' ? p->add(x, y) : p->sub(x, y)) << endl;

		delete p;
	}

	return 0;
}
------------------------------------------------------
2018151005:Problem1119:正确
#include<iostream>
#include<string>
#include<cstring>
using namespace std;
/*某银行的支票账户分为两类，一类为基本支票账户BaseAccount，另一类为具有透支保护特性的BasePlus支票账户。


BaseAccount支票账户的信息包括：客户姓名(name)、账户(account)、当前结余(balance)；BaseAccount支票账户可
以执行的操作包括：存款(deposit)、取款(withdraw)、显示账户信息(display)。注意：取款金额不能透支，否则显
式出错信息“insufficient”。*/

class BaseAccount
{
protected:
    string name;
    char account[8];
    float balance;
public:
    BaseAccount(){}
    BaseAccount(string name0,char* account0,float balance0):name(name0),balance(balance0)
    {
        strcpy(account,account0);
    }
    virtual void deposit(float money)
    {
        balance+=money;
    }
    virtual void withdraw(float money)
    {
        if(balance>=money)
        {
            balance-=money;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
/*BasePlus支票账户除包含BaseAccount的所有信息外，还包括以下信息：透支上限(limit：默认为5000)，当前透支总
额(limit_sum)；BasePlus支票账户可执行的操作与BaseAccount相同，但有两种操作的实现不同：(1)对于取款操作，
可以在透支上限范围内透支，超过则显示出错信息“insufficient”；(2)对
于显示操作，必须显示BasePlus的其他信息。*/


class BasePlus:public BaseAccount
{
private:
    float limit;
    float limit_sum;
public:
    BasePlus():limit(5000),limit_sum(0){}
    BasePlus(string name0,char* account0,float balance0):BaseAccount(name0,account0,balance0),
        limit(5000),limit_sum(0){}
    virtual void deposit(float money)
    {
        int balance_real=balance-limit_sum+money;
        if(balance_real>=0)
        {
            balance=balance_real;
            limit_sum=0;
        }
        else
        {
            balance=0;
            limit_sum=-balance_real;
        }
    }
    virtual void withdraw(float money)
    {
        int balance_real=balance-limit_sum-money;
        if(balance_real>=0)
        {
            balance=balance_real;
            limit_sum=0;
        }
        else if(balance_real<0&&balance_real>=-limit)
        {
            balance=0;
            limit_sum=-balance_real;
        }
        else
        {
            cout<<"insufficient"<<endl;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
void yunxing(BaseAccount* pa)
{
    float m1,m2,m3,m4;
    cin>>m1>>m2>>m3>>m4;
    pa->deposit(m1);
    pa->withdraw(m2);
    pa->deposit(m3);
    pa->withdraw(m4);
    pa->display();
}
/*请实现BaseAccount类和BasePlus类，其中BasePlus类继承于BaseAccount类，注意BaseAccount账户名称以BA开头，
BasePlus账户名称以BP开头。

要求只使用一个基类指针，指向所建立的对象，然后使用指针调用类中的方法。*/
int main()
{
    int t;
    cin>>t;
    BaseAccount* pa;
    while(t--)
    {
        string name;
        char account[8];
        float balance;
        cin>>name>>account>>balance;
        char type[3];
        type[0]=account[0];
        type[1]=account[1];
        type[2]='\0';
        if(strcmp(type,"BA")==0)
        {
            BaseAccount a(name,account,balance);
            pa=&a;
            yunxing(pa);
        }
        else if(strcmp(type,"BP")==0)
        {
            BasePlus a(name,account,balance);
            pa=&a;
            yunxing(pa);
        }
    }
}

------------------------------------------------------
2017161025:Problem1129:正确
#include <iostream>
#include <string>
using namespace std;

class NCard
{
protected:
	int ID;
	string CName;
	int Counter;

public:
	void initial(int id, string name, int counter);
	int save(int n);
	int take(int n);
	virtual void info();
};

class TCard : public NCard
{
protected:
	int Tcounter;

public:
	void initial(int id, string name, int counter, int tcounter);
	int transfer(int n);
	virtual void info();
};

class VCard : public NCard
{
protected:
	int Credit;

public:
	void initial(int id, string name, int counter, int credit);
	int over(int n);
	virtual void info();
};

void NCard::initial(int id, string name, int counter)
{
	ID = id;
	CName = name;
	Counter = counter;
}

int NCard::save(int n)
{
	if (n < 0)
		return -1;

	Counter += n;

	return 1;
}

int NCard::take(int n)
{
	if (n < 0 || n > Counter) 
		return -1;

	Counter -= n;

	return 1;
}

void NCard::info()
{
	cout << ID << "-" << CName << "-" << Counter;
}

void TCard::initial(int id, string name, int counter, int tcounter)
{
	Tcounter = tcounter;
	NCard::initial(id, name, counter);
}

int TCard::transfer(int n)
{
	if (n < 0 || n > Counter)
		return -1;

	Counter -= n;
	Tcounter += n;

	return 1;
}

void TCard::info()
{
	NCard::info();
	cout << "-" << Tcounter;
}

void VCard::initial(int id, string name, int counter, int credit)
{
	Credit = credit;
	NCard::initial(id, name, counter);
}

int VCard::over(int n)
{
	if (n < 0 || n > Counter + Credit)
		return -1;

	n -= Counter;
	Counter = 0;
	Credit -= n;

	return 1;
}

void VCard::info()
{
	NCard::info();
	cout << "-" << Credit;
}

void show(NCard & obj)
{
	obj.info();
	cout << endl;
}

int main()
{
	int id;
	string name;
	int balance;
	int tcounter, credit;

	NCard nc;
	TCard tc;
	VCard vc;

	cin >> id >> name >> balance;
	nc.initial(id, name, balance);

	cin >> id >> name >> balance >> tcounter;
	tc.initial(id, name, balance, tcounter);

	cin >> id >> name >> balance >> credit;
	vc.initial(id, name, balance, credit);

	int num;

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		nc.save(num);
	}

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		nc.take(num);
	}

	cin >> num;
	tc.save(num);

	cin >> num;
	tc.take(num);

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		tc.transfer(num);
	}

	cin >> num;
	vc.save(num);

	cin >> num;
	vc.take(num);

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		vc.over(num);
	}

	show(nc);
	show(tc);
	show(vc);

	//system("pause");
	return 0;
}
------------------------------------------------------
2018151058:Problem1235:正确
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rector:public Geometry
{
protected:
    double x,y;
public:
Rector() {};
    Rector(double a,double b)
    {
        x=a,y=b;
    }
    double getArea()
    {
        return x*y;
    }

};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle() {};
    Circle(double c)
    {
        r=c;
    }
    double getArea()
    {
        return 3.14*r*r;
    }

};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double max=0;
        for(int i=0;i<n;i++)
        {
           if(t[i]->getArea()>max)
            max=t[i]->getArea();

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    Geometry **p=new Geometry*[t];
   for(int i=0;i<t;i++)
   {
        int type;
        cin>>type;
        double a,b;
        if(type==1)
        {
            cin>>a>>b;
            Rector a1(a,b);
            p[i]=&a1;
        }
        if(type==2)
        {
            cin>>a;
            Circle b1(a);
            p[i]=&b1;
        }

    }
    TotalArea::computerTotalArea(p,t);
    return 0;
}

------------------------------------------------------
2018192010:Problem1129:正确
#include <iostream>
#include <iomanip>
#include<cmath>
using namespace std;
class NCard
{
protected:
    string ID,CName;
    int counter;
public:
    NCard(){}
    virtual void initial(string n,string name,int c)
    {
        ID=n;
        CName=name;
        counter=c;
    }
    int save(int m)
    {
        if(m>0)
        {
            counter += m;
            return 1;
        }
        return -1;
    }
    int take(int m)
    {
        if(m>0 && m<=counter)
        {
            counter -= m;
            return 1;
        }
        return -1;
    }
    virtual void info()
    {
        cout << ID << '-' << CName << '-' << counter << endl;
    }
};
class Traffic:public NCard
{
protected:
    int Tcounter;
public:
    Traffic(){}
    void initial(string n,string name,int c,int ct)
    {
        ID=n;
        CName=name;
        counter=c;
        Tcounter = ct;
    }
    int transfer(int m)
    {
        if(m > counter)
            return -1;
        else
        {
            Tcounter +=m;
            counter -=m;
        }
    }
    void info()
    {
        cout << ID << '-' << CName << '-' << counter << '-' << Tcounter << endl;
    }
};
class VIP:public NCard
{
protected:
    int Credit;
public:
    VIP(){}
    void initial(string n,string name,int c,int cr)
    {
        ID=n;
        CName=name;
        counter=c;
        Credit = cr;
    }
    int over(int m)
    {
        if(m > Credit+counter)
            return -1;
        else if(m > counter)
        {
            Credit -=(m-counter);
            counter =0;
        }
        else
        {
            counter -=m;
        }
        return 1;
    }
    void info()
    {
        cout << ID << '-' << CName << '-' << counter << '-' << Credit << endl;
    }
};
void show(NCard & obj)
{
    obj.info();
}
int main()
{
    string n,namem;
    int c,cr,ct,m1,m2,m3,m4;
    NCard B;
    Traffic T;
    VIP V;
    cin >> n >> namem >> c;
    B.initial(n,namem,c);
    cin >> n >> namem >> c >> ct;
    T.initial(n,namem,c,ct);
    cin >> n >> namem >> c >> cr;
    V.initial(n,namem,c,cr);
    cin >> m1 >> m2 >> m3 >> m4;
    B.save(m1);
    B.save(m2);
    B.take(m3);
    B.take(m4);
    cin >> m1 >> m2 >> m3 >> m4;
    T.save(m1);
    T.take(m2);
    T.transfer(m3);
    T.transfer(m4);
    cin >> m1 >> m2 >> m3 >> m4;
    V.save(m1);
    V.take(m2);
    V.over(m3);
    V.over(m4);
    show(B);
    show(T);
    show(V);
    return 0;
}

------------------------------------------------------
2018192045:Problem1234:正确
#include<iostream>
using namespace std;
#include<cstring>
#include<iomanip>
class Group
{

public:

    virtual int add(int x, int y)=0;//输出加法的运算结果

    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{

public:

    int add(int x, int y)
    {
        return x+y;
    }

    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }

    int sub(int x, int y)
    {
        int sum_;
        sum_=x-y;
        if(x%10<y%10)
            sum_+=10;
        if(x%100<y%100)
            sum_+=100;
        if(x%1000<y%1000)
            sum_+=1000;
        if(x%10000<y%10000)
            sum_+=10000;
        return sum_;
    }

};
class GroupC:public Group
{

public:
    int add(int x, int y)
    {
        int sum;
        sum=x+y;
        if(x%10+y%10>=10)
            sum-=10;
        if(((x-x%10)%100)+((y-y%10)%100)>=100)
            sum-=100;
        if(((x-x%100)%1000)+((y-y%100)%1000)>=1000)
            sum-=1000;
        if(((x-x%1000)%10000)+((y-y%1000)%10000)>=10000)
            sum-=10000;
        return sum;
    }

    int sub(int x, int y)
    {
        int sum_;
        sum_=x-y;
        if(x%10<y%10)
            sum_+=10;
        if(x%100<y%100)
            sum_+=100;
        if(x%1000<y%1000)
            sum_+=1000;
        if(x%10000<y%10000)
            sum_+=10000;
        return sum_;
    }
};
int main()
{
    int num1,num2,t,group;
    char type;
    Group *p;
    cin>>t;
    while(t--)
    {
        cin>>group;
        int i;
        cin>>num1>>type>>num2;
        if(group==1)
        {
            GroupA A;
            p=&A;
            if(type=='+')
                cout<<p->add(num1,num2)<<endl;
            if(type=='-')
                cout<<p->sub(num1,num2)<<endl;
        }
        if(group==2)
        {
            GroupB A;
            p=&A;
            if(type=='+')
                cout<<p->add(num1,num2)<<endl;
            if(type=='-')
                cout<<p->sub(num1,num2)<<endl;
        }
        if(group==3)
        {
            GroupC A;
            p=&A;
            if(type=='+')
                cout<<p->add(num1,num2)<<endl;
            if(type=='-')
                cout<<p->sub(num1,num2)<<endl;
        }
    }
}

------------------------------------------------------
2018192048:Problem1234:编译错误
#include<iostream>
using namespace std;

class Group{

public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
}

class GroupA:public Group{
protected:
	int x,y;
public:
	GroupA(){}
	GroupA(int x_,int y_):x(x_),y(y_){}
	int add(){
		return x+y;
	}
	int sub(){
		return x-y;
	}
	~GroupA(){}
};
class GroupB:public Group{
protected:
	int x,y;
public:
	GroupB(){}
	GroupB(int x_,int y_):x(x_),y(y_){}
	int add(){
		return x+y;
	}
	int sub(){
		return x-y+10;
	}
	~GroupB(){}
};

class GroupC:public Group{
protected:
	int x,y;
public:
	GroupC(){}
	GroupC(int x_,int y_):x(x_),y(y_){}
	int add(){
		return x+y;
	}
	int sub(){
		return x-y+10;
	}
	~GroupB(){}
};
------------------------------------------------------
2017161025:Problem1235:正确
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;

class Geometry 
{
public:
	virtual double getArea() = 0; //计算面积，结果保留小数点后两位
};

class Rect : public Geometry
{
protected:
	double a, b;

public:
	Rect() { cin >> a >> b; }
	virtual double getArea() { return a * b; }
};

class Circle : public Geometry
{
protected:
	double r;

public:
	Circle() { cin >> r; }
	virtual double getArea() { return 3.14 * r * r; }
};


class TotalArea 
{
	static double max_value;

public:
	TotalArea() { max_value = 0.0; }
	static void computerTotalArea(Geometry** t, int n);//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	static void print()
	{
		cout << "最大面积=" << fixed << setprecision(2) << max_value << endl;
	}
};

double TotalArea::max_value = 0;

int main()
{
	int n;
	cin >> n;

	Geometry **a = new Geometry *[n];

	for (int i = 0; i < n; i++)
	{
		int type;
		cin >> type;

		type == 1 ? a[i] = new Rect() : a[i] = new Circle();	
	}

	TotalArea t;
	t.computerTotalArea(a, n);
	t.print();

	//system("pause");
	return 0;
}

void TotalArea::computerTotalArea(Geometry ** t, int n)
{
	max_value = 0;

	for (int i = 0; i < n; i++)
	{
		double tmp = t[i]->getArea();

		if (tmp > max_value)
			max_value = tmp;
	}

	return;
}

------------------------------------------------------
2018151044:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{ 
protected:
	string no;//编号
public:
	Vehicle(string no):no(no) {}
	virtual ~Vehicle() {} 
	virtual void display()=0;//应收费用
};
class Car:public Vehicle
{
	int p,w;
public:
	Car(string no,int p,int w):Vehicle(no),p(p),w(w) {}
	virtual void display()
	{
		cout<<no<<' '<<p*8+w*2<<endl;
	}
};
class Truck:public Vehicle
{
	int w;
public:
	Truck(string no,int w):Vehicle(no),w(w) {}
	virtual void display()
	{
		cout<<no<<" "<<w*5<<endl;
	}
};
class Bus:public Vehicle
{
	int p;
public:
	Bus(string no,int p):Vehicle(no),p(p) {}
	virtual void display()
	{
		cout<<no<<" "<<p*3<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Vehicle *pv;
	int type,a,b;
	string no;
	while(t--)
	{
		cin>>type>>no>>a;
		if(type==1)
		{
			cin>>b;
			pv=new Car(no,a,b);
		}
		else if(type==2)
		{
			pv=new Truck(no,a);
		}
		else 
		{
			pv=new Bus(no,a);
		} 
		pv->display();
		delete pv;
	}
}
------------------------------------------------------
2018192040:Problem1129:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class card{
protected:
    int ID,counter;
    string name;
public:
    card(){
    };
    card(int id,int c,string n):ID(id),counter(c),name(n){
    };
    void initial(){
        cin>>ID>>name>>counter;
    }
    int save(double n){
        if(n<0)
            return -1;
        counter += n;
        return 1;
    }
    int take(int n){
        if( n>counter||n<0)
            return -1;
        counter -= n;
        return 1;
    }
    virtual void show(){
        cout<<ID<<"-"<<name<<"-"<<counter<<endl;
    }
};
 
class tcard:public card{
    int tcounter;
public:
    tcard(){
    };
    tcard(int id,int c,string n,int t):card(id,c,n),tcounter(t){
    };
    int transfer(double n){
        if(counter < n||n<0)
            return -1;
        counter -= n;
        tcounter += n;
    }
    void show(){
        cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<tcounter<<endl;
    }
 
};
 
class creCard:public card{
    int credit;
public:
    creCard(){
    };
    creCard(int id,int c,string n,int cr):card(id,c,n),credit(cr){
    };
    int over(double n){
        if( n>credit+counter || n<0)
            return -1;
        else if(n<counter){
            counter -= n;
        }
        else{
            
            credit -= (n-counter);
			counter = 0;
        }
    }
    void show(){
        cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<credit<<endl;
    }
};
 
int main(){
    int id,counter,tcounter,credit;
    string name;
    cin>>id>>name>>counter;
    card c1(id,counter,name);
    cin>>id>>name>>counter>>tcounter;
    tcard c2(id,counter,name,tcounter);
    cin>>id>>name>>counter>>credit;
    creCard c3(id,counter,name,credit);
    double n1,n2,n3,n4;
    cin>>n1>>n2>>n3>>n4;
    c1.save(n1);
    c1.save(n2);
    c1.take(n3);
    c1.take(n4);
    c1.show();
    cin>>n1>>n2>>n3>>n4;
    c2.save(n1);
    c2.take(n2);
    c2.transfer(n3);
    c2.transfer(n4);
    c2.show();
    cin>>n1>>n2>>n3>>n4;
    c3.save(n1);
    c3.take(n2);
    c3.over(n3);
    c3.over(n3);
    c3.show();
}
------------------------------------------------------
2018152044:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
    GroupA()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=x-y;
        return ressub;
    }
};
class GroupB:public Group
{
public:
    GroupB()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};
class GroupC:public Group
{
public:
    GroupC()
    {
    }
    int add(int x,int y)
    {
        int resadd=0;
        int add[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        if(m>n)
            n=m;
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            add[i]=(savex[i]+savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            resadd+=add[i]*pow(10,n-1-i);
        }
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};

int main()
{
    int n;
    cin>>n;
    Group *s;
    for(int i=0;i<n;i++)
    {
        int type;
        cin>>type;
        int x,y;
        char op;
        cin>>x>>op>>y;
        if(type==1)
        {
            GroupA a;
            s=&a;
            if(op=='+')
                cout<<s->add(x,y)<<endl;
            else if(op=='-')
                cout<<s->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB b;
            s=&b;
            if(op=='+')
                cout<<s->add(x,y)<<endl;
            else if(op=='-')
                cout<<s->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC c;
            s=&c;
            if(op=='+')
                cout<<s->add(x,y)<<endl;
            else if(op=='-')
                cout<<s->sub(x,y)<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2018192013:Problem1234:答案错误
#include <iostream>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y){return x-y;}
};

class GroupB:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>=y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=y/10;
            }
            else
                s+=x%10*i;
            x=x/10;
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                s+=(x%10+y%10)%10*i;
                y=y/10;
            }
            else
                s+=x%10*i;
            x=x/10;
        }
        return s;
    }
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>=y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=y/10;
            }
            else
                s+=x%10*i;
            x=x/10;
        }
        return s;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *p;
    while(t--)
    {
        int type,x,y;
        char op;
        cin>>type>>x>>op>>y;
        if(type==1)
        {
            GroupA ga;
            p=&ga;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB gb;
            p=&gb;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC gc;
            p=&gc;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2016150076:Problem1119:答案错误
#include<iostream>
using namespace std;

class BaseAccount
{
	protected:
				string name,account;
				int balance;
				
	public:
			BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
			virtual void deposit(int m)
			{
			
				balance+=m;
				
						}
						
			virtual void withdraw(int m)
			{
				if(m<balance)
					balance-=m;
				else 
					cout<<"insufficient"<<endl;	
			}
						
			virtual void display()
			{
				cout<<name<<account<<" Balance:"<<balance<<endl;
				
			}	
						
			
};

class BasePlus:public BaseAccount
{
	private:
		int limit,limit_sum;
	public:
		  	void deposit(int m)
			{
				if(limit_sum>m)
				limit_sum-=m;
				
				else if(limit_sum>0&&limit_sum<m)
				balance=m-limit_sum;
				
				else
					balance+=m;
				
						}
						
			 void withdraw(int m)
			{
				if(m<balance)
					balance-=m;
						
				else if (m>balance&&m<balance+limit)
				{
					limit_sum=m-balance;
					limit=limit+balance-m;
					balance=0;
					
						}		
						
				else 
					cout<<"insufficient"<<endl;	
			}	
						
			void display()
			{
				cout<<name<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
				
						}	
		
};


int main()
{
	int t;
	string name,account;
	int balance;
	cin>>t;
	int a,b,c,d;
	while(t--)
	{
		cin>>name>>account>>balance;
		cin>>a>>b>>c>>d;
		
		if(account[1]=='A')
			{
				BaseAccount g(name,account,balance);
				g.deposit(a);
				g.withdraw(b);
				g.deposit(c);
				g.withdraw(d);
				g.display();
				
			}
			
		else if(account[1]=='P')	
		{
			BaseAccount h(name,account,balance);
				h.deposit(a);
				h.withdraw(b);
				h.deposit(c);
				h.withdraw(d);
				h.display();
		}
		
		
		
	}
	return 0;
}
------------------------------------------------------
2018151066:Problem1129:正确
#include<iostream>
using namespace std;
//类定义
class CardN
{
protected:
    int ID;
    char CName;
    int Counter;
public:
    void initial(int id,char name,int counter);
    int save(int n);
    int take(int n);
    virtual void info();
};
class CardT:public CardN
{
protected:
    int Tcounter;
public:
    void initial(int id,char name,int counter,int t);
    int transfer(int n);
    void info();

};
class CardG:public CardN
{
protected:
    int Credit;
public:
    void initial(int id,char name,int counter,int c);
    int over(int n);
    void info();
};

//类实现
void CardG::initial(int id,char name,int counter,int c)
{
    ID=id;
    CName=name;
    Counter=counter;
    Credit=c;
}
void CardT::initial(int id,char name,int counter,int t)
{
    ID=id;
    CName=name;
    Counter=counter;
    Tcounter=t;
};
void CardN::initial(int id,char name,int counter)
{
    ID=id;
    CName=name;
    Counter=counter;
}
int CardN::save(int n)
{
    if(n>0)
    {
        Counter+=n;
        return 1;
    }
    else
        return -1;
}
int  CardN::take(int n)
{
    if(n>0)
    {
        if(n<Counter)
        {
            Counter-=n;
            return 1;
        }
    }
    return -1;
}
void CardN::info()
{
    cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
}
void CardT::info()
{
    cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
}
void CardG::info()
{
    cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
}
int CardT::transfer(int n)
{
    if(Counter>n)
    {
        Tcounter+=n;
        Counter-=n;
        return 1;
    }
    return -1;
}
int CardG::over(int n)
{
    if(n>Counter+Credit)
        return -1;
    else
    {
        Credit-=n-Counter;
        Counter=0;
        return 1;
    }
}


//主函数

void show(CardN &obj)
{
    obj.info();
}
int main()
{
    int idn,idt,idg;
    char namen,namet,nameg;
    int countern,countert,counterg;
    cin>>idn>>namen>>countern;
    CardN cardn;
    cardn.initial(idn,namen,countern);
    int tcounter;
    cin>>idt>>namet>>countert>>tcounter;
    CardT cardt;
    cardt.initial(idt,namet,countert,tcounter);
    int credit;
    cin>>idg>>nameg>>counterg>>credit;
    CardG cardg;
    cardg.initial(idg,nameg,counterg,credit);
    int s1,s2,g1,g2;
    cin>>s1>>s2>>g1>>g2;
    cardn.save(s1);
    cardn.save(s2);
    cardn.take(g1);
    cardn.take(g2);
    show(cardn);
    int s3,g3,c1,c2;
    cin>>s3>>g3>>c1>>c2;
    cardt.save(s3);
    cardt.take(g3);
    cardt.transfer(c1);
    cardt.transfer(c2);
    show(cardt);
    int s4,g4,o1,o2;
    cin>>s4>>g4>>o1>>o2;
    cardg.save(s4);
    cardg.take(g4);
    cardg.over(o1);
    cardg.over(o2);
    show(cardg);
}

------------------------------------------------------
2018152021:Problem1119:编译错误
#include<iostream>
using namespace std;
class BaseAccount
{
protected:
	string name,account;
	double balance;
public:
	BaseAccount(string n,string a,double b):name(n),account(a),balance(b){}
	double deposit(double x)
	{
		balance+=x;
		return balance;
	}
	double withdraw(double y)
	{
		balance-=y;
		return balance;
	}
	void display()
	{
		cout << name << " " << account << " Balance:" << balance << endl;
	}	
};
class BasePlus:public BaseAccount
{
public:
	double limit_sum;
	BasePlus(string n,string a,double b):name(n),account(a),balance(b){}
	double deposit(double x)
	{
		balance+=x;
		return balance;
	}
	double withdraw(double y)
	{
		balance-=y;
		return balance;
	}
	void display()
	{
		cout<< name << " " << account << " Balance:" << balance << "limit:" << limit_sum << endl;
	}
};
int main()
{
	int t;
	cin >> t;
	string name,account;
	BaseAccount *p;
	double balance,x1,y1,x2,y2;
	while(t--)
	{
		cin >> name >> account >> balance >> x1 >> y1 >> x2 >> y2 ;
		
		p=new BasePlus(name,account,balance);
		
	}	
}
------------------------------------------------------
2018152007:Problem1129:正确
#include <iostream>

using namespace std;
class putong
{
protected:
    string ID;
    string CName;
    int balance;
public:
    putong(string i,string c,int b):ID(i),CName(c),balance(b){}
    int save(int a)
    {
        if(a<0)
            return -1;
        else
            balance=balance+a;
            return 1;
    }
    int take(int c)
    {
        if(c<0)
        {
            return -1;
        }
        else
        {
             if(balance>c)
            {
                balance=balance-c;
                return 1;
            }
            else
                return -1;
        }

    }
    virtual int transfer(int a){};
    virtual int over(int a){};
    virtual void info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<endl;
    }
};
class jiaotong:public putong
{
private:
    int Tcounter;
public:
    jiaotong(string i,string c,int b,int t):putong(i,c,b)
    {
        Tcounter=t;
    }
    int transfer(int c)
    {
        if(balance>c)
        {
            balance=balance-c;
            Tcounter=Tcounter+c;
            return 1;
        }
        else
            return -1;
    }
    void info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<'-'<<Tcounter<<endl;
    }
};
class guibin:public putong
{
private:
    int Credit;
public:
    guibin(string i,string c,int b,int C):putong(i,c,b)
    {
        Credit=C;
    }
    int over(int c)
    {
        if(balance+Credit<c)
        {
            return -1;
        }
        else
        {
            if(balance>c)
            {
                balance=balance-c;
            }
            else
            {

                Credit=Credit-(c-balance);
                balance=0;
            }
        }
    }
    void info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<'-'<<Credit<<endl;
    }
};
void show(putong &pt)
{
    pt.info();
}
int main()
{
    string I1,I2,I3,c1,c2,c3;
    int b1,b2,b3,t,C;
    cin>>I1>>c1>>b1;
    cin>>I2>>c2>>b2>>t;
    cin>>I3>>c3>>b3>>C;
    putong *p1=new putong(I1,c1,b1);
    putong *p2;
    jiaotong *j2=new jiaotong(I2,c2,b2,t);
    p2=j2;
    putong *p3;
    putong *g3=new guibin(I3,c3,b3,C);
    p3=g3;
    int d1,d2,d3,d4,e1,e2,e3,e4,f1,f2,f3,f4,g;
    cin>>d1>>d2>>d3>>d4;
    cin>>e1>>e2>>e3>>e4;
    cin>>f1>>f2>>f3>>f4;
    g=p1->save(d1);
    g=p1->save(d2);
    g=p1->take(d3);
    g=p1->take(d4);
    g=p2->save(e1);
    g=p2->take(e2);
    g=p2->transfer(e3);
    g=p2->transfer(e4);
    g=p3->save(f1);
    g=p3->take(f2);
    g=p3->over(f3);
    g=p3->over(f4);
    show(*p1);
    show(*p2);
    show(*p3);
    return 0;
}

------------------------------------------------------
2018152044:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
    GroupA()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=x-y;
        return ressub;
    }
};
class GroupB:public Group
{
public:
    GroupB()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};
class GroupC:public Group
{
public:
    GroupC()
    {
    }
    int add(int x,int y)
    {
        int resadd=0;
        int add[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        if(m>n)
            n=m;
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            add[i]=(savex[i]+savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            resadd+=add[i]*pow(10,n-1-i);
        }
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
};

int main()
{
    int n;
    cin>>n;
    Group *s[1000];
    for(int i=0;i<n;i++)
    {
        int type;
        cin>>type;
        int x,y;
        char op;
        cin>>x>>op>>y;
        if(type==1)
        {
            s[i]=new GroupA();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            s[i]=new GroupB();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            s[i]=new GroupC();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
    }
    for(int i=0;i<n;i++)
        delete s[i];
    return 0;
}
------------------------------------------------------
2018192040:Problem1129:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class card{
protected:
    int ID,counter;
    string name;
public:
    card(){
    };
    card(int id,int c,string n):ID(id),counter(c),name(n){
    };
    void initial(){
        cin>>ID>>name>>counter;
    }
    int save(double n){
        if(n<0)
            return -1;
        counter += n;
        return 1;
    }
    int take(int n){
        if( n>counter||n<0)
            return -1;
        counter -= n;
        return 1;
    }
    virtual void show(){
        cout<<ID<<"-"<<name<<"-"<<counter<<endl;
    }
};
 
class tcard:public card{
    int tcounter;
public:
    tcard(){
    };
    tcard(int id,int c,string n,int t):card(id,c,n),tcounter(t){
    };
    int transfer(double n){
        if(counter < n||n<0)
            return -1;
        counter -= n;
        tcounter += n;
    }
    void show(){
        cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<tcounter<<endl;
    }
 
};
 
class creCard:public card{
    int credit;
public:
    creCard(){
    };
    creCard(int id,int c,string n,int cr):card(id,c,n),credit(cr){
    };
    int over(double n){
        if( n>credit+counter || n<0)
            return -1;
        else if(n<counter){
            counter -= n;
        }
        else{
            
            credit -= (n-counter);
			counter = 0;
        }
    }
    void show(){
        cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<credit<<endl;
    }
};
void show(card c){
	c.show();
}
void show(tcard c){
	c.show();
}
void show(creCard c){
	c.show();
}
int main(){
    int id,counter,tcounter,credit;
    string name;
    cin>>id>>name>>counter;
    card c1(id,counter,name);
    cin>>id>>name>>counter>>tcounter;
    tcard c2(id,counter,name,tcounter);
    cin>>id>>name>>counter>>credit;
    creCard c3(id,counter,name,credit);
    double n1,n2,n3,n4;
    cin>>n1>>n2>>n3>>n4;
    c1.save(n1);
    c1.save(n2);
    c1.take(n3);
    c1.take(n4);
    show(c1);
    cin>>n1>>n2>>n3>>n4;
    c2.save(n1);
    c2.take(n2);
    c2.transfer(n3);
    c2.transfer(n4);
    show(c2);
    cin>>n1>>n2>>n3>>n4;
    c3.save(n1);
    c3.take(n2);
    c3.over(n3);
    c3.over(n3);
    show(c3);
}
------------------------------------------------------
2016071031:Problem1234:正确
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA: public Group{
public:
    int add(int x, int y) { return x + y; }
    int sub(int x, int y) { return x - y; }
};

class GroupB: public Group{
public:
    int add(int x, int y) { return x + y; }
    int sub(int x, int y) {
         int carry = 0, res = 0;
         while(x && y) {
            int x_b = x % 10;
            int y_b = y % 10;
            res += (x_b > y_b ? x_b - y_b : x_b + 10 - y_b) * pow(10, carry) ;
            carry++;
            x /= 10;
            y /= 10;
         }

         if (x){
            res += x * pow(10, carry);
         }
         if (y){
            res += y * pow(10, carry);
         }
         return res;
    }
};

class GroupC: public Group{
public:
    int add(int x, int y) {
        int carry = 0, res = 0;
        while (x && y) {
            int x_b = x % 10;
            int y_b = y % 10;
            res += (x_b + y_b >= 10? x_b + y_b - 10 : x_b + y_b) * pow(10, carry) ;
            carry++;
            x /= 10;
            y /= 10;
        }

        if (x){
            res += x * pow(10, carry);
         }
         if (y){
            res += y * pow(10, carry);
         }

         return res;
    }
    int sub(int x, int y) {
         int carry = 0, res = 0;
         while(x && y) {
            int x_b = x % 10;
            int y_b = y % 10;
            res += (x_b > y_b ? x_b - y_b : x_b + 10 - y_b) * pow(10, carry) ;
            carry++;
            x /= 10;
            y /= 10;
         }

         if (x){
            res += x * pow(10, carry);
         }
         if (y){
            res += y * pow(10, carry);
         }
         return res;
    }
};


int main() {
//	freopen("ojdata.txt", "r", stdin);
    int t, type, x, y;
    char oper;
    Group * g;

    cin>>t;
    while (t--) {
        cin>>type;
        if(type == 1) {
            g = new GroupA();
            cin>>x>>oper>>y;
            if (oper == '+') {
                cout<< g->add(x, y) <<endl;
            } else {
                cout<< g->sub(x, y) <<endl;
            }
        } else if (type == 2) {
            g = new GroupB();
            cin>>x>>oper>>y;
            if (oper == '+') {
                cout<< g->add(x, y) <<endl;
            } else {
                cout<< g->sub(x, y) <<endl;
            }
        } else {
            g = new GroupC();
            cin>>x>>oper>>y;
            if (oper == '+') {
                cout<< g->add(x, y) <<endl;
            } else {
                cout<< g->sub(x, y) <<endl;
            }
        }
    }

    return 0;
}


------------------------------------------------------
2018152021:Problem1234:正确
#include<iostream>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
    int add(int x,int y)
	{
        return x+y;
    }
    int sub(int x,int y)
	{
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x,int y)
	{
        return x+y;
    }
    int sub(int x,int y)
	{
        int sum=x-y;
        if(x%10<y%10)
            sum+=10;
        if(x%100<y%100)
            sum+=100;   
        return sum;
    }
};
class GroupC:public Group
{
public:
    int add(int x,int y)
	{
        int sum=x+y;
        if(x%10+y%10>10)
            sum-=10;
        if(x%100+y%100>100)
            sum-=100;
            return sum;
	}
    int sub(int x,int y)
	{
        int sum=x-y;
        if(x%10<y%10)
            sum+=10;
        if(x%100<y%100)
            sum+=100;   
        return sum;
	}
};
int main()
{
    int t;
	cin >> t;
    int a,b,c;
    char d;
    Group *p;
    while(t--)
    {
        cin >> a >> b >> d >> c;
        if(a==1)
            p=new GroupA();
        else if(a==2)
            p=new GroupB();
        else if(a==3)
            p=new GroupC();
        if(d=='+')
            cout << p->add(b,c) << endl;
        else
            cout << p->sub(b,c) << endl;
    }
    return 0;
}
------------------------------------------------------
2018192050:Problem1129:正确
#include<bits/stdc++.h>
using namespace std;
class Card{
    protected:
        string id;
        string name;
        int counter;
    public:
        Card(){
        }
        Card(string a,string b,int c){
            id=a;
            name=b;
            counter=c;
        }
        ~Card(){
        }
    	void initial()
    	{
    		id="0";
    		name="0";
    		counter=0;
		}
		int save(int a)
		{
			if(a<0)
				return -1;
			else
				counter+=a;
			return 1;
		}
		int take(int a)
		{
			if(a<0||a>counter)
				return -1;
			else
				counter-=a;
			return 1;
		}
		virtual void info()
		{
			cout<<id<<"-"<<name<<"-"<<counter<<endl;
		}
};
class JTCard:public Card{
    protected:
        int jtcounter;
    public:
        JTCard(){
        }
        JTCard(string a,string b,int c,int d){
        	id=a;
            name=b;
            counter=c;
            jtcounter=d;
        }
        ~JTCard(){
        } 
           	void initial()
    	{
    		id="0";
    		name="0";
    		counter=0;
		}
		int save(int a)
		{
			if(a<0)
				return -1;
			else
				counter+=a;
			return 1;
		}
		int take(int a)
		{
			if(a<0||a>counter)
				return -1;
			else
				counter-=a;
			return 1;
		}
		int transfer(int a)
		{
			if(a<0||a>counter)
				return -1;
			else
			{
				counter-=a;
				jtcounter+=a;
			}
			return 1;
		}
		void info(){
			cout<<id<<"-"<<name<<"-"<<counter<<"-"<<jtcounter<<endl;
		}
};
class GBCard:public Card{
    protected:
        int credit;
    public:
        GBCard(){
        }
        GBCard(string a,string b,int c,int d){
        	id=a;
            name=b;
            counter=c;
            credit=d;
        }
        ~GBCard(){
        }  
       	void initial()
    	{
    		id="0";
    		name="0";
    		counter=0;
		}
		int save(int a)
		{
			if(a<0)
				return -1;
			else
				counter+=a;
			return 1;
		}
		int take(int a)
		{
			if(a<0||a>counter)
				return -1;
			else
				counter-=a;
			return 1;
		}
		int over(int a){
			if(a<0||counter+credit<a)
				return -1;
			else
			{
				credit-=a-counter;
				counter=0;
				
			}
			return 1;
		}
		void info(){
			cout<<id<<"-"<<name<<"-"<<counter<<"-"<<credit<<endl;
		}
};
void show(Card &obj)
{
	obj.info();
}
int main(){
	string num1,num2,num3,n1,n2,n3;
	int sum1,sum2,sum3;
	int jt,credit;
	int x;
	cin>>num1>>n1>>sum1;
	cin>>num2>>n2>>sum2>>jt;
	cin>>num3>>n3>>sum3>>credit;
	Card a(num1,n1,sum1);
	JTCard b(num2,n2,sum2,jt);
	GBCard c(num3,n3,sum3,credit);
	cin>>x;
	a.save(x);
	cin>>x;
	a.save(x);
	cin>>x;
	a.take(x);
	cin>>x;
	a.take(x);
	show(a);
	cin>>x;
	b.save(x);
	cin>>x;
	b.take(x);
	cin>>x;
	b.transfer(x);
	cin>>x;
	b.transfer(x);
	show(b);
	cin>>x;
	c.save(x);
	cin>>x;
	c.take(x);
	cin>>x;
	c.over(x);
	cin>>x;
	c.over(x);
	show(c);
}

------------------------------------------------------
2018192037:Problem1234:编译错误
#include<bits/stdc++.h>
using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{

public:
    GroupB(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sud(int x,int y)
    {
        int i=0,j=0,q=0;
        int x1[10],y1[10],ans[10];
        while(x/10>0)
        {
            x1[i]=x%10;
            x/=10;
            i++;
        }
        x1[i]=x;
        while(y/10>0)
        {
            y1[j]=y%10;
            y/=10;
            j++;
        }
        y1[j]=y;
        int m = max(i,j);
        for(int t=0;t<m;t++)
        {
            if(t>i)
                x1[t]=0;
            if(t>j)
                y1[t]=0;

            if(x1[t]-y1[t]<0)
            {
                ans[t]=y1[t]+x1[t]+10;
            }
            else ans[t] = ans[t]=y1[t]+x1[t];
        }
        for(int t=0;t<m;t++)
        {
            q+=ans[t]*pow(10,i);
        }
        return q;
    }
};

class GroupC:public Group
{
public:
    int sud(int x,int y)
    {
        int i=0,j=0,q=0;
        int x1[10],y1[10],ans[10];
        while(x/10>0)
        {
            x1[i]=x%10;
            x/=10;
            i++;
        }
        x1[i]=x;
        while(y/10>0)
        {
            y1[j]=y%10;
            y/=10;
            j++;
        }
        y1[j]=y;
        int m = max(i,j);
        for(int t=0;t<m;t++)
        {
            if(t>i)
                x1[t]=0;
            if(t>j)
                y1[t]=0;

            if(x1[t]-y1[t]<0)
            {
                ans[t]=y1[t]+x1[t]+10;
            }
            else ans[t] = ans[t]=y1[t]+x1[t];
        }
        for(int t=0;t<m;t++)
        {
            q+=ans[t]*pow(10,i);
        }
        return q;
    }
    int add(int x, int y)
    {
        int i=0,j=0,q=0;
        int x1[10],y1[10],ans[10];
        while(x/10>0)
        {
            x1[i]=x%10;
            x/=10;
            i++;
        }
        x1[i]=x;
        while(y/10>0)
        {
            y1[j]=y%10;
            y/=10;
            j++;
        }
        y1[j]=y;
        int m = max(i,j);
        for(int t=0;t<m;t++)
        {
            if(t>i)
                x1[t]=0;
            if(t>j)
                y1[t]=0;

            if(x1[t]+y1[t]>=10)
            {
                ans[t]=y1[t]+x1[t]-10;
            }
            else ans[t] = ans[t]=y1[t]+x1[t];
        }
        for(int t=0;t<m;t++)
        {
            q+=ans[t]*pow(10,i);
        }
        return q;
    }
};

int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        int q,w;
        Group *p;
        int type;
        cin>>type;
        int flag,m;
        string opra;
        cin>>opra;
        if(opra.find_first_of('+')>0)
        {
            m=opra.find_first_of('+');
            string str1=opra.substr(0,m);
            string str2=opra.substr(m+1,opra.length());

            q = atoi(str1.c_str());
            w = atoi(str2.c_str());
        }
        if(opra.find_first_of('-')>0)
        {
            m=opra.find_first_of('-');
            string str1=opra.substr(0,m);
            string str2=opra.substr(m+1,opra.length());

            q = atoi(str1.c_str());
            w = atoi(str2.c_str());
        }
        if(type==1)
        {
            GroupA a;
            p = &a;
        }
        else if(type==2)
        {
            GroupB q1;
            p = &q1;
        }
        else if(type == 3)
        {
            GroupC c;
            p = &c;
        }
        if(opra.find_first_of('+')>0)
            p->add(q,w);
        else p->sub(q,w);
    }

}

------------------------------------------------------
2018152062:Problem1129:答案错误
#include <iostream>
using namespace std;
/*某银行卡分为普通卡、交通卡、贵宾卡三种，其中普通卡是最简单的卡，
具有属性包括卡号（ID）、户名（CName）、余额（Counter），
方法包括：初始化（initial），存款（save），取款（take）、查询（info）。
普通卡的属性和方法说明如下:
1.卡号是一串数字，户名用单个字母表示，余额是一个非负整数
2.存款操作是余额增加一笔款项，款项必须是正整数，不合法数据直接返回-1，执行成功则返回1
3.取款操作是余额减少一笔款项，款项必须是正整数且不能超过余额，不合法数据直接返回-1，执行成功则返回1
4.查询操作是输出卡的相关信息，包括卡号、户名、余额，信息之间用单个短划线连接*/

class Card
{
protected:
    string ID;
    char CName;
    int Counter;
public:
    Card(string _ID,char _CName,int _Counter):ID(_ID),CName(_CName),Counter(_Counter){}
    virtual int save(int e)
    {
        if(e>=0)
        {
            Counter+=e;
            return 1;
        }
        else
            return -1;
    }
    virtual int take(int e)
    {
        if(e<=Counter&&e>=0)
        {
            Counter-=e;
            return 1;
        }
        else
            return -1;
    }
    virtual void print()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
/*交通卡是普通卡的升级版，包含额外属性是交通余额（Tcounter），
使得交通卡能够当作深圳通使用，包含额外方法是转帐（transfer），把银行卡的钱转入交通余额中，
注意转帐金额不能超过账户原有余额，不合法数据直接返回-1，执行成功则返回1*/
class Traffic_Card:public Card
{
protected:
    int Tcounter;
public:
    Traffic_Card(string _ID,char _CName,int _Counter,int _Tcounter):Card(_ID,_CName,_Counter),Tcounter(_Tcounter){}
    int save(int e)
    {
        if(e>=0)
        {
            Counter+=e;
            return 1;
        }
        return -1;
    }
    int transfer(int e)
    {
        if(e<0)
            return -1;
        else
        {
            if(Card::take(e))
            {
                Tcounter+=e;
                return 1;
            }
            return -1;
        }
    }
    void print()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
/*贵宾卡是普通卡的升级版，包含额外属性是信用额度（Credit），使得贵宾卡能够透支，
即取出超过余额的钱，包含的额外方法是透支（over），
当执行透支操作，余额清0，超过余额的部分用信用额度来扣减。
注意透支的最大金额不能超过余额+信用额度，不合法数据直接返回-1，执行成功则返回1
使用c++语言和类继承方法实现上述银行卡的功能*/
class VIP_Card:public Card
{
protected:
    int Credict;
public:
    VIP_Card(string _ID,char _CName,int _Counter,int _Credict):Card(_ID,_CName,_Counter),Credict(_Credict){}
    int save(int e)
    {
        if(e>=0)
        {
            Counter+=e;
            return 1;
        }
        return -1;
    }
    int take(int e)
    {
        if(e<0)
            return -1;
        else
        {
            if(e>Credict+Counter)
                return -1;
            else
            {
                if(e<Counter)
                {
                    Counter-=e;
                }
                else
                {
                    Credict-=(e-Counter);
                    Counter=0;
                }
                return 1;
            }
        }
    }
    void print()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credict<<endl;

    }
    friend void show(Card &p);
};
void show(Card &p)
{
    p.print();
}
int main()
{
    string ID;
    char name;
    int Counter,Tcounter,Credict;
    cin>>ID>>name>>Counter;
    Card u(ID,name,Counter);
    cin>>ID>>name>>Counter>>Tcounter;
    Traffic_Card v(ID,name,Counter,Tcounter);
    cin>>ID>>name>>Counter>>Credict;
    VIP_Card w(ID,name,Counter,Credict);
    int a,b,c,d;
    cin>>a>>b>>c>>d;
    u.save(a);
    u.save(b);
    u.take(c);
    u.take(d);
    cin>>a>>b>>c>>d;
    v.save(a);
    v.take(b);
    v.transfer(c);
    v.transfer(d);
    cin>>a>>b>>c>>d;
    w.save(a);
    w.take(b);
    w.take(c);
    w.take(d);
    show(u);
    show(v);
    show(w);
    return 0;
}

------------------------------------------------------
2018152051:Problem1234:答案错误
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
protected:
	int x,y;
public:
	Group(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	virtual int add(int x, int y) = 0;//输出加法的运算结果
	virtual int sub(int x, int y) = 0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
	GroupA(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	int add(int x, int y)
	{
		return (x+y);
	}
	int sub(int x, int y)
	{
		return (x-y);
	}
};
class GroupB:public Group
{
public:
	GroupB(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	int add(int x, int y)
	{
		return (x+y);
	}
	int sub(int x, int y)
	{
		return (x-y+10);
	}
};
class GroupC:public Group
{
public:
	GroupC(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	int add(int x, int y)
	{
		int a,b,A,sum=0,i;
		for(i=0;;i++)
		{
			if(x==0 && y==0)
			{
				break;
			}
			else
			{
				a = x%10;
				b = y%10;
				x = (x-a)/10;
				y = (y-b)/10;
				A = (a+b)%10;
				sum+=A*pow(10,i);
			}	
		}
		return sum;
	}
	int sub(int x, int y)
	{
		return (x-y+10);
	}
};
int main()
{
	int T;
	cin>>T;
	int number;
	while(T--)
	{
		cin>>number;
		Group *g1;
		if(number==1)
		{
			int a,b;
			char ch;
			cin>>a>>ch>>b;
			GroupA gA(a,b);
			g1 = &gA ;
			if(ch=='+')
			{
				cout<<g1->add(a,b)<<endl;
			}
			else if(ch=='-')
			{
				cout<<g1->sub(a,b)<<endl;
			}
		}
		if(number==2)
		{
			int a,b;
			char ch;
			cin>>a>>ch>>b;
			GroupB gB(a,b);
			g1=&gB;
			if(ch=='+')
			{
				cout<<g1->add(a,b)<<endl;
			}
			else if(ch=='-')
			{
				cout<<g1->sub(a,b)<<endl;
			}
		}
		if(number==3)
		{
			int a,b;
			char ch;
			cin>>a>>ch>>b;
			GroupC gC(a,b);
			g1=&gC;
			if(ch=='+')
			{
				cout<<g1->add(a,b)<<endl;
			}
			else if(ch=='-')
			{
				cout<<g1->sub(a,b)<<endl;
			}
		}
	}
}
------------------------------------------------------
2016150201:Problem1119:正确
#include<iostream>
using namespace std;
class BaseAccount{
	protected:
		string name;
		string id;
		int bal;
	public:
		BaseAccount(string na,string ids,int b):name(na),id(ids),bal(b){
		}
	    void deposit(int n){
	    	bal=bal+n;
		}
		void virtual withdraw(int n){
			if(n>bal)
			cout<<"insufficient"<<endl;
			else
			bal=bal-n;
		}
		void virtual display(){
		cout<<name<<" "<<id<<" Balance:"<<bal<<endl;	
		}	
};
class BasePlus:public BaseAccount{
	int limit;
public:
	BasePlus(string na,string ids,int b):BaseAccount(na,ids,b){
		limit=5000;
}
	void virtual deposit(int n){
       bal=bal+n;
	}
	void virtual withdraw(int n){
		if(n>bal+limit)
		cout<<"insufficient"<<endl;
		else
		bal=bal-n;
		if(bal<0){
			limit=limit+bal;
			bal=0;
		}		
	}
	void virtual display(){
	cout<<name<<" "<<id<<" Balance:"<<bal<<" limit:"<<limit<<endl;	
	}	
};
int main(){
	int t,n,n1,m,m1;
	string na,ids;
	BaseAccount *BA; 
	int bal;
	cin>>t;
	while(t--){
	cin>>na>>ids>>bal;
	cin>>n>>m>>n1>>m1;
	if(ids[1]=='A'){
	BaseAccount ba(na,ids,bal);
	BA=&ba;
	BA->deposit(n);
	BA->withdraw(m);
	BA->deposit(n1);
	BA->withdraw(m1);
	BA->display();
	}
	else if(ids[1]=='P'){
	BasePlus bp(na,ids,bal);
	BA=&bp;
	BA->deposit(n);
	BA->withdraw(m);
	BA->deposit(n1);
	BA->withdraw(m1);	
	BA->display();	
	}
}
}
------------------------------------------------------
2018151020:Problem1234:编译错误
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class OrdinaryCard
{
protected:
    string CName;
    int ID;
    double Counter;
public:
    OrdinaryCard(string na,int id,double balance)
    :CName(na),ID(id),Counter(balance){}

    void initial(string na,int id,double balance)
    {
        CName = na;
        ID = id;
        Counter = balance;
    }
    int save(double money)
    {
        if(money<0)
            return -1;
        Counter+=money;
        return 1;
    }
    int take(double money)
    {
        if(money<0)
            return -1;
        if(Counter<money)
            return -1;
        else
            return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
    virtual int transfer(double money);
    virtual int over(double money);

};
class TrafficCard:public OrdinaryCard
{
protected:
    double Tcounter;
public:
    TrafficCard(string na,int id,double balance,double tfc):OrdinaryCard(na,id,balance),Tcounter(tfc){}
    int transfer(double money)
    {
        if(money<0)
            return -1;
        if(money>Counter)
            return -1;
        Tcounter+=money;
        Counter-=money;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VipCard:public OrdinaryCard
{
protected:
    double credit;
public:
    VipCard(string na,int id,double balance,double belief):OrdinaryCard(na,id,balance),credit(belief){}
    int over(double money)
    {
        if(money>credit+Counter)
            return -1;
        else
        {
            if(money>Counter)
            {
                money-=Counter;
                Counter=0;
                credit-=money;
            }
            else
            {
                Counter-=money;
            }
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<credit<<endl;
    }
};
void show(OrdinaryCard &obj)
{
    obj.info();
}
int main()
{
    int id;
    string na;
    double co,Tco,over;
    cin>>id>>na>>co;
    OrdinaryCard Ocard(na,id,co);
    cin>>id>>na>>co>>Tco;
    TrafficCard Tcard(na,id,co,Tco);
    cin>>id>>na>>co>>over;
    VipCard Vcard(na,id,co,over);

    double m1,m2,m3,m4;
    cin>>m1>>m2>>m3>>m4;
    OrdinaryCard *K;
    K = &Ocard;
    K->save(m1);
    K->save(m2);
    K->take(m3);
    K->take(m4);

    cin>>m1>>m2>>m3>>m4;
    K = &Tcard;
    K->save(m1);
    K->take(m2);
    K->transfer(m3);
    K->transfer(m4);

    cin>>m1>>m2>>m3>>m4;
    K = &Vcard;
    K->save(m1);
    K->take(m2);
    K->over(m3);
    K->over(m4);
    return 0;
}

------------------------------------------------------
2018192038:Problem1234:正确
#include <iostream>

using namespace std;

class Group

{

    public:

    virtual int add(int x, int y)=0;//输出加法的运算结果

    virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int t=1;
        int var;
        int t1,t2,sum=0;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(t1<t2)
            {
                var=t1+10-t2;
            }
            else
            {
                var=t1-t2;
            }
            sum+=var*t;
            t*=10;
            x/=10;
            y/=10;
            if(x==0)
            {
                break;
            }
        }
        return sum;
    }
};

class GroupC:public Group
{
public:
    int add(int x, int y)
    {
        int t=1;
        int var;
        int t1,t2,sum=0;
        if(x<y)
        {
            int temp;
            temp=x;
            x=y;
            y=temp;
        }
        while(1)
        {
            t1=x%10;
            t2=y%10;
            var=(t1+t2)%10;
            sum+=var*t;
            t*=10;
            x/=10;
            y/=10;
            if(x==0)
            {
                break;
            }
        }
        return sum;
    }
    int sub(int x, int y)
    {
        int t=1;
        int var;
        int t1,t2,sum=0;
        while(1)
        {
            t1=x%10;
            t2=y%10;
            if(t1<t2)
            {
                var=t1+10-t2;
            }
            else
            {
                var=t1-t2;
            }
            sum+=var*t;
            t*=10;
            x/=10;
            y/=10;
            if(x==0)
            {
                break;
            }
        }
        return sum;
    }
};

int main()
{
    int t;
    int type;
    int x,y;
    char ch;
    cin>>t;
    Group *p=NULL;
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            GroupA one;
            p=&one;
            cin>>x>>ch>>y;
            if(ch=='+')
            {
                cout<<p->add(x,y)<<endl;
            }
            else if(ch=='-')
            {
                cout<<p->sub(x,y)<<endl;
            }
        }
        else if(type==2)
        {
            GroupB one;
            p=&one;
            cin>>x>>ch>>y;
            if(ch=='+')
            {
                cout<<p->add(x,y)<<endl;
            }
            else if(ch=='-')
            {
                cout<<p->sub(x,y)<<endl;
            }
        }
        else if(type==3)
        {
            GroupC one;
            p=&one;
            cin>>x>>ch>>y;
            if(ch=='+')
            {
                cout<<p->add(x,y)<<endl;
            }
            else if(ch=='-')
            {
                cout<<p->sub(x,y)<<endl;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2017152043:Problem1234:正确
#include<iostream>
using namespace std;

class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
	int add(int x, int y)
	{
		return (x + y);
	}
	int sub(int x,int y)
	{
		return (x - y);
	}
};

class GroupB:public Group{
public:
	int add(int x, int y)
	{
		return (x + y);
	}
	int sub(int x,int y)
	{
		int a,b;
		int temp = 0;
		int sum = 0;
		int i = 0;
		int j;
		while(x || y){
			a = x % 10;
			b = y % 10;
			if(a < b){
				sum = a + 10 - b;
			}
			else{
				sum = a - b;
			}
			j = i;
			while(j--){
				sum *= 10;
			}
			temp += sum;
			i++;
			x /= 10;
			y /= 10;
		}
		return temp;
	}
};

class GroupC:public Group{
public:
	int add(int x, int y)
	{
		int a,b;
		int temp = 0;
		int sum = 0;
		int i = 0;
		int j;
		while(x || y){
			a = x % 10;
			b = y % 10;
			if(a + b >= 10){
				sum = a +b - 10;
			}
			else{
				sum = a + b;
			}
			j = i;
			while(j--){
				sum *= 10;
			}
			temp += sum;
			i++;
			x /= 10;
			y /= 10;
		}
		return temp;
	}
	int sub(int x,int y)
	{
		int a,b;
		int temp = 0;
		int sum = 0;
		int i = 0;
		int j;
		while(x || y){
			a = x % 10;
			b = y % 10;
			if(a < b){
				sum = a + 10 - b;
			}
			else{
				sum = a - b;
			}
			j = i;
			while(j--){
				sum *= 10;
			}
			temp += sum;
			i++;
			x /= 10;
			y /= 10;
		}
		return temp;
	}
};



int main(){
	int t;
	int type;
	int a,b;
	char cal;
	Group *pg;
	GroupA GA;
	GroupB GB;
	GroupC GC;
	
	cin >> t;
	while(t--){
		cin >> type >> a >> cal >> b;
		if(type == 1){
			pg = &GA;
			if(cal == '+')
				cout << pg->add(a,b) << endl;
			else
				cout << pg->sub(a,b) << endl;
		}
		else if(type == 2){
			pg = &GB;
			if(cal == '+')
				cout << pg->add(a,b) << endl;
			else
				cout << pg->sub(a,b) << endl;
		}
		else if(type == 3){
			pg = &GC;
			if(cal == '+')
				cout << pg->add(a,b) << endl;
			else
				cout << pg->sub(a,b) << endl;
		}
	}
	return 0;
}

------------------------------------------------------
2018152114:Problem1234:编译错误
#include<iostream>
#include<cstring>
using namespace std;
class Group
{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{
public:
   virtual int add(int x, int y)
   {
   	   return x+y;
   }
   virtual int sub(int x, int y)
   {
   		
   }
};
class GroupB:public Group
{
	public:
   virtual int add(int x, int y)
   {
   	   return x+y;
   }
   virtual int sub(int x, int y)
   {
   		
   		return sum
   }	
}
class GroupC:public Group
{
	
};
int main()
{
	int t;
	int type;
	int n1,n2;
	char key;
	cin>>t;
	Group* ps;
	while(t--)
	{
		cin>>type>>n1>>key>>n2;
		switch(type)
			{
				case 1:
					
					
			}
	}
	
	
}
------------------------------------------------------
2018152019:Problem1119:答案错误
#include <iostream>

#include<string.h>

using namespace std;

class BaseAccount
{
protected:
    string name;
    string account;
    double balance;
public:
    BaseAccount(string n,string a,double b)
    {
        name=n;
        account=a;
        balance=b;
    }
    virtual void deposit(double in)
    {
        balance+=in;
        //cout<<balance<<"--"<endl;
    }
    virtual void withdraw(double out)
    {
        if(out>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=out;
            //cout<<balance<<"**"<<endl;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
protected:
    double limit=5000;
    double limit_sum=0;
public:
    BasePlus(string n,string a,double b):BaseAccount(n,a,b){}
    virtual void deposit(double in)
    {
        balance+=in;
    }
    virtual void withdraw(double out)
    {
        if(out>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            if(balance<out)
            {
                limit=limit-(out-balance);
                balance=0;
                limit_sum=5000-limit;
                cout<<balance<<"--"<<limit<<"--"<<limit_sum<<endl;
            }
            else
                balance-=out;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    BaseAccount *p;
    int times;
    cin>>times;
    while(times--)
    {
        string n,a;
        double b,in,out;
        cin>>n>>a>>b;
        if(a.find('A',0)==1)
        {
            BaseAccount base(n,a,b);
            p=&base;
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            p->display();
        }
        else
        {
            BasePlus over(n,a,b);
            p=&over;
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            p->display();
        }

    }
    return 0;
}
------------------------------------------------------
2018192013:Problem1234:正确
#include <iostream>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y){return x-y;}
};

class GroupB:public Group
{
public:
    int add(int x,int y){return x+y;}
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>=y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=y/10;
            }
            else
                s+=x%10*i;
            x=x/10;
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    int add(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0||y!=0;i*=10)
        {
            if(y==0)
            {
                s+=x%10*i;
                x=x/10;
            }
            else if(x==0)
            {
                s+=y%10*i;
                y=y/10;
            }
            else
            {
                s+=(x%10+y%10)%10*i;
                x=x/10;
                y=y/10;
            }
        }
        return s;
    }
    int sub(int x,int y)
    {
        int i,s=0;
        for(i=1;x!=0;i*=10)
        {
            if(y!=0)
            {
                if(x%10>=y%10)
                    s+=(x%10-y%10)*i;
                else
                    s+=(x%10+10-y%10)*i;
                y=y/10;
            }
            else
                s+=x%10*i;
            x=x/10;
        }
        return s;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *p;
    while(t--)
    {
        int type,x,y;
        char op;
        cin>>type>>x>>op>>y;
        if(type==1)
        {
            GroupA ga;
            p=&ga;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB gb;
            p=&gb;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC gc;
            p=&gc;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            if(op=='-')
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018152019:Problem1119:正确
#include <iostream>

#include<string.h>

using namespace std;

class BaseAccount
{
protected:
    string name;
    string account;
    double balance;
public:
    BaseAccount(string n,string a,double b)
    {
        name=n;
        account=a;
        balance=b;
    }
    virtual void deposit(double in)
    {
        balance+=in;
        //cout<<balance<<"--"<endl;
    }
    virtual void withdraw(double out)
    {
        if(out>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=out;
            //cout<<balance<<"**"<<endl;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus:public BaseAccount
{
protected:
    double limit=5000;
    double limit_sum=0;
public:
    BasePlus(string n,string a,double b):BaseAccount(n,a,b){}
    virtual void deposit(double in)
    {
        balance+=in;
    }
    virtual void withdraw(double out)
    {
        if(out>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            if(balance<out)
            {
                limit=limit-(out-balance);
                balance=0;
                limit_sum=5000-limit;
                //cout<<balance<<"--"<<limit<<"--"<<limit_sum<<endl;
            }
            else
                balance-=out;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};

int main()
{
    BaseAccount *p;
    int times;
    cin>>times;
    while(times--)
    {
        string n,a;
        double b,in,out;
        cin>>n>>a>>b;
        if(a.find('A',0)==1)
        {
            BaseAccount base(n,a,b);
            p=&base;
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            p->display();
        }
        else
        {
            BasePlus over(n,a,b);
            p=&over;
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            cin>>in>>out;
            p->deposit(in);
            p->withdraw(out);
            p->display();
        }

    }
    return 0;
}
------------------------------------------------------
2018152010:Problem1129:正确
#include<iostream>
#include<iomanip>
#include<cmath>
using namespace std;
class Card
{
protected:
    string ID,CName;
    float balance;
public:
    Card(string id,string name,float bal):ID(id),CName(name),balance(bal){}
    int Save(float money)
    {
        if(money>0)
        {
            balance=balance+money;
            return 1;
        }
        else
            return -1;
    }
    int Take(float money)
    {
        if(money<=balance&&money>0)
        {
            balance=balance-money;
            return 1;
        }
        else
            return -1;
    }
    virtual void Info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<endl;
    }
};

class TrafficCard:public Card
{
    float Tcounter;
public:
    TrafficCard(string id,string name,float bal,float t):Card(id,name,bal),Tcounter(t){}
    int Transfer(float money)
    {
        if(money>balance||money<0)
            return -1;
        else
        {
            Tcounter=Tcounter+money;
            balance=balance-money;
            return 1;
        }
    }
    void Info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<'-'<<Tcounter<<endl;
    }
};


class Upcard:public Card
{
    float Credit;
public:
    Upcard(string id,string name,float bal,float cr):Card(id,name,bal),Credit(cr){}
    int Take(float money)
    {
        if(money>balance&&money>0)
        {
            return over(money);
        }
        else if(money>0)
        {
            balance=balance-money;
            return 1;
        }
        else
            return -1;
    }
    int over(float money)
    {
        if(money<balance+Credit&&money>0)
        {
            Credit=Credit-(money-balance);
            balance=0;
            return 1;
        }
        else
            return -1;
    }
    void Info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<'-'<<Credit<<endl;
    }
};

void info(Card &s)
{
    s.Info();
}
int main()
{
     string ID,name;
     float balance,money,Cre,trans,m1,m2,m3,m4;
     int x;
     cin>>ID>>name>>balance;
     Card C1(ID,name,balance);
     cin>>ID>>name>>balance>>trans;
     TrafficCard C2(ID,name,balance,trans);
     cin>>ID>>name>>balance>>Cre;
     Upcard C3(ID,name,balance,Cre);
     cin>>m1>>m2>>m3>>m4;
     x=C1.Save(m1);
     x=C1.Save(m2);
     x=C1.Take(m3);
     x=C1.Take(m4);
     cin>>m1>>m2>>m3>>m4;
     x=C2.Save(m1);
     x=C2.Take(m2);
     x=C2.Transfer(m3);
     x=C2.Transfer(m4);
     cin>>m1>>m2>>m3>>m4;
     x=C3.Save(m1);
     x=C3.Take(m2);
     x=C3.over(m3);
     x=C3.over(m4);
     info(C1);
     info(C2);
     info(C3);
}

------------------------------------------------------
2018151014:Problem1234:正确
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <string>

using namespace std;

int stringToInt(const string s);
string IntToString(const int t);

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
protected:
	
};

class GroupA : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		int result;
		
		string x_str = IntToString(x);
		string y_str = IntToString(y);
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		result = stringToInt(x_str);
		return result;
	}
};

class GroupC : public Group {
public:
	int add(int x, int y) {
		int result;
		
		string x_str = IntToString(x);
		string y_str = IntToString(y);
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' + y_str[i] - '0' >= 10) {
				x_str[i] = x_str[i] - '0' + y_str[i] - 10;
			}
			else {
				x_str[i] = x_str[i] - '0' + y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		result = stringToInt(x_str);
		return result;
	}
	
	int sub(int x, int y) {
		int result;
		
		string x_str = IntToString(x);
		string y_str = IntToString(y);
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		result = stringToInt(x_str);
		return result;
	}
	
};

int stringToInt(const string s) {
	stringstream ss;
	int result;
	ss << s;
	ss >> result;
	
	return result;
}

string IntToString(const int t) {
	stringstream ss;
	string result;
	ss << t;
	ss >> result;
	
	return result;
}

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		int who;
		string eqn;
		Group *g;
		
		int x;
		int y;
		char op;
		
		cin >> who >> eqn;
		
		int id;
		id = eqn.find('+');
		if (id >= 0) {
			string x_str = "";
			for (int i = 0; i < id; i++) {
				x_str += eqn[i];
			}
			
			string y_str = "";
			for (int i = id+1; i < eqn.size(); i++) {
				y_str += eqn[i];
			}
			
			x = stringToInt(x_str);
			y = stringToInt(y_str);
			op = '+';
		}
		
		id = eqn.find('-');
		if (id >= 0) {
			string x_str = "";
			for (int i = 0; i < id; i++) {
				x_str += eqn[i];
			}
			
			string y_str = "";
			for (int i = id+1; i < eqn.size(); i++) {
				y_str += eqn[i];
			}
			
			x = stringToInt(x_str);
			y = stringToInt(y_str);
			op = '-';
		}
		
		if (who == 1) {
			g = new GroupA;
			switch (op) {
				case '+': cout << g->add(x, y) << endl; break;
				case '-': cout << g->sub(x, y) << endl; break;
			}
			delete g;
		}
		else if (who == 2) {
			g = new GroupB;
			switch (op) {
				case '+': cout << g->add(x, y) << endl; break;
				case '-': cout << g->sub(x, y) << endl; break;
			}
			delete g;
		}
		
		else if (who == 3) {
			g = new GroupC;
			switch (op) {
				case '+': cout << g->add(x, y) << endl; break;
				case '-': cout << g->sub(x, y) << endl; break;
			}
			delete g;
		}
	}
	
	return 0;
}
------------------------------------------------------
2018152062:Problem1129:正确
#include <iostream>
using namespace std;
/*某银行卡分为普通卡、交通卡、贵宾卡三种，其中普通卡是最简单的卡，
具有属性包括卡号（ID）、户名（CName）、余额（Counter），
方法包括：初始化（initial），存款（save），取款（take）、查询（info）。
普通卡的属性和方法说明如下:
1.卡号是一串数字，户名用单个字母表示，余额是一个非负整数
2.存款操作是余额增加一笔款项，款项必须是正整数，不合法数据直接返回-1，执行成功则返回1
3.取款操作是余额减少一笔款项，款项必须是正整数且不能超过余额，不合法数据直接返回-1，执行成功则返回1
4.查询操作是输出卡的相关信息，包括卡号、户名、余额，信息之间用单个短划线连接*/

class Card
{
protected:
    string ID;
    char CName;
    int Counter;
public:
    Card(string _ID,char _CName,int _Counter):ID(_ID),CName(_CName),Counter(_Counter){}
    virtual int save(int e)
    {
        if(e>=0)
        {
            Counter+=e;
            return 1;
        }
        else
            return -1;
    }
    virtual int take(int e)
    {
        if(e<=Counter&&e>=0)
        {
            Counter-=e;
            return 1;
        }
        else
            return -1;
    }
    virtual void print()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
/*交通卡是普通卡的升级版，包含额外属性是交通余额（Tcounter），
使得交通卡能够当作深圳通使用，包含额外方法是转帐（transfer），把银行卡的钱转入交通余额中，
注意转帐金额不能超过账户原有余额，不合法数据直接返回-1，执行成功则返回1*/
class Traffic_Card:public Card
{
protected:
    int Tcounter;
public:
    Traffic_Card(string _ID,char _CName,int _Counter,int _Tcounter):Card(_ID,_CName,_Counter),Tcounter(_Tcounter){}
    int save(int e)
    {
        if(e>=0)
        {
            Counter+=e;
            return 1;
        }
        return -1;
    }
    int transfer(int e)
    {
        if(e<0)
            return -1;
        else
        {
            if(e<=Counter)
            {
                Counter-=e;
                Tcounter+=e;
                return 1;
            }
            return -1;
        }
    }
    void print()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
/*贵宾卡是普通卡的升级版，包含额外属性是信用额度（Credit），使得贵宾卡能够透支，
即取出超过余额的钱，包含的额外方法是透支（over），
当执行透支操作，余额清0，超过余额的部分用信用额度来扣减。
注意透支的最大金额不能超过余额+信用额度，不合法数据直接返回-1，执行成功则返回1
使用c++语言和类继承方法实现上述银行卡的功能*/
class VIP_Card:public Card
{
protected:
    int Credict;
public:
    VIP_Card(string _ID,char _CName,int _Counter,int _Credict):Card(_ID,_CName,_Counter),Credict(_Credict){}
    int save(int e)
    {
        if(e>=0)
        {
            Counter+=e;
            return 1;
        }
        return -1;
    }
    int take(int e)
    {
        if(e<0)
            return -1;
        else
        {
            if(e>Credict+Counter)
                return -1;
            else
            {
                if(e<Counter)
                {
                    Counter-=e;
                }
                else
                {
                    Credict-=(e-Counter);
                    Counter=0;
                }
                return 1;
            }
        }
    }
    void print()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credict<<endl;

    }
    friend void show(Card &p);
};
void show(Card &p)
{
    p.print();
}
int main()
{
    string ID;
    char name;
    int Counter,Tcounter,Credict;
    cin>>ID>>name>>Counter;
    Card u(ID,name,Counter);
    cin>>ID>>name>>Counter>>Tcounter;
    Traffic_Card v(ID,name,Counter,Tcounter);
    cin>>ID>>name>>Counter>>Credict;
    VIP_Card w(ID,name,Counter,Credict);
    int a,b,c,d;
    cin>>a>>b>>c>>d;
    u.save(a);
    u.save(b);
    u.take(c);
    u.take(d);
    cin>>a>>b>>c>>d;
    v.save(a);
    v.take(b);
    v.transfer(c);
    v.transfer(d);
    cin>>a>>b>>c>>d;
    w.save(a);
    w.take(b);
    w.take(c);
    w.take(d);
    show(u);
    show(v);
    show(w);
    return 0;
}

------------------------------------------------------
2018152051:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
protected:
	int x,y;
public:
	Group(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	virtual int add(int x, int y) = 0;//输出加法的运算结果
	virtual int sub(int x, int y) = 0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
	GroupA(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	int add(int x, int y)
	{
		return (x+y);
	}
	int sub(int x, int y)
	{
		return (x-y);
	}
};
class GroupB:public Group
{
public:
	GroupB(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	int add(int x, int y)
	{
		return (x+y);
	}
	int sub(int x, int y)
	{
		int a,b,A,sum=0,i;
		for(i=0;;i++)
		{
		if(x==0 && y==0)
		{
			break;
		}
		else
		{
			a = x%10;
			b = y%10;
			x = (x-a)/10;
			y = (y-b)/10;
			if(a>b)
			{
				A = a-b;
			}
			else
			{
				A = 10+(a-b);
			}
			sum+=A*pow(10,i);
		}
		}
	}
};
class GroupC:public Group
{
public:
	GroupC(int x1 = 0,int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	int add(int x, int y)
	{
		int a,b,A,sum=0,i;
		for(i=0;;i++)
		{
			if(x==0 && y==0)
			{
				break;
			}
			else
			{
				a = x%10;
				b = y%10;
				x = (x-a)/10;
				y = (y-b)/10;
				A = (a+b)%10;
				sum+=A*pow(10,i);
			}	
		}
		return sum;
	}
	int sub(int x, int y)
	{
		int a,b,A,sum=0,i;
		for(i=0;;i++)
		{
		if(x==0 && y==0)
		{
			break;
		}
		else
		{
			a = x%10;
			b = y%10;
			x = (x-a)/10;
			y = (y-b)/10;
			if(a>b)
			{
				A = a-b;
			}
			else
			{
				A = 10+(a-b);
			}
			sum+=A*pow(10,i);
		}
		}
	}
};
int main()
{
	int T;
	cin>>T;
	int number;
	while(T--)
	{
		cin>>number;
		Group *g1;
		if(number==1)
		{
			int a,b;
			char ch;
			cin>>a>>ch>>b;
			GroupA gA(a,b);
			g1 = &gA ;
			if(ch=='+')
			{
				cout<<g1->add(a,b)<<endl;
			}
			else if(ch=='-')
			{
				cout<<g1->sub(a,b)<<endl;
			}
		}
		if(number==2)
		{
			int a,b;
			char ch;
			cin>>a>>ch>>b;
			GroupB gB(a,b);
			g1=&gB;
			if(ch=='+')
			{
				cout<<g1->add(a,b)<<endl;
			}
			else if(ch=='-')
			{
				cout<<g1->sub(a,b)<<endl;
			}
		}
		if(number==3)
		{
			int a,b;
			char ch;
			cin>>a>>ch>>b;
			GroupC gC(a,b);
			g1=&gC;
			if(ch=='+')
			{
				cout<<g1->add(a,b)<<endl;
			}
			else if(ch=='-')
			{
				cout<<g1->sub(a,b)<<endl;
			}
		}
	}
}
------------------------------------------------------
2018041051:Problem1129:正确
#include<iostream>
#include<string>
#include<cstring>
#include<iomanip>
 
using namespace std;
 
class Card{
protected:
	long ID;
	char name;
	int balance;
public:
    Card(){}
    Card(long ID1,char name1,int balance1):ID(ID1),name(name1),balance(balance1){}
    int save(int num)
    {
    	if(num<=0)
    		return -1;
    	else
    		balance+=num;
    	return 1;
	}
	int take(int num)
	{
		if(num<=0)
    		return -1;
    	else if(num>balance)
    		return -1;
    	else
    	{
    		balance-=num;
    		return 1;
		}
	}
	virtual void info()
	{
		cout<<ID<<"-"<<name<<"-"<<balance<<endl;
	}
	virtual void initial(long ID1,char name1,int balance1)
	{
		ID=ID1;
		name=name1;
		balance=balance1;
	}
};
 
class tCard:public Card{
protected:
	int counter;
public:
	tCard(){}
	tCard(long ID1,char name1,int balance1,int counter1):Card(ID1,name1,balance1),counter(counter1){}
	int transfer(int num)
	{
		if(num<=0)
    		return -1;
		if(num>balance)
			return -1;
		else
		{
			balance-=num;
			counter+=num;
		}
		return 1;
	}
	void info()
	{
		cout<<ID<<"-"<<name<<"-"<<balance<<"-"<<counter<<endl;
	}
	void initial(long ID1,char name1,int balance1,int counter1)
	{
		ID=ID1;
		name=name1;
		balance=balance1;
		counter=counter1;
	}
};

class vCard:public Card{
protected:
	int credit;
public:
	vCard(){}
	vCard(long ID1,char name1,int balance1,int credit1):Card(ID1,name1,balance1),credit(credit1){}
	int over(int num)
	{
		if(num<=0)
    		return -1;
    	if(num>balance+credit)
    		return -1;
    	else
    	{
    		credit=credit-(num-balance);
    		balance=0;
		}
		return 1;
	}
	void info()
	{
		cout<<ID<<"-"<<name<<"-"<<balance<<"-"<<credit<<endl;
	}
	void initial(long ID1,char name1,int balance1,int credit1)
	{
		ID=ID1;
		name=name1;
		balance=balance1;
		credit=credit1;
	}
};

void show(Card & obj)
{
	obj.info();
}

int main()
{
	//freopen("r.txt","r",stdin);
	long ID;
	char name;
	int balance,counter,credit,num;
    Card card;
    tCard tcard;
    vCard vcard;
    cin>>ID>>name>>balance;
    card.initial(ID,name,balance);
    cin>>ID>>name>>balance>>counter;
    tcard.initial(ID,name,balance,counter);
    cin>>ID>>name>>balance>>credit;
    vcard.initial(ID,name,balance,credit);
 	
 	for(int i=0;i<4;i++)
 	{
 		cin>>num;
 		if(i<2)
 		{
 			card.save(num);
		}
		else
		{
			card.take(num);
		}
	}
	for(int i=0;i<4;i++)
 	{
 		cin>>num;
 		if(i==0)
 		{
 			tcard.save(num);
		}
		else if(i==1)
		{
			tcard.take(num);
		}
		else
		{
			tcard.transfer(num);
		}
	}
	for(int i=0;i<4;i++)
 	{
 		cin>>num;
 		if(i==0)
 		{
 			vcard.save(num);
		}
		else if(i==1)
		{
			vcard.take(num);
		}
		else
		{
			vcard.over(num);
		}
	}
	
	show(card);
	show(tcard);
	show(vcard);
 	
    return 0;
}
------------------------------------------------------
2016150076:Problem1119:正确
#include<iostream>
using namespace std;

class BaseAccount
{
	protected:
				string name,account;
				int balance;
				
	public:
			BaseAccount(string n,string a,int b):name(n),account(a),balance(b){}
			virtual void deposit(int m)
			{
			
				balance+=m;
				
						}
						
			virtual void withdraw(int m)
			{
				if(m<=balance)
					balance-=m;
				else 
					cout<<"insufficient"<<endl;	
			}
						
			virtual void display()
			{
				cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
				
			}
			~BaseAccount(){
			}	
						
			
};

class BasePlus:public BaseAccount
{
	private:
		int limit=5000;
		int limit_sum=0;
	public:
			BasePlus(string n,string a,int b):BaseAccount(n,a,b){}
		  	void deposit(int m)
			{
				if(limit_sum>=m)
				{
					limit_sum-=m;
					limit+=m;
				}
				
				else if(limit_sum>0&&limit_sum<m)
				{
					balance=m-limit_sum;
					limit_sum=0;
					limit=5000;
					}
				
				else
					balance+=m;
				
						}
						
			 void withdraw(int m)
			{
				if(m<=balance)
					balance-=m;
						
				else if (m>balance&&m<=balance+limit)
				{
					limit_sum=m-balance;
					limit=limit+balance-m;
					balance=0;
					
						}		
						
				else 
					cout<<"insufficient"<<endl;	
			}	
						
			void display()
			{
				cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
				
						}
							
		
};


int main()
{
	int t;
	string name,account;
	int balance;
	cin>>t;
	int a,b,c,d;
	BaseAccount *p;
	while(t--)
	{
		cin>>name>>account>>balance;
		cin>>a>>b>>c>>d;
		
		if(account[1]=='A')
			{
				BaseAccount g(name,account,balance);
				g.deposit(a);
				g.withdraw(b);
				g.deposit(c);
				g.withdraw(d);
				g.display();
				
			}
			
		else if(account[1]=='P')	
		{
			BasePlus h(name,account,balance);
				p=&h;
				p->deposit(a);
				p->withdraw(b);
				p->deposit(c);
				p->withdraw(d);
				p->display();
		}
		
		
		
	}
	return 0;
}

------------------------------------------------------
2018151051:Problem1234:答案错误
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;
class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
	virtual int add(int x,int y)
	{
		return x+y;
	}
	virtual int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	virtual int add(int x,int y)
	{
		return x+y;
	}
	virtual int sub(int x,int y)
	{
		int i,_y=y;
		for(i=0;_y<x;i++)
		{
			_y=_y+10;
		}
		int flag;
		flag=x-y;
		flag=flag+10*i;
		return flag;
	}
};
class GroupC:public Group
{
public:
	virtual int add(int x,int y)
	{
		int i,_y=y;
		for(i=0;_y<x;i++)
		{
			_y=_y+10;
		}
		int flag;
		flag=x+y;
		flag=flag-10*(i-1);
		return flag;
	}
	virtual int sub(int x,int y)
	{
		int i,_y=y;
		for(i=0;_y<x;i++)
		{
			_y=_y+10;
		}
		int flag;
		flag=x-y;
		flag=flag+10*i;
		return flag;
	}
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
    	int x,y,type;
    	char ask;
    	cin>>type;
    	cin>>x>>ask>>y;
    	Group *p;
    	if(type==1)
    	{
    		p=new GroupA;
    		if(ask=='+')
    			cout<<p->add(x,y)<<endl;
    		else if(ask=='-')
    			cout<<p->sub(x,y)<<endl;
		}
		else if(type==2)
		{
			p=new GroupB;
			if(ask=='+')
    			cout<<p->add(x,y)<<endl;
    		else if(ask=='-')
    			cout<<p->sub(x,y)<<endl;
		}
		else if(type==3)
		{
			p=new GroupC;
			if(ask=='+')
    			cout<<p->add(x,y)<<endl;
    		else if(ask=='-')
    			cout<<p->sub(x,y)<<endl;
		}
		delete p;
	}
    return 0;
}
------------------------------------------------------
2018151092:Problem1234:正确
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;

class Group
{
	public:
		Group()
		{
		}
		
		virtual int add(int x, int y)=0;//输出加法的运算结果
		virtual int sub(int x, int y)=0;//输出减法的运算结果
};


class GroupA:public Group
{
	public:
		GroupA()
		{
		}
		
		virtual int add(int x, int y)//输出加法的运算结果
		{
			return x+y;
		}
		
		virtual int sub(int x, int y)//输出减法的运算结果
		{
			return x-y;
		}
};

class GroupB:public Group
{
	public:
		GroupB()
		{
		}
		
		virtual int add(int x, int y)//输出加法的运算结果
		{
			return x+y;
		}
		
		virtual int sub(int x, int y)//输出减法的运算结果
		{
			int xSingle;
			int ySingle;
			int Ans=0;
			int Bit=1;
			
			while(1)
			{
				xSingle=x%10;
				ySingle=y%10;
				x=x/10;
				y=y/10;

				Ans+=(xSingle-ySingle+10)%10*Bit;
				Bit*=10;
				
				if(x==0&&y==0)
				{
					break;
				}
			}
			
			return Ans;
		}
};

class GroupC:public Group
{
	public:
		GroupC()
		{
		}
		
		virtual int add(int x, int y)//输出加法的运算结果
		{
			int xSingle;
			int ySingle;
			int Ans=0;
			int Bit=1;
			
			while(1)
			{
				xSingle=x%10;
				ySingle=y%10;
				x=x/10;
				y=y/10;

				Ans+=(xSingle+ySingle)%10*Bit;
				Bit*=10;
				if(x==0&&y==0)
				{
					break;
				}	
			}
			
			return Ans;			
		}
		
		virtual int sub(int x, int y)//输出减法的运算结果
		{
			int xSingle;
			int ySingle;
			int Ans=0;
			int Bit=1;
			
			while(1)
			{
				xSingle=x%10;
				ySingle=y%10;
				x=x/10;
				y=y/10;
				Ans+=(xSingle-ySingle+10)%10*Bit;
				Bit*=10;
				
				if(x==0&&y==0)
				{
					break;
				}				
			}
			
			return Ans;
		}
};

int main()
{
	int t;
	
	cin>>t;
	
	int type;
	char Op;
	int x;
	int y;
	
	Group *Ace[t];
		
	for(int i=0;i<t;i++)
	{
		cin>>type>>x>>Op>>y;
		
		if(type==1)
		{
			Ace[i]=new GroupA;
			
			if(Op=='+')
			{
				cout<<Ace[i]->add(x,y)<<endl;
			}
			
			else if(Op=='-')
			{
				cout<<Ace[i]->sub(x,y)<<endl;
			}
		}
		
		if(type==2)
		{
			Ace[i]=new GroupB;
			
			if(Op=='+')
			{
				cout<<Ace[i]->add(x,y)<<endl;
			}
			
			else if(Op=='-')
			{
				cout<<Ace[i]->sub(x,y)<<endl;
			}
		}
		
		if(type==3)
		{
			Ace[i]=new GroupC;
			
			if(Op=='+')
			{
				cout<<Ace[i]->add(x,y)<<endl;
			}
			
			else if(Op=='-')
			{
				cout<<Ace[i]->sub(x,y)<<endl;
			}
		}
	}
	return 0; 
}
------------------------------------------------------
2018152007:Problem1232:正确
#include <iostream>

using namespace std;
class Vehicle
{
    protected:
        string no;
    public:
        Vehicle(){}
        Vehicle(string n)
        {
            no=n;
        }
        virtual void display()=0;//应收费用

};
class Car:public Vehicle
{
private:
    int num;
    int weight;
public:
    Car(string  n,int N,int w):Vehicle(n),num(N),weight(w){}
    void display()
    {
        cout<<no<<' '<<num*8+weight*2<<endl;
    }
};
class Truck:public Vehicle
{
private:
    int weight;
public:
    Truck(string  n,int w):Vehicle(n),weight(w){}
    void display()
    {
        cout<<no<<' '<<weight*5<<endl;
    }
};
class Bus:public Vehicle
{
private:
    int num;
public:
    Bus(string n,int N):Vehicle(n),num(N){};
    void display()
    {
        cout<<no<<' '<<num*3<<endl;
    }
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        Vehicle *pv;
        int type;
        cin>>type;
        if(type==1)
        {
            string n;
            int N,w;
            cin>>n>>N>>w;
            Car *c1=new Car(n,N,w);
            pv=c1;
        }
        else if(type==2)
        {
            string n;
            int w;
            cin>>n>>w;
            Truck *t1=new Truck(n,w);
            pv=t1;
        }
        else
        {
            string n;
            int N;
            cin>>n>>N;
            Bus *b1=new Bus(n,N);
            pv=b1;
        }
        pv->display();
        delete pv;
    }
    return 0;
}

------------------------------------------------------
2018151027:Problem1234:答案错误
#include <iostream>
#include<iomanip>
#include<cstring>
using namespace std;
class Group
{
protected:

public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            a[i]=(a[i]+10-b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
};
class GroupC: public Group
{
protected:

public:
    int add(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            a[i]=(a[i]+b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
    int sub(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            a[i]=(a[i]+10-b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
};

main()
{
    int t,a,b,type,i,j,n,ope,k;
    char op[20];
    cin>>t;
    Group *p;
    while(t--)
    {
        a=0;
        b=0;
        cin>>type;
        if(type==1)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupA;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(type==2)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupB;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupC;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
    }
}

------------------------------------------------------
2018151051:Problem1234:答案错误
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;
class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
	virtual int add(int x,int y)
	{
		return x+y;
	}
	virtual int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	virtual int add(int x,int y)
	{
		return x+y;
	}
	virtual int sub(int x,int y)
	{
		if(x<y)
		{
			int s;
			s=x;
			x=y;
			y=s;
		}
		int i,_y=y;
		for(i=0;_y<x;i++)
		{
			_y=_y+10;
		}
		int flag;
		flag=x-y;
		flag=flag+10*i;
		return flag;
	}
};
class GroupC:public Group
{
public:
	virtual int add(int x,int y)
	{
		if(x<y)
		{
			int s;
			s=x;
			x=y;
			y=s;
		}
		int i,_y=y;
		for(i=0;_y<x;i++)
		{
			_y=_y+10;
		}
		int flag;
		flag=x+y;
		flag=flag-10*(i-1);
		return flag;
	}
	virtual int sub(int x,int y)
	{
		if(x<y)
		{
			int s;
			s=x;
			x=y;
			y=s;
		}
		int i,_y=y;
		for(i=0;_y<x;i++)
		{
			_y=_y+10;
		}
		int flag;
		flag=x-y;
		flag=flag+10*i;
		return flag;
	}
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
    	int x,y,type;
    	char ask;
    	cin>>type;
    	cin>>x>>ask>>y;
    	Group *p;
    	if(type==1)
    	{
    		p=new GroupA;
    		if(ask=='+')
    			cout<<p->add(x,y)<<endl;
    		else if(ask=='-')
    			cout<<p->sub(x,y)<<endl;
		}
		else if(type==2)
		{
			p=new GroupB;
			if(ask=='+')
    			cout<<p->add(x,y)<<endl;
    		else if(ask=='-')
    			cout<<p->sub(x,y)<<endl;
		}
		else if(type==3)
		{
			p=new GroupC;
			if(ask=='+')
    			cout<<p->add(x,y)<<endl;
    		else if(ask=='-')
    			cout<<p->sub(x,y)<<endl;
		}
		delete p;
	}
    return 0;
}
------------------------------------------------------
2018151020:Problem1129:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class OrdinaryCard
{
protected:
    string CName;
    int ID;
    double Counter;
public:
    OrdinaryCard(string na,int id,double balance)
    :CName(na),ID(id),Counter(balance){}

    void initial(string na,int id,double balance)
    {
        CName = na;
        ID = id;
        Counter = balance;
    }
    int save(double money)
    {
        if(money<0)
            return -1;
        Counter+=money;
        return 1;
    }
    int take(double money)
    {
        if(money<0)
            return -1;
        if(Counter<money)
            return -1;
        Counter-=money;
            return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
    virtual int transfer(double money){};
    virtual int over(double money){};

};
class TrafficCard:public OrdinaryCard
{
protected:
    double Tcounter;
public:
    TrafficCard(string na,int id,double balance,double tfc):OrdinaryCard(na,id,balance),Tcounter(tfc){}
    int transfer(double money)
    {
        if(money<0)
            return -1;
        if(money>Counter)
            return -1;
        Tcounter+=money;
        Counter-=money;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VipCard:public OrdinaryCard
{
protected:
    double credit;
public:
    VipCard(string na,int id,double balance,double belief):OrdinaryCard(na,id,balance),credit(belief){}
    int over(double money)
    {
        if(money>credit+Counter)
            return -1;
        else
        {
            if(money>Counter)
            {
                money-=Counter;
                Counter=0;
                credit-=money;
            }
            else
            {
                Counter-=money;
            }
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<credit<<endl;
    }
};
void show(OrdinaryCard &obj)
{
    obj.info();
}
int main()
{
    int id;
    string na;
    double co,Tco,over;
    cin>>id>>na>>co;
    OrdinaryCard Ocard(na,id,co);
    cin>>id>>na>>co>>Tco;
    TrafficCard Tcard(na,id,co,Tco);
    cin>>id>>na>>co>>over;
    VipCard Vcard(na,id,co,over);

    double m1,m2,m3,m4;
    cin>>m1>>m2>>m3>>m4;
    OrdinaryCard *K;
    K = &Ocard;
    K->save(m1);
    K->save(m2);
    K->take(m3);
    K->take(m4);
    show(Ocard);

    cin>>m1>>m2>>m3>>m4;
    K = &Tcard;
    K->save(m1);
    K->take(m2);
    K->transfer(m3);
    K->transfer(m4);
    show(Tcard);

    cin>>m1>>m2>>m3>>m4;
    K = &Vcard;
    K->save(m1);
    K->take(m2);
    K->over(m3);
    K->over(m4);
    show(Vcard);
    return 0;
}

------------------------------------------------------
2016073026:Problem1234:编译错误
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};

class GroupB:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};

class GroupC:public Group{
    int n;
public:
    GroupB(){}
    virtual int add(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        for(i=0;i<min(j,k);i++)
            result+=(ar1[i]+ar2[i])%10 * pow(10,i);
        if(j>k)
            while(i<j)
                result+=ar1[i]*pow(10,i);
        if(k>j)
            while(i<k)
                result+=ar1[i]*pow(10,i);
        return result;
    }
    virtual int sub(int x, int y){return x-y;}
};

int main()
{
    Group* pg;
    int t;
    cin>>t;
    while(t--){
        int group,a,b;
        cin>>group>>a>>b;
        pg=new GroupB;
        cout<<pg->add(a,b);
    }
    return 0;
}

------------------------------------------------------
2018152007:Problem1120:正确
#include <iostream>

using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()=0;
    virtual ~Animal(){}
};
class Tiger:public Animal
{
public:
    Tiger(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
    ~Tiger(){}
};
class dog:public Animal
{
public:
    dog(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
    ~dog(){}
};
class pig:public Animal
{
public:
    pig(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
    ~pig(){}
};
class Duck:public Animal
{
public:
    Duck(string n,int a):Animal(n,a){}
    void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
    ~Duck(){}
};
int main()
{
    int time;
    cin>>time;
    while(time--)
    {
        string t,n;
        int a;
        cin>>t>>n>>a;
        Animal *b;
        if(t=="Tiger")
        {
            Tiger *t1=new Tiger(n,a);
            b=t1;
            b->speak();
            delete t1;
        }
        else if(t=="Pig")
        {
            pig *p1=new pig(n,a);
            b=p1;
            b->speak();
            delete p1;
        }
        else if(t=="Dog")
        {
            dog *d1=new dog(n,a);
            b=d1;
            b->speak();
            delete d1;
        }
        else if(t=="Duck")
        {
            Duck *k1=new Duck(n,a);
            b=k1;
            b->speak();
            delete k1;
        }
        else
        {
            cout<<"There is no "<<t<<" in our Zoo."<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151020:Problem1232:答案错误
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class OrdinaryCard
{
protected:
    string CName;
    int ID;
    double Counter;
public:
    OrdinaryCard(string na,int id,double balance)
    :CName(na),ID(id),Counter(balance){}

    void initial(string na,int id,double balance)
    {
        CName = na;
        ID = id;
        Counter = balance;
    }
    int save(double money)
    {
        if(money<0)
            return -1;
        Counter+=money;
        return 1;
    }
    int take(double money)
    {
        if(money<0)
            return -1;
        if(Counter<money)
            return -1;
        Counter-=money;
            return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
    virtual int transfer(double money){};
    virtual int over(double money){};
    virtual ~OrdinaryCard()
    {

    }
};
class TrafficCard:public OrdinaryCard
{
protected:
    double Tcounter;
public:
    TrafficCard(string na,int id,double balance,double tfc):OrdinaryCard(na,id,balance),Tcounter(tfc){}
    int transfer(double money)
    {
        if(money<0)
            return -1;
        if(money>Counter)
            return -1;
        Tcounter+=money;
        Counter-=money;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
    ~TrafficCard(){}
};
class VipCard:public OrdinaryCard
{
protected:
    double credit;
public:
    VipCard(string na,int id,double balance,double belief):OrdinaryCard(na,id,balance),credit(belief){}
    int over(double money)
    {
        if(money>credit+Counter)
            return -1;
        else
        {
            if(money>Counter)
            {
                money-=Counter;
                Counter=0;
                credit-=money;
            }
            else
            {
                Counter-=money;
            }
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<credit<<endl;
    }
    ~VipCard(){}
};
void show(OrdinaryCard &obj)
{
    obj.info();
}
int main()
{
    int id;
    string na;
    double co,Tco,over;
    cin>>id>>na>>co;
    OrdinaryCard Ocard(na,id,co);
    cin>>id>>na>>co>>Tco;
    TrafficCard Tcard(na,id,co,Tco);
    cin>>id>>na>>co>>over;
    VipCard Vcard(na,id,co,over);

    double m1,m2,m3,m4;
    cin>>m1>>m2>>m3>>m4;
    OrdinaryCard *K;
    K = &Ocard;
    K->save(m1);
    K->save(m2);
    K->take(m3);
    K->take(m4);
    show(Ocard);

    cin>>m1>>m2>>m3>>m4;
    K = &Tcard;
    K->save(m1);
    K->take(m2);
    K->transfer(m3);
    K->transfer(m4);
    show(Tcard);

    cin>>m1>>m2>>m3>>m4;
    K = &Vcard;
    K->save(m1);
    K->take(m2);
    K->over(m3);
    K->over(m4);
    show(Vcard);
    return 0;
}

------------------------------------------------------
2018151020:Problem1129:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class OrdinaryCard
{
protected:
    string CName;
    int ID;
    double Counter;
public:
    OrdinaryCard(string na,int id,double balance)
    :CName(na),ID(id),Counter(balance){}

    void initial(string na,int id,double balance)
    {
        CName = na;
        ID = id;
        Counter = balance;
    }
    int save(double money)
    {
        if(money<0)
            return -1;
        Counter+=money;
        return 1;
    }
    int take(double money)
    {
        if(money<0)
            return -1;
        if(Counter<money)
            return -1;
        Counter-=money;
            return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
    virtual int transfer(double money){};
    virtual int over(double money){};
    virtual ~OrdinaryCard()
    {

    }
};
class TrafficCard:public OrdinaryCard
{
protected:
    double Tcounter;
public:
    TrafficCard(string na,int id,double balance,double tfc):OrdinaryCard(na,id,balance),Tcounter(tfc){}
    int transfer(double money)
    {
        if(money<0)
            return -1;
        if(money>Counter)
            return -1;
        Tcounter+=money;
        Counter-=money;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
    ~TrafficCard(){}
};
class VipCard:public OrdinaryCard
{
protected:
    double credit;
public:
    VipCard(string na,int id,double balance,double belief):OrdinaryCard(na,id,balance),credit(belief){}
    int over(double money)
    {
        if(money>credit+Counter)
            return -1;
        else
        {
            if(money>Counter)
            {
                money-=Counter;
                Counter=0;
                credit-=money;
            }
            else
            {
                Counter-=money;
            }
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<credit<<endl;
    }
    ~VipCard(){}
};
void show(OrdinaryCard &obj)
{
    obj.info();
}
int main()
{
    int id;
    string na;
    double co,Tco,over;
    cin>>id>>na>>co;
    OrdinaryCard Ocard(na,id,co);
    cin>>id>>na>>co>>Tco;
    TrafficCard Tcard(na,id,co,Tco);
    cin>>id>>na>>co>>over;
    VipCard Vcard(na,id,co,over);

    double m1,m2,m3,m4;
    cin>>m1>>m2>>m3>>m4;
    OrdinaryCard *K;
    K = &Ocard;
    K->save(m1);
    K->save(m2);
    K->take(m3);
    K->take(m4);
    show(Ocard);

    cin>>m1>>m2>>m3>>m4;
    K = &Tcard;
    K->save(m1);
    K->take(m2);
    K->transfer(m3);
    K->transfer(m4);
    show(Tcard);

    cin>>m1>>m2>>m3>>m4;
    K = &Vcard;
    K->save(m1);
    K->take(m2);
    K->over(m3);
    K->over(m4);
    show(Vcard);
    return 0;
}

------------------------------------------------------
2017044015:Problem1235:答案错误
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Geometry{
public:
    virtual double getArea() = 0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry{
    double a, b;
public:
    Rect(double a0, double b0){
        a = a0;
        b = b0;
    }
    virtual double getArea(){
        return a*b;
    }
};

class Circle: public Geometry{
    double r;
public:
    Circle(double r0){
        r = r0;
    }
    virtual double getArea(){
        return 3.14*r*r;
    }
};

class TotalArea{
    static double max_area;
public:
    TotalArea(){
    }
    //t为基类二级指针，指向一个基类动态数组
    //数组的每个元素指向一个子类图形，n为数组的大小
   static void computerTotalArea(Geometry** t, int n){
        for(int i=0; i<n; i++){
            if(t[i][0].getArea() > max_area)
                max_area = t[i][0].getArea();
        }
   }
    static double getMax_Area(){
        return max_area;
    }
};

double TotalArea::max_area = 0;

int main()
{
    int t, type;
    double a, b, r;
    TotalArea TA();
    cin>>t;
    Geometry** gep = new Geometry*[t];
    //gep = new Geometry[t];
    for(int i=0; i<t; i++){
        cin>>type;
        if(type == 1){
            cin>>a>>b;
            Rect rect(a, b);
            gep[i] = &rect;
        }
        if(type == 2){
            cin>>r;
            Circle circle(r);
            gep[i] = &circle;
        }
    }
    TotalArea::computerTotalArea(gep, t);
    cout<<TotalArea::getMax_Area()<<endl;
    return 0;
}

------------------------------------------------------
2017044015:Problem1235:答案错误
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Geometry{
public:
    virtual double getArea() = 0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry{
    double a, b;
public:
    Rect(double a0, double b0){
        a = a0;
        b = b0;
    }
    virtual double getArea(){
        return a*b;
    }
};

class Circle: public Geometry{
    double r;
public:
    Circle(double r0){
        r = r0;
    }
    virtual double getArea(){
        return 3.14*r*r;
    }
};

class TotalArea{
    static double max_area;
public:
    TotalArea(){
    }
    //t为基类二级指针，指向一个基类动态数组
    //数组的每个元素指向一个子类图形，n为数组的大小
   static void computerTotalArea(Geometry** t, int n){
        for(int i=0; i<n; i++){
            if(t[i][0].getArea() > max_area)
                max_area = t[i][0].getArea();
        }
   }
    static double getMax_Area(){
        return max_area;
    }
};

double TotalArea::max_area = 0;

int main()
{
    int t, type;
    double a, b, r;
    TotalArea TA();
    cin>>t;
    Geometry** gep = new Geometry*[t];
    //gep = new Geometry[t];
    for(int i=0; i<t; i++){
        cin>>type;
        if(type == 1){
            cin>>a>>b;
            Rect rect(a, b);
            gep[i] = &rect;
        }
        if(type == 2){
            cin>>r;
            Circle circle(r);
            gep[i] = &circle;
        }
    }
    TotalArea::computerTotalArea(gep, t);
    cout<<"最大面积="<<TotalArea::getMax_Area()<<endl;
    delete[] gep;
    return 0;
}

------------------------------------------------------
2018152044:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0;
    virtual ~Geometry()
    {
    }
};
class Rect:public Geometry
{
protected:
    double length,width;
public:
    Rect()
    {
    }
    Rect(double l,double w)
    {
        length=l;
        width=w;
    }
    double getArea()
    {
        double area=length*width;
        return area;
    }
    virtual ~Rect()
    {
    }
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle()
    {
    }
    Circle(double r_)
    {
        r=r_;
    }
    double getArea()
    {
        double area=r*r*3.14;
        return area;
    }
    virtual ~Circle()
    {
    }
};
class TotalArea
{
public:
    TotalArea()
    {
    }
    static void computerTotalArea(Geometry **t,int n)
    {
        double *area;
        area=new double[n];
        for(int i=0;i<n;i++)
        {
            area[i]=t[i]->getArea();
        }
        double maxarea=area[0];
        for(int i=0;i<n;i++)
        {
            if(maxarea<area[i])
                maxarea=area[i];
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxarea<<endl;
    }
};

int main()
{
    int n;
    cin>>n;
    Geometry **s=new Geometry *[n];
    for(int i=0;i<n;i++)
    {
        double x,y,r;
        int type;
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            s[i]=new Rect(x,y);
        }
        else if(type==2)
        {
            cin>>r;
            s[i]=new Circle(r);
        }
    }
    TotalArea Total;
    Total.computerTotalArea(s,n);
    for(int i=0;i<n;i++)
        delete s[i];
    delete []s;
    return 0;
}
------------------------------------------------------
2018151020:Problem1232:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Vehicle
{
protected:
    string no;//编号
public:
    Vehicle(string _no):no(_no){}
    virtual void display()=0;//应收费用
    virtual ~Vehicle(){}
};
class Car:public Vehicle
{
protected:
    int weight,number;
public:
    Car(string _no,int we,int n):Vehicle(_no),weight(we),number(n)
    {
    }
    void display()
    {
        cout<<no<<" "<<number*8+weight*2<<endl;
    }
    ~Car(){}
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string _no,int we):Vehicle(_no),weight(we){}
    void display()
    {
         cout<<no<<" "<<weight*5<<endl;
    }
    ~Truck(){}
};
class Bus:public Vehicle
{
protected:
    int number;
public:
    Bus(string _no,int n):Vehicle(_no),number(n){}
    void display()
    {
         cout<<no<<" "<<number*3<<endl;
    }
    ~Bus(){}
};
int main()
{
    int t;
    cin>>t;
    int order;
    while(t--)
    {
        Vehicle *K;
        string _no;
        cin>>order;
        if(order==1)
        {
            int we,n;
            cin>>_no>>n>>we;
            Car *C = new Car(_no,we,n);
            K = C;
        }
        else if(order==2)
        {
            int we;
            cin>>_no>>we;
            Truck *T = new Truck(_no,we);
            K = T;
        }
        else if(order==3)
        {
            int n;
            cin>>_no>>n;
            Bus *B = new Bus(_no,n);
            K = B;
        }
        K->display();
        delete K;
    }
    return 0;
}
 
------------------------------------------------------
2017044015:Problem1235:正确
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Geometry{
public:
    virtual double getArea() = 0; //计算面积，结果保留小数点后两位

};

class Rect: public Geometry{
    double a, b;
public:
    Rect(double a0, double b0){
        a = a0;
        b = b0;
    }
    virtual double getArea(){
        return a*b;
    }
};

class Circle: public Geometry{
    double r;
public:
    Circle(double r0){
        r = r0;
    }
    virtual double getArea(){
        return 3.14*r*r;
    }
};

class TotalArea{
    static double max_area;
public:
    TotalArea(){
    }
    //t为基类二级指针，指向一个基类动态数组
    //数组的每个元素指向一个子类图形，n为数组的大小
   static void computerTotalArea(Geometry** t, int n){
        for(int i=0; i<n; i++){
            if(t[i][0].getArea() > max_area)
                max_area = t[i][0].getArea();
        }
   }
    static double getMax_Area(){
        return max_area;
    }
};

double TotalArea::max_area = 0;

int main()
{
    int t, type;
    double a, b, r;
    TotalArea TA();
    cin>>t;
    Geometry** gep = new Geometry*[t];
    //gep = new Geometry[t];
    for(int i=0; i<t; i++){
        cin>>type;
        if(type == 1){
            cin>>a>>b;
            Rect rect(a, b);
            gep[i] = &rect;
        }
        if(type == 2){
            cin>>r;
            Circle circle(r);
            gep[i] = &circle;
        }
    }
    TotalArea::computerTotalArea(gep, t);
    cout<<"最大面积="<<fixed<<setprecision(2)<<TotalArea::getMax_Area()<<endl;
    delete[] gep;
    return 0;
}

------------------------------------------------------
2018152044:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
    virtual ~Group()
    {
    }
};
class GroupA:public Group
{
public:
    GroupA()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=x-y;
        return ressub;
    }
    virtual ~GroupA()
    {
    }
};
class GroupB:public Group
{
public:
    GroupB()
    {
    }
    int add(int x,int y)
    {
        int resadd=x+y;
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
    virtual ~GroupB()
    {
    }
};
class GroupC:public Group
{
public:
    GroupC()
    {
    }
    int add(int x,int y)
    {
        int resadd=0;
        int add[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        if(m>n)
            n=m;
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            add[i]=(savex[i]+savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            resadd+=add[i]*pow(10,n-1-i);
        }
        return resadd;
    }
    int sub(int x,int y)
    {
        int ressub=0;
        int sub[50]={0};
        int savex[50]={0};
        int n=1;
        int tempx=x;
        while(tempx/10!=0)
        {
            n++;
            tempx/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savex[i]=x%10;
            x/=10;
        }
        int savey[50]={0};
        int m=1;
        int tempy=y;
        while(tempy/10!=0)
        {
            m++;
            tempy/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            savey[i]=y%10;
            y/=10;
        }
        for(int i=n-1;i>=0;i--)
        {
            sub[i]=(savex[i]+10-savey[i])%10;
        }
        for(int i=n-1;i>=0;i--)
        {
            ressub+=sub[i]*pow(10,n-1-i);
        }
        return ressub;
    }
    virtual ~GroupC()
    {
    }
};

int main()
{
    int n;
    cin>>n;
    Group *s[1000];
    for(int i=0;i<n;i++)
    {
        int type;
        cin>>type;
        int x,y;
        char op;
        cin>>x>>op>>y;
        if(type==1)
        {
            s[i]=new GroupA();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            s[i]=new GroupB();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            s[i]=new GroupC();
            if(op=='+')
                cout<<s[i]->add(x,y)<<endl;
            else if(op=='-')
                cout<<s[i]->sub(x,y)<<endl;
        }
    }
    for(int i=0;i<n;i++)
        delete s[i];
    return 0;
}
------------------------------------------------------
2018192037:Problem1234:正确
#include<bits/stdc++.h>
using namespace std;

class Group{
public:
    virtual int add(int x, int y){}//输出加法的运算结果
    virtual int sub(int x, int y){}//输出减法的运算结果
};

class GroupA:public Group
{

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    GroupB(){}
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i=0,j=0,q=0;
        int x1[10],y1[10],ans[10];
        while(x/10>0)
        {
            x1[i]=x%10;
            x/=10;
            i++;
        }
        x1[i]=x;
        while(y/10>0)
        {
            y1[j]=y%10;
            y/=10;
            j++;
        }
        y1[j]=y;
        int m = max(i,j);
        for(int t=0;t<=m;t++)
        {
            if(t>i)
                x1[t]=0;
            if(t>j)
                y1[t]=0;

            if(x1[t]-y1[t]<0)
            {
                ans[t]=x1[t]-y1[t]+10;
            }
            else ans[t]=x1[t]-y1[t];
        }
        for(int t=0;t<=m;t++)
        {
            q+=ans[t]*pow(10,t);
        }
        return q;
    }
};

class GroupC:public Group
{
public:
    int sub(int x,int y)
    {
        int i=0,j=0,q=0;
        int x1[10],y1[10],ans[10];
        while(x/10>0)
        {
            x1[i]=x%10;
            x/=10;
            i++;
        }
        x1[i]=x;
        while(y/10>0)
        {
            y1[j]=y%10;
            y/=10;
            j++;
        }
        y1[j]=y;
        int m = max(i,j);
        for(int t=0;t<=m;t++)
        {
            if(t>i)
                x1[t]=0;
            if(t>j)
                y1[t]=0;

            if(x1[t]-y1[t]<0)
            {
                ans[t]=x1[t]-y1[t]+10;
            }
            else ans[t]=x1[t]-y1[t];
        }
        for(int t=0;t<=m;t++)
        {
            q+=ans[t]*pow(10,t);
        }
        return q;
    }
    int add(int x, int y)
    {
        int i=0,j=0,q=0;
        int x1[10],y1[10],ans[10];
        while(x/10>0)
        {
            x1[i]=x%10;
            x/=10;
            i++;
        }
        x1[i]=x;
        while(y/10>0)
        {
            y1[j]=y%10;
            y/=10;
            j++;
        }
        y1[j]=y;
        int m = max(i,j);
        for(int t=0;t<=m;t++)
        {
            if(t>i)
                x1[t]=0;
            if(t>j)
                y1[t]=0;

            if(x1[t]+y1[t]>=10)
            {
                ans[t]=y1[t]+x1[t]-10;
            }
            else ans[t]=y1[t]+x1[t];
        }
        for(int t=0;t<=m;t++)
        {
            q+=ans[t]*pow(10,t);
        }
        return q;
    }
};

int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        int q,w;
        Group *p;
        int type;
        cin>>type;
        int flag,m;
        string opra;
        cin>>opra;
        if(opra.find_first_of('+')!=-1)
        {
            m=opra.find_first_of('+');
            string str1=opra.substr(0,m);
            string str2=opra.substr(m+1,opra.length());

            q = atoi(str1.c_str());
            w = atoi(str2.c_str());
        }
        else
        {
            m=opra.find_first_of('-');
            string str1=opra.substr(0,m);
            string str2=opra.substr(m+1,opra.length());

            q = atoi(str1.c_str());
            w = atoi(str2.c_str());
        }
        if(type==1)
        {
            GroupA a;
            p = &a;
        }
        else if(type==2)
        {
            GroupB q1;
            p = &q1;
        }
        else if(type == 3)
        {
            GroupC c;
            p = &c;
        }
        if(opra.find_first_of('+')!=-1)
            cout<<p->add(q,w)<<endl;
        else cout<<p->sub(q,w)<<endl;
    }

}

------------------------------------------------------
2018151027:Problem1234:答案错误
#include <iostream>
#include<iomanip>
#include<cstring>
using namespace std;
class Group
{
protected:

public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            if(a[i]>b[i])
                a[i]=a[i]-b[i];
            else
                a[i]=(a[i]-b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
};
class GroupC: public Group
{
protected:

public:
    int add(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            a[i]=(a[i]+b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
    int sub(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            if(a[i]>b[i])
                a[i]=a[i]-b[i];
            else
                a[i]=(a[i]-b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
};

main()
{
    int t,a,b,type,i,j,n,ope,k;
    char op[20];
    cin>>t;
    Group *p;
    while(t--)
    {
        a=0;
        b=0;
        cin>>type;
        if(type==1)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupA;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(type==2)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupB;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupC;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
    }
}

------------------------------------------------------
2018151005:Problem1235:答案错误
#include<iostream>
#include<string>
#include<cstring>
#include<iomanip>
using namespace std;
/*题目描述

请编写程序，从图形数组中找出最大面积。基类框架如下所示：

class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};*/
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
/*以Geometry为基类，构建出Rect（矩形，数据成员为长和宽）和Circle（圆，数据成员为半径）两个类，重写getArea()方法，
其他方法根据需要自拟。*/
class Rect:public Geometry
{
private:
    double length,width;
public:
    Rect(){}
    Rect(double length0,double width0):length(length0),width(width0){}
    double getArea()
    {
        return length*width;
    }
};
class Circle:public Geometry
{
private:
    double radius;
public:
    Circle(){}
    Circle(double radius0):radius(radius0){}
    double getArea()
    {
        return 3.14*radius*radius;
    }
};
/*写一个TotalArea类，该类结构如下：

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)；//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向
   一个子类图形，n为数组的大小

};*/
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double max_area=0;
        for(int i=1;i<=n;i++)
        {
            if(i==1)
            {
                max_area=t[i-1]->getArea();
            }
            else
            {
                if(t[i-1]->getArea()>max_area)
                    max_area=t[i-1]->getArea();
            }
        }
        cout<<"最大面积="<<double(int(max_area*100+0.5))/100<<endl;
    }
};
/*
生成上述四个类并编写主函数，结果保留两位小数。

输入

第一行表示测试次数。从第二行开始，每个测试用例占一行，每行数据意义如下：图形类型（1为Rect(矩形)，2为Circle(圆)）、
基本信息（Rect是长和宽，Circle是半径）。

输出

最大图形的面积
样例输入

3
1 3 4
2 5
2 6
样例输出

最大面积=113.04
提示*/
int main()
{
    int t;
    cin>>t;
    Geometry** p;
    p=new Geometry*[t];
    for(int i=1;i<=t;i++)
    {
        int type;
        cin>>type;
        switch(type)
        {
        case 1:
            {
                double length,width;
                cin>>length>>width;
                Rect a(length,width);
                p[i-1]=&a;
                break;
            }
        case 2:
            {
                double radius;
                cin>>radius;
                Circle a(radius);
                p[i-1]=&a;
                break;
            }
        }
    }
    TotalArea b;
    b.computerTotalArea(p,t);
}

------------------------------------------------------
2018151027:Problem1234:答案错误
#include <iostream>
#include<iomanip>
#include<cstring>
using namespace std;
class Group
{
protected:

public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            if(a[i]>b[i])
                a[i]=a[i]-b[i];
            else
                a[i]=(a[i]+10-b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
};
class GroupC: public Group
{
protected:

public:
    int add(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            a[i]=(a[i]+b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
    int sub(int x, int y)
    {
        int a[10];
        int b[10];
        int i,ten=10,w=0,yl,xl,xt,yt;
        xt=x;
        yt=y;
        for(yl=1; ;yl++)
        {
            if(y/10==0)
                break;
            else
                y=y/10;
        }

        for(xl=1; ;xl++)
        {
            if(x/10==0)
                break;
            else
                x=x/10;
        }

        for(i=0;i<xl;i++)
        {
            if(i==0)
            {
                a[i]=xt%ten;
            }
            else
            {
                a[i]=xt/ten;
                ten=ten*10;
            }
        }

        ten=10;
        for(i=0;i<yl;i++)
        {
            if(i==0)
            {
                b[i]=yt%ten;
            }
            else
            {
                b[i]=yt/ten;
                ten=ten*10;
            }
        }

        for(i=0;i<yl;i++)
        {
            if(a[i]>b[i])
                a[i]=a[i]-b[i];
            else
                a[i]=(a[i]+10-b[i])%10;
        }
        ten=1;

        for(i=0;i<xl;i++)
        {
            w=w+a[i]*ten;
            ten=ten*10;
        }

        return w;
    }
};

main()
{
    int t,a,b,type,i,j,n,ope,k;
    char op[20];
    cin>>t;
    Group *p;
    while(t--)
    {
        a=0;
        b=0;
        cin>>type;
        if(type==1)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupA;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(type==2)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupB;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupC;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
    }
}

------------------------------------------------------
2018151020:Problem1120:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string na,int ag):name(na),age(ag){}
    virtual void Speak()=0;
    virtual ~Animal(){}
};
class Tiger:public Animal
{
protected:

public:
    Tiger(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"AOOO."<<endl;
    }
    ~Tiger(){}
};
class Dog:public Animal
{
protected:

public:
    Dog(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"WangWang."<<endl;
    }
    ~Dog(){}
};
class Duck:public Animal
{
protected:

public:
    Duck(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"GAGA."<<endl;
    }
    ~Duck(){}
};
class Pig:public Animal
{
protected:

public:
    Pig(string na,int ag):Animal(na,ag){}
    void Speak()
    {
        cout<<"Hello,I am "<<name<<","<<"HENGHENG."<<endl;
    }
    ~Pig(){}
};
int main()
{
    int t;
    cin>>t;
    string type,na;
    int ag;
    while(t--)
    {
        Animal *K;
        cin>>type>>na>>ag;
        if(type=="Tiger")
        {
            Tiger *T = new Tiger(na,ag);
            K = T;
        }
        else if(type=="Dog")
        {
            Dog *Do = new Dog(na,ag);
            K = Do;
        }
        else if(type == "Pig")
        {
            Pig *P = new Pig(na,ag);
            K = P;
        }
        else if(type=="Duck")
        {
            Duck *Du = new Duck(na,ag);
            K = Du;
        }
        else
        {
            cout<<"There is no "<<type<<" in our Zoo."<<endl;
            K = NULL;
        }
        if(K)
        {
            K->Speak();
            delete K;
        }


    }
    return 0;
}

------------------------------------------------------
2018151005:Problem1235:答案错误
#include<iostream>
#include<string>
#include<cstring>
#include<iomanip>
using namespace std;
/*题目描述

请编写程序，从图形数组中找出最大面积。基类框架如下所示：

class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};*/
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
/*以Geometry为基类，构建出Rect（矩形，数据成员为长和宽）和Circle（圆，数据成员为半径）两个类，重写getArea()方法，
其他方法根据需要自拟。*/
class Rect:public Geometry
{
private:
    double length,width;
public:
    Rect(){}
    Rect(double length0,double width0):length(length0),width(width0){}
    double getArea()
    {
        return length*width;
    }
};
class Circle:public Geometry
{
private:
    double radius;
public:
    Circle(){}
    Circle(double radius0):radius(radius0){}
    double getArea()
    {
        return 3.14*radius*radius;
    }
};
/*写一个TotalArea类，该类结构如下：

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)；//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向
   一个子类图形，n为数组的大小

};*/
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double max_area=0;
        for(int i=1;i<=n;i++)
        {
            if(t[i-1]->getArea()>max_area)
                max_area=t[i-1]->getArea();
        }
        cout<<"最大面积="<<double(int(max_area*100+0.5))/100<<endl;
    }
};
/*
生成上述四个类并编写主函数，结果保留两位小数。

输入

第一行表示测试次数。从第二行开始，每个测试用例占一行，每行数据意义如下：图形类型（1为Rect(矩形)，2为Circle(圆)）、
基本信息（Rect是长和宽，Circle是半径）。

输出

最大图形的面积
样例输入

3
1 3 4
2 5
2 6
样例输出

最大面积=113.04
提示*/
int main()
{
    int t;
    cin>>t;
    Geometry** p;
    p=new Geometry*[t];
    for(int i=1;i<=t;i++)
    {
        int type;
        cin>>type;
        switch(type)
        {
        case 1:
            {
                double length,width;
                cin>>length>>width;
                Rect a(length,width);
                p[i-1]=&a;
                break;
            }
        case 2:
            {
                double radius;
                cin>>radius;
                Circle a(radius);
                p[i-1]=&a;
                break;
            }
        }
    }
    TotalArea b;
    b.computerTotalArea(p,t);
}

------------------------------------------------------
2018151020:Problem1119:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class BaseAccount
{
protected:
    string name,account;
    double balance;
public:
    BaseAccount(string na,string ac,double ba):name(na),account(ac),balance(ba){}
    void deposit(double money)
    {
        balance+=money;
    }
    virtual void withdraw(double takeout)
    {
        if(takeout>balance)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        else
        {
            balance-=takeout;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
    virtual ~BaseAccount(){}
};
class Baseplus:public BaseAccount
{
protected:
    double limit,limit_sum;
public:
    Baseplus(string na,string ac,double ba):BaseAccount(na,ac,ba)
    {
        limit = 5000;
        limit_sum = 0;
    }
    void withdraw(double takeout)
    {
        if(takeout>(limit-limit_sum)+balance)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        else
        {
            if(takeout>balance)
            {
                takeout-=balance;
                balance = 0;
                limit_sum+=takeout;
            }
            else
            {
                balance-=takeout;
            }
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
    ~Baseplus(){}
};
int main()
{
    int t;
    cin>>t;
    string na,ac;
    double money,m1,t1,m2,t2;
    while(t--)
    {
        BaseAccount *K;
        cin>>na>>ac>>money
            >>m1>>t1>>m2>>t2;
        if(ac[1]=='A')
        {
            BaseAccount *BA = new BaseAccount(na,ac,money);
            K = BA;
        }
        else if(ac[1]=='P')
        {
            Baseplus *BP = new Baseplus(na,ac,money);
            K = BP;
        }
        K->deposit(m1);
        K->withdraw(t1);
        K->deposit(m2);
        K->withdraw(t2);
        K->display();
        delete K;
    }

    return 0;
}

------------------------------------------------------
2018152007:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{

public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};
class Rect:public Geometry
{
private:
    int a,b;
public:
    Rect(int A,int B):a(A),b(B){}
    double getArea()
    {
        return a*b;
    }
    ~Rect(){}
};
class Circle:public Geometry
{
private:
    int r;
public:
    Circle(int R):r(R){}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle(){}
};
class TotalArea{

public:
    TotalArea(){}
   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
    {

        int a;
        double b=0;
        for(a=0;a<n;a++)
        {
            if(t[a]->getArea()>b)
            {
                b=t[a]->getArea();
            }
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<b<<endl;
    }

};


int main()
{
    int time,a;
    cin>>time;
    Geometry **t=new Geometry*[time];
    for(a=0;a<time;a++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            int chang,kuan;
            cin>>chang>>kuan;
            t[a]=new Rect(chang,kuan);
        }
        else
        {
            int radiu;
            cin>>radiu;
            t[a]=new Circle(radiu);
        }
    }
    TotalArea t1;
    t1.computerTotalArea(t,time);
    for(a=0;a<time;a++)
        delete t[a];
    delete []t;
    return 0;
}

------------------------------------------------------
2016150076:Problem1235:编译错误
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

以Geometry为基类，构建出Rect（矩形，数据成员为长和宽）和Circle（圆，数据成员为半径）两个类，重写getArea()方法，其他方法根据需要自拟。

写一个TotalArea类，该类结构如下：

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)；//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小

};

int main()
{
	int n;
	cin>>n;
	
	Geometry **t=new Geometry *[n];
	for(int i=0;i<n;i++)
	{
		cin>>type;
		if(type==1)
		{
			cin>>a>>b;
			*t=new Rect(a,b);
		}
		
		else
		{
			cin>>r;
			*t=new Circle(r);
		}
	}
}
------------------------------------------------------
2018151005:Problem1235:正确
#include<iostream>
#include<string>
#include<cstring>
#include<iomanip>
#include<cstdio>
using namespace std;
/*题目描述

请编写程序，从图形数组中找出最大面积。基类框架如下所示：

class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};*/
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};
/*以Geometry为基类，构建出Rect（矩形，数据成员为长和宽）和Circle（圆，数据成员为半径）两个类，重写getArea()方法，
其他方法根据需要自拟。*/
class Rect:public Geometry
{
private:
    double length,width;
public:
    Rect(){}
    Rect(double length0,double width0):length(length0),width(width0){}
    double getArea()
    {
        return length*width;
    }
};
class Circle:public Geometry
{
private:
    double radius;
public:
    Circle(){}
    Circle(double radius0):radius(radius0){}
    double getArea()
    {
        return 3.14*radius*radius;
    }
};
/*写一个TotalArea类，该类结构如下：

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)；//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向
   一个子类图形，n为数组的大小

};*/
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double max_area=0;
        for(int i=1;i<=n;i++)
        {
            if(t[i-1]->getArea()>max_area)
                max_area=t[i-1]->getArea();
        }
        printf("最大面积=%.2lf\n",max_area);
    }
};
/*
生成上述四个类并编写主函数，结果保留两位小数。

输入

第一行表示测试次数。从第二行开始，每个测试用例占一行，每行数据意义如下：图形类型（1为Rect(矩形)，2为Circle(圆)）、
基本信息（Rect是长和宽，Circle是半径）。

输出

最大图形的面积
样例输入

3
1 3 4
2 5
2 6
样例输出

最大面积=113.04
提示*/
int main()
{
    int t;
    cin>>t;
    Geometry** p;
    p=new Geometry*[t];
    for(int i=1;i<=t;i++)
    {
        int type;
        cin>>type;
        switch(type)
        {
        case 1:
            {
                double length,width;
                cin>>length>>width;
                Rect a(length,width);
                p[i-1]=&a;
                break;
            }
        case 2:
            {
                double radius;
                cin>>radius;
                Circle a(radius);
                p[i-1]=&a;
                break;
            }
        }
    }
    TotalArea b;
    b.computerTotalArea(p,t);
}

------------------------------------------------------
2018151020:Problem1235:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual ~Geometry(){}
};
class Rect:public Geometry
{
protected:
    double length,width;
public:
    Rect(double l,double w):length(l),width(w){}
    double getArea()
    {
        return length*width;
    }
    ~Rect(){}
};
class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(double _r):r(_r){}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle(){}
};
class TotalArea
{

public:
    static void computerTotalArea(Geometry** t,int n)
    {
        double Max=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>Max)
                Max = t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<Max<<endl;
    }
} ;
int main()
{
    int t;
    cin>>t;
    Geometry **G = new Geometry *[t];
    for(int i=0;i<t;i++)
    {
        int k;
        cin>>k;
        if(k==1)
        {
            double l,w;
            cin>>l>>w;
            G[i] = new Rect(l,w);
        }
        else if(k==2)
        {
            double r;
            cin>>r;
            G[i] = new Circle(r);
        }
    }
    TotalArea::computerTotalArea(G,t);
    for(int i=0;i<t;i++)
        delete G[i];
    delete G;
    return 0;
}

------------------------------------------------------
2018152007:Problem1129:正确
#include <iostream>

using namespace std;
class putong
{
protected:
    string ID;
    string CName;
    int balance;
public:
    putong(string i,string c,int b):ID(i),CName(c),balance(b){}
    int save(int a)
    {
        if(a<0)
            return -1;
        else
            balance=balance+a;
            return 1;
    }
    int take(int c)
    {
        if(c<0)
        {
            return -1;
        }
        else
        {
             if(balance>c)
            {
                balance=balance-c;
                return 1;
            }
            else
                return -1;
        }

    }
    virtual int transfer(int a){};
    virtual int over(int a){};
    virtual void info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<endl;
    }
    virtual ~putong(){}
};
class jiaotong:public putong
{
private:
    int Tcounter;
public:
    jiaotong(string i,string c,int b,int t):putong(i,c,b)
    {
        Tcounter=t;
    }
    int transfer(int c)
    {
        if(balance>c)
        {
            balance=balance-c;
            Tcounter=Tcounter+c;
            return 1;
        }
        else
            return -1;
    }
    void info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<'-'<<Tcounter<<endl;
    }
    ~jiaotong(){}
};
class guibin:public putong
{
private:
    int Credit;
public:
    guibin(string i,string c,int b,int C):putong(i,c,b)
    {
        Credit=C;
    }
    int over(int c)
    {
        if(balance+Credit<c)
        {
            return -1;
        }
        else
        {
            if(balance>c)
            {
                balance=balance-c;
            }
            else
            {

                Credit=Credit-(c-balance);
                balance=0;
            }
        }
    }
    void info()
    {
        cout<<ID<<'-'<<CName<<'-'<<balance<<'-'<<Credit<<endl;
    }
    ~guibin(){}
};
void show(putong &pt)
{
    pt.info();
}
int main()
{
    string I1,I2,I3,c1,c2,c3;
    int b1,b2,b3,t,C;
    cin>>I1>>c1>>b1;
    cin>>I2>>c2>>b2>>t;
    cin>>I3>>c3>>b3>>C;
    putong *p1=new putong(I1,c1,b1);
    putong *p2;
    jiaotong *j2=new jiaotong(I2,c2,b2,t);
    p2=j2;
    putong *p3;
    putong *g3=new guibin(I3,c3,b3,C);
    p3=g3;
    int d1,d2,d3,d4,e1,e2,e3,e4,f1,f2,f3,f4,g;
    cin>>d1>>d2>>d3>>d4;
    cin>>e1>>e2>>e3>>e4;
    cin>>f1>>f2>>f3>>f4;
    g=p1->save(d1);
    g=p1->save(d2);
    g=p1->take(d3);
    g=p1->take(d4);
    g=p2->save(e1);
    g=p2->take(e2);
    g=p2->transfer(e3);
    g=p2->transfer(e4);
    g=p3->save(f1);
    g=p3->take(f2);
    g=p3->over(f3);
    g=p3->over(f4);
    show(*p1);
    show(*p2);
    show(*p3);
    delete p1;
    delete p2;
    delete p3;
    return 0;
}

------------------------------------------------------
2018151020:Problem1234:正确
#include <iostream>
#include <iomanip>
#include <string>
#include <math.h>
using namespace std;
class Group
{

public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
    virtual ~Group(){}
};
class GroupA:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~GroupA(){}
};
class GroupB:public Group
{
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x||y)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
    ~GroupB(){}
};
class GroupC:public Group
{
    int add(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x||y)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            //cout<<pow(10,time)<<endl;
            //cout<<"x_s = "<<x_s<<"  y_s =  "<<y_s<<"  sum=  "<<sum<<endl;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
    int sub(int x, int y)
    {
        int time=0,sum=0,x_s,y_s;
        while(x||y)
        {
            x_s = x%10;
            y_s = y%10;
            int num=(x_s+10-y_s)%10;
            double ch=pow(10,time);
            sum += (int)ch*num;
            x = x/10;
            y = y/10;
            time++;
        }
        return sum;
    }
    ~GroupC(){}
};
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *P;
        int k,x,y;
        char order;
        cin>>k>>x>>order>>y;
        if(k==1)
        {
            GroupA *A = new GroupA;
            P = A;
        }
        else if(k==2)
        {
            GroupB *B = new GroupB;
            P = B;
        }
        else if(k==3)
        {
            GroupC *C = new GroupC;
            P = C;
        }
        if(order=='+')
            cout<<P->add(x,y)<<endl;
        else if(order=='-')
            cout<<P->sub(x,y)<<endl;
            delete P;
    }
    return 0;
}

------------------------------------------------------
2018152051:Problem1235:正确
#include<iostream>
#include<algorithm>
#include<iomanip>
using namespace std;
class Geometry
{
public:
	virtual double getArea()=0; 
};
class CRect:public Geometry
{
	int x;
	int y;
public:
	CRect(int x1 = 0 , int y1 = 0)
	{
		x = x1;
		y = y1;
	}
	double getArea()
	{
		return (x*y); 
	}
};
class CCircle:public Geometry
{
	int radius;
public:
	CCircle(int r = 0)
	{
		radius = r;
	}
	double getArea()
	{
		return (3.14*radius*radius);
	}
};
class TotalArea
{
	/*Geometry** t;
	int n;*/
public:
	static void computerTotalArea(Geometry** T,int N)
	{
		double a[100];
		for(int i=0;i<N;i++)
		{
			a[i] = T[i]->getArea();
		}
		sort(a,a+N);
		cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<T[N-1]->getArea()<<endl;
	}
};
int main()
{
	int n,type,i,x,y,r;
	cin>>n;
	Geometry **t = new Geometry *[n];
	for(i=0;i<n;i++)
	{
		cin>>type;
		if(type==1)
		{
			cin>>x>>y;
			t[i] = new CRect(x,y);
		}
		else if(type==2)
		{
			cin>>r;
			t[i] = new CCircle(r);
		}
	}
	TotalArea::computerTotalArea(t,n);
}
------------------------------------------------------
2016150201:Problem1235:编译错误
#include<iostream>
#define PI 3.14
using namespace std;
class Geometry{
	public:
		virtual double getArea()=0;
};
class Rect:public Geometry{
	int a,b;
public:	
	Rect(int aa,int bb):a(aa),b(bb){
	}
	double virtual getArea(){
		return a*b;
	}
};
class Circle:public Geometry{
	int r;
public:	
	Circle(int rr):r(rr){
	}
	double virtual getArea(){
		return PI*r*r;
	}
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n);
};
void computerTotalArea(Geometry** t,int n){
	double d=0;
	for(int i=0;i<n;i++){
	if(*t[i].getArea()>d)
	d=*t[i].getArea();	
	}
	cout<<d<<endl;
}
int main(){
	int t,id,a,b,r;
	cin>>t;
	Geometry *g;
	cin>>id;
	while(t--){
		if(id==1){
			cin>>a>>b;
			Rect r(a,b);
			g=&r;
		}
		else if(id==2){
			cin>>r;
			Circle c(r);
			g=&c;
		}
	}
	TotalArea t;
	t.computerTotalArea(*g,t);
}
------------------------------------------------------
2018192024:Problem1129:正确
#include <iostream>

using namespace std;

class normalCard
{
protected:
    int id,Counter;
    string CName;
public:
    normalCard(){}
    void initial(int i,int c,string n){id=i;Counter=c;CName=n;}
    int take(int money)
    {
        if(money<0)
            return -1;
        if(Counter<money)
            return -1;
        Counter-=money;
        return 1;
    }
    int save(int money)
    {
        if(money<0)
            return -1;
        Counter+=money;
        return 1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<CName<<"-"<<Counter<<endl;
    }
    friend void show(normalCard &obj);
};
class transCard:public normalCard
{
    int Tcounter;
public:
    void initial(int i,int c,string n,int t){id=i;Counter=c;CName=n;Tcounter=t;}
    int transfer(int money)
    {
        if(money<0)
            return -1;
        if(money>Counter)
            return -1;
        Counter-=money;
        Tcounter+=money;
        return 1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
    friend void show(normalCard &obj);
};
class vipCard:public normalCard
{
    int Credict;
public:
    void initial(int i,int c,string n,int t){id=i;Counter=c;CName=n;Credict=t;}
    int over(int money)
    {
        if(money<0)
            return -1;
        if(money>Counter+Credict)
            return -1;
        if(money>Counter)
        {
            Credict-=money-Counter;
            Counter=0;
        }
        else
            Counter-=money;
        return 1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<CName<<"-"<<Counter<<"-"<<Credict<<endl;
    }
    friend void show(normalCard &obj);
};
void show(normalCard &obj)
{
    obj.info();
}

int main()
{
    int i1,c1,i2,c2,t2,i3,c3,t3;
    string n1,n2,n3;
    cin>>i1>>n1>>c1;
    normalCard card1;
    card1.initial(i1,c1,n1);
    cin>>i2>>n2>>c2>>t2;
    transCard card2;
    card2.initial(i2,c2,n2,t2);
    cin>>i3>>n3>>c3>>t3;
    vipCard card3;
    card3.initial(i3,c3,n3,t3);
    int m1,m2,m3,m4;
    cin>>m1>>m2>>m3>>m4;
    card1.save(m1);
    card1.take(m2);
    card1.save(m3);
    card1.take(m4);
    show(card1);
    cin>>m1>>m2>>m3>>m4;
    card2.save(m1);
    card2.take(m2);
    card2.transfer(m3);
    card2.transfer(m4);
    show(card2);
    cin>>m1>>m2>>m3>>m4;
    card3.save(m1);
    card3.take(m2);
    card3.over(m3);
    card3.over(m4);
    show(card3);
   return 0;
}

------------------------------------------------------
2018152106:Problem1129:正确
#include<iostream>
using namespace std;

class NCard
{
protected:
	string ID;
	char CName;
	int Counter;
public:
	NCard(){}
	NCard(string id,char name,int ba):ID(id),CName(name),Counter(ba){}
	virtual void initial(string id,char name,int ba)
	{
		ID=id;
		CName=name;
		Counter=ba;
	}
	int save(int num)
	{
		if(num>0)
		{
			Counter+=num;
			return 1;
		}
		else
			return -1;
	}
	int take(int num)
	{
		if(num>0&&num<=Counter)
		{
			Counter-=num;
			return 1;
		}
		else 
			return -1;
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
};

class TCard:public NCard
{
	int Tcounter;
public:
	TCard(){}
	TCard(string id,char name,int ba,int t):NCard(id,name,ba),Tcounter(t){}
	void initial(string id,char name,int ba,int t)
	{
		ID=id;
		CName=name;
		Counter=ba;
		Tcounter=t;
	}
	int transfer(int num)
	{
		if(num>0&&num<=Counter)
		{
			Counter-=num;
			Tcounter+=num;
			return 1;
		}
		else 
			return -1;
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
};

class VIPCard:public NCard
{
	int Credit;
public:
	VIPCard(){}
	VIPCard(string id,char name,int ba,int t):NCard(id,name,ba),Credit(t){}
	void initial(string id,char name,int ba,int t)
	{
		ID=id;
		CName=name;
		Counter=ba;
		Credit=t;
	}
	int over(int num)
	{
		if(num>0&&num<=Counter+Credit)
		{
			Credit-=(num-Counter);
			Counter=0;
			return 1;
		}
		else 
			return -1;
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
	}
};

void show(NCard &obj)
{
	obj.info();
}

int main()
{
	string id;
	char n;
	int bal,t,x1,x2,y1,y2;
	NCard a;
	TCard b;
	VIPCard c;
	
	cin>>id>>n>>bal;
	a.initial(id,n,bal);
	
	cin>>id>>n>>bal>>t;
	b.initial(id,n,bal,t);
	
	cin>>id>>n>>bal>>t;
	c.initial(id,n,bal,t);
	
	cin>>x1>>x2>>y1>>y2;
	a.save(x1);
	a.save(x2);
	a.take(y1);
	a.take(y2);
	
	cin>>x1>>x2>>y1>>y2;
	b.save(x1);
	b.take(x2);
	b.transfer(y1);
	b.transfer(y2);
	
	cin>>x1>>x2>>y1>>y2;
	c.save(x1);
	c.take(x2);
	c.over(y1);
	c.over(y2);
	
	show(a);
	show(b);
	show(c);
	return 0;
}
------------------------------------------------------
2018152108:Problem1129:正确
#include<iostream>
using namespace std;

class card
{
protected:
	string id,name;
	int counter;
public:
	card(){}
	card(string a,string b,int c):id(a),name(b),counter(c){}
	virtual void initial(string a,string b,int c)
	{
		id = a;
		name = b;
		counter = c;
	}
	int save(int m)
	{
		if(m<0)
			return -1;
		else 
		{
			counter+=m;
			return 1;
		}
	}
	int take(int m)
	{
		if(m<0||m>counter)
			return -1;
		else
		{
			counter-=m;
			return 1;
		}
	}
	virtual void info()
	{
		cout<<id<<"-"<<name<<"-"<<counter<<endl;
	}
};

class Tcard:public card
{
	int Tcounter;
public:
	Tcard(){}
	Tcard(string a,string b,int c,int d):card(a,b,c),Tcounter(d){}
	void initial(string a,string b,int c,int d)
	{
		id = a;
		name = b;
		counter = c;
		Tcounter = d;
	}
	int transfer(int m)
	{
		if(m<0||m>counter)
			return -1;
		else
		{
			counter-=m;
			Tcounter+=m;
			return 1;
		}
	}
	void info()
	{
		cout<<id<<"-"<<name<<"-"<<counter<<"-"<<Tcounter<<endl;
	}
};

class VIPcard:public card
{
	int credit;
public:
	VIPcard(){}
	VIPcard(string a,string b,int c,int d):card(a,b,c),credit(d){}
	void initial(string a,string b,int c,int d)
	{
		id = a;
		name = b;
		counter = c;
		credit = d;
	}
	int over(int m)
	{
		if(m<0||m>counter+credit)
			return -1;
		else
		{
			credit-=(m-counter);
			counter=0;
			return 1;
		}
	}
	void info()
	{
		cout<<id<<"-"<<name<<"-"<<counter<<"-"<<credit<<endl;
	}
};

void show(card &obj)
{
	obj.info();
}

int main()
{
	string idnum,xm;
	int balance,tbalance,limit;
	card c1;
	Tcard c2;
	VIPcard c3;
	
	cin>>idnum>>xm>>balance;
	c1.initial(idnum,xm,balance);
	
	cin>>idnum>>xm>>balance>>tbalance;
	c2.initial(idnum,xm,balance,tbalance);
	
	cin>>idnum>>xm>>balance>>limit;
	c3.initial(idnum,xm,balance,limit);
	
	int n1,n2,n3,n4;
	cin>>n1>>n2>>n3>>n4;
	c1.save(n1);
	c1.save(n2);
	c1.take(n3);
	c1.take(n4);
	show(c1);
	
	cin>>n1>>n2>>n3>>n4;
	c2.save(n1);
	c2.take(n2);
	c2.transfer(n3);
	c2.transfer(n4);
	show(c2);
	
	cin>>n1>>n2>>n3>>n4;
	c3.save(n1);
	c3.take(n2);
	c3.over(n3);
	c3.over(n4);
	show(c3);
	return 0;
}

------------------------------------------------------
2016150076:Problem1235:编译错误
class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

以Geometry为基类，构建出Rect（矩形，数据成员为长和宽）和Circle（圆，数据成员为半径）两个类，重写getArea()方法，其他方法根据需要自拟。

写一个TotalArea类，该类结构如下：

class TotalArea{

public:

   static void computerTotalArea(Geometry** t,int n)；//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小

};

int main()
{
	int n;
	cin>>n;
	
	Geometry **t=new Geometry *[n];
	for(int i=0;i<n;i++)
	{
		cin>>type;
		if(type==1)
		{
			cin>>a>>b;
			*t[i]=new Rect(a,b);
		}
		
		else
		{
			cin>>r;
			*t[i]=new Circle(r);
		}
	}
}
------------------------------------------------------
2018192046:Problem1129:正确
#include<iostream>
using namespace std;
//------类声明------
class normal
{
protected:
    string ID,CName;
    int Counter;
public:
    normal(string _ID="0",string _CName="0",int _Counter=0):ID(_ID),CName(_CName),Counter(_Counter) {}
    void initial(string _ID,string _CName,int _Counter);
    int save(int a);
    int take(int a);
    virtual void info();
};
class Traffic:public normal
{
    int Tcounter;
public:
    Traffic(string _ID="0",string _CName="0",int _Counter=0,int _Tcounter=0):normal(_ID,_CName,_Counter),Tcounter(_Tcounter) {}
    void initial(string _ID,string _CName,int _Counter,int _Tcounter);
    int transfer(int a);
    void info();
};
class VIP:public normal
{
    int Credit;
public:
    VIP(string _ID="0",string _CName="0",int _Counter=0,int _Credit=0):normal(_ID,_CName,_Counter),Credit(_Credit) {}
    void initial(string _ID,string _CName,int _Counter,int _Credit);
    int over(int a);
    void info();
};
//------类实现------
void normal::initial(string _ID,string _CName,int _Counter)
{
    ID=_ID;
    CName=_CName;
    Counter=_Counter;
}
int normal::save(int a)
{
    if(a<0)
        return -1;
    Counter+=a;
    return 1;
}
int normal::take(int a)
{
    if(a<0||Counter<a)
        return -1;
    Counter-=a;
    return 1;
}
void normal::info()
{
    cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
}
void Traffic::initial(string _ID,string _CName,int _Counter,int _Tcounter)
{
    ID=_ID;
    CName=_CName;
    Counter=_Counter;
    Tcounter=_Tcounter;
}
int Traffic::transfer(int a)
{
    if(a>Counter||a<0)
        return -1;
    Counter-=a;
    Tcounter+=a;
    return 1;
}
void Traffic::info()
{
    cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
}
void VIP::initial(string _ID,string _CName,int _Counter,int _Credit)
{
    ID=_ID;
    CName=_CName;
    Counter=_Counter;
    Credit=_Credit;
}
int VIP::over(int a)
{
    if(a<0||a>(Credit+Counter))
        return -1;
    else
    {
        if(Counter<a)
        {
            a-=Counter;
            Counter=0;
            Credit-=a;
        }
        else
        {
            Counter-=a;
        }
    }
    return 1;
}
void VIP::info()
{
    cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
}
//------主函数------
void show(normal *obj)
{
    obj->info();
}
int main()
{
    normal P1;
    Traffic P2;
    VIP P3;
    string ID,name;
    int counter;
    cin>>ID>>name>>counter;
    P1.initial(ID,name,counter);
    int Tcounter;
    cin>>ID>>name>>counter>>Tcounter;
    P2.initial(ID,name,counter,Tcounter);
    int credit;
    cin>>ID>>name>>counter>>credit;
    P3.initial(ID,name,counter,credit);
    int a,b,c,d;
    cin>>a>>b>>c>>d;
    P1.save(a),P1.save(b),P1.take(c),P1.take(d);
    cin>>a>>b>>c>>d;
    P2.save(a),P2.take(b),P2.transfer(c),P2.transfer(d);
    cin>>a>>b>>c>>d;
    P3.save(a),P3.take(b),P3.over(c),P3.over(d);
    normal *_P;
    _P=&P1;
    show(_P);
    _P=&P2;
    show(_P);
    _P=&P3;
    show(_P);
}

------------------------------------------------------
2016150202:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;
class BA{
	protected:
		string name,account;
		int balance;
		public:
			BA(string n,string a,int b):name(n),account(a),balance(b){}
			~BA(){}
			void deposit(int m)
			{
				balance=balance+m;
			}
			void withdraw(int m)
			{
				if(m>balance)
				cout<<"insufficient"<<endl;
				else
				balance=balance-m;
				
			}
		     virtual void display()
			{
				cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
			}
};

class BP:public BA
{
	protected:
		int limit;
		int limit_sum;
		public:
		
			BP(string n,string a,int b):BA(n,a,b){limit=5000;}
			~BP(){}
			
			void deposit(int m)//cunkuan
			{
			
				balance=balance+m;
				
			}
		
			void withdraw(int m)//qukuan
			{
				
		    
		    	if(m>balance+limit)
		    	cout<<"insufficient"<<endl;
		    	
		    	else 
		    	{
		    	
				balance=balance-m;
		    	if(balance<0)
		    	{
				
	        	limit=limit+(balance-m);
	        	limit_sum=limit+5000;
	        	balance=0;
		        }
		        else
		        limit_sum=5000;
				}
		    
			  }   
		
		
			
			 void display()
			{
				cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit_sum<<endl;
			}
			
};
int main()
{
	string name,account;
	int balance;
	int t;
	int m1,m2,m3,m4;
	BA *pv;
	cin>>t;
	while(t--)
	{
		cin>>name>>account;
		
			if(account[1]=='A')
			{
				cin>>balance;
				BA aa(name,account,balance);
				pv=&aa;
				cin>>m1;
				pv->deposit(m1);
				cin>>m2;
				pv->withdraw(m2);
				cin>>m3;
				pv->deposit(m3);
				cin>>m4;
				pv->withdraw(m4);
				pv->display();
				
			}
			else if(account[1]='P')
			{
				cin>>balance;
				BP bb(name,account,balance);
				
				
				cin>>m1;
				bb.deposit(m1);
				cin>>m2;
				bb.withdraw(m2);
				cin>>m3;
				bb.deposit(m3);
				cin>>m4;
				bb.withdraw(m4);
				bb.display();
			}
			else 
			cout<<"ushdsufgsdjf skfhjksdfh jsdfhks jfh"<<endl;
		}
		
		
}



------------------------------------------------------
2018192013:Problem1129:正确
#include <iostream>
using namespace std;

class NCard
{
protected:
    int ID,Counter;
    string CName;
public:
    NCard(int id=0,string n="",int c=0):ID(id),CName(n),Counter(c){}
    int save(int a)
    {
        if(a>0)
            Counter+=a;
        else
            return -1;
        return 1;
    }
    int take(int a)
    {
        if(a>0&&a<=Counter)
            Counter-=a;
        else
            return -1;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};

class TCard:public NCard
{
    int Tcounter;
public:
    TCard(int id=0,string n="",int c=0,int tc=0):NCard(id,n,c),Tcounter(tc){}
    int transfer(int a)
    {
        if(a>0&&a<=Counter)
        {
            Counter-=a;
            Tcounter+=a;
        }
        else
            return -1;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};

class VIPCard:public NCard
{
    int Credit;
public:
    VIPCard(int id=0,string n="",int c=0,int cre=0):NCard(id,n,c),Credit(cre){}
    int over(int a)
    {
        if(a>Counter&&a<=Counter+Credit)
        {
            Credit-=(a-Counter);
            Counter=0;
        }
        else
            return -1;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};

void show(NCard &obj)
{
    obj.info();
}

int main()
{
    int id1,id2,id3,counter1,counter2,counter3,Tcounter,credit;
    string name1,name2,name3;
    NCard c1;
    TCard c2;
    VIPCard c3;
    cin>>id1>>name1>>counter1;
    cin>>id2>>name2>>counter2>>Tcounter;
    cin>>id3>>name3>>counter3>>credit;
    c1=NCard(id1,name1,counter1);
    c2=TCard(id2,name2,counter2,Tcounter);
    c3=VIPCard(id3,name3,counter3,credit);

    int a1,a2,a3,a4;
    cin>>a1>>a2>>a3>>a4;
    c1.save(a1);
    c1.save(a2);
    c1.take(a3);
    c1.take(a4);
    cin>>a1>>a2>>a3>>a4;
    c2.save(a1);
    c2.take(a2);
    c2.transfer(a3);
    c2.transfer(a4);
    cin>>a1>>a2>>a3>>a4;
    c3.save(a1);
    c3.take(a2);
    c3.over(a3);
    c3.over(a4);

    show(c1);
    show(c2);
    show(c3);

    return 0;
}

------------------------------------------------------
2018151058:Problem1234:答案错误
#include <iostream>
#include<iomanip>
#include<cmath>
using namespace std;
class Group

{

public:

    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
};
class A:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class B:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len1=0,len2=0,len,i;
        int a[15],b[15],c[15];
        for(i=0; i<15; i++)
        {
            c[i]=0;
            a[i]=-1;
            b[i]=-1;

        }
        i=0;
        while(x/10!=0)
        {
            a[i]=x%10;
            x=x/10;
            len1++;
        }
        i=0;
        while(y/10!=0)
        {
            a[i]=y%10;
            y=y/10;
            len2++;
        }
        len=len2;
        for(i=0; i<len; i++)
        {
            if(a[i]<b[i])
                c[i]=a[i]+10-b[i];
            else
                c[i]=c[i]+a[i];
        }
        for(i=len; i<len1; i++)
        {
            c[i]=c[i]+a[i];
        }
        int result=0;
        for(i=0; i<len1; i++)
        {
            result+=c[i]*pow(10,i);
        }
        return result;
    }
};
class C:public Group
{
public:
    int add(int x, int y)
    {
        int len1=0,len2=0,len,i;
        int a[15],b[15],c[15];
        for(i=0; i<15; i++)
        {
            c[i]=0;
            a[i]=-1;
            b[i]=-1;

        }
        i=0;
        while(x/10!=0)
        {
            a[i]=x%10;
            x=x/10;
            len1++;
        }
        i=0;
        while(y/10!=0)
        {
            a[i]=y%10;
            y=y/10;
            len2++;
        }
        len=len2;
        for(i=0; i<len; i++)
        {
            c[i]=(a[i]+b[i])%10;
        }
        for(i=len; i<len1; i++)
        {
            c[i]=c[i]+a[i];
        }
        int result=0;
        for(i=0; i<len1; i++)
        {
            result+=c[i]*pow(10,i);
        }
        return result;
    }
    int sub(int x,int y)
    {
        int len1=0,len2=0,len,i;
        int a[15],b[15],c[15];
        for(i=0; i<15; i++)
        {
            c[i]=0;
            a[i]=-1;
            b[i]=-1;

        }
        i=0;
        while(x/10!=0)
        {
            a[i]=x%10;
            x=x/10;
            len1++;
        }
        i=0;
        while(y/10!=0)
        {
            a[i]=y%10;
            y=y/10;
            len2++;
        }
        len=len2;
        for(i=0; i<len; i++)
        {
            c[i]=a[i]-b[i];
        }
        for(i=len; i<len1; i++)
        {
            if(a[i]<b[i])
                c[i]=a[i]+10-b[i];
            else
                c[i]=c[i]+a[i];
        }
        int result=0;
        for(i=0; i<len1; i++)
        {
            result+=c[i]*pow(10,i);
        }
        return result;
    }
};
int main()
{
    int t;
    cin>>t;
    for(int i=0; i<t; i++)
    {
        Group *p;
        int type;
        int x,y;
        char a;
        cin>>type;
        if(type==1)
        {
            p=new A;
            cin>>x>>a>>y;
            if(a=='+')
                cout<<p->add(x,y)<<endl;
            if(a=='-')
                cout<<p->sub(x,y)<<endl;
        }
        if(type==2)
        {
            p=new B;
            cin>>x>>a>>y;
            if(a=='+')
                cout<<p->add(x,y)<<endl;
            if(a=='-')
                cout<<p->sub(x,y)<<endl;
        }
        if(type==3)
        {
            p=new C;
            cin>>x>>a>>y;
            if(a=='+')
                cout<<p->add(x,y)<<endl;;
            if(a=='-')
                cout<<p->sub(x,y)<<endl;
        }
        delete p;

    }

    return 0;
}

------------------------------------------------------
2018151085:Problem1119:正确
#include<bits/stdc++.h>
using namespace std;

class BaseAccount
{ 
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(string Name,string Account,int Balance):name(Name),account(Account),balance(Balance){}
	virtual void deposit(int n)//存款 
	{
		balance=balance+n;
	}
	
	virtual void withdraw(int n)//取款 
	{
		if(n>balance)
			cout<<"insufficient"<<endl;
		else
		{
			balance-=n;
		}
	}
	
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	
};

class BasePuls:public BaseAccount
{ 
protected:
	int limit;
	int limit_sum;
public:
	BasePuls(string Name,string Account,int Balance):BaseAccount(Name,Account,Balance),limit(5000),limit_sum(0){}
	virtual void deposit(int n)//存款
	{
		balance=balance+n;
	}
	
	virtual void withdraw(int n)//取款 
	{
		if(n>balance+limit)
			cout<<"insufficient"<<endl;
		else
		{
			balance-=n;
			if(balance<0)
			{
				limit_sum=limit_sum+(-balance);
				balance=0;
			}
		}
	}
	
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
	}
};

int main()
{
	int t;
	cin>>t;
	
	BaseAccount *p;
	string name,account;
	int balance,n1,n2,n3,n4;
	while(t--)
	{
		cin>>name>>account;
		
		if(account[1]=='A')
		{
			cin>>balance;
			p=new BaseAccount(name,account,balance);
			cin>>n1>>n2>>n3>>n4;
			p->deposit(n1);
			p->withdraw(n2);
			p->deposit(n3);
			p->withdraw(n4);
			p->display();
			delete p;
		}
		
		else 
		{
			cin>>balance;
			p=new BasePuls(name,account,balance);
			cin>>n1>>n2>>n3>>n4;
			p->deposit(n1);
			p->withdraw(n2);
			p->deposit(n3);
			p->withdraw(n4);
			p->display();
			delete p;
		}
	}
		
}
------------------------------------------------------
2017163058:Problem1235:正确
#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea() = 0;
    virtual ~Geometry(){}
};
class Rect:public Geometry
{
private:
    double length, width;
public:
    Rect(double l, double w):length(l), width(w){}
    double getArea()
    {
        return length * width;
    }
};
class Circle:public Geometry
{
private:
    double radius;
public:
    Circle(double r):radius(r){}
    double getArea()
    {
        return 3.14*radius*radius;
    }
};
class TotalArea
{
public:
    static void computeTotalArea(Geometry **t, int n)
    {
        double max_area = 0;
        for(int i=0; i<n; i++)
        {
            if(max_area < t[i]->getArea())
            {
                max_area = t[i]->getArea();
            }
        }
        cout<<fixed<<setprecision(2)<<"最大面积="<<max_area<<endl;
    }
};
int main()
{
//    freopen("C:\\Users\\acer\\Desktop\\in.txt", "r", stdin);
    double length, width, radius;
    int t, sign;
    cin>>t;
    Geometry **p = new Geometry*[t];
    for(int i=0;i<t;i++)
    {
        cin>>sign;
        if(sign == 1)
        {
            cin>>length>>width;
            Rect *rect = new Rect(length, width);
            p[i] = rect;
        }
        else
        {
            cin>>radius;
            Circle *circle = new Circle(radius);
            p[i] = circle;
        }
    }
    TotalArea::computeTotalArea(p, t);
    for(int i=0; i<t; i++)
    {
        delete p[i];
    }
    delete []p;
    return 0;
}

------------------------------------------------------
2017152043:Problem1129:正确
#include<iostream>
using namespace std;

class NCard{
protected:
	int ID;
	char CName;
	int Counter;;
public:
	NCard(){}
	void initial(int id,char cname,int counter);
	bool save(int money);
	bool take(int money);
	virtual void info();
};

void NCard::initial(int id,char cname,int counter)
{
	ID = id;
	CName = cname;
	Counter = counter;
}

bool NCard::save(int money)
{
	if(money <= 0)
		return -1;
	else{
		Counter += money;
		return 1;
	}
}

bool NCard::take(int money)
{
	if(money <= 0)
		return -1;
	else if(money > Counter)
		return -1;
	else{
		Counter -= money;
		return 1;
	}
}

void NCard::info()
{
	cout << ID << "-" << CName << "-" << Counter << endl;
}

class TCard:public NCard{
	int Tcounter;
public:
	TCard(){}
	void initial(int id,char cname,int counter,int tcounter);
	bool transfer(int money)
	{
		if(money <= 0 || money > Counter)
			return -1;
		else{
			Tcounter += money;
			Counter -= money;
			return 1;
		}
	}
	void info();
};

void TCard::initial(int id,char cname,int counter,int tcounter)
{
	ID = id;
	CName = cname;
	Counter = counter;
	Tcounter = tcounter;
}

void TCard::info()
{
	cout << ID << "-" << CName << "-" << Counter << "-" << Tcounter << endl;
}


class VCard:public NCard{
	int Credit;
public:
	VCard(){}
	void initial(int id,char cname,int counter,int credit);
	bool over(int money)
	{
		if(money <= 0 || money > (Counter + Credit))
			return -1;
		else{
			Credit -= money - Counter;
			Counter = 0;
			return 1;
		}
	}
	void info();
};

void VCard::initial(int id,char cname,int counter,int credit)
{
	ID = id;
	CName = cname;
	Counter = counter;
	Credit = credit;
}

void VCard::info()
{
	cout << ID << "-" << CName << "-" << Counter << "-" << Credit << endl;
}


void show(NCard &obj)
{
	obj.info();
}



//主函数
int main(){
	int id;
	char cname;
	int counter;
	int tcounter;
	int credit;
	NCard n;
	TCard t;
	VCard v;
	cin >> id >> cname >> counter;
	n.initial(id,cname,counter);
	cin >> id >> cname >> counter >> tcounter;
	t.initial(id,cname,counter,tcounter);
	cin >> id >> cname >> counter >> credit;
	v.initial(id,cname,counter,credit);
	int in,out;
	cin >> in >> out;
	n.save(in);
	n.take(out);
	cin >> in >> out;
	n.save(in);
	n.take(out);
	cin >> in >> out;
	t.save(in);
	t.take(out);
	cin >> in >> out;
	t.transfer(in);
	t.transfer(out);
	cin >> in >> out;
	v.save(in);
	v.take(out);
	cin >> in >> out;
	v.over(in);
	v.over(out);
	
	show(n);
	show(t);
	show(v);
	
	return 0;
}
------------------------------------------------------
2017081130:Problem1119:答案错误
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    float balance;
public:
    BaseAccount(){};
    BaseAccount(string n,string a,float b):name(n),account(a),balance(b){};
    void deposit(float num)
    {
        balance+=num;
    }
    int withdraw(float num)
    {
        if(num>balance)
        {
            cout<<"insufficient"<<endl;
            return 0;
        }
        else
        {
            balance-=num;
            return 1;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:virtual public BaseAccount
{
    float limit;
    float limit_sum;
public:
    BasePlus(){};
    BasePlus(string n,string a,float b,float l,float lsum):BaseAccount(n,a,b),limit(l),limit_sum(lsum){};
    int withdraw(float num)
    {
        if(num>balance+(limit-limit_sum))
        {
            cout<<"insufficient"<<endl;
            return 0;
        }
        else if(num<balance)
        {
            balance-=num;
            return 1;
        }
        else
        {
            balance=0;
            limit_sum+=(num-balance);
            return 1;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    float balance,dnum,wnum,dnum1,wnum1;
    string name,account;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        BaseAccount a(name,account,balance);
        BasePlus p(name,account,balance,5000,0);
        cin>>dnum>>wnum>>dnum1>>wnum1;
        a.deposit(dnum);
        a.withdraw(wnum);
        a.deposit(dnum1);
        a.withdraw(dnum1);
        a.display();
        p.deposit(dnum);
        p.withdraw(wnum);
        p.deposit(dnum1);
        p.withdraw(wnum1);
        p.display();
    }
}

------------------------------------------------------
2017301020:Problem1129:编译错误
#include <iostream>
#include <cstring>
#include <iomanip>
using namespace std;

class NormalCard{
protected:
    string ID,name;
    double counter;
public:
    NormalCard(){}
    void initial(string ID1,string name1,double counter1);
    bool save(double);
    bool take(double);
    virtual void info();
};

void NormalCard::initial(string ID1,string name1,double counter1){
    ID=ID1;
    name=name1;
    counter=counter1;
}

bool NormalCard::save(double a){
   if(a<0)
        return -1;
   else{
        counter+=a;
        return 1;
   }
}

bool NormalCard::take(double a){
    if(a<0||a>counter)
        return -1;
    else{
        counter-=a;
        return 1;
    }
}

void NormalCard::info(){
    cout<<ID<<"-"<<name<<"-"<<counter<<endl;
}

class TranCard:public NormalCard{
    double tcounter;
public:
    tranCard(){}
    void initial(string ID1,string name1,double counter1,double tcounter1);
    bool Transfer(double a);
    void info();
};

void TranCard::initial(string ID1,string name1,double counter1,double tcounter1){
    ID=ID1;
    name=name1;
    counter=counter1;
    tcounter=tcounter1;
}

bool TranCard::Transfer(double a){
    if(a>counter)
        return -1;
    else{
        counter-=a;
        tcounter+=a;
        return 1;
    }
}

void TranCard::info(){
    cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<tcounter<<endl;
}

class VipCard:public NormalCard{
    double credit,now=0;
public:
    VipCard(){}
    void initial(string ID1,string name1,double counter1,double credit1);
    bool over(double a);
    void info();
};

void VipCard::initial(string ID1,string name1,double counter1,double credit1){
    ID=ID1;
    name=name1;
    counter=counter1;
    credit=credit1;
}

bool VipCard::over(double a){
    if(a>counter+credit)
        return -1;
    else{
        now+=(a-counter);
        counter=0;
        return 1;
    }
}

void VipCard::info(){
    cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<credit-now<<endl;
}

void show(NormalCard &obj){
    obj.info();
}

int main()
{
    string ID,name;
    double balance,tbalance,credit,w1,w2,d1,d2,c1,c2,t1,t2;
    NormalCard a;
    TranCard b;
    VipCard c;
    cin>>ID>>name>>balance;
    a.initial(ID,name,balance);
    cin>>ID>>name>>balance>>tbalance;
    b.initial(ID,name,balance,tbalance);
    cin>>ID>>name>>balance>>credit;
    c.initial(ID,name,balance,credit);
    cin>>d1>>d2>>w1>>w1;
    a.save(d1);
    a.save(d2);
    a.take(w1);
    a.take(w2);
    cin>>d1>>w1>>c1>>c2;
    b.save(d1);
    b.take(w1);
    b.Transfer(c1);
    b.Transfer(c2);
    cin>>d1>>w1>>t1>>t2;
    c.save(d1);
    c.take(w1);
    c.over(t1);
    c.over(t2);
    show(a);
    show(b);
    show(c);
    return 0;
}

------------------------------------------------------
2017301020:Problem1129:正确
#include <iostream>
#include <cstring>
#include <iomanip>
using namespace std;

class NormalCard{
protected:
    string ID,name;
    double counter;
public:
    NormalCard(){}
    void initial(string ID1,string name1,double counter1);
    bool save(double);
    bool take(double);
    virtual void info();
};

void NormalCard::initial(string ID1,string name1,double counter1){
    ID=ID1;
    name=name1;
    counter=counter1;
}

bool NormalCard::save(double a){
   if(a<0)
        return -1;
   else{
        counter+=a;
        return 1;
   }
}

bool NormalCard::take(double a){
    if(a<0||a>counter)
        return -1;
    else{
        counter-=a;
        return 1;
    }
}

void NormalCard::info(){
    cout<<ID<<"-"<<name<<"-"<<counter<<endl;
}

class TranCard:public NormalCard{
    double tcounter;
public:
    TranCard(){}
    void initial(string ID1,string name1,double counter1,double tcounter1);
    bool Transfer(double a);
    void info();
};

void TranCard::initial(string ID1,string name1,double counter1,double tcounter1){
    ID=ID1;
    name=name1;
    counter=counter1;
    tcounter=tcounter1;
}

bool TranCard::Transfer(double a){
    if(a>counter)
        return -1;
    else{
        counter-=a;
        tcounter+=a;
        return 1;
    }
}

void TranCard::info(){
    cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<tcounter<<endl;
}

class VipCard:public NormalCard{
    double credit,now=0;
public:
    VipCard(){}
    void initial(string ID1,string name1,double counter1,double credit1);
    bool over(double a);
    void info();
};

void VipCard::initial(string ID1,string name1,double counter1,double credit1){
    ID=ID1;
    name=name1;
    counter=counter1;
    credit=credit1;
}

bool VipCard::over(double a){
    if(a>counter+credit)
        return -1;
    else{
        now+=(a-counter);
        counter=0;
        return 1;
    }
}

void VipCard::info(){
    cout<<ID<<"-"<<name<<"-"<<counter<<"-"<<credit-now<<endl;
}

void show(NormalCard &obj){
    obj.info();
}

int main()
{
    string ID,name;
    double balance,tbalance,credit,w1,w2,d1,d2,c1,c2,t1,t2;
    NormalCard a;
    TranCard b;
    VipCard c;
    cin>>ID>>name>>balance;
    a.initial(ID,name,balance);
    cin>>ID>>name>>balance>>tbalance;
    b.initial(ID,name,balance,tbalance);
    cin>>ID>>name>>balance>>credit;
    c.initial(ID,name,balance,credit);
    cin>>d1>>d2>>w1>>w1;
    a.save(d1);
    a.save(d2);
    a.take(w1);
    a.take(w2);
    cin>>d1>>w1>>c1>>c2;
    b.save(d1);
    b.take(w1);
    b.Transfer(c1);
    b.Transfer(c2);
    cin>>d1>>w1>>t1>>t2;
    c.save(d1);
    c.take(w1);
    c.over(t1);
    c.over(t2);
    show(a);
    show(b);
    show(c);
    return 0;
}

------------------------------------------------------
2017152043:Problem1234:答案错误
#include<iostream>
using namespace std;

class Group
{
public:
	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
	int add(int x, int y)
	{
		return (x + y);
	}
	int sub(int x,int y)
	{
		return (x - y);
	}
};

class GroupB:public Group{
public:
	int add(int x, int y)
	{
		return (x + y);
	}
	int sub(int x,int y)
	{
		int a,b;
		a = x;
		b = y;
		int temp;
		int sum = 0;
		while(a / 10){
			sum++;
			a /= 10;
		}
		for(int i = 1;i <= sum;i++){
			if(x % 10 > y % 10)
				temp += (10 + x % 10 - y % 10) * i;
			else
				temp += (x % 10 - y % 10) * i;
			x /= 10;
			y /= 10;
		}
		return temp;
	}
};

class GroupC:public Group{
public:
	int add(int x, int y)
	{
		int a;
		a = x;
		int temp;
		int num;
		int sum = 0;
		while(a / 10){
			sum++;
			a /= 10;
		}
		for(int i = 1;i <= sum;i++){
			num = (x % 10 + y % 10) % 10;
			for(int j = 1;j < i;j++)
				num = ((x % 10 + y % 10) % 10) * 10;
			temp += num;
			x /= 10;
			y /= 10;
		}
		return temp;
	}
	int sub(int x,int y)
	{
		int a;
		a = x;
		int temp;
		int num;
		int sum = 0;
		while(a / 10){
			sum++;
			a /= 10;
		}
		for(int i = 1;i <= sum;i++){
			if(x % 10 > y % 10){
				num = (10 + x % 10 - y % 10);
				for(int j = 1;j < i;j++){
					num = (10 + x % 10 - y % 10) * 10;
				}
			}
			else{
				num = (x % 10 - y % 10);
				for(int j = 1;j < i;j++){
					num = (x % 10 - y % 10) * 10;
				}
			}
			temp += num;
			x /= 10;
			y /= 10;
		}
		return temp;
	}
};



int main(){
	int t;
	int type;
	int a,b;
	char cal;
	Group *pg;
	GroupA GA;
	GroupB GB;
	GroupC GC;
	
	cin >> t;
	while(t--){
		cin >> type >> a >> cal >> b;
		if(type == 1){
			pg = &GA;
			if(cal == '+')
				cout << pg->add(a,b) << endl;
			else
				cout << pg->sub(a,b) << endl;
		}
		else if(type == 2){
			pg = &GB;
			if(cal == '+')
				cout << pg->add(a,b) << endl;
			else
				cout << pg->sub(a,b) << endl;
		}
		else if(type == 3){
			pg = &GC;
			if(cal == '+')
				cout << pg->add(a,b) << endl;
			else
				cout << pg->sub(a,b) << endl;
		}
	}
	return 0;
}

------------------------------------------------------
szuzy:Problem1119:正确
#include<iostream> 
#include<cstring> 
using namespace std; 
class BaseAccount 
{ 
protected: 
    char name[10]; 
    char account[10]; 
    double balance; 
public: 
    BaseAccount(){} 
    BaseAccount(char n[],char a[],double b) 
    { 
        strcpy(name,n); 
        strcpy(account,a); 
        balance=b;   
    } 
    void deposit(double money) 
    { 
        balance=balance+money; 
    } 
    virtual void withdraw(double money) 
    { 
        if((balance-money)<0) 
            cout<<"insufficient"<<endl; 
        else if((balance-money)>=0) 
            balance=balance-money; 
    } 
    virtual void display() 
    { 
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl; 
    } 
}; 
class BasePlus:public BaseAccount 
{ 
    double limit; 
    double limit_sum; 
public: 
    BasePlus(){} 
    BasePlus(char n[],char a[],double b) 
    { 
        strcpy(name,n); 
        strcpy(account,a); 
        balance=b; 
        limit=5000; 
        limit_sum=0; 
    } 
    
    virtual void withdraw(double money) 
    { 
        double value; 
        value=limit-limit_sum+balance; 
        if(value-money<0) 
            cout<<"insufficient"<<endl; 
        else if(value-money>=0) 
        { 
            if(balance==0) 
            { 
                limit_sum=limit_sum+money; 
            } 
            else if(balance>0) 
            { 
                double s; 
                s=money-balance; 
                if(s<=0) 
                    balance=balance-money; 
                else if(s>0) 
                { 
                    balance=0; 
                    limit_sum=limit_sum+s; 
                } 
            } 
        } 
    } 
    virtual void display() 
    { 
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl; 
    } 
}; 
int main() 
{ 
    int n,i; 
    cin>>n; 
    for(i=1;i<=n;i++) 
    { 
        char name[10]; 
        char account[10]; 
        double balance; 
        cin>>name>>account>>balance; 
        BaseAccount *p; 
        if(account[1]=='A') 
        { 
            p=new BaseAccount(name,account,balance); 
        } 
        else if(account[1]=='P') 
        { 
            p=new BasePlus(name,account,balance); 
        } 
        for(int j=1;j<=4;j++) 
        { 
            int money; 
            cin>>money; 
            if(j%2!=0) 
                p->deposit(money); 
            else if(j%2==0) 
                p->withdraw(money); 
        } 
        p->display(); 
        //delete []p; 
    } 
    return 0; 
} 

------------------------------------------------------
2018151051:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    char name[10];
    char account[10];
    double balance;
public:
    BaseAccount(){}
    BaseAccount(char n[],char a[],double b)
    {
        strcpy(name,n);
        strcpy(account,a);
        balance=b;  
    }
    void deposit(double money)
    {
        balance=balance+money;
    }
    virtual void withdraw(double money)
    {
        if((balance-money)<0)
            cout<<"insufficient"<<endl;
        else if((balance-money)>=0)
            balance=balance-money;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    double limit;
    double limit_sum;
public:
    BasePlus(){}
    BasePlus(char n[],char a[],double b)
    {
        strcpy(name,n);
        strcpy(account,a);
        balance=b;
        limit=5000;
        limit_sum=0;
    }
    void deposit(double money)
    {
        balance=balance+money;
    }
    virtual void withdraw(double money)
    {
        double value;
        value=limit-limit_sum+balance;
        if(value-money<0)
            cout<<"insufficient"<<endl;
        else if(value-money>=0)
        {
            if(balance==0)
            {
                limit_sum=limit_sum+money;
            }
            else if(balance>0)
            {
                double s;
                s=money-balance;
                if(s<=0)
                    balance=balance-money;
                else if(s>0)
                {
                    balance=0;
                    limit_sum=limit_sum+s;
                }
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        char name[10];
        char account[10];
        double balance;
        cin>>name>>account>>balance;
        BaseAccount *p;
        if(account[1]=='A')
        {
            p=new BaseAccount(name,account,balance);
        }
        else if(account[1]=='P')
        {
            p=new BasePlus(name,account,balance);
        }
        for(int j=1;j<=4;j++)
        {
            int money;
            cin>>money;
            if(j%2!=0)
                p->deposit(money);
            else if(j%2==0)
                p->withdraw(money);
        }
        p->display();
        delete p;
    }
    return 0;
}
------------------------------------------------------
2017151066:Problem1119:答案错误
#include<iostream>
using namespace std;
class BA
{
protected:
	string name,zhanghu;
	int yu_e;
public:
	BA(string n,string z,int y):name(n),zhanghu(z),yu_e(y){}
	//virtual void display()=0;
	virtual void display(int c1,int q1,int c2,int q2)
	{
		int sum=0;
		sum=yu_e+c1;
		if(sum<q1)
		cout<<"insufficient"<<endl;
		else
		{
			sum=yu_e+c1-q1+c2;
			if(sum<q2)
			cout<<"insufficient"<<endl;
			else
			cout<<name<<" "<<zhanghu<<" Balance:"<<sum-q2<<endl;
		}
	}
};
class BP:public BA
{
protected:
	int touzhi;
public:
	BP(string name,string z,int y):BA(name,z,y)
	{
	     touzhi=5000;
	}
	virtual void display(int c1,int q1,int c2,int q2)
	{
		int sum=0,sum1=0;
		sum=yu_e+c1-q1+c2-q2;
		sum1=yu_e+c1-q1+c2-q2+touzhi;
		if(sum<=yu_e)
		{
			cout<<name<<" "<<zhanghu<<" Balance:"<<sum<<" limit:"<<touzhi<<endl;
		}
		else if(sum>yu_e && sum<=touzhi)
		{
			cout<<name<<" "<<zhanghu<<" Balance:"<<sum<<" limit:"<<sum1<<endl;
		}
		else{
			cout<<"insufficient"<<endl;
		}			
	}
};
int main()
{
	int t;
	cin>>t;
	BA *p;
	string n,z;
	int y,c1,q1,c2,q2;
	while(t--)
	{
		cin>>n>>z>>y;
		if(z[1]=='A')
		{
		    cin>>c1>>q1>>c2>>q2;
			p=new BA(n,z,y);
			p->display(c1,q1,c2,q2);
		}
		else{
			cin>>c1>>q1>>c2>>q2;
			p=new BP(n,z,y);
			p->display(c1,q1,c2,q2);
		}
	}
}
------------------------------------------------------
2017182013:Problem1234:正确
#include <bits/stdc++.h>

using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
    int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }
    int sub(int x, int y)//输出减法的运算结果
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }
    int sub(int x, int y)//输出减法的运算结果
    {
        int _x,_y,xv,yv;
        _x = x/100;
        x %= 100;
        _y = y/100;
        y %= 100;
        xv = x/10;
        x %= 10;
        yv = y/10;
        y %= 10;
        if(x-y<0)
        {
            x+=10;
        }
        if(xv-yv<0)
        {
            xv+=10;
        }
        return (_x-_y)*100+(xv-yv)*10+x-y;
    }
};
class GroupC:public Group
{
public:
    int add(int x, int y)//输出加法的运算结果
    {
        int _x,_y,xv,yv;
        _x = x/100;
        x %= 100;
        _y = y/100;
        y %= 100;
        xv = x/10;
        x %= 10;
        yv = y/10;
        y %= 10;
        if(x+y>10)
        {
            x-=10;
        }
        if(xv+yv>10)
        {
            xv-=10;
        }
        if(_x+_y>10)
        {
            _x-=10;
        }
        return (_x+_y)*100+(xv+yv)*10+x+y;
    }
    int sub(int x, int y)//输出减法的运算结果
    {
        int _x,_y,xv,yv;
        _x = x/100;
        x %= 100;
        _y = y/100;
        y %= 100;
        xv = x/10;
        x %= 10;
        yv = y/10;
        y %= 10;
        if(x-y<0)
        {
            x+=10;
        }
        if(xv-yv<0)
        {
            xv+=10;
        }
        return (_x-_y)*100+(xv-yv)*10+x-y;
    }
};
int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        Group *g;
        int type;
        cin>>type;
        string str;
        cin>>str;
        int x=0,y=0,i;
        for(i=0; str[i]>='0'&& str[i]<='9'; i++)
        {
            x=str[i]-'0'+x*10;
            //cout<<x<<endl;
        }
        int way =i;
        for(i=i+1; i<str.length(); i++)
        {
            y=str[i]-'0'+y*10;
            //cout<<y<<endl;
        }
        if(type==1)
        {
            GroupA a;
            g = &a;
            if(str[way] == '+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(type == 2)
        {
            GroupB b;
            g = &b;
            if(str[way]== '+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(type == 3)
        {
            GroupC c;
            g = &c;
            if(str[way]== '+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018152087:Problem1235:运行错误
#include<iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
	Geometry()
	{
		
	}
	virtual double getArea()=0;
	virtual ~Geometry()
	{
		
	} 
};
class Rect:public Geometry
{
	double len;
	double wid;
public:
	Rect(double l,double w)
	{
		len=l;
		wid=w;
	}
	double getArea()
	{
		return len*wid;
	}
	~Rect()
	{
		
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double rr)
	{
		r=rr;
	}
	double getArea()
	{
		return r*r*3.14;
	}
	~Circle()
	{
		
	}
};
class TotalArea
{
	static double max;
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		for(int i=0;i<n;i++)
		{
			double s=t[i]->getArea();
			if(max<s)
				max=s;
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};
double TotalArea::max=0;
int main()
{
	int t;
	cin>>t;
	Geometry **p=new Geometry *[t];
	for(int i=0;i<t;i++)
	{
		int flag;
		cin>>flag;
		if(flag==1)
		{
			int l,w;
			cin>>l>>w;
			Rect ex(l,w);
			p[i]=&ex;
		}
		else
		{
			int r;
			cin>>r;
			Circle ex(r);
			p[i]=&ex;
		}
	}
	TotalArea temp;
	temp.computerTotalArea(p,t);
	for(int i=0;i<t;i++)
		delete p[i];
	delete []p;
}
------------------------------------------------------
2018152087:Problem1235:正确
#include<iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
	Geometry()
	{
		
	}
	virtual double getArea()=0;
	virtual ~Geometry()
	{
		
	} 
};
class Rect:public Geometry
{
	double len;
	double wid;
public:
	Rect(double l,double w)
	{
		len=l;
		wid=w;
	}
	double getArea()
	{
		return len*wid;
	}
	~Rect()
	{
		
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double rr)
	{
		r=rr;
	}
	double getArea()
	{
		return r*r*3.14;
	}
	~Circle()
	{
		
	}
};
class TotalArea
{
	static double max;
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		for(int i=0;i<n;i++)
		{
			double s=t[i]->getArea();
			if(max<s)
				max=s;
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};
double TotalArea::max=0;
int main()
{
	int t;
	cin>>t;
	Geometry **p=new Geometry *[t];
	for(int i=0;i<t;i++)
	{
		int flag;
		cin>>flag;
		if(flag==1)
		{
			int l,w;
			cin>>l>>w;
			p[i]=new Rect(l,w);
		}
		else
		{
			int r;
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea temp;
	temp.computerTotalArea(p,t);
	for(int i=0;i<t;i++)
		delete p[i];
	delete []p;
}
------------------------------------------------------
2018192013:Problem1232:正确
#include <iostream>
using namespace std;

class Vehicle
{
protected:
    string no;
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;
};

class Car:public Vehicle
{
    int num,heavy;
public:
    Car(string no,int n,int h):Vehicle(no),num(n),heavy(h){}
    int Paid(){return num*8+heavy*2;}
    void display(){cout<<no<<" "<<Paid()<<endl;}
};
class Truck:public Vehicle
{
    int heavy;
public:
    Truck(string no,int h):Vehicle(no),heavy(h){}
    int Paid(){return heavy*5;}
    void display(){cout<<no<<" "<<Paid()<<endl;}
};
class Bus:public Vehicle
{
    int num;
public:
    Bus(string no,int n):Vehicle(no),num(n){}
    int Paid(){return num*3;}
    void display(){cout<<no<<" "<<Paid()<<endl;}
};

int main()
{
    int t;
    cin>>t;
    Vehicle *pv;
    while(t--)
    {
        int type,num,heavy;
        string no;
        cin>>type>>no;
        if(type==1)
        {
            cin>>num>>heavy;
            Car c(no,num,heavy);
            pv=&c;
            pv->display();
        }
        else if(type==2)
        {
            cin>>heavy;
            Truck t(no,heavy);
            pv=&t;
            pv->display();
        }
        else if(type==3)
        {
            cin>>num;
            Bus b(no,num);
            pv=&b;
            pv->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum[10];
        int s = 0,xx,yy;
        double m,n,o;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum[10];
        int s = 0,xx,yy;
        double m,n,o;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
                break;
            else if(int(x/m)==0&&int(y/m)!=0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = 0;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*n;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*m;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else  if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2016073026:Problem1234:时间超限
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};

class GroupB:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        for(i=0;i<min(j,k);i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

class GroupC:public Group{
public:
    virtual int add(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        for(i=0;i<min(j,k);i++)
            result+=(ar1[i]+ar2[i])%10 * pow(10,i);
        if(j>k)
            while(i<j){
                result+=ar1[i]*pow(10,i);
                i++;
            }
        if(k>j)
            while(i<k){
                result+=ar1[i]*pow(10,i);
                j++;
            }
        return result;
    }
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        for(i=0;i<min(j,k);i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

int main()
{
    Group* pg;
    int t;
    cin>>t;
    while(t--){
        int group,a,b;
        char op;
        cin>>group>>a>>op>>b;
        switch(group){
            case 1: pg=new GroupA;break;
            case 2: pg=new GroupB;break;
            case 3: pg=new GroupC;break;
        }
        if(op=='+')
            cout<<pg->add(a,b)<<endl;
        else
            cout<<pg->sub(a,b)<<endl;;
    }
    return 0;
}

------------------------------------------------------
2018152029:Problem1119:正确
#include<bits/stdc++.h>
using namespace std;

class BaseAccount
{
protected:
	string name;
	string account;
	int balance;
public:
	BaseAccount(string n, string a, int b) :name(n), account(a), balance(b) {}
	void deposit(int m)
	{
		balance += m;
	}
	virtual void withdraw(int m)
	{
		if (balance >= m)
			balance -= m;
		else
			cout << "insufficient" << endl;
	}
	virtual void display()
	{
		cout << name << " " << account << " " << "Balance:" << balance << endl;
	}
};

class BasePlus :public BaseAccount
{
	int limit = 5000, limit_sum = 0;
public:
	BasePlus(string n, string a, int b) :BaseAccount(n, a, b) {}
	void deposit(int m)
	{
		if (limit != 5000)
		{
			limit += m;
			if (limit > 5000)
				m = limit - 5000, limit = 5000;
			else m = 0;
		}
		balance += m;
	}
	void withdraw(int m)
	{
		if (balance + limit < m)
		{
			cout << "insufficient" << endl;
			return ;
		}
		if (balance>=m)
		{
			balance -= m;
		}
		else
		{
			m -= balance;
			balance = 0;
			limit -= m;
		}
	}
	void display()
	{
		cout << name << " " << account << " " << "Balance:" << balance << " limit:" << limit - limit_sum << endl;
	}
};
int main()
{
	int T;
	cin >> T;
	BaseAccount *p;
	while (T--)
	{
		string name, account;
		int balance, money;
		cin >> name >> account >> balance;
		if (account.substr(0, 2) == "BA")
			p = new BaseAccount(name, account, balance);
		else
			p = new BasePlus(name, account, balance);
		cin >> money;
		p->deposit(money);
		cin >> money;
		p->withdraw(money);
		cin >> money;
		p->deposit(money);
		cin >> money;
		p->withdraw(money);
		p->display();
		delete p;
	}
	//system("pause");
	return 0;
}

------------------------------------------------------
2016073026:Problem1234:时间超限
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};

class GroupB:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        for(i=0;i<min(j,k);i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

class GroupC:public Group{
public:
    virtual int add(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        int minN=min(j,k);
        for(i=0;i<minN;i++)
            result+=(ar1[i]+ar2[i])%10 * pow(10,i);
        if(j>k)
            while(i<j){
                result+=ar1[i]*pow(10,i);
                i++;
            }
        if(k>j)
            while(i<k){
                result+=ar1[i]*pow(10,i);
                j++;
            }
        return result;
    }
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        for(i=0;i<min(j,k);i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

int main()
{
    Group* pg;
    int t;
    cin>>t;
    while(t--){
        int group,a,b;
        char op;
        cin>>group>>a>>op>>b;
        switch(group){
            case 1: pg=new GroupA;break;
            case 2: pg=new GroupB;break;
            case 3: pg=new GroupC;break;
        }
        if(op=='+')
            cout<<pg->add(a,b)<<endl;
        else
            cout<<pg->sub(a,b)<<endl;;
    }
    return 0;
}

------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum[10];
        int s = 0,xx,yy;
        double m,n,o;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum[10];
        int s = 0,xx,yy;
        double m,n,o;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = 0;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*m;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151027:Problem1234:正确
#include <iostream>
#include<iomanip>
#include<cstring>
using namespace std;
class Group
{
protected:

public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
};
class GroupB: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int xv,yv,ha,result=0;
        int ten=1;
        while(x||y)
        {
            xv=x%10;
            yv=y%10;
            x=x/10;
            y=y/10;
            if(xv>=yv)
                ha=xv-yv;
            else
                ha=xv+10-yv;
            result+=ha*ten;
            ten=ten*10;
        }
        return result;

    }
};
class GroupC: public Group
{
protected:

public:
    int add(int x, int y)
    {
        int xv,yv,ha,result=0;
        int ten=1;
        while(x||y)
        {
            xv=x%10;
            yv=y%10;
            x=x/10;
            y=y/10;
            ha=(xv+yv)%10;
            result+=ha*ten;
            ten=ten*10;
        }
        return result;
    }
    int sub(int x, int y)
    {
        int xv,yv,ha,result=0;
        int ten=1;
        while(x||y)
        {
            xv=x%10;
            yv=y%10;
            x=x/10;
            y=y/10;
            if(xv>=yv)
                ha=xv-yv;
            else
                ha=xv+10-yv;
            result+=ha*ten;
            ten=ten*10;
        }
        return result;
    }
};

main()
{
    int t,a,b,type,i,j,n,ope,k;
    char op[20];
    cin>>t;
    Group *p;
    while(t--)
    {
        a=0;
        b=0;
        cin>>type;
        if(type==1)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupA;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(type==2)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupB;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupC;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
    }
}

------------------------------------------------------
2018192025:Problem1129:正确
#include<iostream>
#include<cstring>
using namespace std;
class NCard
{
protected:
    long number;
    string CName;
    int Counter;
public:
    virtual void initial(long num, string name, int counter)
    {
        number=num;
        CName=name;
        Counter=counter;
    }
    int save(int money)
    {
        if(money<=0)
            return -1;
        else
        {
            Counter+=money;
            return 1;
        }
    }
    int take(int money)
    {
        if(money<=0 || Counter-money<0)
            return -1;
        else
        {
            Counter-=money;
            return 1;
        }
    }
    virtual void info()
    {
        cout<<number<<'-'<<CName<<'-'<<Counter<<endl;
    }
};

class TCard:public NCard
{
protected:
    int Tcounter;
public:
    virtual void initial(long num, string name, int counter, int tcount)
    {
        number=num;
        CName=name;
        Counter=counter;
        Tcounter=tcount;
    }
    int transfer(int money)
    {
        if(money>Counter)
            return -1;
        else
        {
            Counter-=money;
            Tcounter+=money;
            return 1;
        }
    }
    virtual void info()
    {
        cout<<number<<'-'<<CName<<'-'<<Counter<<'-'<<Tcounter<<endl;
    }
};

class VIPCard:public NCard
{
protected:
    int Credit;
public:
    virtual void initial(long num, string name, int counter, int credit)
    {
        number=num;
        CName=name;
        Counter=counter;
        Credit=credit;
    }
    int over(int money)
    {
        if(money>Counter+Credit)
            return -1;
        else
        {
            Credit-=money-Counter;
            Counter=0;
            return 1;
        }
    }
    virtual void info()
    {
        cout<<number<<'-'<<CName<<'-'<<Counter<<'-'<<Credit<<endl;
    }
};

void show(NCard &obj)
{
    obj.info();
}

int main()
{
    int operate1,operate2,operate3,operate4;
    int counter1,counter2,counter3,tcount,credit;
    long num1,num2,num3;
    string name1,name2,name3;

    cin>>num1>>name1>>counter1;
    cin>>num2>>name2>>counter2>>tcount;
    cin>>num3>>name3>>counter3>>credit;

    NCard ss1;
    TCard ss2;
    VIPCard ss3;
    ss1.initial(num1,name1,counter1);
    ss2.initial(num2,name2,counter2,tcount);
    ss3.initial(num3,name3,counter3,credit);

    cin>>operate1>>operate2>>operate3>>operate4;
    if(ss1.save(operate1)==1);
    if(ss1.save(operate2)==1);
    if(ss1.take(operate3)==1);
    if(ss1.take(operate4)==1);

    cin>>operate1>>operate2>>operate3>>operate4;
    if(ss2.save(operate1)==1);
    if(ss2.take(operate2)==1);
    if(ss2.transfer(operate3)==1);
    if(ss2.transfer(operate4)==1);

    cin>>operate1>>operate2>>operate3>>operate4;
    if(ss3.save(operate1)==1);
    if(ss3.take(operate2)==1);
    if(ss3.over(operate3)==1);
    if(ss3.over(operate4)==1);

    show(ss1);
    show(ss2);
    show(ss3);

    return 0;
}

------------------------------------------------------
2016073026:Problem1234:时间超限
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};

class GroupB:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        int minN=min(j,k);
        for(i=0;i<minN;i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

class GroupC:public Group{
public:
    virtual int add(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        int minN=min(j,k);
        for(i=0;i<minN;i++)
            result+=(ar1[i]+ar2[i])%10 * pow(10,i);
        if(j>k)
            while(i<j){
                result+=ar1[i]*pow(10,i);
                i++;
            }
        if(k>j)
            while(i<k){
                result+=ar1[i]*pow(10,i);
                j++;
            }
        return result;
    }
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        int minN=min(j,k);
        for(i=0;i<minN;i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

int main()
{
    Group* pg;
    int t;
    cin>>t;
    while(t--){
        int group,a,b;
        char op;
        cin>>group>>a>>op>>b;
        switch(group){
            case 1: pg=new GroupA;break;
            case 2: pg=new GroupB;break;
            case 3: pg=new GroupC;break;
        }
        if(op=='+')
            cout<<pg->add(a,b)<<endl;
        else
            cout<<pg->sub(a,b)<<endl;;
    }
    return 0;
}

------------------------------------------------------
2018192013:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rect(a,b);
            t[i]=&rect;
        }
        else if(type==2)
        {
            cin>>r;
            Circle c(r);
            t[i]=&c;
        }
    }
    TotalArea::computerTotalArea(t,n);
    for(i=0;i<n;i++)
        t[i]->~Geometry();
    delete []t;
    return 0;
}

------------------------------------------------------
2018192009:Problem1119:正确
#include <iostream>
#include <cstring>
using namespace std;
class baseAccount
{
protected:
    string name;
    char acc[50];
    int balance;
public:
    baseAccount(){}
    baseAccount(string n,char a[50],int ba):name(n),balance(ba)
    {
        strcpy(acc,a);
    }
    void deposit(int money)
    {
        balance+=money;
    }
    virtual void withdrow(int money)
    {
        if(money>balance)
            cout<<"insufficient"<<endl;
        else
            balance-=money;
    }
    virtual void display()
    {
        cout<<name<<" ";
        cout<<acc;
        cout<<" Balance:"<<balance<<endl;
    }
};
class basePlus:public baseAccount
{
    int limit;
    int limit_sum;
public:
    basePlus(string n,char a[50],int ba):baseAccount(n,a,ba)
    {
        limit=5000;
        limit_sum=0;
    }
    virtual void withdrow(int money)
    {
        if(money>balance+limit)
            cout<<"insufficient"<<endl;
        else
        {
            balance-=money;
            if(balance<0)
            {
                limit_sum=-balance;
                balance=0;
                limit-=limit_sum;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" ";
        cout<<acc;
        cout<<" Balance:"<<balance<<" limit:"<<limit<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    string name;
    char acc[50];
    int balance;
    int money;
    baseAccount *p;
    while(t--)
    {
        cin>>name>>acc>>balance;
        if(acc[1]=='A')
        {
            baseAccount a(name,acc,balance);
            p=&a;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
        else
        {
            basePlus b(name,acc,balance);
            p=&b;
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            cin>>money;
            p->deposit(money);
            cin>>money;
            p->withdrow(money);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2017047011:Problem1119:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class baseAccount
{ 
protected:
	string name;
	string no;
	double balance;
public:
	baseAccount(){}
	baseAccount(string name1,string no1,double b);
	void deposit(double num);
	virtual void withdraw(double num);
	virtual void display();
};

baseAccount::baseAccount(string name1,string no1,double b){
	name=name1;no=no1;balance=b;
}

void baseAccount::deposit(double num){
	balance+=num;
}

void baseAccount::withdraw(double num){
	if(num>balance)
		cout<<"insufficient"<<endl;
	else
		balance-=num;
}

void baseAccount::display(){
	cout<<name<<" "<<no<<" Balance:"<<balance<<endl;
}
//------------------------
class Cplus:public baseAccount
{ 
protected:
	double limit;
	double lmtnum;
public:
	Cplus(string name1,string no1,double b);
	void withdraw(double num);
	void display();
};

Cplus::Cplus(string name1,string no1,double b){
	name=name1;no=no1;balance=b;limit=5000;lmtnum=0;
}

void Cplus::withdraw(double num){
	if(num>limit+balance)
		cout<<"insufficient"<<endl;
	else if(num<=balance)
		balance-=num;
	else{
		lmtnum+=(num-balance);
		balance=0;
		limit=5000-lmtnum;
	}
}

void Cplus::display(){
	cout<<name<<" "<<no<<" Balance:"<<balance<<" limit:"<<limit<<endl;	
}
//------------------------
int main()
{
	int t,i;
	string name,no;
	double balance,num;
	
	cin>>t;
	while(t--)
	{
		cin>>name>>no>>balance;
		
		if(no[1]=='A'){
			baseAccount base(name,no,balance);
			for(i=0;i<4;i++){
				cin>>num;
				if(i%2==0)
					base.deposit(num);
				else 
					base.withdraw(num);				
			}
			base.display();
		}
		
		else if(no[1]=='P'){
			Cplus plus1(name,no,balance);
			for(i=0;i<4;i++){
				cin>>num;
				if(i%2==0)
					plus1.deposit(num);
				else 
					plus1.withdraw(num);				
			}
			plus1.display();
		}
		
	}
	
}
------------------------------------------------------
2016073026:Problem1234:答案错误
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};

class GroupB:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        int minN=min(j,k);
        for(i=0;i<minN;i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

class GroupC:public Group{
public:
    virtual int add(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        int minN=min(j,k);
        for(i=0;i<minN;i++)
            result+=(ar1[i]+ar2[i])%10 * pow(10,i);
        if(j>k)
            while(i<j){
                result+=ar1[i]*pow(10,i);
                i++;
            }
        if(k>j)
            while(i<k){
                result+=ar1[i]*pow(10,i);
                i++;
            }
        return result;
    }
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i;
        int minN=min(j,k);
        for(i=0;i<minN;i++){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow(10,i);
            else
                result+=(ar1[i]-ar2[i]) * pow(10,i);
        }
        return result;
    }
};

int main()
{
    Group* pg;
    int t;
    cin>>t;
    while(t--){
        int group,a,b;
        char op;
        cin>>group>>a>>op>>b;
        switch(group){
            case 1: pg=new GroupA;break;
            case 2: pg=new GroupB;break;
            case 3: pg=new GroupC;break;
        }
        if(op=='+')
            cout<<pg->add(a,b)<<endl;
        else
            cout<<pg->sub(a,b)<<endl;;
    }
    return 0;
}

------------------------------------------------------
2018152029:Problem1235:正确
#include<bits/stdc++.h>
using namespace std;

class Geometry {
public:
	virtual double getArea() = 0; //计算面积，结果保留小数点后两位
	virtual ~Geometry() {}
};

class Rect :public Geometry
{
	double a, b;
public:
	Rect(double aa, double bb) :a(aa), b(bb) {}
	double getArea()
	{
		return a * b;
	}
};

class Circle :public Geometry
{
	int r;
public:
	Circle(double rr) :r(rr) {}
	double getArea()
	{
		return 3.14*r*r;
	}
};
class TotalArea 
{
public:
	static void computerTotalArea(Geometry** t, int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		double ans = 0;
		for (int i = 0; i < n; i++)
		{
			ans = ans > t[i]->getArea() ? ans : t[i]->getArea();
		}
		cout << "最大面积=" << setprecision(2) << fixed << ans << endl;
	}
};
int main()
{
	int T,a,b,c,t;
	cin >> T;
	t = T;
	Geometry **p = new Geometry*[T];
	while (T--)
	{
		cin >> a >> b;
		if (a == 1)
		{
			cin >> c;
			p[T] = new Rect(b, c);
		}
		else
			p[T] = new Circle(b);
	}
	TotalArea::computerTotalArea(p, t);
	for (int i = 0; i < t; i++)
		delete p[i];
	delete p;
	//system("pause");
	return 0;
}

------------------------------------------------------
2017182013:Problem1129:正确
#include <bits/stdc++.h>

using namespace std;

class CNormal
{
protected:
    string id;
    string name;
    int counter;
public:
    CNormal(string ID,string n,int c):id(ID),name(n),counter(c){}
    int  save(int m)
    {
        if(m<=0)
            return -1;
        counter += m;
        return 1;
    }
    virtual int take(int m)
    {
        if(m<=0)
            return -1;
        if(counter>=m)
        {
            counter -= m;
            return 1;
        }
        else
            return -1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<name<<"-"<<counter<<endl;
    }
};
class CTraffic:public CNormal
{
    int Tcounter;
public:
    CTraffic(string ID,string n,int c,int t):CNormal(ID,n,c),Tcounter(t){}
    int transfer(int m)
    {
        if(m<=0)
            return -1;
        if(counter>=m)
        {
            counter -= m;
            Tcounter += m;
            return 1;
        }
        else
            return -1;
    }
    void info()
    {
        cout<<id<<"-"<<name<<"-"<<counter<<"-"<<Tcounter<<endl;
    }
};
class VIP:public CNormal
{
    int credit;
public:
    VIP(string ID,string n,int c,int cr):CNormal(ID,n,c),credit(cr){}
    int  over(int m)
    {
        if(m<=0)
            return -1;
        if(counter+credit>=m && counter<m)
        {
            credit = credit+counter-m;
            counter = 0;
            return 1;
        }
        else
            return -1;
    }
    void info()
    {
        cout<<id<<"-"<<name<<"-"<<counter<<"-"<<credit<<endl;
    }
};

void show(CNormal &obj)
{
    obj.info();
}
int main()
{
    string id,name;
    int counter,tcounter,credit;
    cin>>id>>name>>counter;
    CNormal n(id,name,counter);

    cin>>id>>name>>counter>>tcounter;
    CTraffic t(id,name,counter,tcounter);

    cin>>id>>name>>counter>>credit;
    VIP v(id,name,counter,credit);

    int m1,m2,m3,m4,m;
    cin>>m1>>m2>>m3>>m4;
    m = n.save(m1);
    m = n.save(m2);
    m = n.take(m3);
    m = n.take(m4);

    cin>>m1>>m2>>m3>>m4;
    m = t.save(m1);
    m = t.take(m2);
    m = t.transfer(m3);
    m = t.transfer(m4);

    cin>>m1>>m2>>m3>>m4;
    m = v.save(m1);
    m = v.take(m2);
    m = v.over(m3);
    m = v.over(m4);

    show(n);
    show(t);
    show(v);

    return 0;
}

------------------------------------------------------
2018152029:Problem1232:运行错误
#include<bits/stdc++.h>
using namespace std;

class Vehicle
{
protected:
    string no;//编号

public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用

};

class Car:public Vehicle
{
protected:
    int num;
    int weight;
public:
    Car(string n,int nu,int we):Vehicle(n),num(nu),weight(we){}
    void display()
    {
        cout<<no<<' ';
        cout<<num*8+weight*2<<endl;
    }

};

class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w){}
    void display()
    {
        cout<<no<<' ';
        cout<<weight*5<<endl;
    }
};

class Bus:public Vehicle
{
protected:
    int num;
public:
    Bus(string n,int nu):Vehicle(n),num(nu){}
    void display()
    {
        cout<<no<<' ';
        cout<<num*3<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    Vehicle *pv;
    int num,weight;
    string no;
    while(t--)
    {
        char judge;
        cin>>judge;
        switch(judge)
        {
            case '1':
            {
                cin>>no>>num>>weight;
                Car a(no,num,weight);
                pv=&a;
                pv->display();
                break;
            }
            case '2':
            {
                cin>>no>>weight;
                Truck a(no,weight);
                pv=&a;
                pv->display();
                break;
            }
            case '3':
            {
                cin>>no>>num;
                Bus a(no,num);
                pv=&a;
                pv->display();
                break;
            }
        }
        delete pv;
    }
    return 0;
}

------------------------------------------------------
2018152029:Problem1232:正确
#include<bits/stdc++.h>
using namespace std;

class Vehicle
{
protected:
    string no;//编号

public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用

};

class Car:public Vehicle
{
protected:
    int num;
    int weight;
public:
    Car(string n,int nu,int we):Vehicle(n),num(nu),weight(we){}
    void display()
    {
        cout<<no<<' ';
        cout<<num*8+weight*2<<endl;
    }

};

class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w){}
    void display()
    {
        cout<<no<<' ';
        cout<<weight*5<<endl;
    }
};

class Bus:public Vehicle
{
protected:
    int num;
public:
    Bus(string n,int nu):Vehicle(n),num(nu){}
    void display()
    {
        cout<<no<<' ';
        cout<<num*3<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    Vehicle *pv;
    int num,weight;
    string no;
    while(t--)
    {
        char judge;
        cin>>judge;
        switch(judge)
        {
            case '1':
            {
                cin>>no>>num>>weight;
                Car a(no,num,weight);
                pv=&a;
                pv->display();
                break;
            }
            case '2':
            {
                cin>>no>>weight;
                Truck a(no,weight);
                pv=&a;
                pv->display();
                break;
            }
            case '3':
            {
                cin>>no>>num;
                Bus a(no,num);
                pv=&a;
                pv->display();
                break;
            }
        }
    }
    return 0;
}

------------------------------------------------------
2018151092:Problem1129:正确
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;

class Card
{
	protected:
		int ID;
		char CName;
		double Counter;
	public:
		Card()
		{
		}
		
		virtual void initial(int id,char n,double c)
		{
			ID=id;
			CName=n;
			Counter=c;
		}
		
		virtual int save(double s)
		{
			if(s>0)
			{
				Counter+=s;
				return 1; 
			}
			
			return -1;
		}
		
		virtual int take(double t)
		{
			if(t>0)
			{
				if(t<Counter)
				{
					Counter-=t;
					return 1;
				}
				
				return -1;
			}
			
			return -1;
		}
		
		virtual void info()
		{
			cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
		}
		
		~Card()
		{
		} 
};

class TCard:public Card
{
	protected:
		double TCounter;
	public:
		TCard()
		{
		}
		
		virtual void initial(int id,char n,double c,double t)
		{
			ID=id;
			CName=n;
			Counter=c;
			TCounter=t;
		}
		
		virtual int save(double s)
		{
			if(s>0)
			{
				Counter+=s;
				return 1; 
			}
			
			return -1;
		}
		
		virtual int take(double t)
		{
			if(t>0)
			{
				if(t<Counter)
				{
					Counter-=t;
					return 1;
				}
				
				return -1;
			}
			
			return -1;
		}
		
		int transfer(double t)
		{
			if(t>0)
			{
				if(t<Counter)
				{
					TCounter+=t;
					Counter-=t;
					
					return 1;
				}
				
				return -1;
			}
			
			return -1;
		}
		
		virtual void info()
		{
			cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<TCounter<<endl;
		}
		
		~TCard()
		{
		} 
};

class VIPCard:public Card
{
	protected:
		double Credit;
	public:
		VIPCard()
		{
		}
		
		virtual void initial(int id,char n,double c,double t)
		{
			ID=id;
			CName=n;
			Counter=c;
			Credit=t;
		}
		
		int over(double o)
		{
			if(o<Counter+Credit)
			{
				o-=Counter;
				Counter=0;
				Credit-=o;
				return 1;
			}
			
			return -1;
		}
		
		virtual int save(double s)
		{
			if(s>0)
			{
				Counter+=s;
				return 1; 
			}
			
			return -1;
		}
		
		virtual int take(double t)
		{
			if(t>0)
			{
				if(t<Counter)
				{
					Counter-=t;
					return 1;
				}
				
				return -1;
			}
			
			return -1;
		}
		
		virtual void info()
		{
			cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
		}
		
		~VIPCard()
		{
		} 
};

void show(Card &obj)
{
	obj.info();
}

int main()
{
	int ID;
	char name;
	double counter;
	double tcounter;
	double credit;//定义一系列变量用于输入参数
	
	Card Ace;
	TCard Beta;
	VIPCard Cita;//定义三个卡对象 
	

	cin>>ID>>name>>counter;
	Ace.initial(ID,name,counter);
		
	cin>>ID>>name>>counter>>tcounter;
	Beta.initial(ID,name,counter,tcounter);
		
	cin>>ID>>name>>counter>>credit;
	Cita.initial(ID,name,counter,credit);//输入数据并做三个对象的初始化，调用三个对象的initial方法
	
	double op1,op2,op3,op4;
	int	Ace_d1,Ace_d2,Ace_w1,Ace_w2;
	int Beta_d,Beta_w,Beta_t1,Beta_t2;
	int Cita_d,Cita_w,Cita_c1,Cita_c2;//输入数据并按顺序执行操作 
	
	cin>>op1>>op2>>op3>>op4;
	Ace_d1=Ace.save(op1);
	Ace_d2=Ace.save(op2);
	Ace_w1=Ace.take(op3);
	Ace_w2=Ace.take(op4);//普通卡2次存款2次取款，调用save和take方法 
	
	cin>>op1>>op2>>op3>>op4;
	Beta_d=Beta.save(op1);
	Beta_w=Beta.take(op2);
	Beta_t1=Beta.transfer(op3);
	Beta_t2=Beta.transfer(op4);//金卡1次存款1次取款2次转账，调用save\take\transfer方法 
	
	cin>>op1>>op2>>op3>>op4;
	Cita_d=Cita.save(op1);
	Cita_w=Cita.take(op2);
	Cita_c1=Cita.over(op3);
	Cita_c2=Cita.over(op4);//贵宾卡1次存款1次取款2次透支，调用save\take\over方法 
	
	show(Ace);
	show(Beta);
	show(Cita); 
	
	return 0;
}
------------------------------------------------------
2017144045:Problem1234:答案错误
#include <iostream>
#include <cstring>
#include <iomanip>
#include <cmath>
using namespace std;
class Group
{
protected:
	int x,y;
public:
	Group(int ix,int iy)
	{
		x=ix;
		y=iy;
	} 
    virtual int add(int ix, int iy)=0;//输出加法的运算结果
    virtual int sub(int ix, int iy)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
	GroupA(int ix,int iy):Group(ix,iy)
	{
	}
    virtual int add(int ix, int iy)
    {
    	return x+y;
	}
    virtual int sub(int ix, int iy)
    {
    	return x-y;
	}
};

class GroupB:public Group
{
public:
	GroupB(int ix,int iy):Group(ix,iy)
	{
	}
    virtual int add(int ix, int iy)
    {
    	return x+y;
	}
    virtual int sub(int ix, int iy)
    {
    	int n=0;
    	int i=0;
    	int s;
    	while((x!=0)||(y!=0))
    	{
    		s=x%10-y%10;
    		if(s<0)
    		{
    			s=10+s;
			}
			if(i==0)
    		    n=n+s;
    		else
    		    n=n+s*pow(10,i);
    		x=x/10;
    		y=y/10;
    		i++;
    		//cout<<x<<" "<<y<<endl;
		}
    	return n;
	}
};

class GroupC:public Group
{
public:
	GroupC(int ix,int iy):Group(ix,iy)
	{
	}
    virtual int add(int ix, int iy)
    {
    	int n=0;
    	int i=0;
    	int s;
    	while((x!=0)||(y!=0))
    	{
    		s=x%10+y%10;
    		if(s>10)
    		{
    			s=s%10;
			}
			if(i==0)
    		    n=n+s;
    		else
    		{
    			n=n+s*pow(10,i);
			}
    		x=x/10;
    		y=y/10;
    		i++;
    		//cout<<s<<" "<<n<<endl;
		}
    	return n;
	}
    virtual int sub(int ix, int iy)
    {
    	int n=0;
    	int i;
    	int s;
    	while((x/10==0)&&(y/10==0))
    	{
    		s=x%10-y%10;
    		if(s<0)
    		{
    			s=10+s;
			}
			if(i==0)
    		    n=n+s;
    		else
    		    n=n+s*10*i;
    		x=x/10;
    		y=y/10;
    		i++;
		}
    	return n;
	}
};

int main()
{
	int t;
	int a,x,y;
	char ch;
	cin>>t;
	Group *p; 
	while(t--)
	{
		cin>>a>>x>>ch>>y;
		if(a==1)
		{
			p=new GroupA(x,y);
		}
		else if(a==2)
		{
			p=new GroupB(x,y);
		}
		else if(a==3)
		{
			p=new GroupC(x,y);
		}
		if(ch=='+')
		{
			cout<<p->add(x,y)<<endl;
		}
		else if(ch=='-')
		{
			cout<<p->sub(x,y)<<endl;
		}
	 } 
}
------------------------------------------------------
2018192009:Problem1234:正确
#include <iostream>
#include <cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};
class GroupB:public Group
{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y)
    {
        int tag=0;
        int answer=0;
        int i=1;
        while(x||y)
        {
            int a,b;
            a=x%10;
            b=y%10;
            if(a<b)
                tag=a+10-b;
            else
                tag=a-b;
            x/=10;
            y/=10;
            answer+=tag*i;
            i*=10;
        }
        return answer;
    }
};
class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int tag=0;
        int answer=0;
        int i=1;
        while(x||y)
        {
            int a,b;
            a=x%10;
            b=y%10;
            if(a+b>=10)
                tag=a+b-10;
            else
                tag=a+b;
            x/=10;
            y/=10;
            answer+=tag*i;
            i*=10;
        }
        return answer;
    }
    virtual int sub(int x, int y)
    {
        int tag=0;
        int answer=0;
        int i=1;
        while(x||y)
        {
            int a,b;
            a=x%10;
            b=y%10;
            if(a<b)
                tag=a+10-b;
            else
                tag=a-b;
            x/=10;
            y/=10;
            answer+=tag*i;
            i*=10;
        }
        return answer;
    }
};
int main()
{
    int t;
    cin>>t;
    int a,b,level;
    char m;
    Group *p;
    while(t--)
    {
        cin>>level>>a>>m>>b;
        if(level==1)
        {
            GroupA aa;
            p=&aa;
            if(m=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(level==2)
        {
            GroupB bb;
            p=&bb;
            if(m=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(level==3)
        {
            GroupC cc;
            p=&cc;
            if(m=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2017144045:Problem1234:正确
#include <iostream>
#include <cstring>
#include <iomanip>
#include <cmath>
using namespace std;
class Group
{
protected:
	int x,y;
public:
	Group(int ix,int iy)
	{
		x=ix;
		y=iy;
	} 
    virtual int add(int ix, int iy)=0;//输出加法的运算结果
    virtual int sub(int ix, int iy)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
	GroupA(int ix,int iy):Group(ix,iy)
	{
	}
    virtual int add(int ix, int iy)
    {
    	return x+y;
	}
    virtual int sub(int ix, int iy)
    {
    	return x-y;
	}
};

class GroupB:public Group
{
public:
	GroupB(int ix,int iy):Group(ix,iy)
	{
	}
    virtual int add(int ix, int iy)
    {
    	return x+y;
	}
    virtual int sub(int ix, int iy)
    {
    	int n=0;
    	int i=0;
    	int s;
    	while((x!=0)||(y!=0))
    	{
    		s=x%10-y%10;
    		if(s<0)
    		{
    			s=10+s;
			}
			if(i==0)
    		    n=n+s;
    		else
    		    n=n+s*pow(10,i);
    		x=x/10;
    		y=y/10;
    		i++;
    		//cout<<x<<" "<<y<<endl;
		}
    	return n;
	}
};

class GroupC:public Group
{
public:
	GroupC(int ix,int iy):Group(ix,iy)
	{
	}
    virtual int add(int ix, int iy)
    {
    	int n=0;
    	int i=0;
    	int s;
    	while((x!=0)||(y!=0))
    	{
    		s=x%10+y%10;
    		if(s>10)
    		{
    			s=s%10;
			}
			if(i==0)
    		    n=n+s;
    		else
    		{
    			n=n+s*pow(10,i);
			}
    		x=x/10;
    		y=y/10;
    		i++;
    		//cout<<s<<" "<<n<<endl;
		}
    	return n;
	}
    virtual int sub(int ix, int iy)
    {
    	int n=0;
    	int i=0;
    	int s;
    	while((x!=0)||(y!=0))
    	{
    		s=x%10-y%10;
    		if(s<0)
    		{
    			s=10+s;
			}
			if(i==0)
    		    n=n+s;
    		else
    		    n=n+s*pow(10,i);
    		x=x/10;
    		y=y/10;
    		i++;
    		//cout<<x<<" "<<y<<endl;
		}
    	return n;
	}
};

int main()
{
	int t;
	int a,x,y;
	char ch;
	cin>>t;
	Group *p; 
	while(t--)
	{
		cin>>a>>x>>ch>>y;
		if(a==1)
		{
			p=new GroupA(x,y);
		}
		else if(a==2)
		{
			p=new GroupB(x,y);
		}
		else if(a==3)
		{
			p=new GroupC(x,y);
		}
		if(ch=='+')
		{
			cout<<p->add(x,y)<<endl;
		}
		else if(ch=='-')
		{
			cout<<p->sub(x,y)<<endl;
		}
	 } 
}
------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum[10];
        int s = 0,xx,yy;
        double m,n,o;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = 10;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum[10];
        int s = 0,xx,yy;
        double m,n,o;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = 0;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*m;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2017047011:Problem1129:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Card
{
protected:
	string id;
	string name;
	double balance;
public:
	Card(){}
	int deposit(double num);
	int withdraw(double num);
	virtual void check(){}
};
//------------------------
class ptcard:public Card
{
public:
	ptcard(){}
	ptcard(string i,string n,double b);
	int deposit(double num);
	int withdraw(double num);
	void check();
};

ptcard::ptcard(string i,string n,double b){
	id=i;name=n;balance=b;
}

int ptcard::deposit(double num){
	if(num<=0)
		return -1;
	balance+=num;
	return 1;
}

int ptcard::withdraw(double num){
	if(num<=0)
		return -1;
	if(num>balance)
		return -1;
	balance-=num;
	return 1;
}

void ptcard::check(){
	cout<<id<<"-"<<name<<"-"<<balance<<endl;
}
//------------------------
class tfcard:public ptcard
{
	double tfbalance;
public:
	tfcard(){}
	tfcard(string i,string n,double b,double tfb);
	void check();
	int transfer(double num);
};

tfcard::tfcard(string i,string n,double b,double tfb){
	id=i;name=n;balance=b;tfbalance=tfb;
}

void tfcard::check(){
	cout<<id<<"-"<<name<<"-"<<balance<<"-"<<tfbalance<<endl;
}

int tfcard::transfer(double num){
	if(num<=0)
		return -1;
	if(num>balance)
		return -1;
	balance-=num;
	tfbalance+=num;
	return 1;
}
//------------------------
class vipcard:public ptcard
{
	double limit;
public:
	vipcard(){}
	vipcard(string i,string n,double b,double lm);
	void check();
	int over(double num);
};

vipcard::vipcard(string i,string n,double b,double lm){
	id=i;name=n;balance=b;limit=lm;
}

void vipcard::check(){
	cout<<id<<"-"<<name<<"-"<<balance<<"-"<<limit<<endl;
}

int vipcard::over(double num){
	if(num<=0)
		return -1;
	if(num>balance+limit)
		return -1;
	balance-=num;
	if(balance<0){
		limit=limit+balance;
		balance=0;
	}
	return 1;	
}
//------------------------
void show(Card &obj){
	obj.check();
}
//------------------------
int main()
{
	string id1,id2,id3,name1,name2,name3;
	double b1,b2,b3,tfb,lmb;
	double num;
	int i;
	
	cin>>id1>>name1>>b1;
	cin>>id2>>name2>>b2>>tfb;
	cin>>id3>>name3>>b3>>lmb;
	
	ptcard pt(id1,name1,b1);
	tfcard tf(id2,name2,b2,tfb);
	vipcard vip(id3,name3,b3,lmb);
	
	for(i=0;i<4;i++){
		cin>>num;
		if(i<2)
			pt.deposit(num);
		else 
			pt.withdraw(num);
	} 
	show(pt);
	
	for(i=0;i<4;i++){
		cin>>num;
		if(i==0)
			tf.deposit(num);
		else if(i==1)
			tf.withdraw(num);
		else 
			tf.transfer(num);
	}
	show(tf);
	
	for(i=0;i<4;i++){
		cin>>num;
		if(i==0)
			vip.deposit(num);
		else if(i==1)
			vip.withdraw(num);
		else 
			vip.over(num);
	}
	show(vip);
}
------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=(s[i]-'0')-(s1[i]-'0');
            else
                s2[i]=(s[i]-'0')+10-(s1[i]-'0');
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        for(i=0;s1[i]!='\0'&&s[i]!='\0';i++)
        {
            s2[i]=(s1[i]-'0')+(s[i]-'0');
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=(s[i]-'0')-(s1[i]-'0');
            else
                s2[i]=(s[i]-'0')+10-(s1[i]-'0');
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2017301020:Problem1234:答案错误
#include <iostream>
#include <cstring>
#include <iomanip>
using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);

};

int GroupA::add(int x, int y){
    cout<<x+y<<endl;
    return x+y;
}

int GroupA::sub(int x, int y){
    cout<<x-y<<endl;
    return x-y;
}

class GroupB:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);
};

int GroupB::add(int x, int y){
    cout<<x+y<<endl;
    return x+y;
}

int GroupB::sub(int x, int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    for(k=0;k<=j;k++){
        a[k]=a[k]-b[k];
        if(a[k]<0)
            a[k]=a[k]+10;
    }
    for(j=i;j>=0;j--)
        cout<<a[j];
    cout<<endl;
}

class GroupC:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);
};

int GroupC::add(int x,int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    for(k=0;k<=j;k++){
        a[k]=a[k]+b[k];
        if(a[k]>=10)
            a[k]=a[k]-10;
    }
    for(j=i;j>=0;j--)
        cout<<a[j];
    cout<<endl;
    return 1;
}

int GroupC::sub(int x, int y){
    int a[10];
    int b[10];
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x=0)
            break;
    }
    for(j=0;j<10;j++){
        a[j]=y%10;
        y=y/10;
        if(y=0)
            break;
    }
    for(k=0;k<j;k++){
        a[k]=a[k]-b[k];
        if(a[k]<0)
            a[k]=a[k]+10;
    }
    for(j=i-1;j>=0;j--)
        cout<<a[j];
    cout<<endl;
    return 1;
}

int main(){
    Group *pv;
    char ope;
    int t,type,a,b;
    cin>>t;
    while(t--){
        cin>>type>>a>>ope>>b;
        if(type==1){
            GroupA g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
        else if(type==2){
            GroupB g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
        else{
            GroupC g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
    }
    return 0;
}

------------------------------------------------------
2018151014:Problem1234:正确
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <string>

using namespace std;

int stringToInt(const string s);
string IntToString(const int t);

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
protected:
	
};

class GroupA : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB : public Group {
public:
	int add(int x, int y) {
		return x + y;
	}
	
	int sub(int x, int y) {
		int result;
		
		string x_str = IntToString(x);
		string y_str = IntToString(y);
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		result = stringToInt(x_str);
		return result;
	}
};

class GroupC : public Group {
public:
	int add(int x, int y) {
		int result;
		
		string x_str = IntToString(x);
		string y_str = IntToString(y);
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' + y_str[i] - '0' >= 10) {
				x_str[i] = x_str[i] - '0' + y_str[i] - 10;
			}
			else {
				x_str[i] = x_str[i] - '0' + y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		result = stringToInt(x_str);
		return result;
	}
	
	int sub(int x, int y) {
		int result;
		
		string x_str = IntToString(x);
		string y_str = IntToString(y);
		
		reverse(x_str.begin(), x_str.end());
		reverse(y_str.begin(), y_str.end());
		
		int max_value = max(x_str.size(), y_str.size());
		
		while (x_str.size() < max_value) {
			x_str += "0";
		}
		while (y_str.size() < max_value) {
			y_str += "0";
		}
		
		for (int i = 0; i < max_value; i++) {
			if (x_str[i] - '0' - (y_str[i] - '0') < 0) {
				x_str[i] = x_str[i] + '0' - y_str[i] + 10;
			}
			else {
				x_str[i] = x_str[i] + '0' - y_str[i];
			}
		}
		
		reverse(x_str.begin(), x_str.end());
		
		result = stringToInt(x_str);
		return result;
	}
	
};

int stringToInt(const string s) {
	stringstream ss;
	int result;
	ss << s;
	ss >> result;
	
	return result;
}

string IntToString(const int t) {
	stringstream ss;
	string result;
	ss << t;
	ss >> result;
	
	return result;
}

int main(void) {
	
	int t;
	cin >> t;
	while (t--) {
		int who;
		string eqn;
		Group *g;
		
		int x;
		int y;
		char op;
		
		cin >> who >> x >> op >> y;
		if (who == 1) {
			g = new GroupA;
			switch (op) {
				case '+': cout << g->add(x, y) << endl; break;
				case '-': cout << g->sub(x, y) << endl; break;
			}
			delete g;
		}
		else if (who == 2) {
			g = new GroupB;
			switch (op) {
				case '+': cout << g->add(x, y) << endl; break;
				case '-': cout << g->sub(x, y) << endl; break;
			}
			delete g;
		}
		
		else if (who == 3) {
			g = new GroupC;
			switch (op) {
				case '+': cout << g->add(x, y) << endl; break;
				case '-': cout << g->sub(x, y) << endl; break;
			}
			delete g;
		}
	}
	
	return 0;
}
------------------------------------------------------
2017301020:Problem1234:答案错误
#include <iostream>
#include <cstring>
#include <iomanip>
using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);

};

int GroupA::add(int x, int y){
    cout<<x+y<<endl;
    return x+y;
}

int GroupA::sub(int x, int y){
    cout<<x-y<<endl;
    return x-y;
}

class GroupB:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);
};

int GroupB::add(int x, int y){
    cout<<x+y<<endl;
    return x+y;
}

int GroupB::sub(int x, int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    for(k=0;k<=j;k++){
        a[k]=a[k]-b[k];
        if(a[k]<0)
            a[k]=a[k]+10;
    }
    for(j=i;j>=0;j--)
        cout<<a[j];
    cout<<endl;
}

class GroupC:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);
};

int GroupC::add(int x,int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    for(k=0;k<=j;k++){
        a[k]=a[k]+b[k];
        if(a[k]>=10)
            a[k]=a[k]-10;
    }
    for(j=i;j>=0;j--)
        cout<<a[j];
    cout<<endl;
    return 1;
}

int GroupC::sub(int x, int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    for(k=0;k<=j;k++){
        a[k]=a[k]-b[k];
        if(a[k]<0)
            a[k]=a[k]+10;
    }
    for(j=i;j>=0;j--)
        cout<<a[j];
    cout<<endl;
}


int main(){
    Group *pv;
    char ope;
    int t,type,a,b;
    cin>>t;
    while(t--){
        cin>>type>>a>>ope>>b;
        if(type==1){
            GroupA g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
        else if(type==2){
            GroupB g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
        else{
            GroupC g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
    }
    return 0;
}

------------------------------------------------------
2018151066:Problem1232:正确
#include <iostream>
#include<string>
using namespace std;

class Vehicle
{
protected:
	string no;
public:
	Vehicle(string n) :no(n) {}
	virtual void display() = 0;
};
class Car :public Vehicle
{
protected:
	int num, weight;
public:
	Car(int num_, int weight_, string no) :num(num_), weight(weight_), Vehicle(no) {}
	void display()
	{
		cout << no << " " << num * 8 + weight * 2 << endl;
	}
};
class Truck :public Vehicle
{
protected:
	int weight;
public:
	Truck(int weight_, string no) :weight(weight_), Vehicle(no) {}
	void display()
	{
		cout << no << " " << weight * 5 << endl;
	}
};
class Bus :virtual public Vehicle
{
protected:
	int num;
public:
	Bus(int num_, string no) :num(num_), Vehicle(no) {}
	void display()
	{
		cout << no << " " << num * 3 << endl;
	}
};

int main()
{
	int t;
	cin >> t;
	Vehicle *pv;
	while (t--)
	{
		int cmd;
		string no;
		cin >> cmd;
		if (cmd == 1)
		{
			int weight, num;
			cin >> no >> num >> weight;
			pv=new Car (num, weight, no);
		}
		else if (cmd == 2)
		{
			int weight;
			cin >> no >> weight;
			pv =new Truck(weight, no);
		}
		else
		{
			int num;
			cin >> no >> num;
			pv=new Bus(num, no);
		}
		pv->display();
	}
	delete pv;
	return 0;
}
------------------------------------------------------
2017047011:Problem1119:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class baseAccount
{ 
protected:
	string name;
	string no;
	double balance;
public:
	baseAccount(){}
	baseAccount(string name1,string no1,double b);
	void deposit(double num);
	virtual void withdraw(double num);
	virtual void display();
};

baseAccount::baseAccount(string name1,string no1,double b){
	name=name1;no=no1;balance=b;
}

void baseAccount::deposit(double num){
	balance+=num;
}

void baseAccount::withdraw(double num){
	if(num>balance)
		cout<<"insufficient"<<endl;
	else
		balance-=num;
}

void baseAccount::display(){
	cout<<name<<" "<<no<<" Balance:"<<balance<<endl;
}
//------------------------
class Cplus:public baseAccount
{ 
protected:
	double limit;
	double lmtnum;
public:
	Cplus(string name1,string no1,double b);
	void withdraw(double num);
	void display();
};

Cplus::Cplus(string name1,string no1,double b){
	name=name1;no=no1;balance=b;limit=5000;lmtnum=0;
}

void Cplus::withdraw(double num){
	if(num>limit+balance)
		cout<<"insufficient"<<endl;
	else if(num<=balance)
		balance-=num;
	else{
		lmtnum+=(num-balance);
		balance=0;
		limit=5000-lmtnum;
	}
}

void Cplus::display(){
	cout<<name<<" "<<no<<" Balance:"<<balance<<" limit:"<<limit<<endl;	
}
//------------------------
int main()
{
	int t,i;
	string name,no;
	double balance,num;
	baseAccount *p;
	
	cin>>t;
	while(t--)
	{
		cin>>name>>no>>balance;
		
		if(no[1]=='A'){
			baseAccount base(name,no,balance);
			for(i=0;i<4;i++){
				cin>>num;
				if(i%2==0)
					base.deposit(num);
				else 
					base.withdraw(num);				
			}
			p=&base;
			p->display();
		}
		
		else if(no[1]=='P'){
			Cplus plus1(name,no,balance);
			for(i=0;i<4;i++){
				cin>>num;
				if(i%2==0)
					plus1.deposit(num);
				else 
					plus1.withdraw(num);				
			}
			p=&plus1;
			p->display();
		}
		
	}
	
}
------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        for(i=0;s1[i]!='\0'&&s[i]!='\0';i++)
        {
            s2[i]=((s1[i]-'0')+(s[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2016073026:Problem1234:正确
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){return x-y;}
};

class GroupB:public Group{
public:
    virtual int add(int x, int y){return x+y;}
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i,pow;
        for(i=0,pow=1;i<min(j,k);i++,pow*=10){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow;
            else
                result+=(ar1[i]-ar2[i]) * pow;
        }
        if(j>k)
            while(i<j){
                result+=ar1[i]*pow;
                i++;
                pow*=10;
            }
        if(k>j)
            while(i<k){
                result+=ar2[i]*pow;
                i++;
                pow*=10;
            }
        return result;
    }
};

class GroupC:public Group{
public:
    virtual int add(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i,pow;
        for(i=0,pow=1;i<min(j,k);i++,pow*=10)
            result+=(ar1[i]+ar2[i])%10 * pow;
        if(j>k)
            while(i<j){
                result+=ar1[i]*pow;
                i++;
                pow*=10;
            }
        if(k>j)
            while(i<k){
                result+=ar2[i]*pow;
                i++;
                pow*=10;
            }
        return result;
    }
    virtual int sub(int x, int y){
        int ar1[10]={0},ar2[10]={0};
        int j=0,k=0;
        while(x){
            ar1[j++]=x%10;
            x=x/10;
        }
        while(y){
            ar2[k++]=y%10;
            y=y/10;
        }
        int result=0,i,pow;
        for(i=0,pow=1;i<min(j,k);i++,pow*=10){
            if(ar1[i]-ar2[i]<0)
                result+=(ar1[i]+10-ar2[i]) * pow;
            else
                result+=(ar1[i]-ar2[i]) * pow;
        }
        if(j>k)
            while(i<j){
                result+=ar1[i]*pow;
                i++;
                pow*=10;
            }
        if(k>j)
            while(i<k){
                result+=ar2[i]*pow;
                i++;
                pow*=10;
            }
        return result;
    }
};

int main()
{
    Group* pg;
    int t;
    cin>>t;
    while(t--){
        int group,a,b;
        char op;
        cin>>group>>a>>op>>b;
        switch(group){
            case 1: pg=new GroupA;break;
            case 2: pg=new GroupB;break;
            case 3: pg=new GroupC;break;
        }
        if(op=='+')
            cout<<pg->add(a,b)<<endl;
        else
            cout<<pg->sub(a,b)<<endl;;
    }
    return 0;
}

------------------------------------------------------
2018152029:Problem1234:正确
#include<bits/stdc++.h>
using namespace std;

class Group
{
public:
	virtual int add(int x, int y) = 0;//输出加法的运算结果
	virtual int sub(int x, int y) = 0;//输出减法的运算结果
	virtual ~Group() {}
};

class GroupA :public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		return x - y;
	}
};

class GroupB :public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		int a[100], i = 0;
		while (x || y)
		{
			a[i++] = (10 + x % 10 - y % 10) % 10;
			x /= 10;
			y /= 10;
		}
		int res = 0;
		for (int j = i - 1; j >= 0; j--)
		{
			res = res * 10 + a[j];
		}
		return res;
	}
};

class GroupC :public Group
{
public:
	int add(int x, int y)
	{
		int a[100], i = 0;
		while (x || y)
		{
			a[i++] = (x % 10 + y % 10) % 10;
			x /= 10;
			y /= 10;
		}
		int res = 0;
		for (int j = i - 1; j >= 0; j--)
			res = res * 10 + a[j];
		return res;
	}
	int sub(int x, int y)
	{
		int a[100], i = 0;
		while (x || y)
		{
			a[i++] = (10 + x % 10 - y % 10) % 10;
			x /= 10;
			y /= 10;
		}
		int res = 0;
		for (int j = i - 1; j >= 0; j--)
		{
			res = res * 10 + a[j];
		}
		return res;
	}
};

int main()
{
	int T;
	cin >> T;
	Group *pv;
	while (T--)
	{
		int judge, a, b;
		char c;
		cin >> judge >> a >> c >> b;
		if (judge == 1)
			pv = new GroupA;
		else if (judge == 2)
			pv = new GroupB;
		else
			pv = new GroupC;
		if (c == '+')
			cout << pv->add(a, b) << endl;
		else
			cout << pv->sub(a, b) << endl;
		delete pv;
	}
	//system("pause");
	return 0;
}
------------------------------------------------------
2018151066:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class  Animal
{
public:
	virtual void speak() = 0;
};
class Tiger :public Animal
{
protected:
	int age;
	string name;
public:
	Tiger(int a, string n) :age(a), name(n) {}
	void speak()
	{
		cout << "Hello,I am " << name << ",AOOO." << endl;
	}
};

class Pig :public Animal
{
protected:
	int age;
	string name;
public:
	Pig(int a, string n) :age(a), name(n) {}
	void speak()
	{
		cout << "Hello,I am " << name << ",HENGHENG." << endl;
	}
};

class Duck :public Animal
{
protected:
	int age;
	string name;
public:
	Duck(int a, string n) :age(a), name(n) {}
	void speak()
	{
		cout << "Hello,I am " << name << ",GAGA." << endl;
	}
};

class Dog :public Animal
{
protected:
	int age;
	string name;
public:
	Dog(int a, string n) :age(a), name(n) {}
	void speak()
	{
		cout << "Hello,I am " << name << ",WangWang." << endl;
	}
};
int main()
{
	int t;
	Animal *pv;
	cin >> t;
	while (t--)
	{
		string type, name;
		int age;
		cin >> type >> name >> age;
		if (type == "Tiger")
		{
			pv=new Tiger(age, name);
			pv->speak();
		}
		else if (type == "Dog")
		{
			pv=new Dog(age, name);
			pv->speak();

		}
		else if (type == "Duck")
		{
			pv=new Duck(age, name);
			pv->speak();

		}
		else if (type == "Pig")
		{
			pv=new Pig(age, name);
			pv->speak();
		}
		else
			cout << "There is no " << type << " in our Zoo." << endl;
	}
	delete pv;
	return 0;
}
------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum[10];
        for(int i=0; i<10; i++)
            sum[i]=NULL;
        int s = 0,xx=0,yy=0;
        double m=0,n=0,o=0;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = 10;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum[10];
        for(int i=0; i<10; i++)
            sum[i]=NULL;
        int s = 0,xx=0,yy=0;
        double m=0,n=0,o=0;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = 0;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*m;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151066:Problem1119:正确
#include<iostream>
#include<string>
using namespace std;
class  BaseAccount
{
protected:
	string name, account;
	int balance;
public:
	BaseAccount(string n, string a, int b) :name(n), account(a), balance(b) {}
	virtual void deposit(int n)
	{
		balance += n;
	}
	virtual void withdraw(int n)
	{
		if (n > balance)
			cout << "insufficient" << endl;
		else
			balance -= n;
	}
	virtual void display()
	{
		cout << name << " " << account << " Balance:" << balance << endl;
	}
};

class BasePlus :public BaseAccount
{
protected:
	int limit, limit_sum;
public:
	BasePlus(string name, string a, int balance) :limit(5000), limit_sum(0), BaseAccount(name, a, balance) {};
	void deposit(int n)
	{
		if (balance > 0)
			balance += n;
		else if (n > limit_sum)
		{
			balance += n - limit_sum;
			limit_sum = 0;
		}
		else if (limit_sum >= n)
		{
			limit_sum -= n;
		}
	}
	void withdraw(int n)
	{
		if (n + limit_sum > limit)
			cout << "insufficient" << endl;
		else if (n > balance)
		{
			limit_sum = n - balance;
			balance = 0;
		}
		else if (n <= balance)
		{
			balance -= n;
		}

	}
	void display()
	{
		cout << name << " " << account << " Balance:" << balance << " limit:" << limit - limit_sum << endl;
	}

};

int main()
{
	int t;
	cin >> t;
	BaseAccount *pv;
	while (t--)
	{
		string name, account;
		int balance;
		cin >> name >> account >> balance;
		int d1, w1, d2, w2;
		cin >> d1 >> w1 >> d2 >> w2;
		if (account[1] == 'A')
		{
			pv = new BaseAccount(name, account, balance);
		}
		else
		{
			pv = new BasePlus(name, account, balance);
		}
		pv->deposit(d1);
		pv->withdraw(w1);
		pv->deposit(d2);
		pv->withdraw(w2);
		pv->display();
	}
	delete pv;
	return 0;
}
------------------------------------------------------
2018151027:Problem1129:正确
#include <iostream>
using namespace std;

//类定义
class Ncard
{
protected:
    string id;
    char name;
    int balance;
public:
    virtual void initialize(string id, char n, int b);
    int deposit(int x);
    virtual int withdraw(int x);
    virtual void info();
    //virtual void show(Ncard &obj);
};
class Tcard: public Ncard
{
protected:
    int travelbalance;
public:
    int transfer(int g);
    void info();
    void initialize(string id,char name,int balance,int tbalance);
};
class Vcard: public Ncard
{
protected:
    int credit;
public:
    int over(int g);
    int withdraw(int g);
    void info();
    void initialize(string id,char name,int balance,int credit);
};

//类实现
void Ncard::initialize(string i, char n, int b)
{
    id=i;
    name=n;
    balance=b;
}
int Ncard::deposit(int g)
{
    if(g<0)
        return -1;
    else
        balance+=g;
    return 1;
}
int Ncard::withdraw(int g)
{
    if(g>balance||g<0)
        return -1;
    else
        balance-=g;
    return 1;
}
void Ncard::info()
{
    cout<<id<<"-"<<name<<"-" <<balance<<endl;
}
void Tcard::initialize(string i,char n,int b,int t)
{
    id=i;
    name=n;
    balance=b;
    travelbalance=t;
}
int Tcard::transfer(int g)
{
    if(g>balance||g<0)
        return -1;
    else
    {
        balance-=g;
        travelbalance+=g;
        return 1;
    }
}
void Tcard::info()
{
    cout<<id<<"-"<<name<<"-" <<balance<<"-"<<travelbalance<<endl;
}
void Vcard::initialize(string i,char n,int b,int c)
{
    id=i;
    name=n;
    balance=b;
    credit=c;
}
int Vcard::over(int g)
{
    if(g>credit)
        return -1;
    else
    {
        g=g-balance;
        balance=0;
        credit-=g;
    }
    return 1;
}
int Vcard::withdraw(int x)
{
    if(x>credit+balance||x<0)
        return -1;
    else if(x>balance)
        over(x);
    else
        balance-=x;
    return 1;
}
void Vcard::info()
{
    cout<<id<<"-"<<name<<"-" <<balance<<"-"<<credit<<endl;
}
void show(Ncard &obj)
{
    obj.info();
}

//主函数
main()
{
    string id;
    char name;
    int balance,credit,tbalance;
    int g1,g2,g3,g4;
    Ncard n;
    Tcard t;
    Vcard v;
    cin>>id>>name>>balance;
    n.initialize(id,name,balance);
    cin>>id>>name>>balance>>tbalance;
    t.initialize(id,name,balance,tbalance);
    cin>>id>>name>>balance>>credit;
    v.initialize(id,name,balance,credit);
    cin>>g1>>g2>>g3>>g4;
    n.deposit(g1);
    n.deposit(g2);
    n.withdraw(g3);
    n.withdraw(g4);
    cin>>g1>>g2>>g3>>g4;
    t.deposit(g1);
    t.withdraw(g2);
    t.transfer(g3);
    t.transfer(g4);
    cin>>g1>>g2>>g3>>g4;
    v.deposit(g1);
    v.withdraw(g2);
    v.over(g3);
    v.over(g4);
    show(n);
    show(t);
    show(v);

}

------------------------------------------------------
2018151027:Problem1129:正确
#include <iostream>
using namespace std;

//类定义
class Ncard
{
protected:
    string id;
    char name;
    int balance;
public:
    virtual void initialize(string id, char n, int b);
    int deposit(int x);
    virtual int withdraw(int x);
    virtual void info();
    //virtual void show(Ncard &obj);
};
class Tcard: public Ncard
{
protected:
    int travelbalance;
public:
    int transfer(int g);
    void info();
    void initialize(string id,char name,int balance,int tbalance);
};
class Vcard: public Ncard
{
protected:
    int credit;
public:
    int over(int g);
    int withdraw(int g);
    void info();
    void initialize(string id,char name,int balance,int credit);
};

//类实现
void Ncard::initialize(string i, char n, int b)
{
    id=i;
    name=n;
    balance=b;
}
int Ncard::deposit(int g)
{
    if(g<0)
        return -1;
    else
        balance+=g;
    return 1;
}
int Ncard::withdraw(int g)
{
    if(g>balance||g<0)
        return -1;
    else
        balance-=g;
    return 1;
}
void Ncard::info()
{
    cout<<id<<"-"<<name<<"-" <<balance<<endl;
}
void Tcard::initialize(string i,char n,int b,int t)
{
    id=i;
    name=n;
    balance=b;
    travelbalance=t;
}
int Tcard::transfer(int g)
{
    if(g>balance||g<0)
        return -1;
    else
    {
        balance-=g;
        travelbalance+=g;
        return 1;
    }
}
void Tcard::info()
{
    cout<<id<<"-"<<name<<"-" <<balance<<"-"<<travelbalance<<endl;
}
void Vcard::initialize(string i,char n,int b,int c)
{
    id=i;
    name=n;
    balance=b;
    credit=c;
}
int Vcard::over(int g)
{
    if(g>credit)
        return -1;
    else
    {
        g=g-balance;
        balance=0;
        credit-=g;
    }
    return 1;
}
int Vcard::withdraw(int x)
{
    if(x>credit+balance||x<0)
        return -1;
    else if(x>balance)
        over(x);
    else
        balance-=x;
    return 1;
}
void Vcard::info()
{
    cout<<id<<"-"<<name<<"-" <<balance<<"-"<<credit<<endl;
}
void show(Ncard &obj)
{
    obj.info();
}

//主函数
main()
{
    string id;
    char name;
    int balance,credit,tbalance;
    int g1,g2,g3,g4;
    Ncard n;
    Tcard t;
    Vcard v;
    cin>>id>>name>>balance;
    n.initialize(id,name,balance);
    cin>>id>>name>>balance>>tbalance;
    t.initialize(id,name,balance,tbalance);
    cin>>id>>name>>balance>>credit;
    v.initialize(id,name,balance,credit);
    cin>>g1>>g2>>g3>>g4;
    n.deposit(g1);
    n.deposit(g2);
    n.withdraw(g3);
    n.withdraw(g4);
    cin>>g1>>g2>>g3>>g4;
    t.deposit(g1);
    t.withdraw(g2);
    t.transfer(g3);
    t.transfer(g4);
    cin>>g1>>g2>>g3>>g4;
    v.deposit(g1);
    v.withdraw(g2);
    v.over(g3);
    v.over(g4);
    show(n);
    show(t);
    show(v);

}

------------------------------------------------------
2018151066:Problem1235:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
	virtual double getArea() = 0;
};

class Rect : public Geometry
{
protected:
	double w, h;
public:
	Rect(double w_, double h_) :w(w_), h(h_) {}
	double getArea()
	{
		return w * h;
	}
};

class Circle : public Geometry
{
protected:
	double r;
public:
	Circle(double r_) :r(r_) {}
	double getArea()
	{
		return 3.14*r*r;
	}
};

class TotalArea :public Rect, public Circle
{
public:
	static void computerTotalArea(Geometry** data, int n);
};

void TotalArea::computerTotalArea(Geometry **data, int n)
{
	double maxArea = 0;
	for (int i = 0; i < n; i++)
	{
		if (data[i]->getArea() > maxArea)
			maxArea = data[i]->getArea();
	}
	cout << "最大面积=" << setiosflags(ios::fixed) << setprecision(2) << maxArea << endl;

}
int main()
{
	int t;
	cin >> t;
	Geometry **data = new Geometry*[t];
	for (int i = 0; i < t; i++)
	{
		int cmd;
		cin >> cmd;
		if (cmd == 1)
		{
			int w, h;
			cin >> w >> h;
			data[i]=new Rect(w, h);
		}
		else
		{
			int r;
			cin >> r;
			data[i]=new Circle(r);
		}
	}
	TotalArea::computerTotalArea(data, t);
	for (int i = 0; i < t; i++)
	{
		delete data[i];
	}
}
------------------------------------------------------
2017301020:Problem1234:正确
#include <iostream>
#include <cstring>
#include <iomanip>
using namespace std;

class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);

};

int GroupA::add(int x, int y){
    cout<<x+y<<endl;
    return x+y;
}

int GroupA::sub(int x, int y){
    cout<<x-y<<endl;
    return x-y;
}

class GroupB:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);
};

int GroupB::add(int x, int y){
    cout<<x+y<<endl;
    return x+y;
}

int GroupB::sub(int x, int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    for(k=0;k<=j;k++){
        a[k]=a[k]-b[k];
        if(a[k]<0)
            a[k]=a[k]+10;
    }
    for(j=i;j>=0;j--)
        cout<<a[j];
    cout<<endl;
}

class GroupC:public Group{
public:
    virtual int add(int x, int y);
    virtual int sub(int x, int y);
};

int GroupC::add(int x,int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    j=max(i,j);
    for(k=0;k<=j;k++){
        a[k]=a[k]+b[k];
        if(a[k]>=10)
            a[k]=a[k]-10;
    }
    for(i=j;i>=0;i--)
        cout<<a[i];
    cout<<endl;
    return 1;
}

int GroupC::sub(int x, int y){
    int a[10];
    int b[10];
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(a));
    int i,j,k;
    for(i=0;i<10;i++){
        a[i]=x%10;
        x=x/10;
        if(x==0)
            break;
    }
    for(j=0;j<10;j++){
        b[j]=y%10;
        y=y/10;
        if(y==0)
            break;
    }
    for(k=0;k<=j;k++){
        a[k]=a[k]-b[k];
        if(a[k]<0)
            a[k]=a[k]+10;
    }
    for(j=i;j>=0;j--)
        cout<<a[j];
    cout<<endl;
}


int main(){
    Group *pv;
    char ope;
    int t,type,a,b;
    cin>>t;
    while(t--){
        cin>>type>>a>>ope>>b;
        if(type==1){
            GroupA g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
        else if(type==2){
            GroupB g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
        else{
            GroupC g;
            pv=&g;
            if(ope=='+')
                pv->add(a,b);
            else
                pv->sub(a,b);
        }
    }
    return 0;
}

------------------------------------------------------
2018152114:Problem1234:正确
#include<bits/stdc++.h>
#include<cstring>
using namespace std;
class Group
{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:public Group
{
public:
   virtual int add(int x, int y)
   {
       return x+y;
   }
   virtual int sub(int x, int y)
   {
		return x-y;
   }
};
class GroupB:public Group
{
    public:
   virtual int add(int x, int y)
   {
       return x+y;
   }
   virtual int sub(int x, int y)
   {

        int res = 0;
		int flag = 0;
		while (max(x, y))
		{
			int tmp = x % 10 - y % 10;

			if (tmp < 0)
				tmp += 10;
			res += tmp * pow(10, flag++);

			x /= 10;
			y /= 10;
		}

		return res;
   }
};
class GroupC:public Group
{
	virtual int add(int x, int y)
	{
		int res = 0;
		int flag = 0;

		while (max(x, y))
		{
			int tmp = x % 10 + y % 10;

			if (tmp > 9)
				tmp -= 10;
			res += tmp * pow(10, flag++);
			x /= 10;
			y /= 10;
		}

		return res;
	}

	virtual int sub(int x, int y)
	{
		int res = 0;
		int flag = 0;

		while (max(x, y))
		{
			int tmp = x % 10 - y % 10;

			if (tmp < 0)
				tmp += 10;

			res += tmp * pow(10, flag++);

			x /= 10;
			y /= 10;
		}

		return res;
	}
};
int main()
{
   int t;
	cin >> t;

	while (t--)
	{
		int type;
		cin >> type;
		Group * p ;
		if (type == 1)
			p = new GroupA();
		else if (type == 2)
			p = new GroupB();
		else
			p = new GroupC();
		int x, y;
		char ch;
		cin >> x >> ch >> y;
		cout << (ch == '+' ? p->add(x, y) : p->sub(x, y)) << endl;
		delete p;
	}

	return 0;


}
------------------------------------------------------
2017092048:Problem1232:正确
// May.27, 2019
// Author: Wenzhuo Dong
#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

class Vehicle{
protected:
    string no;
public:
    Vehicle(){}
    Vehicle(string n=""):no(n){}
    virtual void display() = 0;
};

class Car:public Vehicle {
private:
    int num;
    int weight;
public:
    //Car(){};
    Car(string no, int n=1, int w=1):Vehicle(no), num(n), weight(w){};
    ~Car(){}
    void display() {
        cout << no << " " << num*8+weight*2 << endl;
    }
};

class Truck:public Vehicle{
private:
    int weight;
public:
    //Truck(){}
    Truck(string no, int w=0):Vehicle(no), weight(w){};
    ~Truck(){}
    void display() {
        cout << no << " " << weight*5 << endl;
    }
};

class Bus:public Vehicle{
private:
    int num;
public:
    //Bus(){}
    Bus(string no, int n = 1):Vehicle(no), num(n){}
    ~Bus(){}
    void display() {
        cout << no << " " << num*3 << endl;
    }
};


int main() {
    int samples;
    cin >> samples;
    while(samples--) {
        Vehicle *pv;

        int opt;
        string no;
        int n, w;
        cin >> opt;
        switch (opt) {
            case 1:
                //car
                cin >> no >> n >> w;
                pv = new Car(no, n, w);
                break;
            case 2:
                // truck
                cin >> no >> w;
                pv = new Truck(no, w);
                break;
            case 3:
                // bus
                cin >> no >> n;
                pv = new Bus(no, n);
                break;
            default:
                //
                break;
        }
        pv->display();
    }
    return 0;
}



------------------------------------------------------
2017047011:Problem1235:正确
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip> 
using namespace std;

class Geometry{

public:
	virtual double getArea()=0; 
	Geometry(){}
};

//------------------------
class Rect:public Geometry
{ 
protected:
	double a;
	double b;
public:
	Rect(){}
	Rect(double a1,double b1);
	double getArea();
};

Rect::Rect(double a1,double b1){
	a=a1;b=b1;
}

double Rect::getArea(){
	return a*b;
}
//------------------------
class Circle:public Geometry
{ 
protected:
	double r;
public:
	Circle(){}
	Circle(double r1);
	double getArea();
};

Circle::Circle(double r1){
	r=r1;
}

double Circle::getArea(){
	return 3.14*r*r;
}

class TotalArea
{
public:
   static void computer(Geometry** p,int n);
};

void TotalArea::computer(Geometry **p,int n){
	int i,kind;
	double a,b,r,max;
	p=new Geometry*[n];
	max=0;
	
	for(i=0;i<n;i++){
		cin>>kind;
		if(kind==1){
			cin>>a>>b;
			Rect rect(a,b);
			p[i]=&rect; 
		}
		else if(kind==2){
			cin>>r;
			Circle cir(r);
			p[i]=&cir;
		}
	}
	
	for(i=0;i<n;i++){
		if(p[i]->getArea()>max)
			max=p[i]->getArea();
	}
	cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	
}
//------------------------
int main()
{
	int t;
	int kind;
	double a,b,r;
	Geometry **p;
	
	cin>>t;
	TotalArea maxArea;
	maxArea.computer(p,t);	
}
------------------------------------------------------
2017182103:Problem1129:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum[10];
        for(int i=0; i<10; i++)
            sum[i]=NULL;
        int s = 0,xx=0,yy=0;
        double m=0,n=0,o=0;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = 10;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum[10];
        for(int i=0; i<10; i++)
            sum[i]=NULL;
        int s = 0,xx=0,yy=0;
        double m=0,n=0,o=0;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = 0;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*m;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151066:Problem1234:正确
#include<iostream>
using namespace std;
class Group
{
public:
	virtual int add(int x, int y) = 0;//输出加法的运算结果
	virtual int sub(int x, int y) = 0;//输出减法的运算结果
};
class GroupA :public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		return x - y;
	}
};
void display(int *t, int n)
{
	for (int i = 0; i < n; i++)
		cout << t[i];
	cout << endl;
}
class GroupB :public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		int  *x_ = new int;
		int  *y_ = new int;
		int len_x = 0, len_y = 0;
		while (x)
		{
			x_[len_x++] = x % 10;
			x /= 10;
		}

		while (y)
		{
			y_[len_y++] = y % 10;
			y /= 10;
		}

		for (int i = 0; i < len_y; i++)
		{
			x_[i] -= y_[i];
			if (x_[i] < 0)
				x_[i] += 10;
		}

		int ans = 0;
		for (int i = 0; i < len_x; i++)
		{

			ans = ans * 10 + x_[len_x - i - 1];
		}

		return ans;
	}
};

class GroupC :public Group
{
public:
	int add(int x, int y)
	{
		int  *x_ = new int;
		int  *y_ = new int;
		int len_x = 0, len_y = 0;
		while (x)
		{
			x_[len_x++] = x % 10;
			x /= 10;
		}
		while (y)
		{
			y_[len_y++] = y % 10;
			y /= 10;
		}
		int len_m = (len_y > len_x ? len_y : len_x);
		int *c = new int[len_m];
		for (int i = 0; i < len_y + len_x - len_m; i++)
		{
			c[i] = x_[i] + y_[i];
			if (c[i] > 9)
				c[i] -= 10;
		}
		if (len_y > len_x)
		{
			for (int i = len_y + len_x - len_m; i < len_m; i++)
				c[i] = y_[i];
		}
		else
		{
			for (int i = len_y + len_x - len_m; i < len_m; i++)
				c[i] = x_[i];
		}
		int ans = 0;
		for (int i = 0; i < len_m; i++)
		{

			ans = ans * 10 + c[len_m - i - 1];
		}
		return ans;
	}
	int sub(int x, int y)
	{
		int  *x_ = new int;
		int  *y_ = new int;
		int len_x = 0, len_y = 0;
		while (x)
		{
			x_[len_x++] = x % 10;
			x /= 10;
		}
		while (y)
		{
			y_[len_y++] = y % 10;
			y /= 10;
		}
		for (int i = 0; i < len_y; i++)
		{
			x_[i] -= y_[i];
			if (x_[i] < 0)
				x_[i] += 10;
		}
		int ans = 0;
		for (int i = 0; i < len_x; i++)
		{

			ans = ans * 10 + x_[len_x - i - 1];
		}
		return ans;
	}
};
int main()
{
	int t;
	cin >> t;
	Group *group;
	while (t--)
	{
		int type;
		cin >> type;
		int x, y;
		char cmd;
		cin >> x >> cmd >> y;
		if (type == 1)
		{
			group = new GroupA;

		}
		else if (type == 2)
		{
			group = new GroupB;
		}
		else if (type == 3)
		{
			group = new GroupC;
		}
		if (cmd == '+')
			cout << group->add(x, y) << endl;
		else
			cout << group->sub(x, y) << endl;
	}
	delete group;
	return 0;
}
------------------------------------------------------
2016154114:Problem1234:正确
#include<iostream>
#include<string>
using namespace std;

class Group
{
public:
	virtual int add(int x, int y)=0;
	virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
	{
		return x+y;
    }
    virtual int sub(int x, int y)
	{
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
	{
        return x+y;
    }
    virtual int sub(int x, int y)
	{
        int result=0,temp=1;
        while(1)
        {
            int temp1=x%10;
			int temp2=y%10;
            if(x==y && x==0)
				break;
            if(temp1>=temp2)
				result+=(temp1-temp2)*temp;
            else
				result+=(temp1-temp2+10)*temp;
			x/=10;
			y/=10;
			temp*=10;
        }
        return result;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
	{
        int result=0,temp=1;
        while(1)
        {
            int temp1=x%10;
            int temp2=y%10;
            if(x==y && x==0)
				break;
            int sum=temp1+temp2;
            if(sum>10)
				sum-=10;
            result+=sum*temp;
            x/=10;
			y/=10;
			temp*=10;
        }
        return result;
    }
    virtual int sub(int x, int y)
	{
        int result=0,temp=1;
        while(1)
        {
            int temp1=x%10;
			int temp2=y%10;
            if(x==y && x==0)
				break;
            if(temp1>=temp2)
				result+=(temp1-temp2)*temp;
            else
				result+=(temp1-temp2+10)*temp;
			x/=10;
			y/=10;
			temp*=10;
        }
        return result;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *g;
        int i,j,group;
        string str,str1,str2; 
        char type;
        cin>>group>>str;
        
		for(i=0;i<str.length();i++)
        {
            if(str[i]=='+' || str[i]=='-')
            {
				j=i;
                break;
            }
            str1+=str[i];
        }
		type=str[j];
        for(i=j+1;i<str.length();i++)
        {
            str2+=str[i];
        }
        
		int x=atof(str1.c_str());
        int y=atof(str2.c_str());
        if(group==1)
        {
            GroupA A;
            g=&A;
            if(type=='+')
				cout<<g->add(x, y)<<endl;
            else
				cout<<g->sub(x, y)<<endl;
        }
        else if(group==2)
        {
            GroupB B;
            g=&B;
            if(type=='+')
			    cout<<g->add(x, y)<<endl;
            else
		        cout<<g->sub(x, y)<<endl;
        }
        else if(group==3)
        {
            GroupC C;
            g=&C;
            if(type=='+')
				cout<<g->add(x, y)<<endl;
            else
	            cout<<g->sub(x, y)<<endl;
        }
    }
	return 0;
}
------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum[10];
        for(int i=0; i<10; i++)
            sum[i]=NULL;
        int s = 0,xx=0,yy=0;
        double m=0,n=0,o=0;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;

                xx = 10;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx-yy;
                s = s + sum[i-1]*m1;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx-yy<0)
                    sum[i-1]=xx-yy+10;
                else
                    sum[i-1]=xx-yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum[10];
        for(int i=0; i<10; i++)
            sum[i]=NULL;
        int s = 0,xx=0,yy=0;
        double m=0,n=0,o=0;
        for(int i=1; i<100; i++)
        {
            m = pow(10,i);
            n = pow(10,i-1);
            o = pow(10,i+1);
            int m1 = m,n1 =n,o1=o;
            if(int(x/m)==0&&int(y/m)==0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)==0&&int(y/m)!=0)
            {
                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = 0;
                yy = (y%o1-y%m1)/m1;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*n;

                break;
            }
            else if(int(x/m)!=0&&int(y/m)==0)
            {

                xx = (x%m1 - x%n1)/n1;
                yy = (y%m1 - y%n1)/n1;

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;

                xx = (x%o1-x%m1)/m1;
                yy = 0;
                sum[i-1]=xx+yy;
                s = s + sum[i-1]*m;

                break;
            }
            else
            {
                if(i!=1)
                {
                    xx = (x%m1 - x%n1)/n1;
                    yy = (y%m1 - y%n1)/n1;
                }
                else
                {
                    xx = x%m1;
                    yy = y%m1;
                }

                if(xx+yy>=10)
                    sum[i-1]=xx+yy-10;
                else
                    sum[i-1]=xx+yy;

                s = s + sum[i-1]*n;
            }
        }
        return s;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int x0=0,x1=0,x2=0;
        int y0=0,y1=0,y2=0;

        x2 = x/100;
        x1 = (x%100)/10;
        x0 = (x%100)%10;

        y2 = y/100;
        y1 = (y%100)/10;
        y0 = (y%100)%10;

        if(x0-y0<0)
            x0+=10;
        if(x1-y1<0)
            x1+=10;

        return (x2-y2)*100+(x1-y1)*10+(x0-y0);
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int x0=0,x1=0,x2=0;
        int y0=0,y1=0,y2=0;

        x2 = x/100;
        x1 = (x%100)/10;
        x0 = (x%100)%10;

        y2 = y/100;
        y1 = (y%100)/10;
        y0 = (y%100)%10;

        if(x0+y0>10)
            x0-=10;
        if(x1+y1>10)
            x1-=10;

        return (x2+y2)*100+(x1+y1)*10+(x0+y0);
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2017152043:Problem1129:正确
#include<iostream>
using namespace std;


//类定义
class NCard{
protected:
    int ID;
    char CName;
    int Counter;;
public:
    NCard(){}
    void initial(int id,char cname,int counter);
    bool save(int money);
    bool take(int money);
    virtual void info();
};



//类实现
void NCard::initial(int id,char cname,int counter)
{
    ID = id;
    CName = cname;
    Counter = counter;
}

bool NCard::save(int money)
{
    if(money <= 0)
        return -1;
    else{
        Counter += money;
        return 1;
    }
}

bool NCard::take(int money)
{
    if(money <= 0)
        return -1;
    else if(money > Counter)
        return -1;
    else{
        Counter -= money;
        return 1;
    }
}

void NCard::info()
{
    cout << ID << "-" << CName << "-" << Counter << endl;
}



//类定义
class TCard:public NCard{
    int Tcounter;
public:
    TCard(){}
    void initial(int id,char cname,int counter,int tcounter);
    bool transfer(int money);
    void info();
};



//类实验
void TCard::initial(int id,char cname,int counter,int tcounter)
{
    ID = id;
    CName = cname;
    Counter = counter;
    Tcounter = tcounter;
}

bool TCard::transfer(int money)
{
    if(money <= 0 || money > Counter)
        return -1;
    else{
        Tcounter += money;
        Counter -= money;
        return 1;
    }
}

void TCard::info()
{
    cout << ID << "-" << CName << "-" << Counter << "-" << Tcounter << endl;
}




//类定义
class VCard:public NCard{
    int Credit;
public:
    VCard(){}
    void initial(int id,char cname,int counter,int credit);
    bool over(int money);
    void info();
};



//类实现
void VCard::initial(int id,char cname,int counter,int credit)
{
    ID = id;
    CName = cname;
    Counter = counter;
    Credit = credit;
}

bool VCard::over(int money)
{
    if(money <= 0 || money > (Counter + Credit))
        return -1;
    else{
        Credit -= money - Counter;
        Counter = 0;
        return 1;
    }
}

void VCard::info()
{
    cout << ID << "-" << CName << "-" << Counter << "-" << Credit << endl;
}


void show(NCard &obj)
{
    obj.info();
}



//主函数
int main(){
    int id;
    char cname;
    int counter;
    int tcounter;
    int credit;
    NCard n;
    TCard t;
    VCard v;
    cin >> id >> cname >> counter;
    n.initial(id,cname,counter);
    cin >> id >> cname >> counter >> tcounter;
    t.initial(id,cname,counter,tcounter);
    cin >> id >> cname >> counter >> credit;
    v.initial(id,cname,counter,credit);
    int in,out;
    cin >> in >> out;
    n.save(in);
    n.take(out);
    cin >> in >> out;
    n.save(in);
    n.take(out);
    cin >> in >> out;
    t.save(in);
    t.take(out);
    cin >> in >> out;
    t.transfer(in);
    t.transfer(out);
    cin >> in >> out;
    v.save(in);
    v.take(out);
    cin >> in >> out;
    v.over(in);
    v.over(out);

    show(n);
    show(t);
    show(v);

    return 0;
}
------------------------------------------------------
2017152043:Problem1232:正确
#include<iostream>
#include<cstring>
using namespace std;

class Vehicle{
protected:
	string no;//编号
public:
	Vehicle(){}
	virtual void display()=0;//应收费用
	void getNo(string num)
	{
		no = num;
	}
};

class Car:public Vehicle{
	int people;
	int weight;
public:
	Car(){}
	void display()
	{
		cout << no << " " << (people * 8 + weight * 2) << endl;
	}
	void getPW(int p,int w)
	{
		people = p;
		weight = w;
	}
};

class Truck:public Vehicle{
	int weight;
public:
	Truck(){}
	void display()
	{
		cout << no << " " << weight * 5 << endl;
	}
	void getW(int w)
	{
		weight = w;
	}
};

class Bus:public Vehicle{
	int people;
public:
	Bus(){}
	void display()
	{
		cout << no << " " << people * 3 << endl;
	}
	void getP(int p)
	{
		people = p;
	}
};


int main(){
	int t;
	cin >> t;
	Car car;
	Truck truck;
	Bus bus;
	Vehicle *pv;
	int type,p,w;
	string num;
	while(t--){	
		cin >> type >> num;
		if(type == 1){
			cin >> p >> w;
			car.getNo(num);
			car.getPW(p,w);
			pv = &car;
			pv->display();
		}
		else if(type == 2){
			cin >> w;
			truck.getNo(num);
			truck.getW(w);
			pv = &truck;
			pv->display();
		}
		else if(type == 3){
			cin >> p;
			bus.getNo(num);
			bus.getP(p);
			pv = &bus;
			pv->display();
		}
	}
	return 0;
}

------------------------------------------------------
2017092048:Problem1120:正确

#include <iostream>
#include <string>
#include <iomanip>
#include <map>

using namespace std;

class Animal{
protected:
	string name;
	int age;
public:
	Animal() {}
	Animal(string n = "", int a = 0) {
		name = n;
		age = a;
	}
	~Animal() {};
	virtual void speak() = 0;
};

class Tiger:public Animal {
public:
	Tiger(string n, int a) :Animal(n, a) {}

	virtual ~Tiger() {

	}

	void speak() {
		cout << "Hello,I am " << name << ",AOOO." << endl;
	}
};

class Dog:public Animal {
public:
	Dog(string n, int a) : Animal(n, a) {};

	virtual ~Dog() {

	}

	void speak() {
		cout << "Hello,I am " << name << ",WangWang." << endl;
	}
};

class Duck:public Animal {
public:
	Duck(string n, int a) : Animal(n, a) {}

	virtual ~Duck() {

	}

	void speak() {
		cout << "Hello,I am " << name << ",GAGA." << endl;

	}
};

class Pig:public Animal {
public:
	Pig(string n, int a) : Animal(n, a) {}

	virtual ~Pig() {

	}

	void speak() {
		cout << "Hello,I am " << name << ",HENGHENG." << endl;

	}
};

int main() {
	int samples;
	cin >> samples;
	Animal *pa;
	while (samples--) {
		string type;
		string name;
		int age;
		cin >> type >> name >> age;

		if (type == "Tiger") {
			pa = new Tiger(name, age);
		}
		else if (type == "Dog") {
			pa = new Dog(name, age);
		}
		else if (type == "Duck") {
			pa = new Duck(name, age);
		}
		else if (type == "Pig") {
			pa = new Pig(name, age);
		}
		else {
			cout << "There is no " << type << " in our Zoo." << endl;
			continue;
		}
		pa->speak();
	}
	return 0;
}
------------------------------------------------------
2018152051:Problem1129:正确
#include <iostream>
using namespace std;
class CCommon
{
protected:
	 long ID;
	 char CName;
	 int Counter;
public:
	CCommon(){}
	virtual void initial(long id,char name,int counter)
	{
		ID = id;
		CName = name;
		Counter = counter;
	}
	void save(int num)
	{
		if(num>=0)
			Counter+=num;
		else
			Counter = Counter;
	}
	bool take(int num)
	{
		if(num>=0)
		{
			if(num>Counter)
			{
				return false;
			}
			else
			{
				Counter-=num;
				return true;
			}
		}
		else
		{
			return false;
		}
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
};
class CTransfer:public CCommon
{
	int Tcounter;
public:
	CTransfer(){}
	void initial(long id,char name,int counter,int tc)
	{
		ID = id;
		CName = name;
		Counter = counter;
		Tcounter = tc;
	}
	bool transfer(int num)
	{
		if(num>Counter)
		{
			Tcounter = Tcounter;
			Counter = Counter;
			return false;
		}
		else
		{
			Tcounter+=num;
			Counter-=num;
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
};
class CVeryImpPer:public CCommon
{
	int credit;
public:
	CVeryImpPer(){}
	void initial(long id,char name,int counter,int cr)
	{
		ID = id;
		CName = name;
		Counter = counter;
		credit = cr;
	}
	bool over(int num)
	{
		if(num>Counter+credit)
		{
			credit = credit;
			Counter = Counter;
			return false;
		}
		else
		{
			credit-=(num-Counter);
			Counter = 0;
			return true;
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<credit<<endl;
	}
};
void show(CCommon& obj)
{
	obj.info();
}
int main()
{
	long id1,id2,id3;
	char name1,name2,name3;
	int counter1,counter2,counter3;
	int balance1,credit1;
	cin>>id1>>name1>>counter1;
	cin>>id2>>name2>>counter2>>balance1;
	cin>>id3>>name3>>counter3>>credit1;
	CCommon c1;
	CTransfer c2;
	CVeryImpPer c3;
	c1.initial(id1,name1,counter1);
	c2.initial(id2,name2,counter2,balance1);
	c3.initial(id3,name3,counter3,credit1);
	int num1,num2,num3,num4;
	cin>>num1;
	c1.save(num1);
	cin>>num2;
	c1.save(num2);
	cin>>num3;
	if(c1.take(num3)){}
	cin>>num4;
	if(c1.take(num4)){}
	show(c1);
	cin>>num1;
	c2.save(num1);
	cin>>num2;
	if(c2.take(num2)){}
	cin>>num3;
	if(c2.transfer(num3)){}
	cin>>num4;
	if(c2.transfer(num4)){}
	show(c2);
	cin>>num1;
	c3.save(num1);
	cin>>num2;
	if(c3.take(num2)){}
	cin>>num3;
	if(c3.over(num3)){}
	cin>>num4;
	if(c3.over(num4)){}
	show(c3);
}

------------------------------------------------------
2018151051:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
	virtual int add(int x,int y)=0;
	virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
	virtual int add(int x,int y)
	{
		return x+y;
	}
	virtual int sub(int x,int y)
	{
		return x-y;
	}
};
class GroupB:public Group
{
public:
	virtual int add(int x,int y)
	{
		return x+y;
	}
	virtual int sub(int x,int y)
	{
		int flag=0,i;
		for(i=0;x!=0||y!=0;i++)
		{
			int m,n;
			m=x%10;
			n=y%10;
			if(m-n<0)
				m=10+m;
			flag=flag+(m-n)*pow(10,i);
			x=x/10;
			y=y/10;
		}
		return flag;
	}
};
class GroupC:public Group
{
public:
	virtual int add(int x,int y)
	{
		int flag=0,i;
		for(i=0;x!=0||y!=0;i++)
		{
			int m,n;
			m=x%10;
			n=y%10;
			if(m+n>=10)
				flag=flag+(m+n-10)*pow(10,i);
			else if(m+n<10)
				flag=flag+(m+n)*pow(10,i);
			x=x/10;
			y=y/10;
		}
		return flag;
	}
	virtual int sub(int x,int y)
	{
		int flag=0,i;
		for(i=0;x!=0||y!=0;i++)
		{
			int m,n;
			m=x%10;
			n=y%10;
			if(m-n<0)
				m=10+m;
			flag=flag+(m-n)*pow(10,i);
			x=x/10;
			y=y/10;
		}
		return flag;
	}
};
int main()
{
	int n,i;
	cin>>n;
	for(i=1;i<=n;i++)
	{
		int type;
		int x,y;
		char ask;
		cin>>type;
		cin>>x>>ask>>y;
		Group *p;
		if(type==1)
			p=new GroupA;
		else if(type==2)
			p=new GroupB;
		else if(type==3)
			p=new GroupC;
		if(ask=='+')
			cout<<p->add(x,y)<<endl;
		else if(ask=='-')
			cout<<p->sub(x,y)<<endl;
		delete p;
	}
}
------------------------------------------------------
2017044015:Problem1119:正确
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class BaseAccount{
protected:
    string name, accout;
    double balance;
public:
    BaseAccount(string nstr, string astr, double bal){
        name = nstr;
        accout =  astr;
        balance = bal;
    }
    virtual void deposit(double d){
        balance += d;
    }
    virtual void withdraw(double d){
        if(balance < d)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        balance = balance - d;
    }
    virtual void display(){
        cout<<name<<" "<<accout<<" Balance:"<<balance<<endl;
    }
};

class BasePlus: public BaseAccount{
protected:
    double limit, limit_sum;
public:
    BasePlus(string nstr, string astr, double bal):BaseAccount(nstr, astr, bal){
        limit = 5000;
        limit_sum = 0;
    }
    virtual void deposit(double d){
        if(limit_sum > 0){
            if(limit_sum > d){
                limit_sum -= d;
                limit += d;
                return;
            }
            d = d - limit_sum;
            balance += d;
            limit = 5000;
            return;
        }
        balance += d;
        return;
    }
    virtual void withdraw(double d){
        if((balance + limit - limit_sum) < d)
        {
            cout<<"insufficient"<<endl;
            return;
        }
        balance = balance - d;
        if(balance < 0)
        {
            limit_sum = 0 - balance;
            balance = 0;
            limit = limit - limit_sum;
            return;
        }
    }
    virtual void display(){
        cout<<name<<" "<<accout<<" Balance:"
        <<balance<<" "<<"limit:"<<limit<<endl;
    }
};

int main()
{
    int t;
    double bal, op1, op2, op3, op4;
    string nstr, astr;
    cin>>t;
    while(t--){
        cin>>nstr>>astr>>bal;
        BaseAccount* p;
        if(astr[1] == 'A'){
            p = new BaseAccount(nstr, astr, bal);
            cin>>op1>>op2>>op3>>op4;
            p->deposit(op1);
            p->withdraw(op2);
            p->deposit(op3);
            p->withdraw(op4);
            p->display();
        }
        else if(astr[1] == 'P'){
            p = new BasePlus(nstr, astr, bal);
            cin>>op1>>op2>>op3>>op4;
            p->deposit(op1);
            p->withdraw(op2);
            p->deposit(op3);
            p->withdraw(op4);
            p->display();
        }
    }
    return 0;
}

------------------------------------------------------
2018192045:Problem1129:正确
#include<iostream>
using namespace std;
#include<cstring>

class comcard;
class Tcard;
class Vcard;
void show(comcard &p);
void show(Tcard &p);
void show(Vcard &p);
class comcard
{
protected:
    string ID;
    char name;
    int  Counter;
public:
    void initial(string ID1,char name1,int Counter1)
    {
        ID=ID1;
        name=name1;
        Counter=Counter1;
    }
    int save(int m)
    {
        if(m<=0)
            return -1;
        Counter+=m;
        return 1;
    }
    int take(int m)
    {
        if(m<=0||m>Counter)
            return -1;
        Counter-=m;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<name<<'-'<<Counter<<endl;
    }
};
class Tcard:public comcard
{
    int Tcounter;
public:
    void initial(string ID1,char name1,int Counter1,int Tcounter1)
    {
        ID=ID1;
        name=name1;
        Counter=Counter1;
        Tcounter=Tcounter1;
    }
    int transfer(int m)
    {
        if(m>Counter)
            return -1;
        Counter-=m;
        Tcounter+=m;
        return 1;
    }
    void info()
    {
        cout<<ID<<"-"<<name<<'-'<<Counter<<'-'<<Tcounter<<endl;
    }
};
class Vcard:public comcard
{
    int Credit;
public:
    void initial(string ID1,char name1,int Counter1,int Credit1)
    {
        ID=ID1;
        name=name1;
        Counter=Counter1;
        Credit=Credit1;

    }
    int over(int m)
    {
        if(m>Counter+Credit)
            return -1;
        Credit-=(m-Counter);
        Counter=0;
        return 1;

    }
    void info()
    {
        cout<<ID<<"-"<<name<<'-'<<Counter<<'-'<<Credit<<endl;
    }
};
int main()
{
    string ID;
    char name;
    int m1,m2,m3,m4;
    int Counter,Tcounter,Credit;//定义一系列变量用于输入参数
    comcard C;
    cin>>ID>>name>>Counter;
    C.initial(ID,name,Counter);
    Tcard T;
    cin>>ID>>name>>Counter>>Tcounter;
    T.initial(ID,name,Counter,Tcounter);
    Vcard V;
    cin>>ID>>name>>Counter>>Credit;
    V.initial(ID,name,Counter,Credit);//输入数据并初始化，用initial方法
    cin>>m1>>m2>>m3>>m4;//输入数据并按顺序进行操作
    C.save(m1);
    C.save(m2);
    C.take(m3);
    C.take(m4);//普通卡两次存款两次取款 ，save/take
    cin>>m1>>m2>>m3>>m4;
    T.save(m1);
    T.take(m2);
    T.transfer(m3);
    T.transfer(m4);//金卡1次存款一次取款2次转账；save/take/over
    cin>>m1>>m2>>m3>>m4;
    V.save(m1);
    V.take(m2);
    V.over(m3);
    V.over(m4);//贵宾卡一次存款一次取款两次透支
    show(C);
    show(T);
    show(V);//调用多态函数show输出三张卡的状态；
    return 0;
}
void show(comcard &p)
{
    p.info();
}
void show(Tcard &p)
{
    p.info();
}
void show(Vcard &p)
{
    p.info();
}

------------------------------------------------------
2018151066:Problem1234:正确
#include<iostream>
using namespace std;
class Group
{
public:
	virtual int add(int x, int y) = 0;//输出加法的运算结果
	virtual int sub(int x, int y) = 0;//输出减法的运算结果
};
class GroupA :public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		return x - y;
	}
};
void display(int *t, int n)
{
	for (int i = 0; i < n; i++)
		cout << t[i];
	cout << endl;
}
class GroupB :public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		int  *x_ = new int[20];
		int  *y_ = new int[20];
		int len_x = 0, len_y = 0;
		while (x)
		{
			x_[len_x++] = x % 10;
			x /= 10;
		}

		while (y)
		{
			y_[len_y++] = y % 10;
			y /= 10;
		}

		for (int i = 0; i < len_y; i++)
		{
			x_[i] -= y_[i];
			if (x_[i] < 0)
				x_[i] += 10;
		}

		int ans = 0;
		for (int i = 0; i < len_x; i++)
		{
			ans = ans * 10 + x_[len_x - i - 1];
		}
		delete []x_;
		delete []y_;
		return ans;
	}
};

class GroupC :public Group
{
public:
	int add(int x, int y)
	{
		int  *x_ = new int[20];
		int  *y_ = new int[20];
		int len_x = 0, len_y = 0;
		while (x)
		{
			x_[len_x++] = x % 10;
			x /= 10;
		}
		while (y)
		{
			y_[len_y++] = y % 10;
			y /= 10;
		}
		int len_m = (len_y > len_x ? len_y : len_x);
		int *c = new int[len_m];
		for (int i = 0; i < len_y + len_x - len_m; i++)
		{
			c[i] = x_[i] + y_[i];
			if (c[i] > 9)
				c[i] -= 10;
		}
		if (len_y > len_x)
		{
			for (int i = len_y + len_x - len_m; i < len_m; i++)
				c[i] = y_[i];
		}
		else
		{
			for (int i = len_y + len_x - len_m; i < len_m; i++)
				c[i] = x_[i];
		}
		int ans = 0;
		for (int i = 0; i < len_m; i++)
		{

			ans = ans * 10 + c[len_m - i - 1];
		}
		delete []x_;
		delete []y_;
		delete []c;
		return ans;
	}
	int sub(int x, int y)
	{
		int  *x_ = new int[20];
		int  *y_ = new int[20];
		int len_x = 0, len_y = 0;
		while (x)
		{
			x_[len_x++] = x % 10;
			x /= 10;
		}
		while (y)
		{
			y_[len_y++] = y % 10;
			y /= 10;
		}
		for (int i = 0; i < len_y; i++)
		{
			x_[i] -= y_[i];
			if (x_[i] < 0)
				x_[i] += 10;
		}
		int ans = 0;
		for (int i = 0; i < len_x; i++)
		{

			ans = ans * 10 + x_[len_x - i - 1];
		}
		delete[]x_;
		delete[]y_;
		return ans;
	}
};
int main()
{
	int t;
	cin >> t;
	Group *group;
	while (t--)
	{
		int type;
		cin >> type;
		int x, y;
		char cmd;
		cin >> x >> cmd >> y;
		if (type == 1)
		{
			group = new GroupA;

		}
		else if (type == 2)
		{
			group = new GroupB;
		}
		else if (type == 3)
		{
			group = new GroupC;
		}
		if (cmd == '+')
			cout << group->add(x, y) << endl;
		else
			cout << group->sub(x, y) << endl;
	}
	delete group;
	return 0;
}
------------------------------------------------------
2018151092:Problem1234:正确
#include<iostream>
#include<iomanip>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;

class Group
{
	public:
		virtual int add(int x,int y)=0;
		virtual int sub(int x,int y)=0;
};

class GroupA:public Group
{
	public:
		GroupA()
		{
		}
		
		virtual int add(int x,int y)
		{
			return x+y;
		}
		
		virtual int sub(int x,int y)
		{
			return x-y;
		}
		
		~GroupA()
		{
		}
};

class GroupB:public Group
{
	public:
		GroupB()
		{
		}
		
		virtual int add(int x,int y)
		{
			return x+y;
		}
		
		virtual int sub(int x,int y)
		{
			int xSingle;
			int ySingle;
			int sum=0;
			int count=0;
			
			while(x!=0||y!=0)
			{
				xSingle=x%10;
				ySingle=y%10;
				sum+=((xSingle-ySingle+10)%10)*pow(10,count);
				count++;
				x/=10;
				y/=10;
			}
			return sum;			
		}
		
		~GroupB()
		{
		}
};

class GroupC:public Group
{
	public:
		GroupC()
		{
		}
		
		virtual int add(int x,int y)
		{
			int xSingle;
			int ySingle;
			int sum=0;
			int count=0;
			
			while(x!=0||y!=0)
			{
				xSingle=x%10;
				ySingle=y%10;
				sum+=((xSingle+ySingle)%10)*pow(10,count);
				count++;
				x/=10;
				y/=10;
			}
			return sum;
		}
		
		virtual int sub(int x,int y)
		{
			int xSingle;
			int ySingle;
			int sum=0;
			int count=0;
			
			while(x!=0||y!=0)
			{
				xSingle=x%10;
				ySingle=y%10;
				sum+=((xSingle-ySingle+10)%10)*pow(10,count);
				count++;
				x/=10;
				y/=10;
			}
			return sum;
		}
		
		~GroupC()
		{
		}
};

int main()
{
	int Ans;
	int t;
	int i;
	int Gtype;
	int x;
	char symbol;
	int y;
	
	cin>>t;
	
	Group *Ace[t];
	
	for(i=0;i<t;i++)
	{
		cin>>Gtype>>x>>symbol>>y;
		
		if(Gtype==1)
		{
			Ace[i]=new GroupA;
			
			if(symbol=='+')
			{
				Ans=Ace[i]->add(x,y);
			}
			
			if(symbol=='-')
			{
				Ans=Ace[i]->sub(x,y);
			}
			
			cout<<Ans<<endl;
		}

		if(Gtype==2)
		{
			Ace[i]=new GroupB;
			
			if(symbol=='+')
			{
				Ans=Ace[i]->add(x,y);
			}
			
			if(symbol=='-')
			{
				Ans=Ace[i]->sub(x,y);
			}
			
			cout<<Ans<<endl;
		}
		
		if(Gtype==3)
		{
			Ace[i]=new GroupC;
			
			if(symbol=='+')
			{
				Ans=Ace[i]->add(x,y);
			}
			
			if(symbol=='-')
			{
				Ans=Ace[i]->sub(x,y);
			}
			
			cout<<Ans<<endl;
		}
	}
	return 0;	
}
------------------------------------------------------
2018152051:Problem1129:正确
#include <iostream>
using namespace std;
class CCommon
{
protected:
	 long ID;
	 char CName;
	 int Counter;
public:
	CCommon(){}
	virtual void initial(long id,char name,int counter)
	{
		ID = id;
		CName = name;
		Counter = counter;
	}
	bool save(int num)
	{
		if(num>=0)
		{
			Counter+=num;
			return true;
		}
		else
			return false;
	}
	bool take(int num)
	{
		if(num>=0)
		{
			if(num>Counter)
			{
				return false;
			}
			else
			{
				Counter-=num;
				return true;
			}
		}
		else
		{
			return false;
		}
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
};
class CTransfer:public CCommon
{
	int Tcounter;
public:
	CTransfer(){}
	void initial(long id,char name,int counter,int tc)
	{
		ID = id;
		CName = name;
		Counter = counter;
		Tcounter = tc;
	}
	bool transfer(int num)
	{
		if(num>Counter)
		{
			Tcounter = Tcounter;
			Counter = Counter;
			return false;
		}
		else
		{
			Tcounter+=num;
			Counter-=num;
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
};
class CVeryImpPer:public CCommon
{
	int credit;
public:
	CVeryImpPer(){}
	void initial(long id,char name,int counter,int cr)
	{
		ID = id;
		CName = name;
		Counter = counter;
		credit = cr;
	}
	bool over(int num)
	{
		if(num>Counter+credit)
		{
			credit = credit;
			Counter = Counter;
			return false;
		}
		else
		{
			credit-=(num-Counter);
			Counter = 0;
			return true;
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<credit<<endl;
	}
};
void show(CCommon& obj)
{
	obj.info();
}
int main()
{
	long id1,id2,id3;
	char name1,name2,name3;
	int counter1,counter2,counter3;
	int balance1,credit1;
	cin>>id1>>name1>>counter1;
	cin>>id2>>name2>>counter2>>balance1;
	cin>>id3>>name3>>counter3>>credit1;
	CCommon c1;
	CTransfer c2;
	CVeryImpPer c3;
	c1.initial(id1,name1,counter1);
	c2.initial(id2,name2,counter2,balance1);
	c3.initial(id3,name3,counter3,credit1);
	int num1,num2,num3,num4;
	cin>>num1;
	if(c1.save(num1)){}
	cin>>num2;
	if(c1.save(num2)){}
	cin>>num3;
	if(c1.take(num3)){}
	cin>>num4;
	if(c1.take(num4)){}
	show(c1);
	cin>>num1;
	if(c2.save(num1)){};
	cin>>num2;
	if(c2.take(num2)){}
	cin>>num3;
	if(c2.transfer(num3)){}
	cin>>num4;
	if(c2.transfer(num4)){}
	show(c2);
	cin>>num1;
	if(c3.save(num1)){}
	cin>>num2;
	if(c3.take(num2)){}
	cin>>num3;
	if(c3.over(num3)){}
	cin>>num4;
	if(c3.over(num4)){}
	show(c3);
}

------------------------------------------------------
2016071031:Problem1129:答案错误
//#include <iostream>
//#include <fstream>
#include <bits/stdc++.h>
using namespace std;

class Card {
protected:
    int ID;
    string name;
    int counter;
public:
    Card() { counter = 0;}
    Card(int ID_, string name_, int counter_)
            :ID(ID_), name(name_), counter(counter_) {}
    ~Card(){}

    int save(int amount) {
        if (amount > 0) {
            counter += amount;
            return 1;
        } else {
            return -1;
        }
    }

    int take(int amount) {
        if (amount > 0 && amount <= counter) {
            counter -= amount;
            return 1;
        } else {
            return -1;
        }
    }

    virtual void info() {
        cout<< ID << "-" << name << "-" << counter <<endl;
    }
};

class Traffic: public Card {
    int tcounter;
public:
    Traffic(): Card() { tcounter = 0; }
    Traffic(int ID_, string name_, int counter_, int tcounter_)
            : Card(ID_, name_, counter_), tcounter(tcounter_) {}
    ~Traffic() {}

    int transfer(int amount) {
        if (amount <= counter && amount) {
            tcounter += amount;
            return 1;
        } else {
            return -1;
        }
    }

    void info() override {
        cout<< ID << "-" << name << "-" << counter << "-" << tcounter <<endl;
    }
};

class VIP: public Card {
    int credit;
public:
    VIP(): Card() { credit = 0; }
    VIP(int ID_, string name_, int counter_, int credit_)
            : Card(ID_, name_, counter_), credit(credit_) {}
    ~VIP() {}

    int over (int amount) {
        if (amount && amount <= credit + counter) {
            credit -= amount - counter;
            counter = 0;
            return 1;
        } else {
            return -1;
        }
    }

    void info() override {
        cout<< ID << "-" << name << "-" << counter << "-" << credit <<endl;
    }
};

void show(Card & obj) {
    obj.info();
}

int main() {

//    第四行输入四个整数，表示对普通卡按顺序先执行2次存款，2次取款
//    第五行输入四个整数，表示对交通卡按顺序执行1次存款，1次取款，2次转帐
//    第六行输入四个整数，表示对贵宾卡按顺序执行1次存款，1次取款，2次透支

//    freopen("ojdata.txt", "r", stdin);
    int ID, counter, tcounter, credit;
    string name;
    int o1, o2, o3, o4;

    cin>> ID >> name >> counter;
    Card c(ID, name, counter);

    cin>> ID >> name >> counter >> tcounter;
    Traffic t(ID, name, counter, tcounter);

    cin>> ID >> name >> counter >> credit;
    VIP v(ID, name, counter, credit);

    cin>> o1 >> o2 >> o3 >> o4;
    c.save(o1);
    c.save(o2);
    c.take(o3);
    c.take(o4);
    show(c);


    cin>> o1 >> o2 >> o3 >> o4;
    t.save(o1);
    t.take(o2);
    t.transfer(o3);
    t.transfer(o4);
    show(t);


    cin>> o1 >> o2 >> o3 >> o4;
    v.save(o1);
    v.take(o2);
    v.over(o3);
    v.over(o4);
    show(v);


    return 0;
}

------------------------------------------------------
2016073026:Problem1129:正确
#include <iostream>
#include <iomanip>
#include <math.h>

using namespace std;
//类定义
class NCard{
protected:
    int ID;
    char CName;
    int Counter;
public:
    void initial(int id,char name,int ct);
    int save(int m);
    int take(int m);
    virtual void info();
};

class TCard:public NCard{
protected:
    int Tcounter;
public:
    void initial(int id,char name,int ct,int tc);
    int transfer(int m);
    virtual void info();
};

class VipCard:public TCard{
    int Credit;
public:
    void initial(int id,char name,int ct,int cred);
    int over(int m);
    virtual void info();
};

//类实现
void NCard::initial(int id,char name,int ct){
    ID=id;  CName=name; Counter=ct;
}
int NCard::save(int m){
    if(m>0){Counter+=m; return 1;}
        else return -1;
}
int NCard::take(int m){
    if(m>0&&m<=Counter){Counter-=m; return 1;}
    else return -1;
}
void NCard::info(){
    cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
}

void TCard::initial(int id,char name,int ct,int tc){
    ID=id;  CName=name; Counter=ct; Tcounter=tc;
}
int TCard::transfer(int m){
    if(m<=Counter){Counter-=m; Tcounter+=m; return 1;}
    else return -1;
}
void TCard::info(){
    cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
}

void VipCard::initial(int id,char name,int ct,int cred){
    ID=id;  CName=name; Counter=ct; Credit=cred;
}
int VipCard::over(int m){
    if(m<=Credit+Counter){
        Credit-=m-Counter;
        Counter=0;
        return 1;
    }
    else
        return -1;
}

void VipCard::info(){
    cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
}

//多态函数
void show(NCard & obj){
    obj.info();
}

//主函数
int main()
{
    int id,ct,tc,cd;
    char name;
    cin>>id>>name>>ct;
    NCard ncard;
    ncard.initial(id,name,ct);
    cin>>id>>name>>ct>>tc;
    TCard tcard;
    tcard.initial(id,name,ct,tc);
    cin>>id>>name>>ct>>cd;
    VipCard vipcard;
    vipcard.initial(id,name,ct,cd);

    int n1,n2,n3,n4;
    cin>>n1>>n2>>n3>>n4;
    ncard.save(n1);
    ncard.save(n2);
    ncard.take(n3);
    ncard.take(n4);
    cin>>n1>>n2>>n3>>n4;
    tcard.save(n1);
    tcard.take(n2);
    tcard.transfer(n3);
    tcard.transfer(n4);
    cin>>n1>>n2>>n3>>n4;
    vipcard.save(n1);
    vipcard.take(n2);
    vipcard.over(n3);
    vipcard.over(n4);
    show(ncard);
    show(tcard);
    show(vipcard);
    return 0;
}

------------------------------------------------------
2016071031:Problem1129:正确
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class Card {
protected:
    int ID;
    string name;
    int counter;
public:
    Card() { counter = 0;}
    Card(int ID_, string name_, int counter_)
            :ID(ID_), name(name_), counter(counter_) {}
    ~Card(){}

    int save(int amount) {
        if (amount > 0) {
            counter += amount;
            return 1;
        } else {
            return -1;
        }
    }

    int take(int amount) {
        if (amount > 0 && amount <= counter) {
            counter -= amount;
            return 1;
        } else {
            return -1;
        }
    }

    virtual void info() {
        cout<< ID << "-" << name << "-" << counter <<endl;
    }
};

class Traffic: public Card {
    int tcounter;
public:
    Traffic(): Card() { tcounter = 0; }
    Traffic(int ID_, string name_, int counter_, int tcounter_)
            : Card(ID_, name_, counter_), tcounter(tcounter_) {}
    ~Traffic() {}

    int transfer(int amount) {
        if (amount <= counter && amount) {
            tcounter += amount;
            counter -= amount;
            return 1;
        } else {
            return -1;
        }
    }

    void info() override {
        cout<< ID << "-" << name << "-" << counter << "-" << tcounter <<endl;
    }
};

class VIP: public Card {
    int credit;
public:
    VIP(): Card() { credit = 0; }
    VIP(int ID_, string name_, int counter_, int credit_)
            : Card(ID_, name_, counter_), credit(credit_) {}
    ~VIP() {}

    int over (int amount) {
        if (amount && amount <= credit + counter) {
            credit -= amount - counter;
            counter = 0;
            return 1;
        } else {
            return -1;
        }
    }

    void info() override {
        cout<< ID << "-" << name << "-" << counter << "-" << credit <<endl;
    }
};

void show(Card & obj) {
    obj.info();
}

int main() {

//    第四行输入四个整数，表示对普通卡按顺序先执行2次存款，2次取款
//    第五行输入四个整数，表示对交通卡按顺序执行1次存款，1次取款，2次转帐
//    第六行输入四个整数，表示对贵宾卡按顺序执行1次存款，1次取款，2次透支

//    freopen("ojdata.txt", "r", stdin);
    int ID, counter, tcounter, credit;
    string name;
    int o1, o2, o3, o4;

    cin>> ID >> name >> counter;
    Card c(ID, name, counter);

    cin>> ID >> name >> counter >> tcounter;
    Traffic t(ID, name, counter, tcounter);

    cin>> ID >> name >> counter >> credit;
    VIP v(ID, name, counter, credit);

    cin>> o1 >> o2 >> o3 >> o4;
    c.save(o1);
    c.save(o2);
    c.take(o3);
    c.take(o4);
    show(c);


    cin>> o1 >> o2 >> o3 >> o4;
    t.save(o1);
    t.take(o2);
    t.transfer(o3);
    t.transfer(o4);
    show(t);


    cin>> o1 >> o2 >> o3 >> o4;
    v.save(o1);
    v.take(o2);
    v.over(o3);
    v.over(o4);
    show(v);


    return 0;
}

------------------------------------------------------
2018152029:Problem1129:正确
#include<bits/stdc++.h>
using namespace std;
class Card;
void show(Card &obj);
class Card
{
protected:
	string ID;
	char CName;
	int Counter;
public:
	Card() {}
	Card(string id, char n, int c) :ID(id), CName(n), Counter(c) {}
	int save(int m)
	{
		if (m > 0)
		{
			Counter += m;
			return 1;
		}
		return -1;
	}
	int take(int m)
	{
		if (m > 0 && Counter >= m)
		{
			Counter -= m;
			return 1;
		}
		return -1;
	}
	virtual void info()
	{
		cout << ID << "-" << CName << "-" << Counter << endl;
	}
};

class TrafficCard :public Card
{
	int Tcounter;
public:
	TrafficCard(string i, char n, int c, int t) :Card(i,n,c), Tcounter(t) {}
	int transfer(int m)
	{
		if (m < 0)
			return -1;
		if (m <= Counter)
		{
			Counter -= m, Tcounter += m;
			return 1;
		}
		return -1;
	}
	virtual void info()
	{
		cout << ID << '-' << CName << '-' << Counter << '-' << Tcounter << endl;
	}
};

class VIPcard :public Card
{
	int Credit;
public:
	VIPcard(string i, char n, int c, int cre) :Card(i, n, c),Credit(cre){}
	bool over(int m)
	{
		if (m < 0)
			return -1;
		if (Counter + Credit >= m)
		{
			if (Counter >= m)
				Counter -= m;
			else
			{
				Credit -= (m-Counter);
				Counter = 0;
			}
		}
		return -1;
	}
	void info()
	{
		cout << ID << '-' << CName << '-' << Counter << '-' << Credit << endl;
	}
};

void show(Card &obj)
{
	obj.info();
}

int main()
{
	string a;
	int c, d;
	char b;
	cin >> a >> b >> c;
	Card aa(a, b, c);
	cin >> a >> b >> c >> d;
	TrafficCard bb(a, b, c, d);
	cin >> a >> b >> c >> d;
	VIPcard cc(a, b, c, d);
	cin >> c>>d;
	aa.save(c);
	aa.save(d);
	cin >> c >> d;
	aa.take(c);
	aa.take(d);
	cin >> c >> d;
	bb.save(c);
	bb.take(d);
	cin >> c >> d;
	bb.transfer(c);
	bb.transfer(d);
	cin >> c >> d;
	cc.save(c);
	cc.take(d);
	cin >> c >> d;
	cc.over(c);
	cc.over(d);
	show(aa);
	show(bb);
	show(cc);
	//system("pause");
	return 0;
}
------------------------------------------------------
2017092048:Problem1119:正确
// May.27, 2019
// Author: Wenzhuo Dong
#include <iostream>
#include <string>
#include <iomanip>
#include <map>

using namespace std;

class Base {
protected:
public:
	Base() {}
	~Base() {}
	virtual void display() = 0;
	virtual bool deposit(double) = 0;
	virtual bool withdraw(double) = 0;
};

class BaseAccount :public Base {
protected:
	string name;
	string account;
	double balance;
public:
	BaseAccount() {}

	BaseAccount(const string &name, const string &account, double balance) : name(name), account(account),
		balance(balance) {};
	bool deposit(double m) {
		balance = balance + m;
		return true;
	}
	bool withdraw(double m) {
		if ((balance - m) >= 0) {
			balance = balance - m;
			return true;
		}
		else {
			cout << "insufficient" << endl;
			return false;
		}
	}
	void display() {
		cout << name << " " << account << " Balance:" << balance << endl;
	}
};

class BasePlus :public BaseAccount {
protected:
	double limit;
	double limit_sum;
public:
	BasePlus(const string &name, const string &account, double balance, double limit) : BaseAccount(name, account,
		balance),
		limit(limit) {
		limit_sum = 0;
	};
	bool deposit(double m) {
		balance = balance + m;
		return true;
	}
	bool withdraw(double m) {
		if ((balance + limit - m) >= 0) {
			double blc = balance - m;
			if (blc >= 0) {
				balance = blc;
			}
			else {
				balance = 0;
				limit = limit + blc;
				limit_sum = limit_sum + (-blc);
			}
			return true;
		}
		else {
			cout << "insufficient" << endl;
			return false;
		}
	}

	void display() {
		cout << name << " " << account << " Balance:" << balance << " limit:" << limit << endl;
	}
};

int main() {
	int samples;
	cin >> samples;
	Base *pb;

	string name;
	string acc;
	double blc, lim;

	while (samples--) {

		cin >> name >> acc;
		if (acc[1] == 'A') {
			cin >> blc;
			pb = new BaseAccount(name, acc, blc);
		}
		else {
			cin >> blc;
			pb = new BasePlus(name, acc, blc, 5000);
		}

		// acc create completed;

		double a, b, c, d;
		cin >> a >> b >> c >> d;

		pb->deposit(a);
		pb->withdraw(b);
		pb->deposit(c);
		pb->withdraw(d);

		pb->display();
	}
	return 0;
}

------------------------------------------------------
2018192048:Problem1234:正确
#include<iostream>
using namespace std;
 
class Group{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};
 
class GroupA:public Group{
public:
    int add(int x,int y){
        return x+y;
    }
    int sub(int x,int y){
        return x-y;
    }
};
class GroupB:public Group{
public:
    int add(int x,int y){
        return x+y;
    }
    int sub(int x,int y){
        int count1=0,count2=0,a[10]={0},b[10]={0},c[10]={0};//count算位数,数组a、b存每个位置上的数字 
		for(int i=0;x!=0;i++){
			a[i]=x%10;
			x/=10;
			count1++;
		}
		for(int i=0;y!=0;i++){
			b[i]=y%10;
			y/=10;
			count2++;
		}
		if(count1<count2)
			count1=count2;
		for(int i=0;i<count1;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else
				c[i]=a[i]+10-b[i];
		}
		int sum=0;
		for(int i=count1-1;i>=0;i--){
			sum*=10;
			sum+=c[i];
		}
		return sum;		
    }
};
 
class GroupC:public Group{
public:
    int add(int x,int y){
        int count1=0,count2=0,a[10]={0},b[10]={0},c[10]={0};//count算位数,数组a、b存每个位置上的数字 
		for(int i=0;x!=0;i++){
			a[i]=x%10;
			x/=10;
			count1++;
		}
		for(int i=0;y!=0;i++){
			b[i]=y%10;
			y/=10;
			count2++;
		}
		if(count1<count2)
			count1=count2;
		for(int i=0;i<count1;i++){
			if(a[i]+b[i]>=10)
				c[i]=a[i]+b[i]-10;
			else
				c[i]=a[i]+b[i];
		}
		int sum=0;
		for(int i=count1-1;i>=0;i--){
			sum*=10;
			sum+=c[i];
		}
		return sum;
    }
    int sub(int x,int y){
        int count1=0,count2=0,a[10]={0},b[10]={0},c[10]={0};//count算位数,数组a、b存每个位置上的数字 
		for(int i=0;x!=0;i++){
			a[i]=x%10;
			x/=10;
			count1++;
		}
		for(int i=0;y!=0;i++){
			b[i]=y%10;
			y/=10;
			count2++;
		}
		if(count1<count2)
			count1=count2;
		for(int i=0;i<count1;i++){
			if(a[i]>=b[i])
				c[i]=a[i]-b[i];
			else
				c[i]=a[i]+10-b[i];
		}
		int sum=0;
		for(int i=count1-1;i>=0;i--){
			sum*=10;
			sum+=c[i];
		}
		return sum;
    }
};

int main(){
	int t;
	cin>>t;
	Group *p;
	while(t--){
		int type;
		cin>>type;
		int x,y;
		char ch;
		cin>>x>>ch>>y;
		if(type==1){
			p=new GroupA;
			if(ch=='+')
				cout<<p->add(x,y)<<endl;
			else if(ch=='-')
				cout<<p->sub(x,y)<<endl;
		}
		else if(type==2){
			p=new GroupB;
			if(ch=='+')
				cout<<p->add(x,y)<<endl;
			else if(ch=='-')
				cout<<p->sub(x,y)<<endl;
		}
		else if(type==3){
			p=new GroupC;
			if(ch=='+')
				cout<<p->add(x,y)<<endl;
			else if(ch=='-')
				cout<<p->sub(x,y)<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2017144045:Problem1129:正确
#include <iostream>
#include <cstring>
#include <iomanip>
#include <cmath>
using namespace std;
class origin
{
protected:
	int ID;
	char CName;
	int Counter;
	
public:
	origin()
	{
		
	 } 
	virtual void initial(int id,char n,int c)
	{
		ID=id;
		CName=n;
		Counter=c;
	}
    int save(double money)
    {
		if(abs(round(money)-money)<0.00000000001&&money>=0)
		{
			Counter=Counter+money;
			return 1;
		}
		else
		    return -1;
	}
	int take(double money)
	{
		if(abs(round(money)-money)<0.00000000001&&money<=Counter&&money>=0)
		{
			Counter=Counter-money;
			return 1;
		}
		else
		    return -1;
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
};

class Traffic:public origin
{
	int Tcounter;
public:
	Traffic()
	{
	}
	virtual void initial(int id,char n,int c,int t)
	{
		ID=id;
		CName=n;
		Counter=c;
		Tcounter=t;
	}
	int transfer(double money)
	{
		if(abs(round(money)-money)<0.00000000001&&money<=Counter&&money>=0)
		{
			Counter=Counter-money;
			Tcounter=Tcounter+money;
			return 1;
		}
		else
		    return -1;
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
};

class Vip:public origin
{
	int Credit;
public:
	Vip()
	{
	}
	virtual void initial(int id,char n,int c,int cr)
	{
		ID=id;
		CName=n;
		Counter=c;
		Credit=cr;
	}
	int over(double money)
	{
		if(abs(round(money)-money)>0.00000000001||money>(Counter+Credit)||money<0)
		{
			return -1;
		}
		else
		{
			Credit=Counter+Credit-money;
			Counter=0;
			return 1;
		}
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
	}
};

void show(origin & obj)
{
	obj.info();
}
int main()
{
	int id;
	char n;
	int c;
	int t;
	int cr;
	double m,x,y,z;
	origin o;
	Traffic tr;
	Vip v;
	
	cin>>id>>n>>c;
	o.initial(id,n,c);
	cin>>id>>n>>c>>t;
	tr.initial(id,n,c,t);
	cin>>id>>n>>c>>cr;
	v.initial(id,n,c,cr);
	
	cin>>m>>x>>y>>z;
	o.save(m);
	o.save(x);
	o.take(y);
	o.take(z);
	
	cin>>m>>x>>y>>z;
	tr.save(m);
	tr.take(x);
	tr.transfer(y);
	tr.transfer(z);
	
	cin>>m>>x>>y>>z;
	v.save(m);
	v.take(x);
	v.over(y);
	v.over(z);
	
	show(o);
	show(tr);
	show(v);
	
}
------------------------------------------------------
2018151051:Problem1129:正确
#include<iostream>
#include<cmath>
using namespace std;
class bank
{
protected:
	int ID;
	char CName;
	int Counter;
public:
	bank(){}
	void initial(int I,char CN,int Co)
	{
		ID=I;
		CName=CN;
		Counter=Co;	
	}
	int save(int money)
	{
		if(money<0)
			return -1;
		else
		{
			Counter=Counter+money;
			return 1;
		}
	}
	int take(int money)
	{
		if(money<0)
			return -1;
		else
		{
			if(Counter<money)
				return -1;
			else
			{
				Counter=Counter-money;
				return 1;
			}
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
};
class bankjiaotong:public bank
{
	int Tcounter;
public:
	bankjiaotong(){}
	void initial(int I,char CN,int Co,int T)
	{
		ID=I;
		CName=CN;
		Counter=Co;	
		Tcounter=T;
	}
	int transfer(int money)
	{
		if(money<0)
			return -1;
		else
		{
			if(Counter<money)
				return -1;
			else
			{
				Counter=Counter-money;
				Tcounter=Tcounter+money;
				return 1;
			}
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
};
class bankVIP:public bank
{
	int Credit;
public:
	bankVIP(){}
	void initial(int I,char CN,int Co,int Cr)
	{
		ID=I;
		CName=CN;
		Counter=Co;
		Credit=Cr;
	}
	int over(int money)
	{
		if(money<0)
			return -1;
		else
		{
			if(Counter+Credit<money)
				return -1;
			else
			{
				int s;
				s=money-Counter;
				Counter=0;
				Credit=Credit-s;
				return 1;
			}
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
	}
};
int main()
{
	int ID1,ID2,ID3;
	char CName1,CName2,CName3;
	int Counter1,Counter2,Counter3;
	int Tcounter;
	int Credit;
	bank p1;
	bankjiaotong p2;
	bankVIP p3;
	cin>>ID1>>CName1>>Counter1;
	cin>>ID2>>CName2>>Counter2>>Tcounter;
	cin>>ID3>>CName3>>Counter3>>Credit;
	p1.initial(ID1,CName1,Counter1);
	p2.initial(ID2,CName2,Counter2,Tcounter);
	p3.initial(ID3,CName3,Counter3,Credit);
	int money1,money2,money3,money4;
	int money11,money22,money33,money44;
	int money111,money222,money333,money444;
	cin>>money1>>money2>>money3>>money4;
	cin>>money11>>money22>>money33>>money44;
	cin>>money111>>money222>>money333>>money444;
	p1.save(money1);
	p1.save(money2);
	p1.take(money3);
	p1.take(money4);
	p2.save(money11);
	p2.take(money22);
	p2.transfer(money33);
	p2.transfer(money44);
	p3.save(money111);
	p3.take(money222);
	p3.over(money333);
	p3.over(money444);
	p1.info();
	p2.info();
	p3.info();
	return 0;
}
------------------------------------------------------
2018192040:Problem1234:答案错误
#include<iostream>
#include<string>
#include<cstdio>
#include<iomanip>
using namespace std;
class Group{
public:
virtual int add(int x, int y)=0;//输出加法的运算结果
virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
	int add(int x,int y){
		return x+y;
	}
	int sub(int x,int y){
		return x-y;
	}
};

class GroupB:public Group{
public:
	int sub(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			int temp = X[i]-Y[i];
			if(temp < 0)
				result[i] = 10 + temp + '0';
			else
			    result[i] = temp + '0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	}
	int add(int x,int y){
	};
};

class GroupC:public Group{
public:
	int sub(int x,int y){
	};
	int add(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			result[i] = abs((X[i]-'0'+Y[i]-'0')%10)+'0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	}
};
int main(){
    int n;
	cin>>n;
	Group *p;
	while(n--){
		int type;
		cin>>type;
		if(type == 1){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupA ga;
			p = &ga;
			if(op == '+')
				cout<<p->add(x,y)<<endl;
			if(op == '-')
				cout<<p->sub(x,y)<<endl;
		}
		if(type == 2){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupB gb;
			p = &gb;
			cout<<p->sub(x,y)<<endl;
		}
		if(type == 3){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupC gc;
			p = &gc;
			cout<<p->add(x,y)<<endl;
		}
	} 
}
------------------------------------------------------
2017163101:Problem1119:正确
#include<iostream>
#include<cstdio>
#include<string>;
using namespace std;
class BaseAccount {
protected:
    string name, account;
    int balance;
public:
    BaseAccount() {}
    BaseAccount(string name, string account, int balance)
      :name(name),account(account),balance(balance) {}
    virtual void deposit(int accno) {
        balance += accno;
    }
    virtual void withdraw(int accno) {
        if (balance < accno) {
            cout << "insufficient" << endl;
        } else {
            balance -= accno;
        }
    }
    virtual void display() {
        cout << name << " " << account << " " << "Balance:" << balance << endl;
    }
};
 
class BasePlus: public BaseAccount{
private:
    int limit_sum;
    int limit;
public:
    BasePlus() {
      limit = 5000;
      limit_sum = 0;
    }
    BasePlus(string name,string account,int balance)
        :BaseAccount(name,account,balance) {
        limit = 5000;
        limit_sum = 0;
    }
    void deposit(int accno) {
     
      if (limit_sum) {
        
        if (limit_sum > accno) {
          limit_sum -= accno;
          accno = 0;
        } else {
          accno -= limit_sum;
          limit_sum = 0;
        }
      }
  
      balance += accno;
    }
    void withdraw(int accno) {
         
        if (balance >= accno) {
            balance -= accno;
        
        } else if (balance + limit - limit_sum >= accno) {
            limit_sum += accno - balance;
            balance = 0;
        } else {
            cout << "insufficient" << endl;
        }
    }
    void display() {
        cout << name << " " << account << " " << "Balance:" << balance << " limit:" << limit - limit_sum << endl;
    }
};
 
int main() {
    int t;
    cin >> t;
    while (t--) {
        string name, account;
        int balance;
        cin >> name >> account >> balance;
        int d1,w1,d2,w2;
        cin >>d1>>w1 >>d2 >>w2;
        BaseAccount *b;
        if (account[1] == 'A') {
            BaseAccount BA(name, account, balance);
            b = &BA;
            b->deposit(d1);
            b->withdraw(w1);
            b->deposit(d2);
            b->withdraw(w2);
            b->display();
        } else {
            BasePlus BP(name, account, balance);
            b = &BP;
            b->deposit(d1);
            b->withdraw(w1);
            b->deposit(d2);
            b->withdraw(w2);
            b->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018192026:Problem1129:正确
#include<stdio.h>
#include<string.h>
//类定义
class NCard
{
protected:
	int ID;
	char name;
	int balance;
public:
	NCard(){}
	void initial(int id,char n,int b);
	int save(int b);
	int withdraw(int b);
	virtual void info();
};
//类实现
void NCard::initial(int id,char n,int b)
{
	ID=id,balance=b;
	name=n;
}
int NCard::save(int b)
{
	if(b<=0)
		return -1;
	else
	{
		balance+=b;
		return 1;
	}
}
int NCard::withdraw(int b)
{
	if(b<=0||balance<b)
		return -1;
	else
	{
		balance-=b;
		return 1;
	}
}
void NCard::info()
{
	printf("%d-%c-%d\n",ID,name,balance);
}
//类定义
class TCard:public NCard
{
protected:
	int Tcounter;
public:
	TCard(){}
	void initial(int id,char n,int b,int t);
	int transfer(int t);
	void info();
};
//类实现
void TCard::initial(int id,char n,int b,int t)
{
	ID=id,balance=b,Tcounter=t;
	name=n;
}
int TCard::transfer(int t)
{
	if(t<=0||balance<t)
		return -1;
	else
	{
		balance-=t;
		Tcounter+=t;
		return 1;
	}
}
void TCard::info()
{
	printf("%d-%c-%d-%d\n",ID,name,balance,Tcounter);
}
//类定义
class VIPCard:public TCard
{
protected:
	int credit;
public:
	VIPCard(){}
	void initial(int id,char n,int b,int c);
	int over(int c);
	void info();
};
//类实现
void VIPCard::initial(int id,char n,int b,int c)
{
	ID=id,name=n;
	balance=b,credit=c;
}
int VIPCard::over(int c)
{
	if(c>credit)
		return -1;
	else
	{
		credit-=(c-balance);
		balance=0;
		return 1;
	}
}
void VIPCard::info()
{
	printf("%d-%c-%d-%d\n",ID,name,balance,credit);
}
//多态函数
void show(NCard &obj)
{
	obj.info();
}
//主函数
int main()
{
	int i,m;					
	int id1,id2,id3;		//3个账户的ID
	char n1,n2,n3;			//3个账户的name
	int b1,b2,b3;			//3个账户的余额
	int Tcounter,credit;	//交通卡的交通余额和VIP卡的信用额度
	int o;					//操作
	NCard C1;
	TCard C2;
	VIPCard C3;
	scanf("%d %c %d",&id1,&n1,&b1);
	scanf("%d %c %d %d",&id2,&n2,&b2,&Tcounter);
	scanf("%d %c %d %d",&id3,&n3,&b3,&credit);
	C1.initial(id1,n1,b1);							//三个对象初始化
	C2.initial(id2,n2,b2,Tcounter);
	C3.initial(id3,n3,b3,credit);
	for(i=0;i<4;i++)								//对普通卡进行操作
	{
		scanf("%d",&o);
		if(i<2)
			m=C1.save(o);
		else
			m=C1.withdraw(o);
	}
	for(i=0;i<4;i++)								//对交通卡进行操作
	{
		scanf("%d",&o);
		if(i==0)
			m=C2.save(o);
		else if(i==1)
			m=C2.withdraw(o);
		else
			m=C2.transfer(o);
	}
	for(i=0;i<4;i++)								//对VIP卡进行操作
	{
		scanf("%d",&o);
		if(i==0)
			m=C3.save(o);
		else if(i==1)
			m=C3.withdraw(o);
		else
			m=C3.over(o);
	}
	show(C1);
	show(C2);
	show(C3);
	return 0;
}


	





------------------------------------------------------
2017092048:Problem1235:正确
// May.27, 2019
// Author: Wenzhuo Dong
#include <iostream>
#include <string>
#include <iomanip>

#define PI 3.14

using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry{
protected:
    double length, width;
public:
    Rect(int length, int width) : length(length), width(width) {}

    double getArea(){
        return length*width;
    }
};

class Circle:public Geometry{
protected:
    double radius;
public:
    Circle(double radius) : radius(radius) {}

    double getArea(){
        return PI*radius*radius;
    }
};

class TotalArea{
public:
    static void computerTotalArea(Geometry** t, int n) {
        double max = 0;
        for (int i = 0; i < n; ++i ) {
            if (t[i]->getArea() > max)
                max = t[i]->getArea();
        }
        cout <<fixed << setprecision(2)<< "最大面积=" << max << endl;
    }
};

int main() {
    int samples;
    cin >> samples;

    int opt, a, b;
    Geometry **t = new Geometry*[samples];

    for (int i=0; i < samples; ++i) {

        cin >> opt;
        switch(opt){
            case 1:
                cin >> a >> b;
                t[i] = new Rect(a, b);
                break;
            case 2:
                cin >> a;
                t[i] = new Circle(a);
                break;
        }
    }

    TotalArea::computerTotalArea(t, samples);
    return 0;
}



------------------------------------------------------
2017044015:Problem1234:正确
#include <iostream>
#include <string>
#include <string.h>
#include <iomanip>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class groupA:public Group{
public:
    virtual int add(int x, int y){
        return x + y;
    }
    virtual int sub(int x, int y){
        return x - y;
    }
};

class groupB:public Group{
public:
    virtual int add(int x, int y){
        return x + y;
    }
    virtual int sub(int x, int y){
        int m = 0;
        if(x%10 < y%10)
            m += 10;
        if(x%100/10 < y%100/10)
            m += 100;
        if(x%1000/100 < y%1000/100)
            m += 1000;
        return x - y + m;
    }
};

class groupC:public Group{
public:
    virtual int add(int x, int y){
        int m = 0;
        if(x%10 + y%10 >9)
            m += 10;
        if(x%100/10 + y%100/10 > 9)
            m += 100;
        if(x%1000/100 + y%1000/100 > 9)
            m += 1000;
        return x + y - m;
    }
    virtual int sub(int x, int y){
        int m = 0;
        if(x%10 < y%10)
            m += 10;
        if(x%100/10 < y%100/10)
            m += 100;
        if(x%1000/100 < y%1000/100)
            m += 1000;
        return x - y + m;
    }
};

int main()
{
    int t, g;
    string s;
    cin>>t;
    while(t--){
        cin>>g>>s;
        char sign;
        int index;
        for(int i=0; i < s.size(); i++)
        if(s[i] == '+' || s[i] == '-'){
            sign = s[i];
            index = i;
            break;
        }
        int x, y;
        x = stoi(s.substr(0, index));
        y = stoi(s.substr(index + 1));
        Group* p;
        if(g == 1)
            p = new groupA();
        if(g == 2)
            p = new groupB();
        if(g == 3)
            p = new groupC();
        if(sign == '+')
            cout<<p->add(x, y)<<endl;
        if(sign == '-')
            cout<<p->sub(x, y)<<endl;
        delete p;
    }
    return 0;
}

------------------------------------------------------
2018192040:Problem1234:答案错误
#include<iostream>
#include<string>
#include<cstdio>
#include<iomanip>
using namespace std;
class Group{
public:
virtual int add(int x, int y)=0;//输出加法的运算结果
virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
	int add(int x,int y){
		return x+y;
	}
	int sub(int x,int y){
		return x-y;
	}
};

class GroupB:public Group{
public:
	int sub(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			int temp = X[i]-Y[i];
			if(temp < 0)
				result[i] = 10 + temp + '0';
			else
			    result[i] = temp + '0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	}
	int add(int x,int y){
		return x+y;
	};
};

class GroupC:public Group{
public:
	int sub(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			int temp = X[i]-Y[i];
			if(temp < 0)
				result[i] = 10 + temp + '0';
			else
			    result[i] = temp + '0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	};
	int add(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			result[i] = abs((X[i]-'0'+Y[i]-'0')%10)+'0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	}
};
int main(){
    int n;
	cin>>n;
	Group *p;
	while(n--){
		int type;
		cin>>type;
		if(type == 1){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupA ga;
			p = &ga;
			if(op == '+')
				cout<<p->add(x,y)<<endl;
			if(op == '-')
				cout<<p->sub(x,y)<<endl;
		}
		if(type == 2){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupB gb;
			p = &gb;
			cout<<p->sub(x,y)<<endl;
		}
		if(type == 3){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupC gc;
			p = &gc;
			cout<<p->add(x,y)<<endl;
		}
	} 
}
------------------------------------------------------
2018192040:Problem1234:正确
#include<iostream>
#include<string>
#include<cstdio>
#include<iomanip>
using namespace std;
class Group{
public:
virtual int add(int x, int y)=0;//输出加法的运算结果
virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group{
public:
	int add(int x,int y){
		return x+y;
	}
	int sub(int x,int y){
		return x-y;
	}
};

class GroupB:public Group{
public:
	int sub(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			int temp = X[i]-Y[i];
			if(temp < 0)
				result[i] = 10 + temp + '0';
			else
			    result[i] = temp + '0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	}
	int add(int x,int y){
		return x+y;
	};
};

class GroupC:public Group{
public:
	int sub(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			int temp = X[i]-Y[i];
			if(temp < 0)
				result[i] = 10 + temp + '0';
			else
			    result[i] = temp + '0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	};
	int add(int x,int y){
		string X = to_string(x);
		string Y = to_string(y);
		string result;
		int l = max(X.size(),Y.size());
		while(X.size() < l)
			X = "0" + X;
		while(Y.size() < l)
			Y = "0" + Y;
		for(int i=0;i<l;i++){
			result[i] = '0';
		}
		for(int i=0;i<l;i++){
			result[i] = abs((X[i]-'0'+Y[i]-'0')%10)+'0';
		}
		char *ch = new char[l];
		for(int i=0;i<l;i++)
			ch[i] = result[i];
		int res;
		sscanf(ch,"%d",&res);
		return res;
	}
};
int main(){
    int n;
	cin>>n;
	Group *p;
	while(n--){
		int type;
		cin>>type;
		if(type == 1){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupA ga;
			p = &ga;
			if(op == '+')
				cout<<p->add(x,y)<<endl;
			if(op == '-')
				cout<<p->sub(x,y)<<endl;
		}
		if(type == 2){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupB gb;
			p = &gb;
			if(op == '+')
				cout<<p->add(x,y)<<endl;
			if(op == '-')
				cout<<p->sub(x,y)<<endl;
		}
		if(type == 3){
			char op;
			int x,y;
			cin>>x>>op>>y;
			GroupC gc;
			p = &gc;
			if(op == '+')
				cout<<p->add(x,y)<<endl;
			if(op == '-')
				cout<<p->sub(x,y)<<endl;
		}
	} 
}
------------------------------------------------------
2016150201:Problem1235:编译错误
#include<iostream>
#define PI 3.14
using namespace std;
class Geometry{
	public:
		virtual double getArea()=0;
};
class Rect:public Geometry{
	int a,b;
public:	
	Rect(int aa,int bb):a(aa),b(bb){
	}
	double virtual getArea(){
		return a*b;
	}
};
class Circle:public Geometry{
	int r;
public:	
	Circle(int rr):r(rr){
	}
	double virtual getArea(){
		return PI*r*r;
	}
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n);
};
void computerTotalArea(Geometry** t,int n){
	double d=0;
	for(int i=0;i<n;i++){
	if(t[i]->getArea()>d)
	d=t[i]->getArea();
	cout<<d<<endl;
	}
	cout<<d<<endl;
}
int main(){
	int t,id,a,b,r;
	cin>>t;
	Geometry *g[t];
	int i=0;
	while(t--){
		cin>>id;
		if(id==1){
			cin>>a>>b;
			Rect r(a,b);
			g[i]=&r;
			cout<<g[i]->getArea()<<endl;
			i++;
		}
		 if(id==2){
			cin>>r;
			Circle c(r);
			g[i]=&c;
			cout<<g[i]->getArea()<<endl;
			i++;
		}
	}
	TotalArea::computerTotalArea(g,i);

}
------------------------------------------------------
2018151031:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
    virtual~Geometry()
    {

    }
};
class Rect:public Geometry
{
	double length,wide;
public:
	Rect(double l,double w):length(l),wide(w){}
	double getArea()
	{
		return length*wide;
	}
	 ~Rect()
	{

	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double radius):r(radius){}
	double getArea()
	{
		/*cout<<"C"<<endl;
		cout<<3.14*r*r<<endl;*/
		return 3.14*r*r;
	}
	 ~Circle()
	{

	}
};
class TotalArea
{
	static double maxarea;
public:
   static void computerTotalArea(Geometry** t,int n)
   {
   		for(int i=0;i<n;i++)
   		{
   			double a=t[i]->getArea();
   			if(maxarea<a)
			   maxarea=a;
   		}
   }
   static double getmaxarea()
   {
   		return maxarea;
   }
};
double TotalArea::maxarea=0;
int main()
{
	int t;
	cin>>t;
	Geometry** g=new Geometry*[t];
	for(int i=0;i<t;i++)
	{
		int type;
		cin>>type;
		if(type==1)
		{
			double l,w;
			cin>>l>>w;
			g[i]=new Rect(l,w);
		}
		else if(type==2)
		{
			double r;
			cin>>r;
			g[i]=new Circle(r);
		}
	}
	TotalArea total;
	total.computerTotalArea(g,t);
	cout<<"最大面积=";
	printf("%.2f\n",total.getmaxarea());
	for(int i=0;i<t;i++)
		delete g[i];
    	delete []g;

}

------------------------------------------------------
2017092048:Problem1234:答案错误
// May.27, 2019
// Author: Wenzhuo Dong
#include <iostream>
#include <string>
#include <iomanip>
#include <stack>
using namespace std;

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
};

class GroupA :public Group {
public:
	GroupA() {};
	int add(int x, int y) {
		return x + y;
	}
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB :public Group {
public:
	GroupB() {};
	int add(int x, int y) {
		return x + y;
	}
	int sub(int x, int y) {
		int res = 0;
		stack<int> stk;
		int a, b;
		while (x != 0) {
			a = x % 10 + 10;
			b = y % 10;
			stk.push((a - b) % 10);
			x /= 10;
			y /= 10;
		}
		while (!stk.empty()) {
			res = res * 10;
			res += stk.top();
			stk.pop();
		}
		return res;
	}

};

class GroupC :public Group {
public:
	GroupC() {};
	int add(int x, int y) {
		int res = 0;
		stack<int> stk;
		int a, b;
		while (x != 0) {
			a = x % 10;
			b = y % 10;
			stk.push((a + b) % 10);
			x /= 10;
			y /= 10;
		}
		while (!stk.empty()) {
			res = res * 10;
			res += stk.top();
			stk.pop();
		}
		return res;
	}
	int sub(int x, int y) {
		int res = 0;
		stack<int> stk;
		int a, b;
		while (x != 0) {
			a = x % 10 + 10;
			b = y % 10;
			stk.push((a - b) % 10);
			x /= 10;
			y /= 10;
		}
		while (!stk.empty()) {
			res = res * 10;
			res += stk.top();
			stk.pop();
		}
		return res;
	}

};
int main() {
	int samples;
	cin >> samples;

	Group *pg;
	int type;
	string input;
	while (samples--) {
		cin >> type >> input;
		switch (type) {
		case 1:
			pg = new GroupA;
			break;
		case 2:
			pg = new GroupB;
			break;
		case 3:
			pg = new GroupC;
			break;
		default:
			pg = new GroupA;
		}

		// get number and opt from input
		int n1, n2;
		n1 = n2 = 0;
		char opt;
		int i = 0;
		for (i = 0; input[i] != '+' && input[i] != '-'; ++i) {
			n1 = n1 * 10;
			n1 += input[i] - '0';
		}
		opt = input[i];
		for (i = i + 1; i < input.length(); ++i) {
			n2 = n2 * 10;
			n2 += input[i] - '0';
		}
		// end
		// calculate
		int res = 0;
		if (opt == '+')
			res = pg->add(n1, n2);
		else
			res = pg->sub(n1, n2);

		cout << res << endl;
	}

	return 0;
}
------------------------------------------------------
2018191214:Problem1129:正确
#include<iostream>
#include<cstring>
#include<cmath>
#include<iomanip>
using namespace std;
class NormalCard
{
protected:
	int ID,Counter;
	char CName;
public:
	NormalCard(){}
	NormalCard(int id,int count,char na)
	{
		ID=id;
		Counter=count;
		CName=na;
	}
	virtual void initial(int id,int co,char na)
	{
		ID=id;
		Counter=co;
		CName=na;
	}
	virtual int save(float money)
	{
		if(money>0 && money-(int)money==0)
		Counter=Counter+money;
		else
			return -1;
		return 1;
	}
	virtual int take(float money)
	{
		if(money<=Counter &&money-(int)money==0 &&money>0)
			Counter=Counter-money;
		else
			return -1;
		return 1;
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
};
class transFer:public NormalCard
{
protected:
	int Tcounter;
public:
	transFer(){}
	transFer(int id,int count,char na,int tc):Tcounter(tc),NormalCard(id,count,na){}
	int transfer(int money)
	{
		if(money>0 && money<=Counter)
		{
			Tcounter=Tcounter+money;
            Counter=Counter-money;
		}
		else
			return -1;
		return 1;
	}
    void initial(int id,int co,char na,int Tc)
	{
		ID=id;
		Counter=co;
		CName=na;
		Tcounter=Tc;
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
};
class VIP:public NormalCard
{
protected:
	int Credit;
public:
	VIP(){}
	VIP(int ID,int counter,char name,int cr):Credit(cr),NormalCard(ID,counter,name){}
	int over(int money)
	{
		if(money>0 &&money<Credit+Counter&&money>Counter)
		{
			money=money-Counter;
			Counter=0;
			Credit=Credit-money;
		}
		else
			return -1;
		return 1;
	}
    void initial(int id,int co,char na,int cr)
	{
		ID=id;
		Counter=co;
		CName=na;
		Credit=cr;
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
	}
};
void show(NormalCard &obj)//多态函数
{
	obj.info();
}
int main()
{
	int ID,Counter,Tcounter,Credit,money1;//定义各个变量
	float money;
	char CName;
	NormalCard nc;
	transFer tf;
	VIP vip;//定义三个卡对象
	cin>>ID>>CName>>Counter;
	nc.initial(ID,Counter,CName);
	cin>>ID>>CName>>Counter>>Tcounter;
	tf.initial(ID,Counter,CName,Tcounter);
	cin>>ID>>CName>>Counter>>Credit;
	vip.initial(ID,Counter,CName,Credit);//初始化
	cin>>money;
	nc.save(money);
	cin>>money;
	nc.save(money);
	cin>>money;
	nc.take(money);
	cin>>money;
	nc.take(money);//普通卡两次存款，两次取款；
	cin>>money;
	tf.save(money);
	cin>>money;
	tf.take(money);
	cin>>money1;
	tf.transfer(money1);
	cin>>money1;
	tf.transfer(money1);//交通卡一次存款，一次取款，两次转账；
	cin>>money;
	vip.save(money);
	cin>>money;
	vip.take(money);
	cin>>money1;
	vip.over(money1);
	cin>>money1;
	vip.over(money1);//贵宾卡一次存款，一次取款，两次透支；
	show(nc);
	show(tf);
	show(vip);
	return 0;
}

------------------------------------------------------
2016154114:Problem1129:正确
#include<iostream>
#include<string>
using namespace std;

class Card
{
protected:
	string id;
	string cname;
	int counter;
public:
	virtual void initial(string i,string n,int c)
	{
		id=i;
		cname=n;
		counter=c;
	}
	virtual int save(int m)
	{
		if(m<0)
			return -1;
		else
		{
			counter+=m;
			return 1;
		}
	}
	virtual int take(int m)
	{
		if(m<0 || m>counter)
			return -1;
		else
		{
			counter-=m;
			return 1;
		}
	}
	virtual void info()
	{
		cout<<id<<"-"<<cname<<"-"<<counter<<endl;
	}
};

class TCard:public Card
{
protected:
	int Tcounter;
public:
    virtual void initial(string i,string n,int c,int t)
	{
		id=i;
		cname=n;
		counter=c;
		Tcounter=t;
	}
	virtual int save(int m)
	{
		if(m<0)
			return -1;
		else
		{
			counter+=m;
			return 1;
		}
	}
	virtual int take(int m)
	{
		if(m<0 || m>counter)
			return -1;
		else
		{
			counter-=m;
			return 1;
		}
	}
	virtual void info()
	{
		cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<Tcounter<<endl;
	}
	int transfer(int m)
	{
		if(m>counter)
			return -1;
		else
		{
			counter-=m;
			Tcounter+=m;
			return 1;
		}
	}
};

class VCard:public Card
{
protected:
	int credit;
public:
    virtual void initial(string i,string n,int c,int cr)
	{
		id=i;
		cname=n;
		counter=c;
		credit=cr;
	}
	virtual int save(int m)
	{
		if(m<0)
			return -1;
		else
		{
			counter+=m;
			return 1;
		}
	}
	virtual int take(int m)
	{
		if(m<0 || m>counter)
			return -1;
		else
		{
			counter-=m;
			return 1;
		}
	}
	virtual void info()
	{
		cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<credit<<endl;
	}
	int over(int m)
	{
		if(m>counter && m<counter+credit)
		{
			m-=counter;
			counter=0;
			credit-=m;
			return 1;
		}
		else
			return -1;
	}
};

void show(Card &card)
{
	card.info();
}

int main()
{
	Card card;
	TCard tcard;
	VCard vcard;
	string id,name; 
	int counter,Tcounter,credit;
	cin>>id>>name>>counter;
	card.initial(id,name,counter);
	cin>>id>>name>>counter>>Tcounter;
	tcard.initial(id,name,counter,Tcounter);
	cin>>id>>name>>counter>>credit;
	vcard.initial(id,name,counter,credit);
	int m1,m2,m3,m4;
	cin>>m1>>m2>>m3>>m4;
	card.save(m1);
	card.save(m2);
	card.take(m3);
	card.take(m4);
	cin>>m1>>m2>>m3>>m4;
	tcard.save(m1);
	tcard.take(m2);
	tcard.transfer(m3);
	tcard.transfer(m4);
	cin>>m1>>m2>>m3>>m4;
	vcard.save(m1);
	vcard.take(m2);
	vcard.over(m3);
	vcard.over(m4);
	show(card);
	show(tcard);
	show(vcard);
	return 0;
}
------------------------------------------------------
2017092048:Problem1234:正确
// May.27, 2019
// Author: Wenzhuo Dong
#include <iostream>
#include <string>
#include <iomanip>
#include <stack>
using namespace std;

class Group {
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
};

class GroupA :public Group {
public:
	GroupA() {};
	int add(int x, int y) {
		return x + y;
	}
	int sub(int x, int y) {
		return x - y;
	}
};

class GroupB :public Group {
public:
	GroupB() {};
	int add(int x, int y) {
		return x + y;
	}
	int sub(int x, int y) {
		int res = 0;
		stack<int> stk;
		int a, b;
		while (x != 0) {
			a = x % 10 + 10;
			b = y % 10;
			stk.push((a - b) % 10);
			x /= 10;
			y /= 10;
		}
		while (!stk.empty()) {
			res = res * 10;
			res += stk.top();
			stk.pop();
		}
		return res;
	}

};

class GroupC :public Group {
public:
	GroupC() {};
	int add(int x, int y) {
		int res = 0;
		stack<int> stk;
		int a, b;
		while (x != 0 || y != 0) {
			a = x % 10;
			b = y % 10;
			stk.push((a + b) % 10);
			x /= 10;
			y /= 10;
		}
		while (!stk.empty()) {
			res = res * 10;
			res += stk.top();
			stk.pop();
		}
		return res;
	}
	int sub(int x, int y) {
		int res = 0;
		stack<int> stk;
		int a, b;
		while (x != 0) {
			a = x % 10 + 10;
			b = y % 10;
			stk.push((a - b) % 10);
			x /= 10;
			y /= 10;
		}
		while (!stk.empty()) {
			res = res * 10;
			res += stk.top();
			stk.pop();
		}
		return res;
	}

};
int main() {
	int samples;
	cin >> samples;

	Group *pg;
	int type;
	string input;
	while (samples--) {
		cin >> type >> input;
		switch (type) {
		case 1:
			pg = new GroupA;
			break;
		case 2:
			pg = new GroupB;
			break;
		case 3:
			pg = new GroupC;
			break;
		default:
			pg = new GroupA;
		}

		// get number and opt from input
		int n1, n2;
		n1 = n2 = 0;
		char opt;
		int i = 0;
		for (i = 0; input[i] != '+' && input[i] != '-'; ++i) {
			n1 = n1 * 10;
			n1 += input[i] - '0';
		}
		opt = input[i];
		for (i = i + 1; i < input.length(); ++i) {
			n2 = n2 * 10;
			n2 += input[i] - '0';
		}
		// end
		// calculate
		int res = 0;
		if (opt == '+')
			res = pg->add(n1, n2);
		else
			res = pg->sub(n1, n2);

		cout << res << endl;
	}

	return 0;
}

------------------------------------------------------
2018192048:Problem1129:正确
#include<iostream>
using namespace std;

class ComCard{
protected:
	string ID;
	char CName;
	double Counter;
public:
	ComCard(){}
	ComCard(string id,char n,double c):ID(id),CName(n),Counter(c){}
	virtual void initial(string id,char n,double c){
		ID=id;
		CName=n;
		Counter=c;
	}
	int judgeSave(double m){
		int temp=(int)m;
		if(m<0)
			return -1;
		else if((m-temp)!=0)
			return -1;
		return 1;
	}
	virtual void save(double m){
		if(judgeSave(m)==1)
			Counter+=m;
	}
	int judgeTake(double m){
		int temp=(int)m;
		if(m<0)
			return -1;
		else if((m-temp)!=0)
			return -1;
		else if(m>Counter)
			return -1;
		return 1;
	}
	virtual void take(double m){
		if(judgeTake(m)==1)
			Counter-=m;
	}
	virtual void info(){
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
	~ComCard(){}
};

class TracCard:public ComCard{
protected:
	double Tcounter;
public:
	TracCard(){}
	TracCard(string id,char n,double c,double t):ComCard(id,n,c){
		Tcounter=t;
	}
	void initial(string id,char n,double c,double t){
		ID=id;
		CName=n;
		Counter=c;
		Tcounter=t;
	}
	int judgeSave(double m){
		int temp=(int)m;
		if(m<0)
			return -1;
		else if((m-temp)!=0)
			return -1;
		return 1;
	}
	void save(double m){
		if(judgeSave(m)==1)
			Counter+=m;
	}
	int judgeTake(double m){
		int temp=(int)m;
		if(m<0)
			return -1;
		else if((m-temp)!=0)
			return -1;
		else if(m>Counter)
			return -1;
		return 1;
	}
	void take(double m){
		if(judgeTake(m)==1)
			Counter-=m;
	}
	int judgeTransfer(double m){
		if(m>Counter)
			return -1;
		return 1;
	}
	void transfer(double m){
		if(judgeTransfer(m)==1){
			Tcounter+=m;
			Counter-=m;
		}
	}
	void info(){
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
	~TracCard(){}
};

class VIPCard:public ComCard{
protected:
	double Credit;
public:
	VIPCard(){}
	VIPCard(string id,char n,double c,double C):ComCard(id,n,c){
		Credit=C;
	}
	void initial(string id,char n,double c,double C){
		ID=id;
		CName=n;
		Counter=c;
		Credit=C;
	}
	int judgeSave(double m){
		int temp=(int)m;
		if(m<0)
			return -1;
		else if((m-temp)!=0)
			return -1;
		return 1;
	}
	void save(double m){
		if(judgeSave(m)==1)
			Counter+=m;
	}
	int judgeTake(double m){
		int temp=(int)m;
		if(m<0)
			return -1;
		else if((m-temp)!=0)
			return -1;
		else if(m>Counter)
			return -1;
		return 1;
	}
	void take(double m){
		if(judgeTake(m)==1)
			Counter-=m;
	}
	int judgeOver(double m){
		if(m<=Counter+Credit)
			return 1;
		return -1;
	}
	void over(double m){
		if(judgeOver(m)==1){
			if(m>Counter){
				Credit-=(m-Counter);
				Counter=0;
			}
			else
				Counter-=m;	
		}
	}
	void info(){
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
	}
	~VIPCard(){}
};
void show(ComCard &obj){
	obj.info();
}
int main(){
	string id1,id2,id3;
	char n1,n2,n3;
	double c1,c2,d2,c3,d3;
	cin>>id1>>n1>>c1;
	ComCard o(id1,n1,c1);
	cin>>id2>>n2>>c2>>d2;
	TracCard p(id2,n2,c2,d2);
	cin>>id3>>n3>>c3>>d3;
	VIPCard q(id3,n3,c3,d3);
	double num1,num2,num3,num4;
	cin>>num1>>num2>>num3>>num4;
	o.save(num1);
	o.save(num2);
	o.take(num3);
	o.take(num4);
	show(o);
	cin>>num1>>num2>>num3>>num4;
	p.save(num1);
	p.take(num2);
	p.transfer(num3);
	p.transfer(num4);
	show(p);
	cin>>num1>>num2>>num3>>num4;
	q.save(num1);
	q.take(num2);
	q.over(num3);
	q.over(num4);
	show(q);
	return 0;
}
------------------------------------------------------
2017044015:Problem1129:答案错误
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Card{
protected:
    string ID;
    char CName;
    double Counter;
public:
    virtual void initial(string s, char c, double d){
        ID = s;
        CName = c;
        Counter = d;
    }
    virtual int save(double d){
        if(d <= 0)
            return -1;
        Counter += d;
        return 1;
    }
    virtual int take(double d){
        if(d <= 0)
            return -1;
        if(d > Counter)
            return 0;
        Counter -= d;
    }
    virtual void info(){
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};

class TCard: public Card{
protected:
    double TCounter;
public:
    virtual void initial(string s, char c, double d, double t){
        ID = s;
        CName = c;
        Counter = d;
        TCounter = t;
    }
    int transfer(double d){
        if(d <= 0)
            return -1;
        if(d > Counter)
            return 0;
        Counter -= d;
        TCounter += d;
        return 1;
    }
    virtual void info(){
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<TCounter<<endl;
    }
};

class VCard: public Card{
protected:
    double Credit, cur_overtake;
public:
    virtual void initial(string s, char c, double d, double cre){
        ID = s;
        CName = c;
        Counter = d;
        Credit = cre;
        cur_overtake = 0;
    }
    int over(double d){
        if(d <= 0)
            return -1;
        if(d > Counter + Credit)
            return 0;
        cur_overtake = 0;
        cur_overtake = d - Counter;
        Credit -= cur_overtake;
        return 1;
    }
    virtual void info(){
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};

void show(Card& obj);

void show(Card& obj){
    obj.info();
}

int main()
{
    double bal, tcou, cre, op1, op2, op3, op4;
    string id;
    char c;
    Card card;
    TCard tc;
    VCard vc;
    cin>>id>>c>>bal;
    card.initial(id, c, bal);
    cin>>id>>c>>bal>>tcou;
    tc.initial(id, c, bal, tcou);
    cin>>id>>c>>bal>>cre;
    vc.initial(id, c, bal, cre);

    cin>>op1>>op2>>op3>>op4;
    card.save(op1);
    card.take(op2);
    card.save(op3);
    card.take(op4);

    cin>>op1>>op2>>op3>>op4;
    tc.save(op1);
    tc.take(op2);
    tc.transfer(op3);
    tc.transfer(op4);

    cin>>op1>>op2>>op3>>op4;
    vc.save(op1);
    vc.take(op2);
    vc.over(op3);
    vc.over(op4);

    show(card);
    show(tc);
    show(vc);
    return 0;
}

------------------------------------------------------
2017044015:Problem1129:正确
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

//类定义
class Card{
protected:
    string ID;
    char CName;
    double Counter;
public:
    virtual void initial(string s, char c, double d){
        ID = s;
        CName = c;
        Counter = d;
    }
    virtual int save(double d){
        if(d <= 0)
            return -1;
        Counter += d;
        return 1;
    }
    virtual int take(double d){
        if(d <= 0)
            return -1;
        if(d > Counter)
            return 0;
        Counter -= d;
    }
    virtual void info(){
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};

class TCard: public Card{
protected:
    double TCounter;
public:
    virtual void initial(string s, char c, double d, double t){
        ID = s;
        CName = c;
        Counter = d;
        TCounter = t;
    }
    int transfer(double d){
        if(d <= 0)
            return -1;
        if(d > Counter)
            return 0;
        Counter -= d;
        TCounter += d;
        return 1;
    }
    virtual void info(){
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<TCounter<<endl;
    }
};

class VCard: public Card{
protected:
    double Credit, cur_overtake;
public:
    virtual void initial(string s, char c, double d, double cre){
        ID = s;
        CName = c;
        Counter = d;
        Credit = cre;
        cur_overtake = 0;
    }
    int over(double d){
        if(d <= 0)
            return -1;
        if(d > Counter + Credit)
            return 0;
        cur_overtake = 0;
        cur_overtake = d - Counter;
        Credit -= cur_overtake;
        Counter = 0;
        return 1;
    }
    virtual void info(){
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};

void show(Card& obj);

void show(Card& obj){
    obj.info();
}


//主函数
int main()
{
    double bal, tcou, cre, op1, op2, op3, op4;
    string id;
    char c;
    Card card;
    TCard tc;
    VCard vc;
    cin>>id>>c>>bal;
    card.initial(id, c, bal);
    cin>>id>>c>>bal>>tcou;
    tc.initial(id, c, bal, tcou);
    cin>>id>>c>>bal>>cre;
    vc.initial(id, c, bal, cre);

    cin>>op1>>op2>>op3>>op4;
    card.save(op1);
    card.take(op2);
    card.save(op3);
    card.take(op4);

    cin>>op1>>op2>>op3>>op4;
    tc.save(op1);
    tc.take(op2);
    tc.transfer(op3);
    tc.transfer(op4);

    cin>>op1>>op2>>op3>>op4;
    vc.save(op1);
    vc.take(op2);
    vc.over(op3);
    vc.over(op4);

    show(card);
    show(tc);
    show(vc);
    return 0;
}

------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum = 0;
        int time = 0;

        while(x/10!=0||x%10!=0||y/10!=0||y%10!=0)
        {
            double m = pow(10,time);
            if(x%10-y%10<0)
                sum += (x%10-y%10+10)*m;
            else
                sum += (x%10-y%10)*m;

            time++;

            x /= 10;
            y /= 10;
        }
        return sum;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum = 0;
        int time = 0;
        while(x/10!=0||x%10!=0||y/10!=0||y%10!=0)
        {
            double m = pow(10,time);
            if(x%10+y%10>=10)
                sum += (x%10+y%10-10)*m;
            else
                sum += (x%10+y%10)*m;

            time++;

            x /= 10;
            y /= 10;
        }
        return sum;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2016154114:Problem1129:正确
#include<iostream>
#include<string>
using namespace std;

class Card
{
protected:
	string id;
	string cname;
	int counter;
public:
	void initial(string i,string n,int c)
	{
		id=i;
		cname=n;
		counter=c;
	}
	int save(int m)
	{
		if(m<0)
			return -1;
		else
		{
			counter+=m;
			return 1;
		}
	}
	int take(int m)
	{
		if(m<0 || m>counter)
			return -1;
		else
		{
			counter-=m;
			return 1;
		}
	}
	virtual void info()
	{
		cout<<id<<"-"<<cname<<"-"<<counter<<endl;
	}
};

class TCard:public Card
{
protected:
	int Tcounter;
public:
    void initial(string i,string n,int c,int t)
	{
		id=i;
		cname=n;
		counter=c;
		Tcounter=t;
	}
	int transfer(int m)
	{
		if(m>counter)
			return -1;
		else
		{
			counter-=m;
			Tcounter+=m;
			return 1;
		}
	}
	void info()
	{
		cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<Tcounter<<endl;
	}
};

class VCard:public Card
{
protected:
	int credit;
public:
    void initial(string i,string n,int c,int cr)
	{
		id=i;
		cname=n;
		counter=c;
		credit=cr;
	}
	int over(int m)
	{
		if(m>counter && m<counter+credit)
		{
			m-=counter;
			counter=0;
			credit-=m;
			return 1;
		}
		else
			return -1;
	}
	void info()
	{
		cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<credit<<endl;
	}
};

void show(Card &card)
{
	card.info();
}

int main()
{
	Card card;
	TCard tcard;
	VCard vcard;
	string id,name; 
	int counter,Tcounter,credit;
	cin>>id>>name>>counter;
	card.initial(id,name,counter);
	cin>>id>>name>>counter>>Tcounter;
	tcard.initial(id,name,counter,Tcounter);
	cin>>id>>name>>counter>>credit;
	vcard.initial(id,name,counter,credit);
	int m1,m2,m3,m4;
	cin>>m1>>m2>>m3>>m4;
	card.save(m1);
	card.save(m2);
	card.take(m3);
	card.take(m4);
	cin>>m1>>m2>>m3>>m4;
	tcard.save(m1);
	tcard.take(m2);
	tcard.transfer(m3);
	tcard.transfer(m4);
	cin>>m1>>m2>>m3>>m4;
	vcard.save(m1);
	vcard.take(m2);
	vcard.over(m3);
	vcard.over(m4);
	show(card);
	show(tcard);
	show(vcard);
	return 0;
}
------------------------------------------------------
2017182103:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum = 0;
        int time = 0;

        while(x/10!=0||x%10!=0||y/10!=0||y%10!=0)
        {
            double m = pow(10,time);
            if(x%10-y%10<0)
                sum += (x%10-y%10+10)*m;
            else
                sum += (x%10-y%10)*m;

            time++;

            x /= 10;
            y /= 10;
        }
        return sum;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum = 0;
        int time = 0;
        while(x/10!=0||x%10!=0||y/10!=0||y%10!=0)
        {
            double m = pow(10,time);

            int mm = x/10;
            int m0 = mm%10;
            int n = y/10;
            int n0 = n%10;

            if(mm!=0||m0!=0||n!=0||n0!=0)
            {
                if(x%10+y%10>=10)
                    sum += (x%10+y%10-10)*m;
                else
                    sum += (x%10+y%10)*m;
            }
            else
                sum += (x%10+y%10)*m;

            time++;

            x /= 10;
            y /= 10;
        }
        return sum;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2018192013:Problem1235:答案错误
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"×?′ó???y="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
        else if(type==2)
        {
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    for(i=0;i<n;i++)
        delete t[i];
    delete []t;
    return 0;
}

------------------------------------------------------
2017092048:Problem1129:正确
// May.27, 2019
// Author: Wenzhuo Dong
#include <iostream>
#include <string>
#include <iomanip>

using namespace std;




class NCard {
protected:
    int id;
    char CName;
    int counter;
public:
    NCard();
    void initial(int i, char c, int ct);
    int save(int c);
    int take(int c);
    virtual void info();
};

// transportation card
class Tcard:public NCard{
protected:
    int Tcounter;
public:
    Tcard();
    void initial(int i, char c, int ct, int tc);
    int transfer(int c);
    void info();
};
//
// VIP card
class Vcard:public NCard{
protected:
    int credit;
public:
    Vcard();
    void initial(int i, char c, int ct, int cd);
    int over(int c);
    void info();
};

void show(NCard & obj) {
    obj.info();
}

//
//
// main function
int main() {
    int id, ct, t;
    char n;
    // initial cards
    cin >> id >> n >> ct;
    NCard nc;
    nc.initial(id, n, ct);

    cin >> id >> n >> ct >> t;
    Tcard tc;
    tc.initial(id, n, ct, t);

    cin >> id >> n >> ct >> t;
    Vcard vc;
    vc.initial(id, n, ct, t);
    // end
    // start operate
    int a, b, c, d;

    cin >> a >> b >> c >> d;
    nc.save(a);
    nc.save(b);
    nc.take(c);
    nc.take(d);

    cin >> a >> b >> c >> d;
    tc.save(a);
    tc.take(b);
    tc.transfer(c);
    tc.transfer(d);

    cin >> a >> b >> c >> d;
    vc.save(a);
    vc.take(b);
    vc.over(c);
    vc.over(d);

    //end
    // show info
    show(nc);
    show(tc);
    show(vc);
    // end
    return 0;
}
// main function end
//
// class NCard
NCard::NCard() {
    id = 0;
    CName = '\0';
    counter = 0;
}
void NCard::initial(int i, char c, int ct) {
    id = i;
    CName = c;
    counter = ct;
}

int NCard::take(int c) {
    if ( c >= 0) {
        if ((counter-c) >= 0 ) {
            counter -= c;
            return 1;
        }
    }
    return -1;
}

int NCard::save(int c) {
    if (c >= 0) {
        counter += c;
        return 1;
    }
    return -1;
}

void NCard::info() {
    cout << id << "-" << CName << "-" << counter << endl;
}
// end NCard

// class Tcard
Tcard::Tcard():NCard(){
    Tcounter = 0;
}
void Tcard::initial(int i, char c, int ct, int tc) {
    NCard::initial(i, c, ct);
    Tcounter = tc;
}
int Tcard::transfer(int c) {
    if ( c >= 0) {
        if (counter >= c){
            counter -= c;
            Tcounter += c;
            return 1;
        }
    }
    return -1;
}

void Tcard::info() {
    cout << id << "-" << CName << "-" << counter << "-" << Tcounter << endl;
}
// end Tcard

// class Vcard
Vcard::Vcard():NCard(){
    credit = 0;
}
void Vcard::initial(int i, char c, int ct, int cd) {
    NCard::initial(i, c, ct);
    credit = cd;
}

int Vcard::over(int c) {
    if (c >= 0){
        if ( (counter + credit - c) >= 0){
            credit = credit + counter - c;
            counter = 0;
        }
    }
    return -1;
}

void Vcard::info() {
    cout << id << "-" << CName << "-" << counter << "-" << credit << endl;

}

// end Vcard
------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2018192008:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry {

public:
	virtual double getArea() = 0;

};
class TotalArea {

public:
	static void computerTotalArea(Geometry **t, int n)
	{
		int i = 0;
		double maxa = 0;
		for (i = 0; i < n; i++)
		{
			if (t[i]->getArea() > maxa)
				maxa = t[i]->getArea();

		}
		cout << "最大面积=" << fixed << setprecision(2) << maxa << endl;
	}
};

class Rect :public Geometry
{
	int len, wid;
public:
	Rect(int l, int w) :len(l), wid(w) {}
	double getArea()
	{
		double s;
		s = len * wid;
		return s;
	}
	virtual ~Rect(){}
};

class Circle :public Geometry
{
	int r;
public:
	Circle(int r1) :r(r1) {}
	double getArea()
	{
		double s;
		s = 3.14*r*r;
		return s;
	}
	virtual ~Circle(){}
};

int main()
{
	int t;
	cin >> t;
	int n = t;
	Geometry **g;
	g = new Geometry*[n];
	int i = 0;
	while (t--)
	{

		int k;
		cin >> k;
		if (k == 1)
		{
			int l, w;
			cin >> l >> w;
			g[i] = new Rect(l, w);
		}
		else
		{
			int r1;
			cin >> r1;
			g[i] = new Circle(r1);
		}
		i++;
	}
	TotalArea::computerTotalArea(g, n);
	
	delete []g;
}

------------------------------------------------------
2016102048:Problem1232:正确
#include <bits/stdc++.h>
using namespace std;

class Vehicle

{ 
protected:

	string no;//编号

public:

	virtual void display()=0;//应收费用
	Vehicle(){
	}
	Vehicle(string n):no(n){
	}
	
	~Vehicle(){
	}
};

class Car:public Vehicle 
{
	int passenger;
	int weight;
public:
	Car(string n,int p,int w):Vehicle(n),passenger(p),weight(w)
	{
	}
	virtual void display()
	{
		cout<<no<<" "<<passenger*8+weight*2<<endl;
	}	
	~Car()
	{
	}
};

class Truck:public Vehicle
{
	int weight;
public:
	Truck(string n,int w):Vehicle(n),weight(w)
	{
	}
	virtual void display()
	{
		cout<<no<<" "<<weight*5<<endl;
	}
	~Truck(){
	}
};

class Bus:public Vehicle
{
	int passenger;
public:
	Bus(string n,int p):Vehicle(n),passenger(p)
	{
		
	}
	virtual void display()
	{
		cout<<no<<" "<<passenger*3<<endl;
	}
	~Bus()
	{
	}
};
int main()
{
	int t;
	cin>>t;
	string no;
	int pass,weight;
	int type;
	
	
	while(t--)
	{
		Vehicle *p;
		cin>>type>>no;
		if(type==1)
		{
			cin>>pass>>weight;
			Car c(no,pass,weight);
			p=&c;
			p->display();
		}
		else if(type==2)
		{
	   		cin>>weight;
			Truck s(no,weight);
			p=&s;
			p->display();
		}
		else if(type==3)
		{
			cin>>pass;
			Bus re(no,pass);
			p=&re;
			p->display();
		}
		
		
		
	}
	return 0;
}
------------------------------------------------------
2018192013:Problem1235:运行错误
/*#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
        else if(type==2)
        {
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    for(i=0;i<n;i++)
        t[i]->~Geometry();
    delete []t;
    return 0;
}*/

#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            Rect rect(a,b);
            t[i]=&rect;
        }
        else if(type==2)
        {
            cin>>r;
            Circle c(r);
            t[i]=&c;
        }
    }
    TotalArea::computerTotalArea(t,n);
    for(i=0;i<n;i++)
        delete t[i];
    delete []t;
    return 0;
}

------------------------------------------------------
2018192013:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0;
};

class Rect:public Geometry
{
    double a,b;
public:
    Rect(double a_,double b_):a(a_),b(b_){}
    double getArea(){return a*b;}
    friend class TotalArea;
};

class Circle:public Geometry
{
    double r;
public:
    Circle(double r_):r(r_){}
    double getArea(){return 3.14*r*r;}
    friend class TotalArea;
};

class TotalArea
{
public:
    static void computerTotalArea(Geometry **t,int n)
    {
        int i;
        double maxArea;
        maxArea=t[0]->getArea();
        for(i=1;i<n;i++)
            if(t[i]->getArea()>maxArea)
                maxArea=t[i]->getArea();
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxArea<<endl;
    }
};

int main()
{
    int n,i;
    cin>>n;
    Geometry **t;
    t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        double a,b,r;
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
        else if(type==2)
        {
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(t,n);
    for(i=0;i<n;i++)
        delete t[i];
    delete []t;
    return 0;
}



------------------------------------------------------
2017182103:Problem1234:正确
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
};

class GroupA:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x, int y)
    {
        return x+y;
    }

    virtual int sub(int x, int y)
    {
        int sum = 0;
        int time = 0;

        while(x/10!=0||x%10!=0||y/10!=0||y%10!=0)
        {
            double m = pow(10,time);
            if(x%10-y%10<0)
                sum += (x%10-y%10+10)*m;
            else
                sum += (x%10-y%10)*m;

            time++;

            x /= 10;
            y /= 10;
        }
        return sum;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x, int y)
    {
        int sum = 0;
        int time = 0;
        while(x/10!=0||x%10!=0||y/10!=0||y%10!=0)
        {
            double m = pow(10,time);
            if(x%10+y%10>=10)
                sum += (x%10+y%10-10)*m;
            else
                sum += (x%10+y%10)*m;

            time++;

            x /= 10;
            y /= 10;
        }
        return sum;
    }

    virtual int sub(int x, int y)
    {
        int sum = 0;
        int time = 0;

        while(x/10!=0||x%10!=0||y/10!=0||y%10!=0)
        {
            double m = pow(10,time);
            if(x%10-y%10<0)
                sum += (x%10-y%10+10)*m;
            else
                sum += (x%10-y%10)*m;

            time++;

            x /= 10;
            y /= 10;
        }
        return sum;
    }
};

int main()
{
    int t;
    cin>>t;
    Group *g;
    while(t--)
    {
        int n,n1,n2;
        char type;
        cin>>n>>n1>>type>>n2;

        if(n==1)
        {
            GroupA a;
            g = &a;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }

        else if(n==2)
        {
            GroupB b;
            g = &b;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
        else if(n==3)
        {
            GroupC c;
            g = &c;

            if(type=='+')
                cout<<g->add(n1,n2)<<endl;
            else
                cout<<g->sub(n1,n2)<<endl;
        }
    }
    return 0;
}

------------------------------------------------------
2018151058:Problem1234:正确
#include <iostream>
#include<iomanip>
#include<cmath>
using namespace std;
class Group

{

public:

    virtual int add(int x, int y)=0;

    virtual int sub(int x, int y)=0;
};
class A:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }
};
class B:public Group
{
public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len1=1,len2=1,len,i;
        int a[15],b[15],c[15];
        for(i=0; i<15; i++)
        {
            c[i]=0;
            a[i]=0;
            b[i]=0;

        }
        i=0;
        while((x*10)/10!=0)
        {
            a[i]=x%10;
            x=x/10;
            i++;
            len1++;
        }
        i=0;
        while((y*10)/10!=0)
        {
            b[i]=y%10;
            y=y/10;
            len2++;
            i++;
        }
        len=len2;
        for(i=0; i<len; i++)
        {
            if(a[i]<b[i])
                c[i]=a[i]+10-b[i];
            else
                c[i]=a[i]-b[i];
        }
        for(i=len; i<len1; i++)
        {
            c[i]=c[i]+a[i];

        }
        int result=0;
        for(i=0; i<len1; i++)
        {
            result+=c[i]*pow(10,i);
        }
        return result;
    }
};
class C:public Group
{
public:
    int add(int x, int y)
    {
        int len1=1,len2=1,i;
        int a[15],b[15],c[15];
        for(i=0; i<15; i++)
        {
            c[i]=0;
            a[i]=0;
            b[i]=0;

        }
        i=0;
        while((x*10)/10!=0)
        {
            a[i]=x%10;
            x=x/10;
            i++;
            len1++;
        }
        i=0;
        while((y*10)/10!=0)
        {
            b[i]=y%10;
            y=y/10;
            len2++;
            i++;
        }
        int min,max;
        if(len1>len2)
        {
            max=len1,min=len2;
        }
        else
        {
            max=len2,min=len1;
        }
        for(i=0; i<min; i++)
        {

                c[i]=(a[i]+b[i])%10;

        }
        for(i=min; i<max; i++)
        {
            c[i]=c[i]+a[i];

        }
        int result=0;
        for(i=0; i<len1; i++)
        {
            result+=c[i]*pow(10,i);
        }
        return result;
    }
   int sub(int x,int y)
    {
        int len1=1,len2=1,len,i;
        int a[15],b[15],c[15];
        for(i=0; i<15; i++)
        {
            c[i]=0;
            a[i]=0;
            b[i]=0;

        }
        i=0;
        while((x*10)/10!=0)
        {
            a[i]=x%10;
            x=x/10;
            i++;
            len1++;
        }
        i=0;
        while((y*10)/10!=0)
        {
            b[i]=y%10;
            y=y/10;
            len2++;
            i++;
        }
        len=len2;
        for(i=0; i<len; i++)
        {
            if(a[i]<b[i])
                c[i]=a[i]+10-b[i];
            else
                c[i]=a[i]-b[i];
        }
        for(i=len; i<len1; i++)
        {
            c[i]=c[i]+a[i];

        }
        int result=0;
        for(i=0; i<len1; i++)
        {
            result+=c[i]*pow(10,i);
        }
        return result;
    }
};
int main()
{
    int t;
    cin>>t;
    for(int i=0; i<t; i++)
    {
        Group *p;
        int type;
        int x,y;
        char a;
        cin>>type;
        if(type==1)
        {
            p=new A;
            cin>>x>>a>>y;
            if(a=='+')
                cout<<p->add(x,y)<<endl;
            if(a=='-')
                cout<<p->sub(x,y)<<endl;
        }
        if(type==2)
        {
            p=new B;
            cin>>x>>a>>y;
            if(a=='+')
                cout<<p->add(x,y)<<endl;
            if(a=='-')
                cout<<p->sub(x,y)<<endl;
        }
        if(type==3)
        {
            p=new C;
            cin>>x>>a>>y;
            if(a=='+')
                cout<<p->add(x,y)<<endl;;
            if(a=='-')
                cout<<p->sub(x,y)<<endl;
        }
        delete p;

    }

    return 0;
}

------------------------------------------------------
2016102048:Problem1120:正确
#include <bits/stdc++.h>
using namespace std;

class Animal
{ 
protected:

	string name;
	int age;


public:

	virtual void Speak()=0;//应收费用
	Animal(string n,int a):name(n),age(a){
	}

	~Animal(){
	}
};

class Tiger:public Animal 
{
public:
	Tiger(string n,int a):Animal(n,a) 
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<",AOOO."<<endl;
	}	
	~Tiger()
	{
	}
};

class Dog:public Animal
{

public:
	Dog(string n,int a):Animal(n,a)
	{
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<",WangWang."<<endl;
	}
	~Dog(){
	}
};

class Duck:public Animal
{

public:
	Duck(string n,int a):Animal(n,a)
	{
		
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<",GAGA."<<endl;
	}
	~Duck()
	{
	}
};

class Pig:public Animal
{

public:
	Pig(string n,int a):Animal(n,a)
	{
		
	}
	virtual void Speak()
	{
		cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
	}
	~Pig()
	{
	}
};
int main()
{
	int t;
	cin>>t;
	string type,name;
	int age;
	
	while(t--)
	{
		Animal *p;
		cin>>type>>name>>age;
		if(type=="Tiger")
		{
			Tiger ti(name,age);
			p=&ti;
			p->Speak();
		}
		else if(type=="Dog")
		{
			Dog d(name,age);
			p=&d;
			p->Speak();
		}
		else if(type=="Duck")
		{
			Duck du(name,age);
			p=&du;
			p->Speak();
		}
		else if(type=="Pig")
		{
			Pig pi(name,age);
			p=&pi;
			p->Speak();
		}
		else
		{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
		}
		
	}
	return 0;
}
------------------------------------------------------
2018192009:Problem1129:正确
#include <iostream>
#include <cmath>
using namespace std;
class normal
{
protected:
    int id;
    string CName;
    int counter;
public:
    normal(){}
    normal(int d,string name,int c):id(d),CName(name),counter(c){}
    void initial(){}
    int save(int money);
    int take(int money);
    virtual void info();
};
class tran:public normal
{
    int tcounter;
public:
    tran(int d,string name,int c,int tc):normal(d,name,c),tcounter(tc){}
    int transfer(int money);
    virtual void info();
};
class credit:public normal
{
    int limit;
public:
    credit(int d,string name,int c,int tc):normal(d,name,c),limit(tc){}
    int over(int money);
    virtual void info();
};
void normal::info()
{
    cout<<id<<"-"<<CName<<"-"<<counter<<endl;
}
int normal::take(int money)
{
    if(money>counter||money<0)
        return -1;
    counter-=money;
    return 1;
}
int normal::save(int money)
{
    if(money<0)
        return -1;
    counter+=money;
    return 1;
}
void tran::info()
{
    cout<<id<<"-"<<CName<<"-"<<counter<<"-"<<tcounter<<endl;
}
int tran::transfer(int money)
{
    if(money>counter)
        return -1;
    counter-=money;
    tcounter+=money;
    return 1;
}
void credit::info()
{
    cout<<id<<"-"<<CName<<"-"<<counter<<"-"<<limit<<endl;
}
int credit::over(int money)
{
    if(money>counter+limit)
        return -1;
    counter-=money;
    limit+=counter;
    counter=0;
    return 1;
    }
void show(normal &a)
{
    a.info();
}
int main()
{
    int id,counter;
    string name;
    int tc,limit;
    int money;

    cin>>id>>name>>counter;
    normal a(id,name,counter);
    cin>>id>>name>>counter>>tc;
    tran b(id,name,counter,tc);
    cin>>id>>name>>counter>>limit;
    credit c(id,name,counter,limit);

    cin>>money;
    a.save(money);
    cin>>money;
    a.save(money);
    cin>>money;
    a.take(money);
    cin>>money;
    a.take(money);

    cin>>money;
    b.save(money);
    cin>>money;
    b.take(money);
    cin>>money;
    b.transfer(money);
    cin>>money;
    b.transfer(money);

    cin>>money;
    c.save(money);
    cin>>money;
    c.take(money);
    cin>>money;
    c.over(money);
    cin>>money;
    c.over(money);

    show(a);
    show(b);
    show(c);
    return 0;
}

------------------------------------------------------
2018192009:Problem1235:正确
#include <iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
    Geometry(){}
    virtual double getArea()=0;
};
class rect:public Geometry
{
protected:
    int len,width;
public:
    rect(){}
    rect(int l,int w):len(l),width(w){}
    virtual double getArea()
    {
        double a;
        a=len*width;
        return a;
    }
};
class circle:public Geometry
{
protected:
    int r;
public:
    circle(){}
    circle(int rr):r(rr){}
    virtual double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
public:
    TotalArea(){}
    static void computerTotalArea(Geometry** t,int n)
    {
        double maxx=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>maxx)
                maxx=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<maxx;
    }
};
int main()
{
    int t;
    int type,len,wid,r;
    cin>>t;
    Geometry **p;
    p=new Geometry*[t];
    for(int i=0;i<t;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>len>>wid;
            p[i]=new rect(len,wid);
        }
        else if(type==2)
        {
            cin>>r;
            p[i]=new circle(r);
        }
    }
    TotalArea a;
    a.computerTotalArea(p,t);
    delete p;
    return 0;
}

------------------------------------------------------
2018192008:Problem1129:正确
#include <iostream>

using namespace std;
//------类定义-------
class Ncard
{
protected:
	int ID, Counter;
	char name;
public:
	Ncard(int i, char n, int c);
	int save(int m);
	virtual int take(int m);
	virtual void info();
};

class TranCard :public Ncard
{
	int Tcounter;
public:

	TranCard(int i, char n, int c, int t);
	int transfer(int m);
	virtual void info();
};

class VIP :public Ncard
{
	int Credit;
public:
	VIP(int i, char n, int c, int cr);
	int over(int m);
	virtual void info();
};
//------类实现-------
Ncard::Ncard(int i, char n, int c) :ID(i), name(n), Counter(c) {}
TranCard::TranCard(int i, char n, int c, int t) :Ncard(i, n, c), Tcounter(t) {}
VIP::VIP(int i, char n, int c, int cr) :Ncard(i, n, c), Credit(cr) {}
int Ncard::save(int m)
{
	if (m > 0)
		Counter += m;
	else
		return -1;
	return 1;
}
int Ncard::take(int m)
{
	if (m > Counter || m <= 0)
		return -1;
	else
		Counter -= m;
	return 1;
}
void Ncard::info()
{
	cout << ID << "-" << name << "-" << Counter << endl;
}
int TranCard::transfer(int m)
{
	if (m > Counter)
		return -1;
	else
	{
		Tcounter += m;
		Counter -= m;
	}
	return 1;
}
void TranCard::info()
{
	cout << ID << "-" << name << "-" << Counter << "-" << Tcounter << endl;
}
int VIP::over(int m)
{
	if (m > Counter + Credit)
		return -1;
	else
	{
		if (m > Counter)
		{
			m -= Counter;
			Counter = 0;
			Credit -= m;
		}
		else
			Counter -= m;
	}
}
void VIP::info()
{
	cout << ID << "-" << name << "-" << Counter << "-" << Credit << endl;
}
//-----多态函数-------
void show(Ncard &obj)
{
	obj.info();
}
//------主函数--------
int main()
{
	int n1, n2, n3, t1;
	char a1, a2, a3;
	int c1, c2, c3, cr;
	cin >> n1 >> a1 >> c1;
	cin >> n2 >> a2 >> c2 >> t1;
	cin >> n3 >> a3 >> c3 >> cr;
	Ncard p1(n1, a1, c1);
	TranCard p2(n2, a2, c2, t1);
	VIP p3(n3, a3, c3, cr);
	int x1, x2, x3, x4;
	cin >> x1 >> x2 >> x3 >> x4;
	p1.save(x1);
	p1.save(x2);
	p1.take(x3);
	p1.take(x4);
	cin >> x1 >> x2 >> x3 >> x4;
	p2.save(x1);
	p2.take(x2);
	p2.transfer(x3);
	p2.transfer(x4);
	cin >> x1 >> x2 >> x3 >> x4;
	p3.save(x1);
	p3.take(x2);
	p3.over(x3);
	p3.over(x4);
	show(p1);
	show(p2);
	show(p3);

}
------------------------------------------------------
2017182103:Problem1129:正确
#include <bits/stdc++.h>
using namespace std;

class Putong
{
protected:
    int ID,Counter;
    char CName;
public:
    Putong() {}
    Putong(int i,char n,int c):ID(i),CName(n),Counter(c) {}
    void initial(int i,char n,int c)
    {
        ID = i;
        CName =n;
        Counter = c;
    }
    int save(int m)
    {
        if(m<=0)
            return -1;
        else
            Counter += m;
        return 1;
    }
    int take(int m)
    {
        if(m<=0||m>Counter)
            return -1;
        else
            Counter -= m;
        return 1;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};

class Jiaotong:public Putong
{
    int Tcounter;
public:
    Jiaotong() {}
    Jiaotong(int i,char n,int c,int t):Putong(i,n,c),Tcounter(t) {}
    void initial(int i,char n,int c,int t)
    {
        ID = i;
        CName =n;
        Counter = c;
        Tcounter = t;
    }
    int transfer(int m)
    {
        if(m>Counter)
            return -1;
        else
        {
            Counter -= m;
            Tcounter += m;
            return 1;
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};

class Guibin:public Putong
{
    int Credit;
public:
    Guibin() {}
    Guibin(int i,char n,int c,int cre):Putong(i,n,c),Credit(cre) {}
    void initial(int i,char n,int c,int cre)
    {
        ID = i;
        CName =n;
        Counter = c;
        Credit = cre;
    }
    int over(int m)
    {
        if(m>Counter+Credit)
            return -1;
        else
        {
            Credit -= (m-Counter);
            Counter = 0;
            return 1;
        }
    }

    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};

void show(Putong &obj)
{
    obj.info();
}

int main()
{
    int i1,i2,i3,c1,c2,c3,t,c;
    int m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12;
    char n1,n2,n3;

    Putong p;
    Jiaotong j;
    Guibin g;

    cin>>i1>>n1>>c1;
    cin>>i2>>n2>>c2>>t;
    cin>>i3>>n3>>c3>>c;

    p.initial(i1,n1,c1);
    j.initial(i2,n2,c2,t);
    g.initial(i3,n3,c3,c);

    cin>>m1>>m2>>m3>>m4;
    p.save(m1);
    p.save(m2);
    p.take(m3);
    p.take(m4);

    cin>>m5>>m6>>m7>>m8;
    j.save(m5);
    j.take(m6);
    j.transfer(m7);
    j.transfer(m8);

    cin>>m9>>m10>>m11>>m12;
    g.save(m9);
    g.take(m10);
    g.over(m11);
    g.over(m12);

    show(p);
    show(j);
    show(g);


    return 0;
}

------------------------------------------------------
2016102048:Problem1119:答案错误
#include <bits/stdc++.h>
using namespace std;

class BaseAccount
{ 
protected:

	string name;
	string account;
	float balance;

public:

	
	BaseAccount(string n,string a,float b):name(n),account(a),balance(b){
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	virtual void depoist(float m)
	{
		balance+=m;
	}
	virtual void withdraw(float m)
	{
		if(balance<m)
			cout<<"insufficient"<<endl;
		else
			balance-=m;
	}
	~BaseAccount(){
	}
};

class BasePlus:public BaseAccount 
{
	float limit;
	float limit_sum;
public:
	BasePlus(string n,string a,float b):BaseAccount(n,a,b),limit(5000),limit_sum(0) 
	{
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
	}
	virtual void depoist(float m)
	{
		balance+=m;
	}
	virtual void withdraw(float m)
	{
		if(balance+limit<m)
			cout<<"insufficient"<<endl;
		else if(balance==m)
			balance=0;
		else
		{
			balance=0;
			limit_sum=m-balance;
		}
	}	
	~BasePlus()
	{
	}
};



int main()
{
	int t;
	cin>>t;
	string name;
	string account;
	float balance;
	float m1,m2,m3,m4;
	while(t--)
	{
		BaseAccount *p;
		cin>>name>>account>>balance;
		if(account.compare( 0,2,"BA",0,2)==0)
		{
			//cout<<"ba"<<endl;
			BaseAccount a(name,account,balance);
			p=&a;
			cin>>m1>>m2>>m3>>m4;
			p->depoist(m1);
			p->withdraw(m2);
			p->depoist(m3);
			p->withdraw(m4);
			p->display();
		}
		else if(account.compare( 0,2,"BP",0,2)==0)
		{
			//cout<<"bp"<<endl;
			BasePlus bp(name,account,balance);
			p=&bp;
			cin>>m1>>m2>>m3>>m4;
			p->depoist(m1);
			p->withdraw(m2);
			p->depoist(m3);
			p->withdraw(m4);
			p->display();
		}

		
	}
	return 0;
}
------------------------------------------------------
2017081130:Problem1119:答案错误
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    float balance;
public:
    BaseAccount(){};
    BaseAccount(string n,string a,float b):name(n),account(a),balance(b){};
    void deposit(float num)
    {
        balance+=num;
    }
    void withdraw(float num)
    {
        if(num>balance)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance-=num;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    float limit;
    float limit_sum;
public:
    BasePlus(){};
    BasePlus(string n,string a,float b,float l,float lsum):BaseAccount(n,a,b),limit(l),limit_sum(lsum){};
    void withdraw(float num)
    {
        if(num>balance+(limit-limit_sum))
        {
            cout<<"insufficient"<<endl;
        }
        else if(num<balance)
        {
            balance-=num;
        }
        else
        {
            limit_sum+=(num-balance);
            balance=0;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int t,i;
    float balance,dnum,wnum,dnum1,wnum1;
    string name,account;
    BaseAccount *a;
    cin>>t;
    for(i=1;i<=t;i++)
    {
        cin>>name>>account>>balance;
        cin>>dnum>>wnum>>dnum1>>wnum1;
        BaseAccount ba(name,account,balance);
        BasePlus bp(name,account,balance,5000,0);
        if(i%2!=0)
        {
            a=&ba;
            a->deposit(dnum);
            a->withdraw(wnum);
            a->deposit(dnum1);
            a->withdraw(wnum1);
            a->display();
        }
        else
        {
            /*a=&bp;
            a->deposit(dnum);
            a->withdraw(wnum);
            a->deposit(dnum1);
            a->withdraw(wnum1);
            a->display();*/
            bp.deposit(dnum);
            bp.withdraw(wnum);
            bp.deposit(dnum1);
            bp.withdraw(wnum1);
            bp.display();
        }
    }
}

------------------------------------------------------
2018151002:Problem1232:正确
#include<iostream>
#include<string>
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(){}
    virtual void display()=0;
};
class Car:public Vehicle
{
    int member;
    int zhongliang;
public:
    Car(string n,int m,int z)
    {
        no=n;
        member=m;
        zhongliang=z;
    }
    virtual void display()
    {
        int money;
        money=member*8+zhongliang*2;
        cout<<no<<" "<<money<<endl;
    }
};
class Truck:public Vehicle
{
    int zhongliang1;
public:
    Truck(string n,int z)
    {
        no=n;
        zhongliang1=z;  
    }
    virtual void display()
    {
        int money;
        money=zhongliang1*5;
        cout<<no<<" "<<money<<endl;
    }
};
class Bus:public Vehicle
{
    int member1;
public:
    Bus(string n,int m)
    {
        no=n;
        member1=m;  
    }
    virtual void display()
    {
        int money;
        money=member1*3;
        cout<<no<<" "<<money<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        Vehicle *p;
        int type;
        cin>>type;
        if(type==1)
        {
            string no;
            int member;
            int zhongliang;
            cin>>no>>member>>zhongliang;
            p=new Car(no,member,zhongliang);
            p->display();
        }
        else if(type==2)
        {
            string no;
            int zhongliang;
            cin>>no>>zhongliang;
            p=new Truck(no,zhongliang);
            p->display();
        }
        else if(type==3)
        {
            string no;
            int member;
            cin>>no>>member;
            p=new Bus(no,member);
            p->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018151002:Problem1120:正确
#include<iostream>
#include<string>
using namespace std;
class Animal
{
protected:
    string name;
    int year;
public:
    Animal(){}
    virtual void speak()=0;
};
class Tiger:public Animal
{
public:
    Tiger(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Dog:public Animal
{
public:
    Dog(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:public Animal
{
public:
    Duck(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
class Pig:public Animal
{
public:
    Pig(string n,int y)
    {
        name=n;
        year=y;
    }
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        Animal *p;
        string ask;
        cin>>ask;
        string name;
        int year;
        cin>>name>>year;
        if(ask=="Tiger")
        {
            p=new Tiger(name,year);
            p->speak();
            delete p;
        }
        else if(ask=="Dog")
        {
            p=new Dog(name,year);
            p->speak();
            delete p;
        }
        else if(ask=="Duck")
        {
            p=new Duck(name,year);
            p->speak();
            delete p;
        }
        else if(ask=="Pig")
        {
            p=new Pig(name,year);
            p->speak();
            delete p;
        }
        else
        {
            cout<<"There is no "<<ask<<" in our Zoo."<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2017161025:Problem1119:正确
#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
 
class BaseAccount
{
public:
    BaseAccount(string n, string a, int b)
        :name(n), account(a), balance(b) {}
    void deposit(int a) { 
        balance += a;
    }
    virtual int withdraw(int a) {
        if (a > balance) 
            return 0;
        balance -= a;
        return 1;
    }
    virtual void display() {
        cout << name << ' ' << account <<
            " Balance:" << balance << endl;
    }
    virtual ~BaseAccount() {}
protected:
    string name, account;
    int balance;
};
 
class BasePlus :public BaseAccount
{
public:
    BasePlus(string n, string a, int b, int l = 5000)
        :BaseAccount(n, a, b), limit(l) {}
    int withdraw(int a) {
        if (a > limit + balance) return 0;
        else if (a < balance) balance -= a;
        else { limit -= (a - balance); balance = 0; }
        return 1;
    }
    ~BasePlus() {}
    virtual void display() {
        cout << name << ' ' << account <<
            " Balance:" << balance <<
            " limit:" << limit << endl;
    }
private:
    int limit;
};
 
 
int main()
{
    int t;
    cin >> t;
    BaseAccount* obj = NULL;
    for (int i = 0; i < t; i++) {
        string a, b; int c, d, e, f;
        cin >> a >> b >> c;
 
        if (b[1] == 'P')
            obj = new BasePlus(a, b, c);
        else
            obj = new BaseAccount(a, b, c);
 
        cin >> c >> d >> e >> f;
        obj->deposit(c);
        if (obj->withdraw(d) == 0) {
            cout << "insufficient" << endl;
        }
        obj->deposit(e);
        if (obj->withdraw(f) == 0) {
            cout << "insufficient" << endl;
        }
        obj->display();
        delete obj;
        obj = NULL;
    }
    return 0;
}
------------------------------------------------------
2018151002:Problem1235:正确
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; 
};
class Rect:public Geometry
{
    double chang;
    double kuan;
public:
    Rect(double c,double k)
    {
        chang=c;
        kuan=k;
    }
    virtual double getArea()
    {
        double s;
        s=chang*kuan;
        return s;
    }
};
class Circle:public Geometry
{
    double r;
public:
    Circle(double _r)
    {
        r=_r;
    }
    virtual double getArea()
    {
        double s;
        s=3.14*r*r;
        return s;
    }
};
class TotalArea
{
public:
    static void computerTotalArea(Geometry** t,int n)
    {
        int i;
        double max=0;
        for(i=0;i<n;i++)
        {
            if(t[i]->getArea()>max)
                max=t[i]->getArea();
        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    Geometry** t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int type;
        cin>>type;
        if(type==1)
        {
            double chang;
            double kuan;
            cin>>chang>>kuan;
            t[i]=new Rect(chang,kuan);
        }
        else if(type==2)
        {
            double r;
            cin>>r;
            t[i]=new Circle(r);
        }
    }
    TotalArea p;
    p.computerTotalArea(t,n);
    for(i=0;i<n;i++)
    {
        delete t[i];
    }
    return 0;
}
------------------------------------------------------
2018151002:Problem1129:正确
#include<iostream>
#include<cmath>
using namespace std;
class bank
{
protected:
    int ID;
    char CName;
    int Counter;
public:
    bank(){}
    void initial(int I,char CN,int Co)
    {
        ID=I;
        CName=CN;
        Counter=Co; 
    }
    int save(int money)
    {
        if(money<0)
            return -1;
        else
        {
            Counter=Counter+money;
            return 1;
        }
    }
    int take(int money)
    {
        if(money<0)
            return -1;
        else
        {
            if(Counter<money)
                return -1;
            else
            {
                Counter=Counter-money;
                return 1;
            }
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
class bankjiaotong:public bank
{
    int Tcounter;
public:
    bankjiaotong(){}
    void initial(int I,char CN,int Co,int T)
    {
        ID=I;
        CName=CN;
        Counter=Co; 
        Tcounter=T;
    }
    int transfer(int money)
    {
        if(money<0)
            return -1;
        else
        {
            if(Counter<money)
                return -1;
            else
            {
                Counter=Counter-money;
                Tcounter=Tcounter+money;
                return 1;
            }
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class bankVIP:public bank
{
    int Credit;
public:
    bankVIP(){}
    void initial(int I,char CN,int Co,int Cr)
    {
        ID=I;
        CName=CN;
        Counter=Co;
        Credit=Cr;
    }
    int over(int money)
    {
        if(money<0)
            return -1;
        else
        {
            if(Counter+Credit<money)
                return -1;
            else
            {
                int s;
                s=money-Counter;
                Counter=0;
                Credit=Credit-s;
                return 1;
            }
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
int main()
{
    int ID1,ID2,ID3;
    char CName1,CName2,CName3;
    int Counter1,Counter2,Counter3;
    int Tcounter;
    int Credit;
    bank p1;
    bankjiaotong p2;
    bankVIP p3;
    cin>>ID1>>CName1>>Counter1;
    cin>>ID2>>CName2>>Counter2>>Tcounter;
    cin>>ID3>>CName3>>Counter3>>Credit;
    p1.initial(ID1,CName1,Counter1);
    p2.initial(ID2,CName2,Counter2,Tcounter);
    p3.initial(ID3,CName3,Counter3,Credit);
    int money1,money2,money3,money4;
    int money11,money22,money33,money44;
    int money111,money222,money333,money444;
    cin>>money1>>money2>>money3>>money4;
    cin>>money11>>money22>>money33>>money44;
    cin>>money111>>money222>>money333>>money444;
    p1.save(money1);
    p1.save(money2);
    p1.take(money3);
    p1.take(money4);
    p2.save(money11);
    p2.take(money22);
    p2.transfer(money33);
    p2.transfer(money44);
    p3.save(money111);
    p3.take(money222);
    p3.over(money333);
    p3.over(money444);
    p1.info();
    p2.info();
    p3.info();
    return 0;
}
------------------------------------------------------
2016102048:Problem1119:正确
#include <bits/stdc++.h>
using namespace std;

class BaseAccount
{ 
protected:

	string name;
	string account;
	float balance;

public:

	
	BaseAccount(string n,string a,float b):name(n),account(a),balance(b){
		//cout<<"ba"<<endl;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	virtual void depoist(float m)
	{
		balance+=m;
	}
	virtual void withdraw(float m)
	{
		if(balance<m)
			cout<<"insufficient"<<endl;
		else
			balance-=m;
	}
	~BaseAccount(){
	}
};

class BasePlus:public BaseAccount 
{
	float limit;
	float limit_sum;
public:
	BasePlus(string n,string a,float b):BaseAccount(n,a,b),limit(5000),limit_sum(0) 
	{
		//cout<<"bp"<<endl;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
	}
	virtual void depoist(float m)
	{
		balance+=m;
	}
	virtual void withdraw(float m)
	{
		if(balance+limit<m)
			cout<<"insufficient"<<endl;
		else if(balance==m)
			balance=0;
		else
		{
			//cout<<"bpbalance: "<<balance;
			limit_sum+=m-balance;
			balance=0;
		}
	}	
	~BasePlus()
	{
	}
};



int main()
{
	int t;
	cin>>t;
	string name;
	string account;
	float balance;
	float m1,m2,m3,m4;
	while(t--)
	{
		BaseAccount *p;
		cin>>name>>account>>balance;
		if(account.compare( 0,2,"BA",0,2)==0)
		{
			//cout<<"ba"<<endl;
			BaseAccount a(name,account,balance);
			p=&a;
			cin>>m1>>m2>>m3>>m4;
			p->depoist(m1);
			p->withdraw(m2);
			p->depoist(m3);
			p->withdraw(m4);
			p->display();
		}
		else if(account.compare( 0,2,"BP",0,2)==0)
		{
			//cout<<"bp"<<endl;
			BasePlus bp(name,account,balance);
			p=&bp;
			cin>>m1>>m2>>m3>>m4;
			p->depoist(m1);
			p->withdraw(m2);
			p->depoist(m3);
			p->withdraw(m4);
			p->display();
		}

		
	}
	return 0;
}
------------------------------------------------------
2018152021:Problem1119:编译错误
#include<iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
	char account[20];
    double balance;
public:
    BaseAccount(string n,char a[20],double b):name(n),account(a),balance(b){}
    void deposit(double x)
    {
        balance+=x;
    }
    void withdraw(double y)
    {
        balance-=y;
        if(balance<0)
        {
        	cout << "insufficient" << endl;
        	balance+=y;
		}
    }
	virtual void display()
    {
        cout << name << " " << account << " Balance:" << balance << endl;
    }   
};
class BasePlus:public BaseAccount
{
public:
    double limit_sum;
    BasePlus(string n,char a,double b):BaseAccount(n,a,b){}
    double deposit(double x)
    {
        balance+=x;
        return balance;
    }
    void withdraw(double y)
    {
        balance-=y;
        if(balance<-5000)
        {
        	cout << "insufficient" << endl;
        	balance+=y;
		}
		if(balance<0)
			limit_sum=-1*balance;
    }
    void display()
    {
        cout<< name << " " << account << " Balance:" << balance << "limit:" << limit_sum << endl;
    }
};
int main()
{
    int t;
    cin >> t;
    string name;
    char account[20];
    BaseAccount *p;
    double balance,x1,y1,x2,y2;
    while(t--)
    {
        cin >> name >> account >> balance >> x1 >> y1 >> x2 >> y2 ;
    	if(account[1]=='A')
    	{
    		p->BaseAccount(name,aczcount,balance);
    		p->deposit(x1);
    		p->withdraw(y1);
    		p->deposit(x2);
    		p->withdraw(y2);
    		p->display();
		}
         
    }   
}
------------------------------------------------------
2018152021:Problem1129:正确
#include<iostream>
using namespace std;
 
class card{
    protected:
        int ID;
        char CName;
        int Counter;
    public:
        card(int a,char b,int c){
            ID=a;
            CName=b;
            Counter=c;
        }
        int save(int d){
            if(d<0)
                return -1;
            else
            {
                Counter+=d;
                return 1;
            }
        }
        int take(int e){
            if(e<0||e>Counter)
                return -1;
            else
            {
                Counter-=e;
                return 1;
            }
        }
        virtual void info(){
            cout << ID << "-" << CName << "-" << Counter << endl;
        }
         
};
class B:public card{
    protected:
        int d;
    public:
        B(int A1,char C1,int B1,int D1):card(A1,C1,B1){
            d=D1;
        }
        void info(){
            cout << ID << "-" << CName << "-" << Counter << "-" << d << endl;
        }
        int transfer(int x){
            if(x>Counter||x<0)
                return -1;
            else
            {
                Counter-=x;
                d+=x;
                return 1;
            }
        }
};
class C:public card{
    protected:
        int d;
    public:
        C(int A1,char C1,int B1,int D1):card(A1,C1,B1){
            d=D1;
        }
        void info(){
            cout << ID << "-" << CName << "-" << Counter << "-"<< d << endl;
        }
        int over(int x){
            if(x<0||x>Counter+d)
                return -1;
            else
            {
                d-=(x-Counter);
                Counter=0;
                return 1;
            }
        }
};
 
void show(card & obj)
{
    obj.info();
}
int main()
{
    int a1,c1,a2,c2,a3,c3;
    char b1,b2,b3;
    int d2,d3;
    int x;
    cin >> a1 >> b1 >> c1
        >> a2 >> b2 >> c2 >> d2
        >> a3 >> b3 >> c3 >> d3;
         
    card a(a1,b1,c1);
    B b(a2,b2,c2,d2);
    C c(a3,b3,c3,d3);
     
    cin >> x;
    a.save(x);
    cin >> x;
    a.save(x);
    cin >> x;
    a.take(x);
    cin >> x;
    a.take(x);
    cin >> x;
    b.save(x);
    cin >> x;
    b.take(x);
    cin >> x;
    b.transfer(x);
    cin >> x;
    b.transfer(x);
    cin >> x;
    c.save(x);
    cin >> x;
    c.take(x);
    cin >> x;
    c.over(x);
    cin >> x;
    c.over(x);
     
    show(a);
    show(b);
    show(c);
     
     
    return 0;
}

------------------------------------------------------
2018152021:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;
 
class Geometry{
    public:
        virtual double getArea()=0;
};
class Rect:public Geometry{
        int B,C;
    public:
        Rect(int b,int c){
            B=b;
            C=c;
        }
        double getArea(){
            return B*C;
        }
};
class Circle:public Geometry{
        int D;
    public:
        Circle(int d){
            D=d;
        }
        double getArea(){
            return D*D*3.14;
        }
};
 
class TotalArea{
    public:
        static void computerTotalArea(Geometry** t,int n){
            for(int i=0;i<n;i++)
            {
                int j;
                double b,c,d;
                cin >> j;
                if(j==1)
                {
                    cin >> b >> c;
                    t[i] = new Rect(b,c);
                }
                else if(j==2)
                {
                    cin >> d;
                    t[i] = new Circle(d);
                }
                 
            }
            double max1=t[0]->getArea();
            for(int i=1;i<n;i++)
            {
                if(max1<t[i]->getArea())
                    max1=t[i]->getArea();
            }
            cout << fixed << setprecision(2) << "最大面积=" << max1 << endl;
        }
};
 
int main()
{
    int t,i;
    cin >> t;
    int a,b,c,d;
    Geometry **ps = new Geometry*[t+1];
    int sum;
    TotalArea::computerTotalArea(ps,t);
    return 0;
}

------------------------------------------------------
2018151058:Problem1129:正确
#include<iostream>
using namespace std;
class comman
{
protected:
    int num;
    char name;
    int balance;
public:
    comman() {};
    void initial(int n1, char n2, int b);
    virtual int save(int a);
    virtual int take(int a);
    virtual void check();

};
class Trancard: public comman
{
protected:
    int tran_balance;
public:
    Trancard() {};
    void initial(int n1, char n2, int b, int t);
    int save(int a);
    int take(int a);
    void check();
    int transfer(int a);

};
class Vipcard: public comman
{
protected:
    int limit;
public:
    Vipcard() {};
    void initial(int n1, char n2, int b, int t);
    int save(int a);
    int take(int a);
    void check();
    int over(int a);
};
//普通类实现
void comman::initial(int n1, char n2, int b)
{
    num = n1;
    name = n2;
    balance = b;
}
int comman::save(int a)
{
    if(a < 0)
        return -1;
    else
        balance += a;
    return 1;
}
int comman::take(int a)
{
     if(a > balance||a<0)
        return -1;
    else
        balance -= a;
    return 1;
}
void comman::check()
{
    cout << num << "-" << name << "-" << balance << endl;
}
//交通卡类实现
void Trancard::initial(int n1, char n2, int b, int t)
{
    num = n1;
    name = n2;
    balance = b;
    tran_balance = t;
}
int Trancard::save(int a)
{
    if(a < 0)
        return -1;
    else
        balance += a;
    return 1;
}
int Trancard::take(int a)
{
    if(a > balance||a<0)
        return -1;
    else
        balance -= a;
    return 1;
}
void Trancard::check()
{
    cout << num << "-" << name << "-" << balance << "-" << tran_balance << endl;
}
int Trancard::transfer(int a)
{
    if(a > balance)
        return 1;
    balance -= a;
    tran_balance += a;
    return 1;

}
//贵宾卡类实现
void Vipcard::initial(int n1, char n2, int b, int t)
{
    num = n1;
    name = n2;
    balance = b;
    limit = t;
}
int Vipcard::save(int a)
{
    if(a < 0)
        return -1;
    else
        balance += a;
    return 1;
}
int Vipcard::take(int a)
{
    if(a > balance||a<0)
        return -1;
    else
        balance -= a;
    return 1;
}
void Vipcard::check()
{
     cout << num << "-" << name << "-" << balance << "-" << limit << endl;
}
int Vipcard::over(int a)
{
    if(a>limit+balance)
        return -1;
    limit=limit-(a-balance);
    balance=0;
    return 1;
}
void show(comman &a)
{
    a.check();
}
int main()
{
    //输入并初始化
    int n1,b,t;
    char n2;
    comman c1;
    Trancard c2;
    Vipcard c3;
    cin>>n1>>n2>>b;
    c1.initial(n1,n2,b);
    cin>>n1>>n2>>b>>t;
    c2.initial(n1,n2,b,t);
    cin>>n1>>n2>>b>>t;
    c3.initial(n1,n2,b,t);
    //输入数据并按顺序操作
    int x,y,m,n;
    cin>>x>>y>>m>>n;
    c1.save(x);
    c1.save(y);
    c1.take(m);
    c1.take(n);
    cin>>x>>y>>m>>n;
    c2.save(x);
    c2.take(y);
    c2.transfer(m);
    c2.transfer(n);
    cin>>x>>y>>m>>n;
    c3.save(x);
    c3.take(y);
    c3.over(m);
    c3.over(n);
    //输出最终状态
    show(c1);
    show(c2);
    show(c3);
    return 0;
}

------------------------------------------------------
2018151002:Problem1119:正确
#include<iostream>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    char name[10];
    char account[10];
    double balance;
public:
    BaseAccount(){}
    BaseAccount(char n[],char a[],double b)
    {
        strcpy(name,n);
        strcpy(account,a);
        balance=b;  
    }
    void deposit(double money)
    {
        balance=balance+money;
    }
    virtual void withdraw(double money)
    {
        if((balance-money)<0)
            cout<<"insufficient"<<endl;
        else if((balance-money)>=0)
            balance=balance-money;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    double limit;
    double limit_sum;
public:
    BasePlus(){}
    BasePlus(char n[],char a[],double b)
    {
        strcpy(name,n);
        strcpy(account,a);
        balance=b;
        limit=5000;
        limit_sum=0;
    }
    void deposit(double money)
    {
        balance=balance+money;
    }
    virtual void withdraw(double money)
    {
        double value;
        value=limit-limit_sum+balance;
        if(value-money<0)
            cout<<"insufficient"<<endl;
        else if(value-money>=0)
        {
            if(balance==0)
            {
                limit_sum=limit_sum+money;
            }
            else if(balance>0)
            {
                double s;
                s=money-balance;
                if(s<=0)
                    balance=balance-money;
                else if(s>0)
                {
                    balance=0;
                    limit_sum=limit_sum+s;
                }
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        char name[10];
        char account[10];
        double balance;
        cin>>name>>account>>balance;
        BaseAccount *p;
        if(account[1]=='A')
        {
            p=new BaseAccount(name,account,balance);
        }
        else if(account[1]=='P')
        {
            p=new BasePlus(name,account,balance);
        }
        for(int j=1;j<=4;j++)
        {
            int money;
            cin>>money;
            if(j%2!=0)
                p->deposit(money);
            else if(j%2==0)
                p->withdraw(money);
        }
        p->display();
        delete p;
    }
    return 0;
}
------------------------------------------------------
2016102048:Problem1235:运行错误
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:

   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
	
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				Rect rect(a,b);
				p[i]=&rect;
				if(max<p[i]->getArea())
					max=p[i]->getArea();
			}
			else if(type==2)
			{
	   			cin>>r;
				Circle c(r);
				p[i]=&c;
				if(max<p[i]->getArea())
					max=p[i]->getArea();
			}
			
		}
		cout<<"最大面积="<<max<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;
	p=new Geometry*[t];
	TotalArea a;
	a.computerTotalArea(p,t);
	delete []*p;
	return 0;
}
------------------------------------------------------
2018151002:Problem1234:正确
#include<iostream>
#include<cmath>
using namespace std;
class Group
{
public:
    virtual int add(int x,int y)=0;
    virtual int sub(int x,int y)=0;
};
class GroupA:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        return x-y;
    }
};
class GroupB:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        int flag=0,i;
        for(i=0;x!=0||y!=0;i++)
        {
            int m,n;
            m=x%10;
            n=y%10;
            if(m-n<0)
                m=10+m;
            flag=flag+(m-n)*pow(10,i);
            x=x/10;
            y=y/10;
        }
        return flag;
    }
};
class GroupC:public Group
{
public:
    virtual int add(int x,int y)
    {
        int flag=0,i;
        for(i=0;x!=0||y!=0;i++)
        {
            int m,n;
            m=x%10;
            n=y%10;
            if(m+n>=10)
                flag=flag+(m+n-10)*pow(10,i);
            else if(m+n<10)
                flag=flag+(m+n)*pow(10,i);
            x=x/10;
            y=y/10;
        }
        return flag;
    }
    virtual int sub(int x,int y)
    {
        int flag=0,i;
        for(i=0;x!=0||y!=0;i++)
        {
            int m,n;
            m=x%10;
            n=y%10;
            if(m-n<0)
                m=10+m;
            flag=flag+(m-n)*pow(10,i);
            x=x/10;
            y=y/10;
        }
        return flag;
    }
};
int main()
{
    int n,i;
    cin>>n;
    for(i=1;i<=n;i++)
    {
        int type;
        int x,y;
        char ask;
        cin>>type;
        cin>>x>>ask>>y;
        Group *p;
        if(type==1)
            p=new GroupA;
        else if(type==2)
            p=new GroupB;
        else if(type==3)
            p=new GroupC;
        if(ask=='+')
            cout<<p->add(x,y)<<endl;
        else if(ask=='-')
            cout<<p->sub(x,y)<<endl;
        delete p;
    }
}
------------------------------------------------------
2016102048:Problem1235:运行错误
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
	
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				Rect rect(a,b);
				p[i]=&rect;
				if(max<p[i]->getArea())
					max=p[i]->getArea();
			}
			else if(type==2)
			{
	   			cin>>r;
				Circle c(r);
				p[i]=&c;
				if(max<p[i]->getArea())
					max=p[i]->getArea();
			}
			
		}
		cout<<"最大面积="<<max<<endl;
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;
	p=new Geometry*[t];
	TotalArea a;
	a.computerTotalArea(p,t);
	int i;
	for(i=0;i<t;i++)
		delete []p[i];
	return 0;
}
------------------------------------------------------
2016102048:Problem1235:运行错误
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				Rect rect(a,b);
				p[i]=&rect;
				if(max<p[i]->getArea())
					max=p[i]->getArea();
			}
			else if(type==2)
			{
	   			cin>>r;
				Circle c(r);
				p[i]=&c;
				if(max<p[i]->getArea())
					max=p[i]->getArea();
			}
			
		}
		cout<<"最大面积="<<max<<endl;
		for(i=0;i<n;i++)
			delete []p[i];
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2018152037:Problem1129:正确
#include<iostream>
using namespace std;

class NCard
{
protected:
	long ID;
	char CName;
	int Counter;
public:
	NCard(long I,char m,int y)
	{
		ID=I;
		CName=m;
		Counter=y; 
	}
	void initial(long I,char m,int y)
	{
		ID=I;
		CName=m;
		Counter=y; 
	}
	int save(int k)
	{
		if(k>0)
		{
			Counter=Counter+k;
			return 1;
		}
		else
		return -1;
	}
	int take(int k)
	{
		if(k<=0)
			return -1;
		if(Counter-k<0)
			return -1;
		else
		{
			Counter=Counter-k;
			return 1;
		}
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
};

class jt:public NCard
{
	int Tcounter;
public:
	jt(long I,char m,int y,int t):NCard(I,m,y)
	{
		Tcounter=t;
	}
	int transfer(int k)
	{
		if(k<=0)
			return -1;
		if(Counter-k<0)
			return -1;
		else
		{
			Counter=Counter-k;
			Tcounter=Tcounter+k;
			return 1;
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}
};

class gbk:public NCard
{
	int Credit;
public:
	gbk(long I,char m,int y,int t):NCard(I,m,y)
	{
		Credit=t;
	}
	int over(int k)
	{
		if(k<=0)
			return -1;
		if(Counter+Credit<=k)
			return -1;
		else
		{
			Credit=Counter+Credit-k;
			Counter=0;
		}
	}
	void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
	}
};

void show(NCard &obj)
{
	obj.info();
}

int main()
{
	long I,I1,I2;
	char m,m1,m2;
	int y,y1,y2,t1,t2;
	cin>>I>>m>>y>>I1>>m1>>y1>>t1>>I2>>m2>>y2>>t2;
	NCard a1(I,m,y);
	jt a2(I1,m1,y1,t1);
	gbk a3(I2,m2,y2,t2);
	int n1,n2,n3,n4;
	cin>>n1>>n2>>n3>>n4;
	a1.save(n1);
	a1.save(n2);
	a1.take(n3);
	a1.take(n4);
	cin>>n1>>n2>>n3>>n4;
	//cout<<n1<<n2<<n3<<n4<<endl;
	a2.save(n1);
	a2.take(n2);
	a2.transfer(n3);
	a2.transfer(n4);
	cin>>n1>>n2>>n3>>n4;
	//cout<<n1<<n2<<n3<<n4<<endl;
	a3.save(n1);
	a3.take(n2);
	a3.over(n3);
	a3.over(n4);
	show(a1);
	show(a2);
	show(a3);
	return 0;
}
------------------------------------------------------
2016102048:Problem1235:运行错误
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				
				p[i]=new Rect(a,b);
			
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				delete p[i];
			}
			else if(type==2)
			{
	   			cin>>r;
				p[i]=new Circle(r);
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				delete p[i];
			}
			
		}
		cout<<"最大面积="<<max<<endl;
		for(i=0;i<n;i++)
			delete []p;
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2018152114:Problem1129:正确
#include <iostream>
#include <string>
using namespace std;

class NCard
{
protected:
	int ID;
	string CName;
	int Counter;

public:
	void initial(int id, string name, int counter);
	int save(int n);
	int take(int n);
	virtual void info();
};

class TCard : public NCard
{
protected:
	int Tcounter;

public:
	void initial(int id, string name, int counter, int tcounter);
	int transfer(int n);
	virtual void info();
};

class VCard : public NCard
{
protected:
	int Credit;

public:
	void initial(int id, string name, int counter, int credit);
	int over(int n);
	virtual void info();
};

void NCard::initial(int id, string name, int counter)
{
	ID = id;
	CName = name;
	Counter = counter;
}

int NCard::save(int n)
{
	if (n < 0)
		return -1;

	Counter += n;

	return 1;
}

int NCard::take(int n)
{
	if (n < 0 || n > Counter) 
		return -1;

	Counter -= n;

	return 1;
}

void NCard::info()
{
	cout << ID << "-" << CName << "-" << Counter;
}

void TCard::initial(int id, string name, int counter, int tcounter)
{
	Tcounter = tcounter;
	NCard::initial(id, name, counter);
}

int TCard::transfer(int n)
{
	if (n < 0 || n > Counter)
		return -1;

	Counter -= n;
	Tcounter += n;

	return 1;
}

void TCard::info()
{
	NCard::info();
	cout << "-" << Tcounter;
}

void VCard::initial(int id, string name, int counter, int credit)
{
	Credit = credit;
	NCard::initial(id, name, counter);
}

int VCard::over(int n)
{
	if (n < 0 || n > Counter + Credit)
		return -1;

	n -= Counter;
	Counter = 0;
	Credit -= n;

	return 1;
}

void VCard::info()
{
	NCard::info();
	cout << "-" << Credit;
}

void show(NCard & obj)
{
	obj.info();
	cout << endl;
}

int main()
{
	int id;
	string name;
	int balance;
	int tcounter, credit;

	NCard nc;
	TCard tc;
	VCard vc;

	cin >> id >> name >> balance;
	nc.initial(id, name, balance);

	cin >> id >> name >> balance >> tcounter;
	tc.initial(id, name, balance, tcounter);

	cin >> id >> name >> balance >> credit;
	vc.initial(id, name, balance, credit);

	int num;

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		nc.save(num);
	}

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		nc.take(num);
	}

	cin >> num;
	tc.save(num);

	cin >> num;
	tc.take(num);

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		tc.transfer(num);
	}

	cin >> num;
	vc.save(num);

	cin >> num;
	vc.take(num);

	for (int i = 0; i < 2; i++)
	{
		cin >> num;
		vc.over(num);
	}

	show(nc);
	show(tc);
	show(vc);

	return 0;
}
------------------------------------------------------
2016102048:Problem1235:运行错误
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				
				p[i]=new Rect(a,b);
			
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			else if(type==2)
			{
	   			cin>>r;
				p[i]=new Circle(r);
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			
		}
		cout<<"最大面积="<<max<<endl;
		for(i=0;i<n;i++)
			delete []p[i];
		delete p;
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2016102048:Problem1235:答案错误
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				
				p[i]=new Rect(a,b);
			
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			else if(type==2)
			{
	   			cin>>r;
				p[i]=new Circle(r);
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			
		}
		cout<<"最大面积="<<max<<endl;
		
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2016102048:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				
				p[i]=new Rect(a,b);
			
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			else if(type==2)
			{
	   			cin>>r;
				p[i]=new Circle(r);
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
		
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2017081130:Problem1235:编译错误
#include <iostream>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.141;
        return a;
    }
};
class TotalArea:virtual public Rect,virtual public Circle
{
public:
    static  int num;
    static void computerTotalArea(Geometry**t,int n)
    {
        for(i=1;i<n;i++)
        {
            for(j=1;j<n;j++)
            {
                if(t[j]->getArea()>t[j+1]->getArea())
                    areamax=t[j]->getArea();
            }
            
        }
    }
}
int TotalArea::num=0;
int main()
{
    int t;
    cin>>t;
    Geometry **p;
    for(i=1;i<=n;i++)
    {
        t[i]=new *Geometry;
    }
    for(i=1;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;
            p[i]->getArea();

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
            p[i]->getArea();
        }
    }
    TotalArea total(Geometry **p,t);
}

------------------------------------------------------
2017081130:Problem1235:编译错误
#include <iostream>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.141;
        return a;
    }
};
class TotalArea:virtual public Geometry
{
public:
    static  int num;
    static void computerTotalArea(Geometry**t,int n)
    {
        int i,j;
        double areamax;
        for(i=1;i<n;i++)
        {
            for(j=1;j<n;j++)
            {
                if(t[j]->getArea()>t[j+1]->getArea())
                    areamax=t[j]->getArea();
            }

        }
    }
};
int TotalArea::num=0;
int main()
{
    int n,i,j,x,y,r;
    cin>>n;
    Geometry **p;
    for(i=1;i<=n;i++)
    {
        p[i]=new Geometry;
    }
    for(i=1;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total(Geometry **p,t);
}

------------------------------------------------------
2017081130:Problem1235:编译错误
#include <iostream>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.141;
        return a;
    }
};
class TotalArea:virtual public Geometry
{
public:
    static  int num;
    static void computerTotalArea(Geometry**t,int n)
    {
        int i,j;
        double areamax;
        for(i=1;i<n;i++)
        {
            for(j=1;j<n;j++)
            {
                if(t[j]->getArea()>t[j+1]->getArea())
                    areamax=t[j]->getArea();
            }

        }
    }
};
int TotalArea::num=0;
int main()
{
    int n,i,j,x,y,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(i=1;i<=n;i++)
    {
        p[i]=new Geometry[n];
    }
    for(i=1;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total(Geometry **p,t);
}

------------------------------------------------------
2017081130:Problem1235:编译错误
#include <iostream>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.141;
        return a;
    }
};
class TotalArea:virtual public Geometry
{
public:
    static  int num;
    static void computerTotalArea(Geometry**t,int n)
    {
        int i,j;
        double areamax;
        for(i=1;i<n;i++)
        {
            for(j=1;j<n;j++)
            {
                if(t[j]->getArea()>t[j+1]->getArea())
                    areamax=t[j]->getArea();
            }

        }
        cout<<"最大面积="<<areamax<<endl;
    }
};
int TotalArea::num=0;
int main()
{
    int n,i,j,x,y,r;
    cin>>n;
    Geometry **p;
    p=new Geometry*[n];
    for(i=1;i<=n;i++)
    {
        p[i]=new Geometry [n];
    }
    for(i=1;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total(Geometry **p,n);
}

------------------------------------------------------
2016102048:Problem1234:答案错误
#include <bits/stdc++.h>
using namespace std;

class Group
{ 

public:

	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
	Group(){
	}

	~Group(){
	}
};

class GroupA:public Group 
{
public:
	GroupA()
	{
	}
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		return x-y;
	}	
	~GroupA()
	{
	}
};

class GroupB:public Group
{

public:
	GroupB()
	{
	}
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		int i,j;
		int xv=x,yv=y;
		int a[20],b[20],c[20],n;
		memset(a,0,sizeof(int)*20);
		memset(b,0,sizeof(int)*20);
		memset(c,0,sizeof(int)*20);
		for(i=0;;i++)
		{
			a[i]=xv%10;
			//cout<<"xv"<<a[i]<<endl;
			if(xv<10)
				break;
			xv=xv/10;
			
		}
		n=i;
		for(i=0;;i++)
		{
			b[i]=yv%10;
			//cout<<"yv"<<b[i]<<endl;
			if(yv<10)
				break;
			yv=yv/10;
			
		}
		int final=0;
		for(i=0,j=1;i<=n;i++,j*=10)
		{
			if(a[i]<b[i])
				c[i]=a[i]+10-b[i];
			else
				c[i]=a[i]-b[i];
			final+=c[i]*j;
		}
		return final;
	}
	~GroupB(){
	}
};

class GroupC:public Group
{

public:
	GroupC()
	{
		
	}
	virtual int add(int x, int y)
	{
		int i,j;
		int xv=x,yv=y;
		int a[20],b[20],c[20],n;
		memset(a,0,sizeof(int)*20);
		memset(b,0,sizeof(int)*20);
		memset(c,0,sizeof(int)*20);
		for(i=0;;i++)
		{
			a[i]=xv%10;
			//cout<<"xv"<<a[i]<<endl;
			if(xv<10)
				break;
			xv=xv/10;
			
		}
		n=i;
		for(i=0;;i++)
		{
			b[i]=yv%10;
			//cout<<"yv"<<b[i]<<endl;
			if(yv<10)
				break;
			yv=yv/10;
			
		}
		int final=0;
		for(i=0,j=1;i<=n;i++,j*=10)
		{
			if(a[i]+b[i]>=10)
				c[i]=a[i]+b[i]-10;
			else
				c[i]=a[i]+b[i];
			final+=c[i]*j;
		}
		return final;
	}
	virtual int sub(int x, int y)
	{
		int i,j;
		int xv=x,yv=y;
		int a[20],b[20],c[20],n;
		memset(a,0,sizeof(int)*20);
		memset(b,0,sizeof(int)*20);
		memset(c,0,sizeof(int)*20);
		for(i=0;;i++)
		{
			a[i]=xv%10;
			//cout<<"xv"<<a[i]<<endl;
			if(xv<10)
				break;
			xv=xv/10;
			
		}
		n=i;
		for(i=0;;i++)
		{
			b[i]=yv%10;
			//cout<<"yv"<<b[i]<<endl;
			if(yv<10)
				break;
			yv=yv/10;
			
		}
		int final=0;
		for(i=0,j=1;i<=n;i++,j*=10)
		{
			if(a[i]<b[i])
				c[i]=a[i]+10-b[i];
			else
				c[i]=a[i]-b[i];
			final+=c[i]*j;
		}
		return final;
	}
	~GroupC()
	{
	}
};


int main()
{
	int t;
	cin>>t;
	int type;
	int a,b;
	char ch;
	
	while(t--)
	{
		Group *p;
		cin>>type>>a>>ch>>b;
		if(type==1)
		{
			GroupA a1;
			p=&a1;
			if(ch=='+')
				cout<<p->add(a,b)<<endl;
			else if(ch=='-')
				cout<<p->sub(a,b)<<endl;
		}
		else if(type==2)
		{
			GroupB a2;
			p=&a2;
			if(ch=='+')
				cout<<p->add(a,b)<<endl;
			else if(ch=='-')
				cout<<p->sub(a,b)<<endl;
		}
		else if(type==3)
		{
			GroupC a3;
			p=&a3;
			if(ch=='+')
				cout<<p->add(a,b)<<endl;
			else if(ch=='-')
				cout<<p->sub(a,b)<<endl;
		}
		
	}
	return 0;
}
------------------------------------------------------
2016102048:Problem1234:正确
#include <bits/stdc++.h>
using namespace std;

class Group
{ 

public:

	virtual int add(int x, int y)=0;//输出加法的运算结果
	virtual int sub(int x, int y)=0;//输出减法的运算结果
	Group(){
	}

	~Group(){
	}
};

class GroupA:public Group 
{
public:
	GroupA()
	{
	}
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		return x-y;
	}	
	~GroupA()
	{
	}
};

class GroupB:public Group
{

public:
	GroupB()
	{
	}
	virtual int add(int x, int y)
	{
		return x+y;
	}
	virtual int sub(int x, int y)
	{
		int i,j;
		int xv=x,yv=y;
		int a[20],b[20],c[20],n;
		memset(a,0,sizeof(int)*20);
		memset(b,0,sizeof(int)*20);
		memset(c,0,sizeof(int)*20);
		for(i=0;;i++)
		{
			a[i]=xv%10;
			//cout<<"xv"<<a[i]<<endl;
			if(xv<10)
				break;
			xv=xv/10;
			
		}
		n=i;
		for(i=0;;i++)
		{
			b[i]=yv%10;
			//cout<<"yv"<<b[i]<<endl;
			if(yv<10)
				break;
			yv=yv/10;
			
		}
		int final=0;
		for(i=0,j=1;i<=n;i++,j*=10)
		{
			if(a[i]<b[i])
				c[i]=a[i]+10-b[i];
			else
				c[i]=a[i]-b[i];
			final+=c[i]*j;
		}
		return final;
	}
	~GroupB(){
	}
};

class GroupC:public Group
{

public:
	GroupC()
	{
		
	}
	virtual int add(int x, int y)
	{
		int i,j;
		int xv=x,yv=y;
		int a[20],b[20],c[20],n;
		memset(a,0,sizeof(int)*20);
		memset(b,0,sizeof(int)*20);
		memset(c,0,sizeof(int)*20);
		for(i=0;;i++)
		{
			a[i]=xv%10;
			//cout<<"xv"<<a[i]<<endl;
			if(xv<10)
				break;
			xv=xv/10;
			
		}
		n=i;
		for(i=0;;i++)
		{
			b[i]=yv%10;
			//cout<<"yv"<<b[i]<<endl;
			if(yv<10)
				break;
			yv=yv/10;
			
		}
		if(n<i)
			n=i;
		int final=0;
		for(i=0,j=1;i<=n;i++,j*=10)
		{
			if(a[i]+b[i]>=10)
				c[i]=a[i]+b[i]-10;
			else
				c[i]=a[i]+b[i];
			final+=c[i]*j;
		}
		return final;
	}
	virtual int sub(int x, int y)
	{
		int i,j;
		int xv=x,yv=y;
		int a[20],b[20],c[20],n;
		memset(a,0,sizeof(int)*20);
		memset(b,0,sizeof(int)*20);
		memset(c,0,sizeof(int)*20);
		for(i=0;;i++)
		{
			a[i]=xv%10;
			//cout<<"xv"<<a[i]<<endl;
			if(xv<10)
				break;
			xv=xv/10;
			
		}
		n=i;
		for(i=0;;i++)
		{
			b[i]=yv%10;
			//cout<<"yv"<<b[i]<<endl;
			if(yv<10)
				break;
			yv=yv/10;
			
		}
		int final=0;
		for(i=0,j=1;i<=n;i++,j*=10)
		{
			if(a[i]<b[i])
				c[i]=a[i]+10-b[i];
			else
				c[i]=a[i]-b[i];
			final+=c[i]*j;
		}
		return final;
	}
	~GroupC()
	{
	}
};


int main()
{
	int t;
	cin>>t;
	int type;
	int a,b;
	char ch;
	
	while(t--)
	{
		Group *p;
		cin>>type>>a>>ch>>b;
		if(type==1)
		{
			GroupA a1;
			p=&a1;
			if(ch=='+')
				cout<<p->add(a,b)<<endl;
			else if(ch=='-')
				cout<<p->sub(a,b)<<endl;
		}
		else if(type==2)
		{
			GroupB a2;
			p=&a2;
			if(ch=='+')
				cout<<p->add(a,b)<<endl;
			else if(ch=='-')
				cout<<p->sub(a,b)<<endl;
		}
		else if(type==3)
		{
			GroupC a3;
			p=&a3;
			if(ch=='+')
				cout<<p->add(a,b)<<endl;
			else if(ch=='-')
				cout<<p->sub(a,b)<<endl;
		}
		
	}
	return 0;
}
------------------------------------------------------
2017081130:Problem1129:答案错误
#include <iostream>
using namespace std;
class Account
{
protected:
    string ID;
    char CName;
    int Counter;
public:
    friend void show(Account &obj);
    Account(){};
    Account(string id,char n,int c):ID(id),CName(n),Counter(c){};
    int save(int n)
    {
        if(n>0)
        {
            Counter+=n;
            return 1;
        }
        else
            return 0;

    }
    int take(int n)
    {
        if(n>0&&n<Counter)
        {
            Counter-=n;
            return 1;
        }
        else
            return 0;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
class Traffic:virtual public Account
{
    int Tcounter;
public:
    Traffic(){};
    Traffic(string id,char n,int c,int t):Account(id,n,c),Tcounter(t){};
    int transfer(int n)
    {
        if(n<Counter)
        {
            Counter-=n;
            Tcounter+=n;
            return 1;
        }
        else
            return 0;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VIP:virtual public Account
{
    int Credit;
public:
    VIP(){};
    VIP(string id,char n,int c,int l):Account(id,n,c),Credit(l){};
    int over(int n)
    {
        if(n<=Counter)
        {
            Counter-=n;
            return 1;
        }
        else if(n>(Counter+Credit))
            return 0;
        else
        {
            Credit=Credit-(n-Counter);
            Counter=0;
            return 1;
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(Account &obj)
{
    obj.info();
}
int main()
{
    Account *ac;
    string id1,id2,id3;
    char name1,name2,name3;
    int counter1,counter2,counter3,num1,num2,num3,num4,tcounter,credit;
    cin>>id1>>name1>>counter1;
    cin>>id2>>name2>>counter2>>tcounter;
    cin>>id3>>name3>>counter3>>credit;
    Account a(id1,name1,counter1);
    Traffic t(id2,name2,counter2,tcounter);
    VIP vip(id3,name3,counter3,credit);
    cin>>num1>>num2>>num3>>num4;
    a.save(num1);
    a.take(num2);
    a.take(num3);
    a.take(num4);
    cin>>num1>>num2>>num3>>num4;
    t.save(num1);
    t.take(num2);
    t.transfer(num3);
    t.transfer(num4);
    cin>>num1>>num2>>num3>>num4;
    vip.save(num1);
    vip.take(num2);
    vip.over(num3);
    vip.over(num4);
    show(a);
    show(t);
    show(vip);
    return 0;
}

------------------------------------------------------
2016102048:Problem1129:正确
#include <bits/stdc++.h>
using namespace std;

class CardA

{ 
protected:
	string ID;
	string CName;
	int Counter;

public:
	CardA(){
	}

	virtual void initial(string id,string name,int counter)
	{
		ID=id;
		CName=name;
		Counter=counter;
	}
	virtual int save(int m)
	{
		if(m<=0)
			return -1;
		Counter+=m;
		return 1;
	}
	virtual int take(int m)
	{
		if(m<=0||m>Counter)
			return -1;
		Counter-=m;
		return 1;
	}
	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
	}
	
	~CardA(){
	}
};

class CardB:public CardA 
{
	int Tcounter;
public:
	CardB()
	{
	}
	int transfer(int m)
	{
		if(m>Counter)
			return -1;
		Counter-=m;
		Tcounter+=m;
		return 1;
	}
	virtual void initial(string id,string name,int counter,int t)
	{
		ID=id;
		CName=name;
		Counter=counter;
		Tcounter=t;
	}

	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
	}	
	~CardB()
	{
	}
};

class CardC:public CardA
{
	int Credit;
public:
	CardC()
	{
	}
	int over(int m)
	{
		if(Counter+Credit<m)
			return -1;
		Credit-=m-Counter;
		Counter=0;
		return 1;
	}
	virtual void initial(string id,string name,int counter,int c)
	{
		ID=id;
		CName=name;
		Counter=counter;
		Credit=c;
	}

	virtual void info()
	{
		cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
	}	
	~CardC(){
	}
};

void show(CardA &obj)
{
	obj.info();
}
int main()
{
	string ID;
	string CName;
	int Counter;
	int Tcounter;
	int Credit;
	int m1,m2,m3,m4;
	CardA a;
	CardB b;
	CardC c;
	cin>>ID>>CName>>Counter;
	a.initial(ID,CName,Counter);
	cin>>ID>>CName>>Counter>>Tcounter;
	b.initial(ID,CName,Counter,Tcounter);
	cin>>ID>>CName>>Counter>>Credit;
	c.initial(ID,CName,Counter,Credit);
	cin>>m1>>m2>>m3>>m4;
	a.save(m1);
	a.save(m2);
	a.take(m3);
	a.take(m4);
	cin>>m1>>m2>>m3>>m4;
	b.save(m1);
	b.take(m2);
	b.transfer(m3);
	b.transfer(m4);
	cin>>m1>>m2>>m3>>m4;
	c.save(m1);
	c.take(m2);
	c.over(m3);
	c.over(m4);
	show(a);
	show(b);
	show(c);
	
	return 0;
}
------------------------------------------------------
2018192037:Problem1129:正确
#include<bits/stdc++.h>
using namespace std;

class CNormal
{
protected:
    int id;
    string name;
    int counter;
public:
    void initiai(int i,string n,int c)
    {
        id = i;
        name = n;
        counter = c;
    }
    virtual int save(int m)
    {
        if(m>0)
        {
            counter+=m;
            return 1;
        }
        else return -1;
    }
    virtual int take(int m)
    {
        if(m>0 && counter-m>=0)
        {
            counter-=m;
            return 1;
        }
        else return -1;
    }
    virtual void info()
    {
        cout<<id<<"-"<<name<<"-"<<counter<<endl;
    }

};

class CVIP:public CNormal
{
    int Credit;
public:
    void initiai(int i,string n,int c,int q)
    {
        id = i;
        name = n;
        counter = c;
        Credit = q;
    }
    int over(int m)
    {
        if(m>0 && Credit+counter-m>=0)
        {
            counter-=m;
            if(counter<0)
            {
                Credit+=counter;
                counter=0;
            }
            return 1;
        }
        else return -1;
    }
    void info()
    {
        cout<<id<<"-"<<name<<"-"<<counter
        <<"-"<<Credit<<endl;
    }
};

class CTransfer:public CNormal
{
    int Tcounter;
public:
    void initiai(int i,string n,int c,int q)
    {
        id = i;
        name = n;
        counter = c;
        Tcounter = q;
    }
    int transfer(int m)
    {
        if(m>0 && counter+Tcounter-m>=0)
        {
            counter-=m;
            Tcounter += m;
            return 1;
        }
        else return -1;
    }
    void info()
    {
        cout<<id<<"-"<<name<<"-"<<counter
        <<"-"<<Tcounter<<endl;
    }
};

void show(CNormal &obj)
{
    obj.info();
}


int main()
{
    string n;
    int id,m1,m2;
    cin>>id>>n>>m1;
    CNormal C1;
    C1.initiai(id,n,m1);
    cin>>id>>n>>m1>>m2;
    CTransfer C2;
    C2.initiai(id,n,m1,m2);
    cin>>id>>n>>m1>>m2;
    CVIP C3;
    C3.initiai(id,n,m1,m2);
    int q1,q2,q3,q4;
    cin>>q1>>q2>>q3>>q4;
    C1.save(q1);
    C1.save(q2);
    C1.take(q3);
    C1.take(q4);
    cin>>q1>>q2>>q3>>q4;
    C2.save(q1);
    C2.take(q2);
    C2.transfer(q3);
    C2.transfer(q4);
    cin>>q1>>q2>>q3>>q4;
    C3.save(q1);
    C3.take(q2);
    C3.over(q3);
    C3.over(q4);
    show(C1);
    show(C2);
    show(C3);
}

------------------------------------------------------
2017081130:Problem1232:正确
#include <iostream>
using namespace std;
class Vehicle
{
protected:

    string no;//±ào?

public:
    Vehicle(){};
    Vehicle(string n):no(n){};
    virtual void display()=0;//ó|ê?・?ó?

};
class Car:virtual public Vehicle
{
protected:
    int people;
    int weight;
public:
    Car(){};
    Car(string n,int p,int w):Vehicle(n),people(p),weight(w){};
    int addp()
    {
        int price=people*8+weight*2;
        return price;
    }
    void display()
    {
        cout<<no<<" "<<addp()<<endl;
    }

};
class Truck:virtual public Vehicle
{
protected:
    int weight1;
public:
    Truck(){};
    Truck(string n,int w):Vehicle(n),weight1(w){};
    int addp1()
    {
        int price=weight1*5;
        return price;
    }
    void display()
    {
        cout<<no<<" "<<addp1()<<endl;
    }
};
class Bus:virtual public Vehicle
{
protected:
    int people1;
public:
    Bus(){};
    Bus(string n,int p):Vehicle(n),people1(p){};
    int addp2()
    {
        int price=people1*3;
        return price;
    }
    void display()
    {
        cout<<no<<" "<<addp2()<<endl;
    }
};
int main()
{
    int t,people,weight,type;
    string no;
    cin>>t;
    Vehicle *pv;
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>no>>people>>weight;
            Car c(no,people,weight);
            pv=&c;
            pv->display();
        }
        else if(type==2)
        {
            cin>>no>>weight;
            Truck truck(no,weight);
            pv=&truck;
            pv->display();
        }
        else if(type==3)
        {
            cin>>no>>people;
            Bus bus(no,people);
            pv=&bus;
            pv->display();
        }
    }
}

------------------------------------------------------
2017081130:Problem1120:正确
#include <iostream>
#include<cstring>
using namespace std;
class Animal
{
protected:
    string name;
    int age;
public:
    Animal(){};
    Animal(string n,int a):name(n),age(a){};
    virtual void speak(){};
};
class Tiger:virtual public Animal
{
public:
    Tiger(){};
    Tiger(string n,int a):Animal(n,a){};
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};
class Pig:virtual public Animal
{
public:
    Pig(){};
    Pig(string n,int a):Animal(n,a){};
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};
class Dog:virtual public Animal
{
public:
    Dog(){};
    Dog(string n,int a):Animal(n,a){};
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};
class Duck:virtual public Animal
{
public:
    Duck(){};
    Duck(string n,int a):Animal(n,a){};
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};
int main()
{
    int t,age;
    char annimal[20];
    string name;
    cin>>t;
    Animal *p_animal;
    while(t--)
    {
        cin>>annimal>>name>>age;
        if(strcmp(annimal,"Tiger")==0)
        {
            Tiger tiger(name,age);
            p_animal=&tiger;
            p_animal->speak();
        }
        else if(strcmp(annimal,"Pig")==0)
        {
            Pig pig(name,age);
            p_animal=&pig;
            p_animal->speak();
        }
        else if(strcmp(annimal,"Dog")==0)
        {
            Dog dog(name,age);
            p_animal=&dog;
            p_animal->speak();
        }
        else if(strcmp(annimal,"Duck")==0)
        {
            Duck duck(name,age);
            p_animal=&duck;
            p_animal->speak();
        }
        else
        {
            cout<<"There is no "<<annimal<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2017081130:Problem1129:正确
#include <iostream>
using namespace std;
class Account
{
protected:
    string ID;
    char CName;
    int Counter;
public:
    friend void show(Account &obj);
    Account(){};
    Account(string id,char n,int c):ID(id),CName(n),Counter(c){};
    int save(int n)
    {
        if(n>0)
        {
            Counter+=n;
            return 1;
        }
        else
            return 0;

    }
    int take(int n)
    {
        if(n>0&&n<Counter)
        {
            Counter-=n;
            return 1;
        }
        else
            return 0;
    }
    virtual void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<endl;
    }
};
class Traffic:virtual public Account
{
    int Tcounter;
public:
    Traffic(){};
    Traffic(string id,char n,int c,int t):Account(id,n,c),Tcounter(t){};
    int transfer(int n)
    {
        if(n<Counter)
        {
            Counter-=n;
            Tcounter+=n;
            return 1;
        }
        else
            return 0;
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Tcounter<<endl;
    }
};
class VIP:virtual public Account
{
    int Credit;
public:
    VIP(){};
    VIP(string id,char n,int c,int l):Account(id,n,c),Credit(l){};
    int over(int n)
    {
        if(n<=Counter)
        {
            Counter-=n;
            return 1;
        }
        else if(n>(Counter+Credit))
            return 0;
        else
        {
            Credit=Credit-(n-Counter);
            Counter=0;
            return 1;
        }
    }
    void info()
    {
        cout<<ID<<"-"<<CName<<"-"<<Counter<<"-"<<Credit<<endl;
    }
};
void show(Account &obj)
{
    obj.info();
}
int main()
{
    Account *ac;
    string id1,id2,id3;
    char name1,name2,name3;
    int counter1,counter2,counter3,num1,num2,num3,num4,tcounter,credit;
    cin>>id1>>name1>>counter1;
    cin>>id2>>name2>>counter2>>tcounter;
    cin>>id3>>name3>>counter3>>credit;
    Account a(id1,name1,counter1);
    Traffic t(id2,name2,counter2,tcounter);
    VIP vip(id3,name3,counter3,credit);
    cin>>num1>>num2>>num3>>num4;
    a.save(num1);
    a.take(num2);
    a.take(num3);
    a.take(num4);
    cin>>num1>>num2>>num3>>num4;
    t.save(num1);
    t.take(num2);
    t.transfer(num3);
    t.transfer(num4);
    cin>>num1>>num2>>num3>>num4;
    vip.save(num1);
    vip.take(num2);
    vip.over(num3);
    vip.over(num4);
    show(a);
    show(t);
    show(vip);
    return 0;
}

------------------------------------------------------
2017081130:Problem1119:答案错误
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    float balance;
public:
    BaseAccount(){};
    BaseAccount(string n,string a,float b):name(n),account(a),balance(b){};
    void deposit(float num)
    {
        balance+=num;
    }
    virtual void withdraw(float num)
    {
        if(num>balance)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance-=num;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    float limit;
    float limit_sum;
public:
    BasePlus(){};
    BasePlus(string n,string a,float b,float l,float lsum):BaseAccount(n,a,b),limit(l),limit_sum(lsum){};
    void withdraw(float num)
    {
        if(num>balance+(limit-limit_sum))
        {
            cout<<"insufficient"<<endl;
        }
        else if(num<balance)
        {
            balance-=num;
        }
        else
        {
            limit_sum+=(num-balance);
            balance=0;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int t,i;
    float balance,dnum,wnum,dnum1,wnum1;
    string name,account;
    BaseAccount *a;
    cin>>t;
    for(i=1;i<=t;i++)
    {
        cin>>name>>account>>balance;
        cin>>dnum>>wnum>>dnum1>>wnum1;
        BaseAccount ba(name,account,balance);
        BasePlus bp(name,account,balance,5000,0);
        if(i%2!=0)
        {
            a=&ba;
            a->deposit(dnum);
            a->withdraw(wnum);
            a->deposit(dnum1);
            a->withdraw(wnum1);
            a->display();
        }
        else
        {
            a=&bp;
            a->deposit(dnum);
            a->withdraw(wnum);
            a->deposit(dnum1);
            a->withdraw(wnum1);
            a->display();
        }
    }
}

------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int len,len1,i;
        char s[10],s1[10],s2[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
            len=len1;
        for(i=0;i<len;i++)
        {
            if(s[i]>s1[i])
                s2[i]=((s[i]-'0')-(s1[i]-'0'))+'0';
            else
                s2[i]=((s[i]-'0')+10-(s1[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2018151027:Problem1234:正确
#include <iostream>
#include<iomanip>
#include<cstring>
using namespace std;
class Group
{
protected:

public:
    virtual int add(int x, int y)=0;
    virtual int sub(int x, int y)=0;
    virtual ~Group(){}
};
class GroupA: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        return x-y;
    }
    ~GroupA(){}
};
class GroupB: public Group
{
protected:

public:
    int add(int x, int y)
    {
        return x+y;
    }
    int sub(int x, int y)
    {
        int xv,yv,ha,result=0;
        int ten=1;
        while(x||y)
        {
            xv=x%10;
            yv=y%10;
            x=x/10;
            y=y/10;
            if(xv>=yv)
                ha=xv-yv;
            else
                ha=xv+10-yv;
            result+=ha*ten;
            ten=ten*10;
        }
        return result;
    }
    ~GroupB(){}
};
class GroupC: public Group
{
protected:

public:
    int add(int x, int y)
    {
        int xv,yv,ha,result=0;
        int ten=1;
        while(x||y)
        {
            xv=x%10;
            yv=y%10;
            x=x/10;
            y=y/10;
            ha=(xv+yv)%10;
            result+=ha*ten;
            ten=ten*10;
        }
        return result;
    }
    int sub(int x, int y)
    {
        int xv,yv,ha,result=0;
        int ten=1;
        while(x||y)
        {
            xv=x%10;
            yv=y%10;
            x=x/10;
            y=y/10;
            if(xv>=yv)
                ha=xv-yv;
            else
                ha=xv+10-yv;
            result+=ha*ten;
            ten=ten*10;
        }
        return result;
    }
    ~GroupC(){}
};
 void Del(Group *temp)
{
    delete temp;
}

main()
{
    int t,a,b,type,i,j,n,ope,k;
    char op[20];
    cin>>t;
    Group *p;
    while(t--)
    {
        a=0;
        b=0;
        cin>>type;
        if(type==1)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupA;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else if(type==2)
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupB;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        else
        {
            cin>>op;
            for(i=0;i<strlen(op);i++)
            {
                if(op[i]<'0'||op[i]>'9')
                {
                    ope=i;
                }
            }
            for(i=0;i<ope;i++)
            {
                k=op[i]-'0';
                for(j=i;j<ope-1;j++)
                    k=k*10;
                a=a+k;
            }
            for(i=ope+1;i<strlen(op);i++)
            {
                k=op[i]-'0';
                for(j=i;j<strlen(op)-1;j++)
                    k=k*10;
                b=b+k;
            }
            p=new GroupC;
            if(op[ope]=='+')
                cout<<p->add(a,b)<<endl;
            else
                cout<<p->sub(a,b)<<endl;
        }
        Del(p);
    }


}

------------------------------------------------------
2018151027:Problem1235:正确
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
protected:

public:
    virtual double getArea()=0;
    virtual ~Geometry(){}
};
class Rect: public Geometry
{
protected:
    int x;
    int y;
public:
    Rect(int xv,int yv):x(xv),y(yv){}
    double getArea()
    {
        return x*y;
    }
    ~Rect(){}
};
class Circle: public Geometry
{
protected:
    int r;
public:
    Circle(int rv):r(rv){}
    double getArea()
    {
        return 3.14*r*r;
    }
    ~Circle(){}
};
class TotalArea
{
public:
   static void computerTotalArea(Geometry *t[],int n)
   {
        double area=0;
        for(int i=0;i<n;i++)
        {
            if(t[i]->getArea()>area)
                area=t[i]->getArea();
        }
        cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<area;
   }
};
void Del(Geometry *temp)
{
    delete temp;
}

main()
{
    int t,type,x,y,r,n,i=0;
    cin>>t;
    n=t;
    Geometry *p[t];
    while(t--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            p[i]=new Rect(x,y);
            i++;
        }
        else
        {
            cin>>r;
            p[i]=new Circle(r);
            i++;
        }
    }
    TotalArea tt;
    tt.computerTotalArea(p,n);
    Del(*p) ;
}

------------------------------------------------------
2018151005:Problem1234:正确
#include <iostream>
#include <cmath>
#include <stdlib.h>
using namespace std;
class Group
{
public:
	virtual int add(int x, int y) = 0;//输出加法的运算结果
	virtual int sub(int x, int y) = 0;//输出减法的运算结果
};
class GroupA:public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		return x - y;
	}
};
class GroupB :public Group
{
public:
	int add(int x, int y)
	{
		return x + y;
	}
	int sub(int x, int y)
	{
		int sum = 0;
		int i = 0;
		while (!(x == 0 && y == 0))
		{
			int a = x % 10;
			int b = y % 10;
			int c = a - b;
			if (c < 0)
				c += 10;
			sum += (int)pow(10, i)*c;
			x /= 10;
			y /= 10;
			i++;
		}
		return sum;
	}
};
class GroupC: public Group
{
public:
	int add(int x, int y)
	{
		int sum = 0;
		int i = 0;
		while (!(x == 0 && y == 0))
		{
			int a = x % 10;
			int b = y % 10;
			int c = a + b;
			if (c >= 10)
				c -= 10;
			sum += (int)pow(10, i)*c;
			x /= 10;
			y /= 10;
			i++;
		}
		return sum;
	}
	int sub(int x, int y)
	{
		int sum = 0;
		int i = 0;
		while (!(x == 0 && y == 0))
		{
			int a = x % 10;
			int b = y % 10;
			int c = a - b;
			if (c < 0)
				c += 10;
			sum += (int)pow(10, i)*c;
			x /= 10;
			y /= 10;
			i++;
		}
		return sum;
	}
};
void change(char* str, int &num1, int &num2, char &sign)
{
	char str1[5], str2[5];
	int i = 1;
	while (str[i-1] >= '0'&&str[i-1] <= '9')
	{
		str1[i-1] = str[i-1];
		i++;
	}
	str1[i - 1] = '\0';
	sign = str[i-1];
	int j = i;
	i++;
	while (str[i - 1] >= '0'&&str[i - 1] <= '9')
	{
		str2[i - j - 1] = str[i - 1];
		i++;
	}
	str2[i - j - 1] = '\0';
	num1 = atoi(str1);
	num2 = atoi(str2);
}
int main()
{
	int t;
	cin >> t;
	Group* p;
	while (t--)
	{
		int type;
		char str[16];
		int x, y;
		char sign;
		cin >> type >> str;
		change(str, x, y, sign);
		int sum;
		switch (type)
		{
		case 1:
			{
				GroupA a;
				p = &a;
				if (sign == '+')
					sum = p->add(x, y);
				else if (sign == '-')
					sum = p->sub(x, y);
				break;
			}
		case 2:
			{
				GroupB a;
				p = &a;
				if (sign == '+')
					sum = p->add(x, y);
				else if (sign == '-')
					sum = p->sub(x, y);
				break;
				break;
			}
		case 3:
			{
				GroupC a;
				p = &a;
				if (sign == '+')
					sum = p->add(x, y);
				else if (sign == '-')
					sum = p->sub(x, y);
				break;
				break;
			}
		}
		cout << sum << endl;
	}
	//system("pause");
	return 0;
}
------------------------------------------------------
2017081130:Problem1119:正确
#include <iostream>
using namespace std;
class BaseAccount
{
protected:
    string name;
    string account;
    float balance;
public:
    BaseAccount(){};
    BaseAccount(string n,string a,float b):name(n),account(a),balance(b){};
    void deposit(float num)
    {
        balance+=num;
    }
    virtual void withdraw(float num)
    {
        if(num>balance)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            balance-=num;
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount
{
    float limit;
    float limit_sum;
public:
    BasePlus(){};
    BasePlus(string n,string a,float b,float l,float lsum):BaseAccount(n,a,b),limit(l),limit_sum(lsum){};
    void withdraw(float num)
    {
        if(num>balance+(limit-limit_sum))
        {
            cout<<"insufficient"<<endl;
        }
        else if(num<balance)
        {
            balance-=num;
        }
        else
        {
            limit_sum+=(num-balance);
            balance=0;
        }
    }
    void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};
int main()
{
    int t,i;
    float balance,dnum,wnum,dnum1,wnum1;
    string name,account;
    BaseAccount *a;
    cin>>t;
    while(t--)
    {
        cin>>name>>account>>balance;
        cin>>dnum>>wnum>>dnum1>>wnum1;
        BaseAccount ba(name,account,balance);
        BasePlus bp(name,account,balance,5000,0);
        if(account[1]=='A')
        {
            a=&ba;
            a->deposit(dnum);
            a->withdraw(wnum);
            a->deposit(dnum1);
            a->withdraw(wnum1);
            a->display();
        }
        else
        {
            a=&bp;
            a->deposit(dnum);
            a->withdraw(wnum);
            a->deposit(dnum1);
            a->withdraw(wnum1);
            a->display();
        }
    }
}

------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2016102048:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				
				p[i]=new Rect(a,b);
			
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			else if(type==2)
			{
	   			cin>>r;
				p[i]=new Circle(r);
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
		delete []p; 
		
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2017151066:Problem1119:答案错误
#include<iostream>
using namespace std;
class BA
{
protected:
    string name,zhanghu;
    int yu_e;
public:
    BA(string n,string z,int y):name(n),zhanghu(z),yu_e(y){}
    //virtual void display()=0;
    virtual void display(int c1,int q1,int c2,int q2)
    {
        int sum=0;
        sum=yu_e+c1;
        if(sum<q1)
        cout<<"insufficient"<<endl;
        else
        {
            sum=yu_e+c1-q1+c2;
            if(sum<q2)
            cout<<"insufficient"<<endl;
            else
            cout<<name<<" "<<zhanghu<<" Balance:"<<sum-q2<<endl;
        }
    }
};
class BP:public BA
{
protected:
    int touzhi;
public:
    BP(string name,string z,int y):BA(name,z,y)
    {
         touzhi=5000;
    }
    virtual void display(int c1,int q1,int c2,int q2)
    {
        int sum=0,sum1=0;
        sum=yu_e+c1-q1+c2-q2;
        sum1=touzhi+sum;
        if(sum1<0)
        {
        	 cout<<"insufficient"<<endl;
		} 
		else{
           if(sum<0)
           {
           	   cout<<name<<" "<<zhanghu<<" Balance:"<<0<<" limit:"<<touzhi+sum<<endl;
		   }
		   else{
		   	cout<<name<<" "<<zhanghu<<" Balance:"<<sum<<" limit:"<<touzhi<<endl;
		   }
		   
        }              
    }
};
int main()
{
    int t;
    cin>>t;
    BA *p;
    string n,z;
    int y,c1,q1,c2,q2;
    while(t--)
    {
        cin>>n>>z>>y;
        if(z[1]=='A')
        {
            cin>>c1>>q1>>c2>>q2;
            p=new BA(n,z,y);
            p->display(c1,q1,c2,q2);
        }
        else{
            cin>>c1>>q1>>c2>>q2;
            p=new BP(n,z,y);
            p->display(c1,q1,c2,q2);
        }
    }
}
------------------------------------------------------
2017151066:Problem1119:答案错误
#include<iostream>
using namespace std;
class BA
{
protected:
    string name,zhanghu;
    int yu_e;
public:
    BA(string n,string z,int y):name(n),zhanghu(z),yu_e(y){}
    //virtual void display()=0;
    virtual void display(int c1,int q1,int c2,int q2)
    {
        int sum=0;
        sum=yu_e+c1;
        if(sum<q1)
        {
          cout<<"insufficient"<<endl;
		  cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<endl;
		}
        else
        {
            sum=yu_e+c1-q1+c2;
            if(sum<q2)
            {
             cout<<"insufficient"<<endl;
             cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<endl;	
			}
            else
            cout<<name<<" "<<zhanghu<<" Balance:"<<sum-q2<<endl;
        }
    }
};
class BP:public BA
{
protected:
    int touzhi;
public:
    BP(string name,string z,int y):BA(name,z,y)
    {
         touzhi=5000;
    }
    virtual void display(int c1,int q1,int c2,int q2)
    {
        int sum=0,sum1=0;
        sum=yu_e+c1-q1+c2-q2;
        sum1=touzhi+sum;
        if(sum1<0)
        {
        	 cout<<"insufficient"<<endl;
        	 cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<" limit:"<<touzhi<<endl;
		} 
		else{
           if(sum<0)
           {
           	   cout<<name<<" "<<zhanghu<<" Balance:"<<0<<" limit:"<<touzhi+sum<<endl;
		   }
		   else{
		   	cout<<name<<" "<<zhanghu<<" Balance:"<<sum<<" limit:"<<touzhi<<endl;
		   }
		   
        }              
    }
};
int main()
{
    int t;
    cin>>t;
    BA *p;
    string n,z;
    int y,c1,q1,c2,q2;
    while(t--)
    {
        cin>>n>>z>>y;
        if(z[1]=='A')
        {
            cin>>c1>>q1>>c2>>q2;
            p=new BA(n,z,y);
            p->display(c1,q1,c2,q2);
        }
        else{
            cin>>c1>>q1>>c2>>q2;
            p=new BP(n,z,y);
            p->display(c1,q1,c2,q2);
        }
    }
}
------------------------------------------------------
2016102048:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				
				p[i]=new Rect(a,b);
			
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				delete p[i];
				
			}
			else if(type==2)
			{
	   			cin>>r;
				p[i]=new Circle(r);
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				delete p[i];
			}
			
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
		delete []p; 
		
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2016102048:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;

class Geometry
{ 

public:

	virtual double getArea()=0; 
	Geometry(){
	}

	
	~Geometry(){
	}
};

class Rect:public Geometry 
{
	float a;
	float b;
public:
	Rect(float av,float bv):a(av),b(bv)
	{
	}
	virtual double getArea()
	{
		return a*b;
	}
	~Rect()
	{
	}
};

class Circle:public Geometry
{
	float r;
public:
	Circle(float rv):r(rv)
	{
	}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
	~Circle(){
	}
};

class TotalArea{

public:
	TotalArea(){
	}
   	static void computerTotalArea(Geometry** p,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
	{
		p=new Geometry*[n];
		float a,b,r;
		int type;
		int i;
		double max=0;
		for(i=0;i<n;i++)
		{
			cin>>type;
			if(type==1)
			{
				cin>>a>>b;
				
				p[i]=new Rect(a,b);
			
				if(max<p[i]->getArea())
					max=p[i]->getArea();
			
				
			}
			else if(type==2)
			{
	   			cin>>r;
				p[i]=new Circle(r);
				if(max<p[i]->getArea())
					max=p[i]->getArea();
				
			}
			
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
		for(i=0;i<n;i++)
		{
			delete p[i];
		}
		delete []p; 
		
	}
};
int main()
{
	int t;
	cin>>t;
	Geometry **p;

	TotalArea a;
	a.computerTotalArea(p,t);
	
	
	return 0;
}
------------------------------------------------------
2018152087:Problem1235:正确
#include<iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
	Geometry()
	{
		
	}
	virtual double getArea()=0;
	virtual ~Geometry()
	{
		
	}
};
class Rect:public Geometry
{
	double len;
	double wid;
public:
	Rect(double l,double w)
	{
		len=l;
		wid=w;
	}
	double getArea()
	{
		return len*wid;
	}
	virtual ~Rect()
	{
		
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double rr)
	{
		r=rr;
	}
	double getArea()
	{
		return r*r*3.14;
	}
	virtual ~Circle()
	{
		
	}
};
class TotalArea
{
	static double max;
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		for(int i=0;i<n;i++)
		{
			double s=t[i]->getArea();
			if(max<s)
				max=s;
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};
double TotalArea::max=0;
int main()
{
	int t;
	cin>>t;
	Geometry *p[500];
	for(int i=0;i<t;i++)
	{
		int flag;
		cin>>flag;
		if(flag==1)
		{
			int l,w;
			cin>>l>>w;
			//Rect ex(l,w);
			p[i]=new Rect(l,w);
		}
		else
		{
			int r;
			cin>>r;
			//Circle ex(r);
			p[i]=new Circle(r);
		}
	}
	TotalArea temp;
	temp.computerTotalArea(&(*p),t);
	for(int i=0;i<t;i++)
		delete p[i];
}
------------------------------------------------------
2018152087:Problem1235:正确
#include<iostream>
#include <iomanip>
using namespace std;
class Geometry
{
public:
	Geometry()
	{
		
	}
	virtual double getArea()=0;
	virtual ~Geometry()
	{
		
	} 
};
class Rect:public Geometry
{
	double len;
	double wid;
public:
	Rect(double l,double w)
	{
		len=l;
		wid=w;
	}
	double getArea()
	{
		return len*wid;
	}
	~Rect()
	{
		
	}
};
class Circle:public Geometry
{
	double r;
public:
	Circle(double rr)
	{
		r=rr;
	}
	double getArea()
	{
		return r*r*3.14;
	}
	~Circle()
	{
		
	}
};
class TotalArea
{
	static double max;
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		for(int i=0;i<n;i++)
		{
			double s=t[i]->getArea();
			if(max<s)
				max=s;
		}
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};
double TotalArea::max=0;
int main()
{
	int t;
	cin>>t;
	Geometry **p=new Geometry *[t];
	for(int i=0;i<t;i++)
	{
		int flag;
		cin>>flag;
		if(flag==1)
		{
			int l,w;
			cin>>l>>w;
			p[i]=new Rect(l,w);
		}
		else
		{
			int r;
			cin>>r;
			p[i]=new Circle(r);
		}
	}
	TotalArea temp;
	temp.computerTotalArea(p,t);
	for(int i=0;i<t;i++)
		delete p[i];
	delete []p;
}
------------------------------------------------------
2018152087:Problem1119:正确
#include<iostream>
#include<string.h>
using namespace std;
class BaseAccount
{
protected:
	char name[100];
	char account[100];
	int balance;
public:
	BaseAccount()
	{
		
	 } 
	BaseAccount(char n[],char a[],int b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;
	}
	virtual void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(balance<num)
			cout<<"insufficient"<<endl;
		else
			balance-=num;
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
	}
	virtual ~BaseAccount()
	{
		
	}
};
class BasePlus:public BaseAccount
{
	int limit;
	int limit_sum;
public:
	BasePlus(char n[],char a[],int b)
	{
		strcpy(name,n);
		strcpy(account,a);
		balance=b;
		limit=5000;
		limit_sum=0;
	}
	virtual void deposit(int num)
	{
		balance+=num;
	}
	virtual void withdraw(int num)
	{
		if(balance+limit<num)
			cout<<"insufficient"<<endl;
		else 
		{
			if(balance>=num)
				balance-=num;
			else 
			{
				limit=limit+balance-num;
				balance=0;
				limit_sum=5000-limit;
			}
		}
	
	}
	virtual void display()
	{
		cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit<<endl;
	}
	virtual ~BasePlus()
	{
		
	}
};
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		char name[100];
		char account[100];
		cin>>name>>account;
		int balance;
		cin>>balance;
		BaseAccount *p;
		if(account[1]=='A')
		{
			//BaseAccount ex(name,account,balance);
			p=new BaseAccount(name,account,balance);
		}
		else
		{
			//BasePlus ex(name,account,balance);
			p=new BasePlus(name,account,balance); 
		}
		int num1;
		cin>>num1;
		p->deposit(num1);
		int num2;
		cin>>num2;
		p->withdraw(num2);
		int num3;
		cin>>num3;
		p->deposit(num3);
		int num4;
		cin>>num4;
		p->withdraw(num4);
		p->display();
		delete p;
	}
}
------------------------------------------------------
2017151066:Problem1119:答案错误
#include<iostream>
using namespace std;
class BA
{
protected:
    string name,zhanghu;
    int yu_e;
public:
    BA(string n,string z,int y):name(n),zhanghu(z),yu_e(y){}
    //virtual void display()=0;
    virtual void display(int c1,int q1,int c2,int q2)
    {
        int sum=0;
        sum=yu_e+c1;
        if(sum<q1)
        {
          cout<<"insufficient"<<endl;
		  cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<endl;
		}
        else
        {
            sum=yu_e+c1-q1+c2;
            if(sum<q2)
            {
             cout<<"insufficient"<<endl;
             cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<endl;	
			}
            else
            cout<<name<<" "<<zhanghu<<" Balance:"<<sum-q2<<endl;
        }
    }
};
class BP:public BA
{
protected:
    int touzhi;
public:
    BP(string name,string z,int y):BA(name,z,y)
    {
         touzhi=5000;
    }
    virtual void display(int c1,int q1,int c2,int q2)
    {
        int sum=0,sum1=0;
        sum=yu_e+c1-q1+c2-q2;
        sum1=touzhi+sum;
        if(sum1<0)
        {
        	 cout<<"insufficient"<<endl;
        	 cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<" limit:"<<touzhi<<endl;
		} 
		else{
           if(sum<=0)
           {
           	   cout<<name<<" "<<zhanghu<<" Balance:"<<0<<" limit:"<<touzhi+sum<<endl;
		   }
		   else{
		   	cout<<name<<" "<<zhanghu<<" Balance:"<<sum<<" limit:"<<touzhi<<endl;
		   }
		   
        }              
    }
};
int main()
{
    int t;
    cin>>t;
    BA *p;
    string n,z;
    int y,c1,q1,c2,q2;
    while(t--)
    {
        cin>>n>>z>>y;
        if(z[1]=='A')
        {
            cin>>c1>>q1>>c2>>q2;
            p=new BA(n,z,y);
            p->display(c1,q1,c2,q2);
        }
        else{
            cin>>c1>>q1>>c2>>q2;
            p=new BP(n,z,y);
            p->display(c1,q1,c2,q2);
        }
    }
}
------------------------------------------------------
2016150076:Problem1235:答案错误
#include<iostream>
using namespace std; 

class Geometry{
 
public:
 	double area;
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
 
};

class Rect:public Geometry
{
	private:
		int length,wide;
	public:
		Rect(int l,int w):length(l),wide(w){}
		double getArea()
		{
			area=length*wide;
		}
};

class Circle:public Geometry
{
	private:
		int r;
	public:
		Circle(int r1):r(r1){}
		double getArea()
		{
			area=r*r*3.14;
		}
};
 

 
class TotalArea{
 
public:
 
   static void computerTotalArea(Geometry** t,int n);//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
 
};
 
void TotalArea::computerTotalArea(Geometry** t,int n)
{
	double max=0;
	for(int i=0;i<n;i++)
	{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
	}
	cout<<"最大面积="<<max<<endl;
		
}
int main()
{
    int n;
    cin>>n;
    int type;
	int a,b,r; 
     
    Geometry **t=new Geometry *[n];
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
         
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
        
	}
	
	TotalArea::computerTotalArea(t, n);
         
}

------------------------------------------------------
2016150076:Problem1235:答案错误
#include<iostream>
using namespace std; 

class Geometry{
 
public:
 	double area;
    virtual double getArea()=0; 
 
};

class Rect:public Geometry
{
	private:
		int length,wide;
	public:
		Rect(int l,int w):length(l),wide(w){}
		double getArea()
		{
			area=length*wide;
		}
};

class Circle:public Geometry
{
	private:
		int r;
	public:
		Circle(int r1):r(r1){}
		double getArea()
		{
			area=r*r*3.14;
		}
};
 

 
class TotalArea{
 
public:
	static double max;
   static void computerTotalArea(Geometry** t,int n);
 
};
 double TotalArea::max=0;
 
void TotalArea::computerTotalArea(Geometry** t,int n)
{
	
	for(int i=0;i<n;i++)
	{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
	}
	cout<<"最大面积="<<max<<endl;
		
}

int main()
{
    int n;
    cin>>n;
    int type;
	int a,b,r; 
     
    Geometry **t=new Geometry *[n];
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
         
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
        
	}
	
	TotalArea::computerTotalArea(t,n);
	return 0;
         
}

------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2016150076:Problem1235:答案错误
#include<iostream>
using namespace std; 

class Geometry{
 
public:
 	double area;
    virtual double getArea()=0; 
 
};

class Rect:public Geometry
{
	private:
		int length,wide;
	public:
		Rect(int l,int w):length(l),wide(w){}
		double getArea()
		{
			area=length*wide;
		}
};

class Circle:public Geometry
{
	private:
		int r;
	public:
		Circle(int r1):r(r1){}
		double getArea()
		{
			area=r*r*3.14;
		}
};
 

 
class TotalArea{
 
public:
	static double max;
   static void computerTotalArea(Geometry** t,int n);
 
};
 double TotalArea::max=0;
 
void TotalArea::computerTotalArea(Geometry** t,int n)
{
	
	for(int i=0;i<n;i++)
	{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
	}
	cout<<"最大面积="<<max<<endl;
		
}

int main()
{
    int n;
    cin>>n;
    int type;
	int a,b,r; 
     
    Geometry **t=new Geometry *[n];
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
         
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
        
	}
	
	TotalArea::computerTotalArea(t,n);
	return 0;
         
}

------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)
    {
        return 1;
    }
    virtual int sub(int x, int y)
    {
        return 1;
    }

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2017081130:Problem1234:答案错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)
    {
        return 1;
    }
    virtual int sub(int x, int y)
    {
        return 1;
    }

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            s2[i]=((s4[i]-'0')+(s3[i]-'0'))%10+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
                s2[i]=((s4[i]-'0')-(s3[i]-'0'))+'0';
            else
                s2[i]=((s4[i]-'0')+10-(s3[i]-'0'))+'0';
        }
        s2[i]='\0';
        int sum=0;
        for(i=0;s2[i]!='\0';i++)
        {
            sum=sum*10+(s2[i]-'0');
        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2017081130:Problem1234:编译错误
#include <iostream>
#include<cstring>
#include<cstdio>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)
    {
        return 1;
    }
    virtual int sub(int x, int y)
    {
        return 1;
    }

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i,len,len1,l,j;
        char s[10],s1[10],s2[10],s3[10],s4[10];
        sprintf(s,"%d",x);
        sprintf(s1,"%d",y);
        len=strlen(s);
        len1=strlen(s1);
        if(len<len1)
        {
            l=len1;
            for(i=l-1,j=len-1;j>0;i--,j--)
            {
                s3[i]=s[j];
            }
            for(i=0;i<=(l-len);i++)
                s[i]='0';
            strcpy(s4,s1);
        }
        else
        {
            l=len;
            for(i=l-1,j=len1-1;j>=0;i--,j--)
            {
                s3[i]=s1[j];
            }
            for(i=0;i<=(l-len1)-1;i++)
                s3[i]='0';
            s3[l]='\0';
            strcpy(s4,s);
        }
        for(i=0;i<l;i++)
        {
            if(s4[i]>s3[i])
             
------------------------------------------------------
2016150076:Problem1235:答案错误
#include<iostream>
using namespace std;
#include<iomanip>

class Geometry{
 
public:
 	double area;
    virtual double getArea()=0; 
 
};

class Rect:public Geometry
{
	private:
		int length,wide;
	public:
		Rect(int l,int w):length(l),wide(w){}
		double getArea()
		{
			area=length*wide;
		}
};

class Circle:public Geometry
{
	private:
		int r;
	public:
		Circle(int r1):r(r1){}
		double getArea()
		{
			area=r*r*3.14;
		}
};
 

 
class TotalArea{
 
public:
	static double max;
   static void computerTotalArea(Geometry** t,int n);
 
};
 double TotalArea::max=0;
 
void TotalArea::computerTotalArea(Geometry** t,int n)
{
	
	for(int i=0;i<n;i++)
	{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
	}
	cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
		
}

int main()
{
    int n;
    cin>>n;
    int type;
	int a,b,r; 
     
    Geometry **t=new Geometry *[n];
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
         
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
        
	}
	
	TotalArea::computerTotalArea(t,n);
	return 0;
         
}

------------------------------------------------------
2017151066:Problem1119:正确
#include<iostream>
using namespace std;
class BA
{
protected:
    string name,zhanghu;
    int yu_e;
public:
    BA(string n,string z,int y):name(n),zhanghu(z),yu_e(y){}
    //virtual void display()=0;
     virtual void cun(int n)
     {
     	yu_e=yu_e+n;
	 }
	 virtual void qu(int n)
	 {
	 	if(n>yu_e)
	 	cout<<"insufficient"<<endl;
	 	else{
	 		yu_e=yu_e-n;
		 }
	 }
	 virtual void display()
	 {
	 	cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<endl;
	 }
};
class BP:public BA
{
protected:
    int touzhi;
    int touzhi_t;
public:
    BP(string name,string z,int y):BA(name,z,y)
    {
         touzhi=5000;
         touzhi_t=0;
    }
    virtual void cun(int n)
    {
    	yu_e=yu_e+n;
	}
	virtual void qu(int n)
	{
		if(n>yu_e+touzhi)
		{
			cout<<"insufficient"<<endl;
		}
		else
		{
			yu_e=yu_e-n;
			if(yu_e<0)
			{
				touzhi_t=touzhi_t-yu_e;
				yu_e=0;
			}
		}
	}
	virtual void display()
    {
        cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<" limit:"<<touzhi-touzhi_t<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    BA *p;
    string n,z;
    int y,c1,q1,c2,q2;
    while(t--)
    {
        cin>>n>>z>>y;
        if(z[1]=='A')
        { 
		    p=new BA(n,z,y);
            cin>>c1>>q1>>c2>>q2;
            p->cun(c1);
            p->qu(q1);
            p->cun(c2);
            p->qu(q2);
            p->display();
        }
        else{
            p=new BP(n,z,y);
			cin>>c1>>q1>>c2>>q2;
            p->cun(c1);
            p->qu(q1);
            p->cun(c2);
            p->qu(q2);
            p->display();
        }
    }
    return 0;
}
------------------------------------------------------
2016150076:Problem1235:正确
#include<iostream>
using namespace std;
#include<iomanip>

class Geometry{
 
public:
 	double area;
 	Geometry(){
	 }
    virtual double getArea()=0; 
 
};

class Rect:public Geometry
{
	private:
		int length,wide;
	public:
		Rect(int l,int w):length(l),wide(w){}
		double getArea()
		{
			area=length*wide;
			return area;
		}
};

class Circle:public Geometry
{
	private:
		int r;
	public:
		Circle(int r1):r(r1){}
		double getArea()
		{
			area=r*r*3.14;
			return area;
		}
};
 

 
class TotalArea{
 
public:
	static double max;
   static void computerTotalArea(Geometry** t,int n);
 
};
 double TotalArea::max=0;
 
void TotalArea::computerTotalArea(Geometry** t,int n)
{
	
	for(int i=0;i<n;i++)
	{
			if(t[i]->getArea()>max)
				max=t[i]->getArea();
	}
	cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
		
}

int main()
{
    int n;
    cin>>n;
    int type;
	int a,b,r; 
     
    Geometry **t=new Geometry *[n];
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>a>>b;
            t[i]=new Rect(a,b);
        }
         
        else
        {
            cin>>r;
            t[i]=new Circle(r);
        }
        
	}
	
	TotalArea::computerTotalArea(t,n);
	return 0;
         
}
------------------------------------------------------
2017081130:Problem1235:运行错误
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
    double res;
public:
    TotalArea():res(0){};
    void computerTotalArea(Geometry**t,int n)
    {
        res=0;
        int i;
        for(i=0;i<n;i++)
        {
            if(res<t[i]->getArea())
            {
                res=t[i]->getArea();
            }

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};
int main()
{
    int n,i,j,x,y,r,type;
    cin>>n;
    Geometry **p;
    p=new Geometry *[n+1];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
}

------------------------------------------------------
2017081130:Problem1235:答案错误
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
    double res;
public:
    TotalArea():res(0){};
    void computerTotalArea(Geometry**t,int n)
    {
        res=0;
        int i;
        for(i=0;i<n;i++)
        {
            if(res<t[i]->getArea())
            {
                res=t[i]->getArea();
            }

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};
int main()
{
    int n,i,j,x,y,r,type;
    cin>>n;
    Geometry **p;
    p=new Geometry *[n+1];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    //TotalArea total;
    //total.computerTotalArea(p,n);
}

------------------------------------------------------
2017081130:Problem1235:答案错误
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
    double res;
public:
    TotalArea():res(0){};
    void computerTotalArea(Geometry**t,int n)
    {
        res=0;
        int i;
        for(i=0;i<n;i++)
        {
            if(res<t[i]->getArea())
            {
                res=t[i]->getArea();
            }

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};
int main()
{
    int n,i,j,x,y,r,type;
    cin>>n;
    Geometry **p;
    p=new Geometry *[n+1];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total;
    //total.computerTotalArea(p,n);
}

------------------------------------------------------
2017081130:Problem1235:运行错误
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
    double res;
public:
    TotalArea():res(0){};
    void computerTotalArea(Geometry**t,int n)
    {
        res=0;
        int i;
        for(i=0;i<n;i++)
        {
            if(res<t[i]->getArea())
            {
                res=t[i]->getArea();
            }

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};
int main()
{
    int n,i,j,x,y,r,type;
    cin>>n;
    Geometry **p;
    p=new Geometry *[n+1];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
}

------------------------------------------------------
2017081130:Problem1235:运行错误
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
    double res;
public:
    TotalArea():res(0){};
    void computerTotalArea(Geometry**t,int n)
    {
        res=0;
        int i;
        for(i=0;i<n;i++)
        {
            if(res<(t[i]->getArea()))
            {
                res=t[i]->getArea();
            }

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};
int main()
{
    int n,i,j,x,y,r,type;
    cin>>n;
    Geometry **p;
    p=new Geometry *[n];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
}

------------------------------------------------------
2017081130:Problem1235:运行错误
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
    double res;
public:
    TotalArea():res(0){};
    void computerTotalArea(Geometry**t,int n)
    {
        res=0;
        int i;
        for(i=0;i<n;i++)
        {
            if(res<(t[i]->getArea()))
            {
                res=t[i]->getArea();
            }

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};
int main()
{
    int n,i,j,x,y,r,type;
    cin>>n;
    Geometry **p;
    p=new Geometry *[n];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            Rect rect(x,y);
            p[i]=&rect;

        }
        else
        {
            cin>>r;
            Circle c(r);
            p[i]=&c;
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
    delete []p;
}

------------------------------------------------------
2017081130:Problem1234:正确
#include <iostream>
#include<cstring>
#include<cstdio>
#include<cmath>
using namespace std;
class Group
{
public:
    Group(){};
    virtual int add(int x, int y)
    {
        return 1;
    }
    virtual int sub(int x, int y)
    {
        return 1;
    }

};
class GroupA:virtual public Group
{
public:
    GroupA(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        return x-y;
    }

};
class GroupB:virtual public Group
{
public:
    GroupB(){};
    int add(int x,int y)
    {
        return x+y;
    }
    int sub(int x,int y)
    {
        int i,n=0,sum=0,a;
        while(x!=0||y!=0)
        {
            if(x%10>y%10)
                a=x%10-y%10;
            else
                a=x%10+10-y%10;
            x=x/10;
            y=y/10;
            if(n>0)
            {
                for(i=1;i<=n;i++)
                    a*=10;
            }
            sum+=a;
            n++;

        }
        return sum;
    }
};
class GroupC:virtual public Group
{
public:
    GroupC(){};
    int add(int x,int y)
    {
        int a,n,sum=0,i;
        n=0;
        while(x!=0||y!=0)
        {
            a=(x%10+y%10)%10;
            x=x/10;
            y=y/10;
            if(n>0)
            {
                for(i=1;i<=n;i++)
                    a*=10;
            }
            sum+=a;
            n++;
        }
        return sum;

    }
    int sub(int x,int y)
    {
        int i,n=0,sum=0,a;
        while(x!=0||y!=0)
        {
            if(x%10>y%10)
                a=x%10-y%10;
            else
                a=x%10+10-y%10;
            x=x/10;
            y=y/10;
            if(n>0)
            {
                for(i=1;i<=n;i++)
                    a*=10;
            }
            sum+=a;
            n++;

        }
        return sum;
    }
};
int main()
{
    int t,x,y,level;
    char ch;
    cin>>t;
    while(t--)
    {
        Group *g;
        cin>>level;
        cin>>x>>ch>>y;
        if(level==1)
        {
            GroupA ga;
            g=&ga;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==2)
        {
            GroupB gb;
            g=&gb;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
        else if(level==3)
        {
            GroupC gc;
            g=&gc;
            if(ch=='+')
                cout<<g->add(x,y)<<endl;
            else
                cout<<g->sub(x,y)<<endl;
        }
    }
}

------------------------------------------------------
2017081130:Problem1235:正确
#include <iostream>
#include<iomanip>
using namespace std;
class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};
class Rect:virtual public Geometry
{
    int x;
    int y;
public:
    Rect(){};
    Rect(int xx,int yy):x(xx),y(yy){};
    double getArea()
    {
        double a;
        a=x*y;
        return a;
    }
};
class Circle:virtual public Geometry
{
    int r;
public:
    Circle(){};
    Circle(int rr):r(rr){};
    double getArea()
    {
        double a;
        a=r*r*3.14;
        return a;
    }
};
class TotalArea
{
    double res;
public:
    TotalArea():res(0){};
    void computerTotalArea(Geometry**t,int n)
    {
        res=0;
        int i;
        for(i=0;i<n;i++)
        {
            if(res<(t[i]->getArea()))
            {
                res=t[i]->getArea();
            }

        }
        cout<<"最大面积="<<fixed<<setprecision(2)<<res<<endl;
    }
};
int main()
{
    int n,i,j,x,y,r,type;
    cin>>n;
    Geometry **p;
    p=new Geometry *[n];
    for(i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>x>>y;
            p[i]=new Rect{x,y};

        }
        else
        {
            cin>>r;
            p[i]=new Circle{r};
        }
    }
    TotalArea total;
    total.computerTotalArea(p,n);
    delete []p;
}

------------------------------------------------------
2018152026:Problem1234:正确
#include <bits/stdc++.h>
using namespace std;

class Group
{
public:
    virtual int add(int x, int y)=0;//输出加法的运算结果
    virtual int sub(int x, int y)=0;//输出减法的运算结果
};

class GroupA:public Group
{
public:
    virtual int add(int x,int y)
    {
        cout<<x+y<<endl;
    }
    virtual int sub(int x,int y)
    {
        cout<<x-y<<endl;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x,int y)
    {
        cout<<x+y<<endl;
    }
    virtual int sub(int x,int y)
    {
        int n;
        if(x%10>=y%10)
            n=x%10-y%10;
        else
            n=x%10-y%10+10;
        n+=(x/10-y/10)*10;
        n+=(x/100)*100;
        cout<<n<<endl;
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x,int y)
    {
        int n;
        n=x%10+y%10;
        if(n>=10)
            n-=10;
        x=x/10;
        y=y/10;
        if((x%10+y%10)>=10)
            n+=(x%10+y%10-10)*10;
        else
            n+=(x%10+y%10)*10;
        x=x/10;
        y=y/10;
        n+=x*100+y*100;
        cout<<n<<endl;
    }
    virtual int sub(int x,int y)
    {
        int n;
        if(x%10>=y%10)
            n=x%10-y%10;
        else
            n=x%10-y%10+10;
        x=x/10;
        y=y/10;
        if(x%10>=y%10)
            n+=(x%10-y%10)*10;
        else
            n+=(x%10-y%10+10)*10;
        n+=(x/10)*100-(y/10)*100;
        cout<<n<<endl;
    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Group *p;
        int n;
        int xx,yy;
        char c;
        cin>>n>>xx>>c>>yy;
        if(n==1)
        {
            GroupA a;
            p=&a;
        }
        else if(n==2)
        {
            GroupB b;
            p=&b;
        }
        else if(n==3)
        {
            GroupC c;
            p=&c;
        }
        if(c=='+')
            p->add(xx,yy);
        else if(c=='-')
            p->sub(xx,yy);
    }
    return 0;
}
------------------------------------------------------
2018152026:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;

class Geometry
{
public:
    virtual double getArea()=0; //计算面积，结果保留小数点后两位
};

class Rect:public Geometry
{
protected:
    double x,y;
public:
    Rect(double xx,double yy):x(xx),y(yy){}
    virtual double getArea()
    {
        return x*y;
    }
};

class Circle:public Geometry
{
protected:
    double r;
public:
    Circle(double rr):r(rr){}
    virtual double getArea()
    {
        return 3.14*r*r;
    }
};

class TotalArea
{
public:
   static void computerTotalArea(Geometry** t,int n)
   {
       int i;
       double max=0;
       for(i=0;i<n;i++)
       {
           if(max<t[i]->getArea())
            max=t[i]->getArea();
       }
       cout<<"最大面积="<<setiosflags(ios::fixed)<<setprecision(2)<<max<<endl;
   }//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
};

int main()
{
    int n,i;
    cin>>n;
    Geometry** t=new Geometry*[n];
    for(i=0;i<n;i++)
    {
        int m;
        cin>>m;
        if(m==1)
        {
            int xx,yy;
            cin>>xx>>yy;
            Rect *a;
            a=new Rect(xx,yy);
            t[i]=a;
        }
        else
        {
            int rr;
            cin>>rr;
            Circle *b;
            b=new Circle(rr);
            t[i]=b;
        }
    }
    TotalArea p;
    p.computerTotalArea(t,n);
    return 0;
}
------------------------------------------------------
2018151005:Problem1129:编译错误
#include <iostream>
#include <cmath>
#include <stdlib.h>
using namespace std;
/*某银行卡分为普通卡、交通卡、贵宾卡三种，其中普通卡是最简单的卡，具有属性包括卡号（ID）、户名（CName）、余额（Counter），
方法包括：初始化（initial），存款（save），取款（take）、查询（info）。普通卡的属性和方法说明如下:
1.卡号是一串数字，户名用单个字母表示，余额是一个非负整数
2.存款操作是余额增加一笔款项，款项必须是正整数，不合法数据直接返回-1，执行成功则返回1
 3.取款操作是余额减少一笔款项，款项必须是正整数且不能超过余额，不合法数据直接返回-1，执行成功则返回1
 4.查询操作是输出卡的相关信息，包括卡号、户名、余额，信息之间用单个短划线连接*/
class NCard
{
protected:
	int ID;
	char CName;
	int Counter;
public:
	virtual void initial(int ID0, char CName0, int Counter0)
	{
		ID = ID0;
		CName = CName0;
		Counter = Counter0;
	}
	int save(int money)
	{
		if (money > 0)
		{
			Counter += money;
			return 1;
		}
		else
			return -1;
	}
	int take(int money)
	{
		if (money > 0 && money <= Counter)
		{
			Counter -= money;
			return 1;
		}
		else
			return -1;
	}
	virtual void info()
	{
		cout << ID << "-" << CName << "-" << Counter << endl;;
	}
};
/*交通卡是普通卡的升级版，包含额外属性是交通余额（Tcounter），使得交通卡能够当作深圳通使用，包含额外方法是转帐（transfer），
把银行卡的钱转入交通余额中，注意转帐金额不能超过账户原有余额，不合法数据直接返回-1，执行成功则返回1*/
class TCard:public NCard
{
protected:
	int Tcounter;
public:
	virtual void initial(int ID0, char CName0, int Counter0, int Tcounter0)
	{
		NCard::initial(ID0, CName0, Counter0);
		Tcounter0 = Tcounter;
	}
	int transfor(int money)
	{
		if (money > 0 && money <= Counter)
		{
			Counter -= money;
			Tcounter += money;
			return 1;
		}
		else
			return -1;
	}
	virtual void info()
	{
		cout << ID << "-" << CName << "-" << Counter <<"-"<< Tcounter << endl;
	}
};
/*贵宾卡是普通卡的升级版，包含额外属性是信用额度（Credit），使得贵宾卡能够透支，即取出超过余额的钱，包含的额外方法是透支（over），
当执行透支操作，余额清0，超过余额的部分用信用额度来扣减。注意透支的最大金额不能超过余额+信用额度，不合法数据直接返回-1，执行成功则返回1*/
class VIPCard:public NCard
{
protected:
	int Credit;
public:
	virtual void initial(int ID0, char CName0, int Counter0, int Credit0)
	{
		NCard::initial(ID0, CName0, Counter0);
		Credit = Credit0;
	}
	int over(int money)
	{
		if (money > 0 && money <= Counter)
		{
			Counter -= money;
			return 1;
		}
		else if (money > Counter&&money <= Credit + Counter)
		{
			Counter = 0;
			Credit -= money - Counter;
			return 1;
		}
		else
			return -1;
	}
	virtual void info()
	{
		cout << ID << "-" << CName << "-" << Counter << "-" << Credit << endl;;
	}
};
void show(NCard &obj)
{
	obj.info();
}
/*使用c++语言和类继承方法实现上述银行卡的功能

注意，最终提交代码必须分成类定义、类实现、主函数三个区域，并用注释标明
：




输入


第一行输入一张普通卡的数据，分别包含卡号、户名、余额
 第二行输入一张交通卡的数据，分别包含卡号、户名、余额、交通余额
 第三行输入一张贵宾卡的数据，分别包含卡号、户名、余额、信用额度
 第四行输入四个整数，表示对普通卡按顺序先执行2次存款，2次取款
 第五行输入四个整数，表示对交通卡按顺序执行1次存款，1次取款，2次转帐
 第六行输入四个整数，表示对贵宾卡按顺序执行1次存款，1次取款，2次透支

输出


调用多态函数对三张卡执行查询，显示执行完前面所有操作后的各个卡信息。

普通卡信息格式：卡号-户名-余额

金卡信息格式：卡号-户名-余额-交通余额

贵宾卡信息格式：卡号-户名-余额-透支余额


注意：不能在主函数中直接调用类的info方法，必须使用多态函数来调用。


样例输入

1111 A 100
2222 B 200 0
3333 C 300 3000
49 -51 -100 50
100 150 500 55
300 200 2000 5000


样例输出

1111-A-99
2222-B-95-55
3333-C-0-1400


提示*/
int main()
{
	int ID;
	char CName;
	int Counter;
	int Tcounter;
	int Credit;
	cin >> ID >> CName >> Counter;
	NCard n;
	n.initial(ID, CName, Counter);
	cin >> ID >> CName >> Counter >> Tcounter;
	TCard t;
	t.initial(ID, CName, Counter, Tcounter);
	cin >> ID >> CName >> Counter >> Credit;
	VIPCard v;
	v.initial(ID, CName, Counter, Credit);
	//system("pause");
	int money;
	cin >> money;
	n.save;
	cin >> money;
	n.save;
	cin >> money;
	n.take;
	cin >> money;
	n.take;
	cin >> money;
	t.save;
	cin >> money;
	t.take;
	cin >> money;
	t.transfor;
	cin >> money;
	t.transfor;
	cin >> money;
	v.save;
	cin >> money;
	v.take;
	cin >> money;
	v.over;
	cin >> money;
	v.over;
	show(n);
	show(t);
	show(v);
	return 0;
}
------------------------------------------------------
2018151005:Problem1129:正确
#include <iostream>
#include <cmath>
#include <stdlib.h>
using namespace std;
/*某银行卡分为普通卡、交通卡、贵宾卡三种，其中普通卡是最简单的卡，具有属性包括卡号（ID）、户名（CName）、余额（Counter），
方法包括：初始化（initial），存款（save），取款（take）、查询（info）。普通卡的属性和方法说明如下:
1.卡号是一串数字，户名用单个字母表示，余额是一个非负整数
2.存款操作是余额增加一笔款项，款项必须是正整数，不合法数据直接返回-1，执行成功则返回1
 3.取款操作是余额减少一笔款项，款项必须是正整数且不能超过余额，不合法数据直接返回-1，执行成功则返回1
 4.查询操作是输出卡的相关信息，包括卡号、户名、余额，信息之间用单个短划线连接*/
class NCard
{
protected:
	int ID;
	char CName;
	int Counter;
public:
	virtual void initial(int ID0, char CName0, int Counter0)
	{
		ID = ID0;
		CName = CName0;
		Counter = Counter0;
	}
	int save(int money)
	{
		if (money > 0)
		{
			Counter += money;
			return 1;
		}
		else
			return -1;
	}
	int take(int money)
	{
		if (money > 0 && money <= Counter)
		{
			Counter -= money;
			return 1;
		}
		else
			return -1;
	}
	virtual void info()
	{
		cout << ID << "-" << CName << "-" << Counter << endl;;
	}
};
/*交通卡是普通卡的升级版，包含额外属性是交通余额（Tcounter），使得交通卡能够当作深圳通使用，包含额外方法是转帐（transfer），
把银行卡的钱转入交通余额中，注意转帐金额不能超过账户原有余额，不合法数据直接返回-1，执行成功则返回1*/
class TCard:public NCard
{
protected:
	int Tcounter;
public:
	virtual void initial(int ID0, char CName0, int Counter0, int Tcounter0)
	{
		NCard::initial(ID0, CName0, Counter0);
		Tcounter = Tcounter0;
	}
	int transfor(int money)
	{
		if (money > 0 && money <= Counter)
		{
			Counter -= money;
			Tcounter += money;
			return 1;
		}
		else
			return -1;
	}
	virtual void info()
	{
		cout << ID << "-" << CName << "-" << Counter <<"-"<< Tcounter << endl;
	}
};
/*贵宾卡是普通卡的升级版，包含额外属性是信用额度（Credit），使得贵宾卡能够透支，即取出超过余额的钱，包含的额外方法是透支（over），
当执行透支操作，余额清0，超过余额的部分用信用额度来扣减。注意透支的最大金额不能超过余额+信用额度，不合法数据直接返回-1，执行成功则返回1*/
class VIPCard:public NCard
{
protected:
	int Credit;
public:
	virtual void initial(int ID0, char CName0, int Counter0, int Credit0)
	{
		NCard::initial(ID0, CName0, Counter0);
		Credit = Credit0;
	}
	int over(int money)
	{
		if (money > 0 && money <= Counter)
		{
			Counter -= money;
			return 1;
		}
		else if (money > Counter&&money <= Credit + Counter)
		{
			Credit -= money - Counter;
			Counter = 0;
			return 1;
		}
		else
			return -1;
	}
	virtual void info()
	{
		cout << ID << "-" << CName << "-" << Counter << "-" << Credit << endl;;
	}
};
void show(NCard &obj)
{
	obj.info();
}
/*使用c++语言和类继承方法实现上述银行卡的功能

注意，最终提交代码必须分成类定义、类实现、主函数三个区域，并用注释标明
：




输入


第一行输入一张普通卡的数据，分别包含卡号、户名、余额
 第二行输入一张交通卡的数据，分别包含卡号、户名、余额、交通余额
 第三行输入一张贵宾卡的数据，分别包含卡号、户名、余额、信用额度
 第四行输入四个整数，表示对普通卡按顺序先执行2次存款，2次取款
 第五行输入四个整数，表示对交通卡按顺序执行1次存款，1次取款，2次转帐
 第六行输入四个整数，表示对贵宾卡按顺序执行1次存款，1次取款，2次透支

输出


调用多态函数对三张卡执行查询，显示执行完前面所有操作后的各个卡信息。

普通卡信息格式：卡号-户名-余额

金卡信息格式：卡号-户名-余额-交通余额

贵宾卡信息格式：卡号-户名-余额-透支余额


注意：不能在主函数中直接调用类的info方法，必须使用多态函数来调用。


样例输入

1111 A 100
2222 B 200 0
3333 C 300 3000
49 -51 -100 50
100 150 500 55
300 200 2000 5000


样例输出

1111-A-99
2222-B-95-55
3333-C-0-1400


提示*/
int main()
{
	int ID;
	char CName;
	int Counter;
	int Tcounter;
	int Credit;
	cin >> ID >> CName >> Counter;
	NCard n;
	n.initial(ID, CName, Counter);
	cin >> ID >> CName >> Counter >> Tcounter;
	TCard t;
	t.initial(ID, CName, Counter, Tcounter);
	cin >> ID >> CName >> Counter >> Credit;
	VIPCard v;
	v.initial(ID, CName, Counter, Credit);
	//system("pause");
	int money;
	cin >> money;
	n.save(money);
	cin >> money;
	n.save(money);
	cin >> money;
	n.take(money);
	cin >> money;
	n.take(money);
	cin >> money;
	t.save(money);
	cin >> money;
	t.take(money);
	cin >> money;
	t.transfor(money);
	cin >> money;
	t.transfor(money);
	cin >> money;
	v.save(money);
	cin >> money;
	v.take(money);
	cin >> money;
	v.over(money);
	cin >> money;
	v.over(money);
	show(n);
	show(t);
	show(v);
	return 0;
}
------------------------------------------------------
2017161095:Problem1232:编译错误
#include<bits/stdc++.h>
using namespace std;

class Vehicle

{
protected:

    string no;//编号

public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用

};

class Car : virtual public Vehicle
{
    int people,weight;
public:
    Car(string n,int p,int w):Vehicle(n),people(p),weight(w){}
    virtual void display()
    {
        cout<<no<<" "<<people*8+weight*2<<endl;
    }
};

class Truck : virtual public Vehicle
{
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w){}
    virtual void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
};

class Bus : virtual public Vehicle
{
    int people;
public:
    Bus(string n,int p):Vehicle(n),people(p){}
    virtual void display()
    {
        cout<<no<<" "<<people*3<<endl;
    }
};
int main()
{
    int n,m,t,i,j,k,ans,num,sum,p,w;
    string s;
    Vehicle *pp;
    scanf("%d",&t);
    while(t--)
    {
        cin>>n>>s;
        if(n==1)
        {
            cin>>p>>w;
            Car a(s,p,w);
            pp=&a;
            pp->display();
        }
        else if(n==2)
        {
            cin>>w;
            Truck b(s,w);
            pp=&b;
            pp->display();
        }
        else
        {
            cin>>p;
            Bus c(s,p);
            pp=&c;
            pp->display();
        }
    }
}

------------------------------------------------------
2017161095:Problem1232:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
using namespace std;

class Vehicle

{
protected:

    string no;//编号

public:
    Vehicle(string n):no(n){}
    virtual void display()=0;//应收费用

};

class Car : virtual public Vehicle
{
    int people,weight;
public:
    Car(string n,int p,int w):Vehicle(n),people(p),weight(w){}
    virtual void display()
    {
        cout<<no<<" "<<people*8+weight*2<<endl;
    }
};

class Truck : virtual public Vehicle
{
    int weight;
public:
    Truck(string n,int w):Vehicle(n),weight(w){}
    virtual void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
};

class Bus : virtual public Vehicle
{
    int people;
public:
    Bus(string n,int p):Vehicle(n),people(p){}
    virtual void display()
    {
        cout<<no<<" "<<people*3<<endl;
    }
};
int main()
{
    int n,m,t,i,j,k,ans,num,sum,p,w;
    string s;
    Vehicle *pp;
    cin>>t;
    while(t--)
    {
        cin>>n>>s;
        if(n==1)
        {
            cin>>p>>w;
            Car a(s,p,w);
            pp=&a;
            pp->display();
        }
        else if(n==2)
        {
            cin>>w;
            Truck b(s,w);
            pp=&b;
            pp->display();
        }
        else
        {
            cin>>p;
            Bus c(s,p);
            pp=&c;
            pp->display();
        }
    }
}

------------------------------------------------------
2017161095:Problem1120:答案错误
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()=0;
};

class tiger : virtual public Animal
{
public:
    tiger(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class dog : virtual public Animal
{
public:
    dog(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class duck : virtual public Animal
{
public:
    duck(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

class pig : virtual public Animal
{
public:
    pig(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};



int main()
{
    int n,m,t,i,j,k,ans,num,sum,p,w;
    string s,ss;
    Animal *pp;
    cin>>t;
    while(t--)
    {
        cin>>s>>ss>>m;
        if(s=="Tiger")
        {
            tiger a(ss,m);
            pp=&a;
            pp->speak();
        }
        else if(s=="Dog")
        {
            dog a(ss,m);
            pp=&a;
            pp->speak();
        }
        else if(s=="Duck")
        {
            duck a(ss,m);
            pp=&a;
            pp->speak();
        }
        else if(s=="Pig")
        {
            pig a(ss,m);
            pp=&a;
            pp->speak();
        }
        else
        {
            cout<<"There is no Rabbit in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2017161095:Problem1120:编译错误
4
Tiger Jumpjump 10
Pig Piglet 4
Rabbit labi 3
Duck tanglaoya 8
------------------------------------------------------
2017161095:Problem1120:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
using namespace std;

class Animal
{
protected:
    string name;
    int age;
public:
    Animal(string n,int a):name(n),age(a){}
    virtual void speak()=0;
};

class tiger : virtual public Animal
{
public:
    tiger(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",AOOO."<<endl;
    }
};

class dog : virtual public Animal
{
public:
    dog(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",WangWang."<<endl;
    }
};

class duck : virtual public Animal
{
public:
    duck(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",GAGA."<<endl;
    }
};

class pig : virtual public Animal
{
public:
    pig(string n,int a):Animal(n,a){}
    virtual void speak()
    {
        cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
    }
};



int main()
{
    int n,m,t,i,j,k,ans,num,sum,p,w;
    string s,ss;
    Animal *pp;
    cin>>t;
    while(t--)
    {
        cin>>s>>ss>>m;
        if(s=="Tiger")
        {
            tiger a(ss,m);
            pp=&a;
            pp->speak();
        }
        else if(s=="Dog")
        {
            dog a(ss,m);
            pp=&a;
            pp->speak();
        }
        else if(s=="Duck")
        {
            duck a(ss,m);
            pp=&a;
            pp->speak();
        }
        else if(s=="Pig")
        {
            pig a(ss,m);
            pp=&a;
            pp->speak();
        }
        else
        {
            cout<<"There is no "<<s<<" in our Zoo."<<endl;
        }
    }
}

------------------------------------------------------
2018151078:Problem1232:正确
#include<iostream>
using namespace std;
class Vehicle
{
protected:
    string no;
public:
    Vehicle(string n):no(n){}
    virtual void display()=0;
    virtual ~Vehicle(){}
     
};
class Car:public Vehicle
{
protected:
    int passenger;
    int weight;
public:
    Car(int p,int w,string n):passenger(p),weight(w),Vehicle(n){}
    void display()
    {
        cout<<no<<" "<<passenger*8+weight*2<<endl;
    }
    virtual ~Car(){}
};
class Truck:public Vehicle
{
protected:
    int weight;
public:
    Truck(int p,string n):weight(p),Vehicle(n){}
    void display()
    {
        cout<<no<<" "<<weight*5<<endl;
    }
    virtual ~Truck(){}
};
class Bus:public Vehicle
{
protected:
    int passenger;
public:
    Bus(int p,string n):passenger(p),Vehicle(n){}
    void display()
    {
        cout<<no<<" "<<passenger*3<<endl;
    }
    virtual ~Bus(){}
};
int main()
{
    int t;
    cin>>t;
    string no;  
    int p,w;
    Vehicle *pv;
    while(t--)
    {
        int n;
        cin>>n;
       if(n==1)
        {
            cin>>no>>p>>w;
            pv=new Car(p,w,no);
            pv->display();
            delete pv;      
        }
        else if(n==2)
        {
            cin>>no>>w;
            pv=new Truck(w,no);
            pv->display();
            delete pv;  
        }
        else if(n==3)
        {
            cin>>no>>p;
            pv=new Bus(p,no);
            pv->display();
            delete pv;  
        }
    }
    return 0;
}
------------------------------------------------------
2018152086:Problem1232:正确
#include<iostream>

using namespace std;

class Vehicle{
	protected:
		string no;
	public:
		virtual void display()=0;
};
class Car:public Vehicle{
	public:
	Car(){
	}
	Car(int a,int b,string c){
		num=a;
		weight=b;
		no=c;
	}
	void display(){
		cout<<no<<" "<<num*8+weight*2<<endl;
	}
	protected:
		int num;
		int weight;
};
class Truck:public Vehicle{
	public:
	Truck(){
	}
	Truck(int a,string b){
		weight=a;
		no=b;
	}
	void display(){
		cout<<no<<" "<<weight*5<<endl;
	}
	protected:
		int weight;
};
class Bus:public Vehicle{
	public:
	Bus(){
	}
	Bus(int a,string b){
		num=a;
		no=b;
	}
	void display(){
		cout<<no<<" "<<num*3<<endl;
	}
	protected:
		int num;
};

int main(){
	int t;
	int a,b;
	int type;
	string c;
	Vehicle *P;
	cin>>t;
	while(t--){
		cin>>type;
		switch(type){
			case 1:{
				cin>>c>>a>>b;
				Car A(a,b,c);
				P=&A;
				P->display();
				break;
			}
			case 2:{
				cin>>c>>a;
				Truck B(a,c);
				P=&B;
				P->display();
				break;
			}
			case 3:{
				cin>>c>>a;
				Bus C(a,c);
				P=&C;
				P->display();
				break;
			}
		}
//		cout<<"_____________"<<endl;
	}
	return 0;
} 

------------------------------------------------------
2018152086:Problem1120:正确
#include<iostream>
#include<string.h>

using namespace std;

class Animal{
	protected:
		string name;
		int age;
	public:
		Animal(){
		}
		Animal(string a,int b){
			name=a;
			age=b;
		}
		void virtual speak(){
			cout<<"hello world."<<endl;
		}
};
class Tiger:public Animal{
	public:
		Tiger(string a,int b){
			name=a;
			age=b;
		}
		void speak(){
			cout<<"Hello,I am "<<name<<",AOOO."<<endl;
		}
};
class Dog:public Animal{
	public:
		Dog(string a,int b){
			name=a;
			age=b;
		}
		void speak(){
			cout<<"Hello,I am "<<name<<",WangWang."<<endl;
		}
};
class Duck:public Animal{
	public:
		Duck(string a,int b){
			name=a;
			age=b;
		}
		void speak(){
			cout<<"Hello,I am "<<name<<",GAGA."<<endl;
		}
};
class Pig:public Animal{
	public:
		Pig(string a,int b){
			name=a;
			age=b;
		}
		void speak(){
			cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;
		}
};

int main(){
	int t;
	char type[10];
	string name;
	int age;
	Animal *P;
	cin>>t;
	while(t--){
		cin>>type>>name>>age;
		if(strcmp(type,"Tiger")==0){
			Tiger A(name,age);
			P=&A;
			P->speak();
		}
		else if(strcmp(type,"Dog")==0){
			Dog A(name,age);
			P=&A;
			P->speak();
		}
		else if(strcmp(type,"Duck")==0){
			Duck A(name,age);
			P=&A;
			P->speak();
		}
		else if(strcmp(type,"Pig")==0){
			Pig A(name,age);
			P=&A;
			P->speak();
		}
		else{
			cout<<"There is no "<<type<<" in our Zoo."<<endl;
		}
	}
	return 0;
}
------------------------------------------------------
2018152019:Problem1235:正确
#include <iostream>

#include<iomanip>

using namespace std;

class Geometry
{

public:

    virtual double getArea()=0;

};

class Rect:public Geometry
{
    double length,width;
public:
    Rect(double le,double wi):length(le),width(wi){}
    virtual double getArea()
    {
        return length*width;
    }
};

class Circle:public Geometry
{
    double radius;
public:
    Circle(double r):radius(r){}
    virtual double getArea()
    {
        return 3.14*radius*radius;
    }
};

class TotalArea
{

public:

   static void computerTotalArea(Geometry** t,int n)
   {
       Geometry* temp;
       for(int i=1;i<n;i++)
       {
           for(int j=0;j<n-1;j++)
           {
               if(t[j]->getArea()<t[j+1]->getArea())
               {
                   temp=t[j];
                   t[j]=t[j+1];
                   t[j+1]=temp;
               }
           }
       }
   }

};

int main()
{
    int n;
    cin>>n;
    Geometry** geo=new Geometry* [n];
    int type;
    double le,wi,ra;
    for(int i=0;i<n;i++)
    {
        cin>>type;
        if(type==1)
        {
            cin>>le>>wi;
            Rect rect(le,wi);
            geo[i]=&rect;
        }
        else
        {
            cin>>ra;
            Circle circle(ra);
            geo[i]=&circle;
        }
    }
    TotalArea compare;
    compare.computerTotalArea(geo,n);
    cout<<"最大面积="<<fixed<<setprecision(2)<<geo[0]->getArea()<<endl;
    return 0;
}

------------------------------------------------------
2017161095:Problem1119:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
using namespace std;

class BaseAccount
{
protected:
    string name,account;
    double balance;
public:
    BaseAccount(string n,string a,double b):name(n),account(a),balance(b){}
    void deposit(double x)
    {
        balance+=x;
    }
    virtual void withdraw(double x)
    {
        if(x>balance) cout<<"insufficient"<<endl;
        else balance-=x;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<endl;
    }
};

class BasePlus : public BaseAccount
{
protected:
    double limit,limit_sum;
public:
    BasePlus(string n,string a,double b,double l,double ls):BaseAccount(n,a,b),limit(l),limit_sum(ls){}
    virtual void withdraw(double x)
    {
        if(x>balance)
        {
            if(x-balance+limit_sum>limit)  cout<<"insufficient"<<endl;
            else limit_sum+=x-balance,balance=0;
        }
        else
            balance-=x;
    }
    virtual void display()
    {
        cout<<name<<" "<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }

};

int main()
{
    int n,m,t,i,j,k,ans,num,sum,p,w;
    string s,ss;
    double balance,x,y;
    BaseAccount *pp;
    cin>>t;
    while(t--)
    {
         cin>>s>>ss>>balance;
         if(ss[1]=='A')
         {
             BaseAccount q(s,ss,balance);
             cin>>x>>y;
             pp=&q;
             pp->deposit(x);
             pp->withdraw(y);
             cin>>x>>y;
             pp->deposit(x);
             pp->withdraw(y);
             pp->display();
         }
         else
         {
             BasePlus q(s,ss,balance,5000,0);
             cin>>x>>y;
             pp=&q;
             pp->deposit(x);
             pp->withdraw(y);
             cin>>x>>y;
             pp->deposit(x);
             pp->withdraw(y);
             pp->display();
         }
    }
    return 0;
}

------------------------------------------------------
2018152019:Problem1234:正确
#include <iostream>

#include<iomanip>

using namespace std;

class Group

{

public:

virtual int add(int x, int y)=0;

virtual int sub(int x, int y)=0;

};

class GroupA:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        return x-y;
    }
};

class GroupB:public Group
{
public:
    virtual int add(int x,int y)
    {
        return x+y;
    }
    virtual int sub(int x,int y)
    {
        int ten=0,hundred=0,thousand=0;
        if((x%10)<(y%10))
        {
            ten+=10;
        }
        if((x%100)/10<(y%100)/10)
        {
            hundred+=100;
        }
        if((x%1000)/100<(y%1000)/100)
        {
            thousand+=1000;
        }
        return (x-y+ten+hundred+thousand);
    }
};

class GroupC:public Group
{
public:
    virtual int add(int x,int y)
    {
        int ten=0,hundred=0,thousand=0;
        if((x%10)+(y%10)>10)
        {
            ten-=10;
        }
        if((x%100)/10+(y%100)/10>10)
        {
            hundred-=100;
        }
        if((x%1000)/100+(y%1000)/100>10)
        {
            thousand-=1000;
        }
        return (x+y+ten+hundred+thousand);
    }
    virtual int sub(int x,int y)
    {
        int ten=0,hundred=0,thousand=0;
        if((x%10)<(y%10))
        {
            ten+=10;
        }
        if((x%100)/10<(y%100)/10)
        {
            hundred+=100;
        }
        if((x%1000)/100<(y%1000)/100)
        {
            thousand+=1000;
        }
        return (x-y+ten+hundred+thousand);
    }
};

int main()
{
    int times,type,x,y;
    char op;
    Group *p;
    GroupA a;
    GroupB b;
    GroupC c;
    cin>>times;
    while(times--)
    {
        cin>>type;
        if(type==1)
        {
            p=&a;
            cin>>x>>op>>y;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            p=&b;
            cin>>x>>op>>y;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
        else
        {
            p=&c;
            cin>>x>>op>>y;
            if(op=='+')
                cout<<p->add(x,y)<<endl;
            else
                cout<<p->sub(x,y)<<endl;
        }
    }
    return 0;
}
------------------------------------------------------
2015110226:Problem1232:正确
#include <bits/stdc++.h>
using namespace std;

class Vehicle{
protected:
    string no;
public:
    Vehicle(string a):no(a){}
    virtual void display()=0;
};
class Car:public Vehicle{
public:
    Car(string a,int b,int c):Vehicle(a),num(b),wei(c){}
    void display(){cout<<no<<' '<<8*num+2*wei<<endl;}
private:
    int num;
    int wei;
};
class Truck:public Vehicle{
public:
    Truck(string a,int c):Vehicle(a),wei(c){}
    void display(){cout<<no<<' '<<5*wei<<endl;}
private:
    int num;
    int wei;
};
class Bus:public Vehicle{
public:
    Bus(string a,int b):Vehicle(a),num(b){}
    void display(){cout<<no<<' '<<3*num<<endl;}
private:
    int num;
    int wei;
};
int main(){
    int time;
    cin>>time;
    while(time--){
        int a,c,d;
        string b;
        cin>>a>>b;
        Vehicle *v;
        if(a==1){
            cin>>c>>d;
            v = new Car(b,c,d);
            v->display();
        }
        if(a==2){
            cin>>c;
            v = new Truck(b,c);
            v->display();
        }
        if(a==3){
            cin>>c;
            v = new Bus(b,c);
            v->display();
        }
    }
    return 0;
}


------------------------------------------------------
2015110226:Problem1120:正确
#include <bits/stdc++.h>
using namespace std;

class Animal{
protected:
    string name;
    int age;
public:
    Animal(string a,int b):name(a),age(b){}
    virtual void speak()=0;
};
class Tiger:public Animal{
public:
    Tiger(string a,int b):Animal(a,b){}
    void speak(){cout<<"Hello,I am "<<name<<",AOOO."<<endl;}
private:
};
class Dog:public Animal{
public:
    Dog(string a,int b):Animal(a,b){}
    void speak(){cout<<"Hello,I am "<<name<<",WangWang."<<endl;}
private:
};
class Duck:public Animal{
public:
    Duck(string a,int b):Animal(a,b){}
    void speak(){cout<<"Hello,I am "<<name<<",GAGA."<<endl;}
private:
};
class Pig:public Animal{
public:
    Pig(string a,int b):Animal(a,b){}
    void speak(){cout<<"Hello,I am "<<name<<",HENGHENG."<<endl;}
private:
};
int main(){
    int time;
    cin>>time;
    while(time--){
        string a,b;
        int c;
        cin>>a>>b>>c;
        Animal *p;
        if(a=="Tiger"){
            p = new Tiger(b,c);
            p->speak();
        }
        else if(a=="Dog"){
            p = new Dog(b,c);
            p->speak();
        }
        else if(a=="Duck"){
            p = new Duck(b,c);
            p->speak();
        }
        else if(a=="Pig"){
            p = new Pig(b,c);
            p->speak();
        }else{
            cout<<"There is no "<<a<<" in our Zoo."<<endl;
        }
    }
    return 0;
}


------------------------------------------------------
2015110226:Problem1119:正确
#include <bits/stdc++.h>
using namespace std;

class BaseAccount{
protected:
    string name;
    string account;
    int balance;
public:
    BaseAccount(string a,string b,int c):name(a),account(b),balance(c){}
    virtual void deposit(int v){
        balance += v;
    }
    virtual void withdraw(int v){
        if(v > balance){
            cout<<"insufficient"<<endl;
        }else{
            balance -= v;
        }
    }
    virtual void display(){
        cout<<name<<' '<<account<<" Balance:"<<balance<<endl;
    }
};
class BasePlus:public BaseAccount{
protected:
    int limit;//5000
    int limit_sum;
public:
    BasePlus(string a,string b,int c):BaseAccount(a,b,c){
        limit = 5000;
        limit_sum = 0;
    }
    void deposit(int v){
        if(limit_sum > 0){
            if(limit_sum > v) limit_sum -= v;
            else {
                v -= limit_sum;
                limit_sum = 0;
                balance += v;
            }
        }else{
            balance += v;
        }
    }
    void withdraw(int v){
        if(v > balance - limit_sum + limit){
            cout<<"insufficient"<<endl;
        }else{
            balance -= v;
            if(balance < 0){
                limit_sum += (-balance);
                balance = 0;
            }
        }
    }
    void display(){
        cout<<name<<' '<<account<<" Balance:"<<balance<<" limit:"<<limit-limit_sum<<endl;
    }
};


int main(){
    int time;
    cin>>time;
    while(time--){
        string a,b;
        int c,d;
        cin>>a>>b>>c;
        BaseAccount *p;
        if(b[1]=='A'){
            p = new BaseAccount(a,b,c);
        cin>>d;
        p->deposit(d);
        cin>>d;
        p->withdraw(d);
        cin>>d;
        p->deposit(d);
        cin>>d;
        p->withdraw(d);
        p->display();
        }
        else {
            p = new BasePlus(a,b,c);
        cin>>d;
        p->deposit(d);
        cin>>d;
        p->withdraw(d);
        cin>>d;
        p->deposit(d);
        cin>>d;
        p->withdraw(d);
        p->display();
        }
    }
    return 0;
}


------------------------------------------------------
2016140066:Problem1235:正确
#include <iostream>
#include<string>
#include<iomanip>
using namespace std;
class Geometry
{
public:
	virtual double getArea() = 0;
};
class Rect :public Geometry
{
protected:
	int chang, kuan;
public:
	Rect(){}
	Rect(int a, int b) :chang(a), kuan(b) {}
	virtual double getArea()
	{
		return chang * kuan;
	}
};
class Circle :public Geometry
{
protected:
	int r;
public:
	Circle(){}
	Circle(int R) :r(R) {}
	virtual double getArea()
	{
		return 3.14*r*r;
	}
};
class TotalArea
{
public:
	TotalArea(){}
	static void computerTotalArea(Geometry** t, int n)
	{
		double max;
		t = new Geometry*[n];
		for (int i = 0; i < n; i++)
		{
			t[i] = new Rect;
		}
		max = t[0]->getArea();
		for (int i = 1; i < n; i++)
		{
			if (t[i] > t[i - 1])
			{
				max = t[i]->getArea();
			}
		}
		cout << "最大面积=" << max << endl;
		delete[]t;
	}
};
int main()
{
	int t, type, a, b, r;
	double max;
	cin >> t;
	Geometry **p;
	p = new Geometry*[t];
	while (t--)
	{
		cin >> type;
		if (type == 1)
		{
			cin >> a >> b;
			p[t] = new Rect(a, b);
		}
		else
		{
			cin >> r;
			p[t] = new Circle(r);
		}
	}
	
	for (int i = 0; i < t; i++)
	{
		p[i] = new Rect;
	}
	max = p[0]->getArea();
	for (int i = 1; i < t; i++)
	{
		if (p[i] > p[i - 1])
		{
			max = p[i]->getArea();
		}
	}
	cout << "最大面积=" << fixed<<setprecision(2)<<max << endl;
	delete[]p;
}
------------------------------------------------------
2015110226:Problem1235:正确
#include <bits/stdc++.h>
using namespace std;

class Geometry{
public:
    virtual double getArea()=0;
};
class Rect:public Geometry{
private:
    double a,b;
public:
    Rect(double a,double b):a(a),b(b){}
    double getArea(){
        return a*b;
    }
};
class Circle:public Geometry{
private:
    double r;
public:
    Circle(double r):r(r){}
    double getArea(){
        return 3.14*r*r;
    }
};
class TotalArea{
public:
    static double maxs;
   static void computerTotalArea(Geometry** t,int n){
        for(int i=0;i<n;++i){
            double tmp = t[i]->getArea();
            if(maxs < tmp)
                maxs = tmp;
        }
   }
};
double TotalArea::maxs = 0;

int main(){
    int time;
    cin>>time;
    int a,b,c;
    Geometry **p = new Geometry*[time];
    for(int i=0;i<time;++i){
        cin>>a;
        if(a==1){
            cin>>b>>c;
            p[i] = new Rect(b,c);
        }
        else{
            cin>>b;
            p[i] = new Circle(b);
        }
    }
    TotalArea::computerTotalArea(p,time);
    cout<<"最大面积="<<fixed<<setprecision(2)<<TotalArea::maxs;
    return 0;
}


------------------------------------------------------
2018152086:Problem1119:编译错误
#include<iostream>

using namespace std;

class BaseAccount {
	protected:
		string name;
		string account;
		float balance;
	public:
		BaseAccount() {
		}
		BaseAccount(string a,string b,float c) {
			name=a;
			account=b;
			balance=c;
		}
		void virtual deposit(float a) {
			balance+=a;
		}
		void virtual withdraw(float a) {
			if(balance>=a)
				balance-=a;
			else
				cout<<"insufficient"<<endl;
		}
		void virtual display() {
			cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<endl;
		}
};
class BasePlus:public BaseAccount {
	protected:
		int limit;
		int limit_sum;
	public:
		BasePuls() {
		}
		BasePlus(string a,string b,float c) {
			name=a;
			account=b;
			balance=c;
			limit=5000;
			limit_sum=0;
		}
		void virtual deposit(float a) {
			balance+=a;
		}
		void virtual withdraw(float a) {
			if((balance+limit-limit_sum)>=a) {
				if(balance>=a)
					balance-=a;
				else {
					limit_sum+=(a=balance);
					balance=0;
				}

			}
			else
				cout<<"insufficient"<<endl;
		}
		void virtual display() {
			cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<' '<<"limit:"<<limit_sum<<endl;
		}
};

int main() {
	int t;
	string a;
	string b;
	float  c,Q,W,E,R;
	BaseAccount *P;
	cin>>t;
	while(t--) {
		cin>>a>>b>>c;
		cin>>Q>>W>>E>>R;
		if(b[1]=='A') {
			BaseAccount BA(a,b,c);
			P=&BA;
			P->deposit(Q);
			P->withdraw(W);
			P->deposit(E);
			P->withdraw(R);
			P->display();
		} else if(b[1]=='P') {
			BasePlus BP(a,b,c);
			P=&BP;
			P->deposit(Q);
			P->withdraw(W);
			P->deposit(E);
			P->withdraw(R);
			P->display();
		}
	}
	return 0;
}
------------------------------------------------------
2018152086:Problem1119:答案错误
#include<iostream>

using namespace std;

class BaseAccount {
	protected:
		string name;
		string account;
		float balance;
	public:
		BaseAccount() {
		}
		BaseAccount(string a,string b,float c) {
			name=a;
			account=b;
			balance=c;
		}
		void virtual deposit(float a) {
			balance+=a;
		}
		void virtual withdraw(float a) {
			if(balance>=a)
				balance-=a;
			else
				cout<<"insufficient"<<endl;
		}
		void virtual display() {
			cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<endl;
		}
};
class BasePlus:public BaseAccount {
	protected:
		int limit;
		int limit_sum;
	public:
		BasePlus(string a,string b,float c) {
			name=a;
			account=b;
			balance=c;
			limit=5000;
			limit_sum=0;
		}
		void virtual deposit(float a) {
			balance+=a;
		}
		void virtual withdraw(float a) {
			if((balance+limit-limit_sum)>=a) {
				if(balance>=a)
					balance-=a;
				else {
					limit_sum+=(a=balance);
					balance=0;
				}

			}
			else
				cout<<"insufficient"<<endl;
		}
		void virtual display() {
			cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<' '<<"limit:"<<limit_sum<<endl;
		}
};

int main() {
	int t;
	string a;
	string b;
	float  c,Q,W,E,R;
	BaseAccount *P;
	cin>>t;
	while(t--) {
		cin>>a>>b>>c;
		cin>>Q>>W>>E>>R;
		if(b[1]=='A') {
			BaseAccount BA(a,b,c);
			P=&BA;
			P->deposit(Q);
			P->withdraw(W);
			P->deposit(E);
			P->withdraw(R);
			P->display();
		} else if(b[1]=='P') {
			BasePlus BP(a,b,c);
			P=&BP;
			P->deposit(Q);
			P->withdraw(W);
			P->deposit(E);
			P->withdraw(R);
			P->display();
		}
	}
	return 0;
}
------------------------------------------------------
szuzy:Problem1235:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
#include<algorithm>
#include<iomanip>
using namespace std;

//double pi = acos(-1);
double pi=3.14;

class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect : virtual public Geometry
{
    double x,y;
public:
    Rect(double x,double y):x(x),y(y){}
    virtual double getArea()
    {
        return x*y;
    }
};

class Circle : virtual public Geometry
{
    double r;
public:
    Circle(double r):r(r){}
    virtual double getArea()
    {
        return pi*r*r;
    }
};

class TotalArea{
    static double maxn;
public:
   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
   {
       for(int i=0;i<n;i++)
       {
           if(maxn<(t[i]->getArea()))
            maxn=t[i]->getArea();
       }
   }
   static double getm();
};

double TotalArea::maxn=0;

double TotalArea::getm()
{
    return  maxn;
}

int main()
{
    int n,m,t,i,j,k,ans,num,sum,p,tot=0;
    string s,ss;
    double x,y,r;
    cin>>t,num=t;
    Geometry **w=new Geometry *[t];
    while(t--)
    {
        cin>>p;
        if(p==1)
        {
            cin>>x>>y;
            w[tot++]=new Rect(x,y);
        }
        else
        {
            cin>>r;
            w[tot++]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(w,num);
    cout<<"最大面积="<<fixed<<setprecision(2)<<TotalArea::getm()<<endl;
    return 0;
}

------------------------------------------------------
2015110226:Problem1129:正确
#include <bits/stdc++.h>
using namespace std;

class card{
protected:
    int id;
    string name;
    int counter;
public:
    card(int a,string b,int c):id(a),name(b),counter(c){}
    void initial(){}
    virtual int save(int v){
        if(v < 0) return -1;
        counter += v;
        return 1;
    }
    virtual int take(int v){
        if(v < 0) return -1;
        if(v > counter) return -1;
        counter -= v;
        return 1;
    }
    virtual void info(){
        cout<<id<<'-'<<name<<'-'<<counter<<endl;
    }
};
class traffic:public card{
protected:
    int Tcounter;
public:
    traffic(int a,string b,int c,int d):card(a,b,c),Tcounter(d){}
    int transfer(int v){
        if(take(v) == 1){
            Tcounter += v;
            return 1;
        }
        return -1;
    }
    void info(){
        cout<<id<<'-'<<name<<'-'<<counter<<'-'<<Tcounter<<endl;
    }
};
class vip:public card{
protected:
    int credit;
public:
    vip(int a,string b,int c,int d):card(a,b,c),credit(d){}
    int over(int v){
        if(v < 0) return -1;
        if(counter > v){
            counter -= v;
            return 1;
        }
        if(counter < v && counter + credit > v){
            v -= counter;
            counter = 0;
            credit -= v;
            return 1;
        }
        return -1;
    }
    void info(){
        cout<<id<<'-'<<name<<'-'<<counter<<'-'<<credit<<endl;
    }
};


int main(){
    int a,b,c,d;
    string b1;
    cin>>a>>b1>>c;
    card c1(a,b1,c);
    cin>>a>>b1>>c>>d;
    traffic t1(a,b1,c,d);
    cin>>a>>b1>>c>>d;
    vip v1(a,b1,c,d);
    cin>>a>>b>>c>>d;
    c1.save(a);
    c1.save(b);
    c1.take(c);
    c1.take(d);
    c1.info();
    cin>>a>>b>>c>>d;
    t1.save(a);
    t1.take(b);
    t1.transfer(c);
    t1.transfer(d);
    t1.info();
    cin>>a>>b>>c>>d;
    v1.save(a);
    v1.take(b);
    v1.over(c);
    v1.over(d);
    v1.info();
    return 0;
}



------------------------------------------------------
2017161095:Problem1235:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
#include<algorithm>
#include<iomanip>
using namespace std;

//double pi = acos(-1);
double pi=3.14;

class Geometry{

public:

    virtual double getArea()=0; //计算面积，结果保留小数点后两位

};

class Rect : virtual public Geometry
{
    double x,y;
public:
    Rect(double x,double y):x(x),y(y){}
    virtual double getArea()
    {
        return x*y;
    }
};

class Circle : virtual public Geometry
{
    double r;
public:
    Circle(double r):r(r){}
    virtual double getArea()
    {
        return pi*r*r;
    }
};

class TotalArea{
    static double maxn;
public:
   static void computerTotalArea(Geometry** t,int n)//t为基类二级指针，指向一个基类动态数组，数组的每个元素指向一个子类图形，n为数组的大小
   {
       for(int i=0;i<n;i++)
       {
           if(maxn<(t[i]->getArea()))
            maxn=t[i]->getArea();
       }
   }
   static double getm();
};

double TotalArea::maxn=0;

double TotalArea::getm()
{
    return  maxn;
}

int main()
{
    int n,m,t,i,j,k,ans,num,sum,p,tot=0;
    string s,ss;
    double x,y,r;
    cin>>t,num=t;
    Geometry **w=new Geometry *[t];
    while(t--)
    {
        cin>>p;
        if(p==1)
        {
            cin>>x>>y;
            w[tot++]=new Rect(x,y);
        }
        else
        {
            cin>>r;
            w[tot++]=new Circle(r);
        }
    }
    TotalArea::computerTotalArea(w,num);
    cout<<"最大面积="<<fixed<<setprecision(2)<<TotalArea::getm()<<endl;
    return 0;
}

------------------------------------------------------
2016140066:Problem1234:正确
#include <iostream>
using namespace std;
class Group
{
public:
	virtual int add(int x, int y) = 0;
	virtual int sub(int x, int y) = 0;
};
class GroupA:public Group
{
public:
	virtual int add(int x, int y)
	{
		return x + y;
	}
	virtual int sub(int x, int y)
	{
		return x - y;
	}
};
class GroupB:public Group
{
public:
	virtual int add(int x, int y)
	{
		return x + y;
	}
	virtual int sub(int x, int y)
	{
		if (((x % 10) < (y % 10)) && (((x % 100) / 10) >= ((y % 100) / 10)) && (((x % 1000) / 100) >= ((y % 1000) / 100)))
		{
			return x - y + 10;
		}
		else if (((x % 10) < (y % 10)) && (((x % 100) / 10) < ((y % 100) / 10)) && (((x % 1000) / 100) >= ((y % 1000) / 100)))
		{
			return x - y+110;
		}
		else if (((x % 10) < (y % 10)) && (((x % 100) / 10) < ((y % 100) / 10)) && (((x % 1000) / 100) < ((y % 1000) / 100)))
		{
			return x - y + 1110;
		}
		else if (((x % 10) >= (y % 10)) && (((x % 100) / 10) < ((y % 100) / 10)) && (((x % 1000) / 100) >= ((y % 1000) / 100)))
		{
			return x - y + 100;
		}
		else if (((x % 10) >= (y % 10)) && (((x % 100) / 10) >= ((y % 100) / 10)) && (((x % 1000) / 100) < ((y % 1000) / 100)))
		{
			return x - y + 100;
		}
	}
};
class GroupC :public Group
{
public:
	virtual int add(int x, int y)
	{
		int sum;
		sum = x + y;
		if (((x % 10) + (y % 10)) >= 10)
		{
			sum =sum- 10;
		}
		if (((x % 100) / 10) + ((y % 100) / 10) >= 10)
		{
			sum=sum - 100;
		}
		if (((x % 1000) / 100) + ((y % 1000) / 100) >= 10)
		{
			sum=sum - 1000;
		}
		return sum;
	}
	virtual int sub(int x, int y)
	{
		if (((x % 10) < (y % 10)) && (((x % 100) / 10) >= ((y % 100) / 10)) && (((x % 1000) / 100) >= ((y % 1000) / 100)))
		{
			return x - y + 10;
		}
		else if (((x % 10) < (y % 10)) && (((x % 100) / 10) < ((y % 100) / 10)) && (((x % 1000) / 100) >= ((y % 1000) / 100)))
		{
			return x - y + 110;
		}
		else if (((x % 10) < (y % 10)) && (((x % 100) / 10) < ((y % 100) / 10)) && (((x % 1000) / 100) < ((y % 1000) / 100)))
		{
			return x - y + 1110;
		}
		else if (((x % 10) >= (y % 10)) && (((x % 100) / 10) < ((y % 100) / 10)) && (((x % 1000) / 100) >= ((y % 1000) / 100)))
		{
			return x - y + 100;
		}
		else if (((x % 10) >= (y % 10)) && (((x % 100) / 10) >= ((y % 100) / 10)) && (((x % 1000) / 100) < ((y % 1000) / 100)))
		{
			return x - y + 100;
		}
	}
};
int main()
{
	int t,x,y,type;
	char f;
	Group *p;
	cin >> t;
	while (t--)
	{
		cin >> type >> x >> f >> y;
		if (type == 1)
		{
			GroupA s;
			p = &s;
			if (f == '+')
			{
				cout << p->add(x, y) << endl;
			}
			else
			{
				cout << p->sub(x, y) << endl;
			}

		}
		else if (type == 2)
		{
			GroupB s;
			p = &s;
			if (f == '+')
			{
				cout << p->add(x, y) << endl;
			}
			else
			{
				cout << p->sub(x, y) << endl;
			}
		}
		else if (type == 3)
		{
			GroupC s;
			p = &s;
			if (f == '+')
			{
				cout << p->add(x, y) << endl;
			}
			else
			{
				cout << p->sub(x, y) << endl;
			}

		}
	}
	return 0;
}
------------------------------------------------------
2018152086:Problem1119:正确
#include<iostream>

using namespace std;

class BaseAccount {
	protected:
		string name;
		string account;
		float balance;
	public:
		BaseAccount() {
		}
		BaseAccount(string a,string b,float c) {
			name=a;
			account=b;
			balance=c;
		}
		void virtual deposit(float a) {
			balance+=a;
		}
		void virtual withdraw(float a) {
			if(balance>=a)
				balance-=a;
			else
				cout<<"insufficient"<<endl;
		}
		void virtual display() {
			cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<endl;
		}
};
class BasePlus:public BaseAccount {
	protected:
		int limit;
		int limit_sum;
	public:
		BasePlus(string a,string b,float c) {
			name=a;
			account=b;
			balance=c;
			limit=5000;
			limit_sum=0;
		}
		void virtual deposit(float a) {
			if(limit_sum!=0){
				if(limit_sum<=a){
					balance=a-limit_sum;
					limit_sum=0;
				}
				else{
					limit_sum-=a;
				}
			}
			else{
				balance+=a;
			}
		}
		void virtual withdraw(float a) {
			if((balance+limit-limit_sum)>=a) {
				if(balance>=a)
					balance-=a;
				else {
					limit_sum+=(a-balance);
					balance=0;
				}

			}
			else
				cout<<"insufficient"<<endl;
		}
		void virtual display() {
			cout<<name<<' '<<account<<' '<<"Balance:"<<balance<<' '<<"limit:"<<(limit-limit_sum)<<endl;
		}
};

int main() {
	int t;
	string a;
	string b;
	float  c,Q,W,E,R;
	BaseAccount *P;
	cin>>t;
	while(t--) {
		cin>>a>>b>>c;
		cin>>Q>>W>>E>>R;
		if(b[1]=='A') {
			BaseAccount BA(a,b,c);
			P=&BA;
			P->deposit(Q);
			P->withdraw(W);
			P->deposit(E);
			P->withdraw(R);
			P->display();
		} else if(b[1]=='P') {
			BasePlus BP(a,b,c);
			P=&BP;
			P->deposit(Q);
			P->withdraw(W);
			P->deposit(E);
			P->withdraw(R);
			P->display();
		}
	}
	return 0;
}
------------------------------------------------------
2017161095:Problem1234:答案错误
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
#include<algorithm>
#include<iomanip>
using namespace std;

class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        return x-y;
    }
};

class GroupB : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        int num=1,ans=0;
        while(x)
        {
            ans+=abs(x-y)%10*num;
            num*=10;
            x/=10;
            y/=10;
        }
        return ans;
    }
};

class GroupC : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        int num=1,ans=0;
        while(x)
        {
            ans+=(x+y)%10*num;
            num*=10;
            x/=10;
            y/=10;
        }
        return ans;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        int num=1,ans=0;
        while(x)
        {
            ans+=abs(x-y)%10*num;
            num*=10;
            x/=10;
            y/=10;
        }
        return ans;
    }
};

int main()
{
    int n,m,i,j,k,ans,t,type,x,y;
    char s;
    cin>>t;
    Group *p;
    while(t--)
    {
        cin>>type;
        cin>>x>>s>>y;
        if(type==1)
        {
            GroupA b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
    }

    return 0;
}

------------------------------------------------------
2017161095:Problem1234:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
#include<algorithm>
#include<iomanip>
using namespace std;

class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        return x-y;
    }
};

class GroupB : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        int num=1,ans=0;
        while(x||y)
        {
            ans+=abs(x-y)%10*num;
            num*=10;
            x/=10;
            y/=10;
        }
        return ans;
    }
};

class GroupC : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        int num=1,ans=0;
        while(x||y)
        {
            ans+=(x+y)%10*num;
            num*=10;
            x/=10;
            y/=10;
        }
        return ans;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        int num=1,ans=0;
        while(x||y)
        {
            ans+=abs(x-y)%10*num;
            num*=10;
            x/=10;
            y/=10;
        }
        return ans;
    }
};

int main()
{
    int n,m,i,j,k,ans,t,type,x,y;
    char s;
    cin>>t;
    Group *p;
    while(t--)
    {
        cin>>type;
        cin>>x>>s>>y;
        if(type==1)
        {
            GroupA b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
    }

    return 0;
}

------------------------------------------------------
2017161095:Problem1234:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
#include<algorithm>
#include<iomanip>
using namespace std;

class Group

{

public:

virtual int add(int x, int y)=0;//输出加法的运算结果

virtual int sub(int x, int y)=0;//输出减法的运算结果

};

class GroupA : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        return x-y;
    }
};

class GroupB : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        return x+y;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        int num=1,ans=0,sym=0;
        while(x||y)
        {
            ans+=abs(x-y)%10*num;
            num*=10;
            if(!sym)
            x/=10;
            else
            x=0;
            y/=10;
            if(x==0&&y>0) x=10,sym=1;
        }
        return ans;
    }
};

class GroupC : virtual public Group
{
    virtual int add(int x, int y)//输出加法的运算结果
    {
        int num=1,ans=0;
        while(x||y)
        {
            ans+=(x+y)%10*num;
            num*=10;
            x/=10;
            y/=10;
        }
        return ans;
    }

    virtual int sub(int x, int y)//输出减法的运算结果
    {
        int num=1,ans=0,sym=0;
        while(x||y)
        {
            ans+=abs(x-y)%10*num;
            num*=10;
            if(!sym)
            x/=10;
            else
            x=0;
            y/=10;
            if(x==0&&y>0) x=10,sym=1;
        }
        return ans;
    }
};

int main()
{
    int n,m,i,j,k,ans,t,type,x,y;
    char s;
    cin>>t;
    Group *p;
    while(t--)
    {
        cin>>type;
        cin>>x>>s>>y;
        if(type==1)
        {
            GroupA b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
        else if(type==2)
        {
            GroupB b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
        else if(type==3)
        {
            GroupC b;
            p=&b;
            if(s=='+')
            cout<<p->add(x,y)<<endl;
            else
            cout<<p->sub(x,y)<<endl;
        }
    }

    return 0;
}

------------------------------------------------------
2018152086:Problem1235:正确
#include<iostream>
#include<iomanip>
using namespace std;

class Geometry {
	public:
		Geometry() {

		}
		virtual double getArea()=0;
		virtual ~Geometry() {

		}
};

class Rect:public Geometry {
	protected:
		int a,b;
	public:
		Rect() {
		}
		Rect(double A,double B) {
			a=A;
			b=B;
		}
		double getArea() {
			return a*b;
		}
};
class Circle:public Geometry {
	protected:
		double r;
	public:
		Circle() {
		}
		Circle(double a) {
			r=a;
		}
		double getArea() {
			return r*r*3.14;
		}
};

class TotalArea
{
	static double max;
public:
	static void computerTotalArea(Geometry **t,int n)
	{
		for(int i=0;i<n;i++)
		{
			double s=t[i]->getArea();
			if(max<s)
				max=s;
		} 
		cout<<"最大面积="<<fixed<<setprecision(2)<<max<<endl;
	}
};
double TotalArea::max=0;
int main() {
	int t;
	int type;
	double a,b,r;
	Geometry **P=new Geometry *[t];
	cin>>t;
	int i=0;
	while(t--) {
		cin>>type;
		if(type==1) {
			cin>>a>>b;
			P[i]=new Rect(a,b);
		}
		if(type==2) {
			cin>>r;
			P[i]=new Circle(r);
		}
		i++;
	}
	TotalArea temp;
	temp.computerTotalArea(P,i);
}
------------------------------------------------------
2016140066:Problem1129:正确
#include <iostream>
using namespace std;
//----类定义----
class NCard //普通卡
{
protected:
	int ID, Counter;
	char CName;
public:
	NCard(){}
	NCard(int id,char n,int c):ID(id),CName(n),Counter(c){}
	void initial(int id, char n, int c);
	int save(int money);
	int take(int money);
	virtual void info();
};
class Trafficcard :public NCard //交通卡
{
protected:
	int Tcounter;
public:
	Trafficcard(){}
	Trafficcard(int id, char n, int c,int t):NCard(id,n,c),Tcounter(t){}
	void initial(int id, char n, int c,int t);
	int transfer(int money);
	virtual void info();
};
class VIPcard :public NCard //贵宾卡
{
protected:
	int Credit;
public:
	VIPcard(){}
	VIPcard(int id, char n, int c, int cr):NCard(id,n,c),Credit(cr){}
	void initial(int id, char n, int c, int cr);
	int over(int money);
	virtual void info();
};
//----类实现----
void NCard::initial(int id, char n, int c)
{
	ID = id;
	CName = n;
	Counter = c;
}
int NCard::save(int money)
{
	if (money < 0)
	{
		return -1;
	}
	else
	{
		Counter += money;
		return 1;
	}
}
int NCard::take(int money)
{
	if ((money < 0)||(money>Counter))
	{
		return -1;
	}
	else
	{
		Counter -= money;
		return 1;
	}
}
void NCard::info()
{
	cout << ID << "-" << CName << "-" << Counter << endl;
}
void Trafficcard::initial(int id, char n, int c,int t)
{
	ID=id;
	CName = n;
	Counter = c;
	Tcounter = t;
}
int Trafficcard::transfer(int money)
{
	if ((money < 0) || (money > Counter))
	{
		return -1;
	}
	else
	{
		Counter -= money;
		Tcounter += money;
		return 1;
	}
}
void Trafficcard::info()
{
	cout << ID << "-" << CName << "-" << Counter << "-"<<Tcounter<<endl;
}
void VIPcard::initial(int id, char n, int c, int cr)
{
	ID = id;
	CName = n;
	Counter = c;
	Credit = cr;
}
int VIPcard::over(int money)
{
	if (money > (Counter + Credit))
	{
		return -1;
	}
	else
	{
		Credit = Credit - (money - Counter);
		Counter = 0;
		return 1;
	}
}
void VIPcard::info()
{
	cout << ID << "-" << CName << "-" << Counter << "-" << Credit << endl;
}
//----虚函数----
void show(NCard &obj)
{
	obj.info();
}
//----主函数----
int main()
{
	int id1, id2, id3, b1, b2, b3, tb,cb,N1,N2,N3,N4,T1,T2,T3,T4,V1,V2,V3,V4;
	char n1, n2, n3;
	NCard s1;
	Trafficcard s2;
	VIPcard s3;
	cin >> id1 >> n1 >> b1
		>> id2 >> n2 >> b2 >> tb
		>> id3 >> n3 >> b3 >> cb;
	s1.initial(id1, n1, b1);
	s2.initial(id2, n2, b2, tb);
	s3.initial(id3, n3, b3, cb);
	cin >> N1 >> N2 >> N3 >> N4
		>> T1 >> T2 >> T3 >> T4
		>> V1 >> V2 >> V3 >> V4;
	s1.save(N1);
	s1.save(N2);
	s1.take(N3);
	s1.take(N4);
	s2.save(T1);
	s2.take(T2);
	s2.transfer(T3);
	s2.transfer(T4);
	s3.save(V1);
	s3.take(V2);
	s3.over(V3);
	s3.over(V4);
	show(s1);
	show(s2);
	show(s3);
	return 0;
}
------------------------------------------------------
2018151078:Problem1119:正确
#include<iostream>
using namespace std;
class BA
{
protected:
    string name,zhanghu;
    int yu_e;
public:
    BA(string n,string z,int y):name(n),zhanghu(z),yu_e(y){}
    //virtual void display()=0;
     virtual void cun(int n)
     {
        yu_e=yu_e+n;
     }
     virtual void qu(int n)
     {
        if(n>yu_e)
        cout<<"insufficient"<<endl;
        else{
            yu_e=yu_e-n;
         }
     }
     virtual void display()
     {
        cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<endl;
     }
};
class BP:public BA
{
protected:
    int touzhi;
    int touzhi_t;
public:
    BP(string name,string z,int y):BA(name,z,y)
    {
         touzhi=5000;
         touzhi_t=0;
    }
    virtual void cun(int n)
    {
        yu_e=yu_e+n;
    }
    virtual void qu(int n)
    {
        if(n>yu_e+touzhi)
        {
            cout<<"insufficient"<<endl;
        }
        else
        {
            yu_e=yu_e-n;
            if(yu_e<0)
            {
                touzhi_t=touzhi_t-yu_e;
                yu_e=0;
            }
        }
    }
    virtual void display()
    {
        cout<<name<<" "<<zhanghu<<" Balance:"<<yu_e<<" limit:"<<touzhi-touzhi_t<<endl;
    }
};
int main()
{
    int t;
    cin>>t;
    BA *p;
    string n,z;
    int y,c1,q1,c2,q2;
    while(t--)
    {
        cin>>n>>z>>y;
        if(z[1]=='A')
        { 
            p=new BA(n,z,y);
            cin>>c1>>q1>>c2>>q2;
            p->cun(c1);
            p->qu(q1);
            p->cun(c2);
            p->qu(q2);
            p->display();
        }
        else{
            p=new BP(n,z,y);
            cin>>c1>>q1>>c2>>q2;
            p->cun(c1);
            p->qu(q1);
            p->cun(c2);
            p->qu(q2);
            p->display();
        }
    }
    return 0;
}
------------------------------------------------------
2018152086:Problem1129:正确
#include<iostream>
#include<string>
using namespace std;
class CommonCard
{
protected:
	int id;
	string cname;
	int counter;
public:
	void initial(int i,string cn,int c);
	int save(int num);
	int take(int num);
	virtual void info();
};
void CommonCard::initial(int i,string cn,int c)
{
	id=i;
	cname=cn;
	counter=c;
}
int CommonCard::save(int num)
{
	if(num>0)
	{
		counter+=num;
		return 1;
	}
	else 
		return -1;
}
int CommonCard::take(int num)
{
	if(counter<num||num<=0)
		return -1;
	else
		counter-=num;
	return 1;
}
void CommonCard::info()
{
	cout<<id<<"-"<<cname<<"-"<<counter<<endl;
}

class TCard:public CommonCard
{
	int Tcounter;
public:
	void initial(int i,string cn,int c,int t);
	int transfer(int num);
	virtual void info();
};
void TCard::initial(int i,string cn,int c,int t)
{
	id=i;
	cname=cn;
	counter=c;
	Tcounter=t;
}
int TCard::transfer(int num)
{
	if(num>counter)
		return -1;
	else
	{
		counter-=num;
		Tcounter+=num;
		return 1;
	}
}
void TCard::info()
{
	cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<Tcounter<<endl;
}

class VIPcard:public CommonCard
{
	int credit;
public:
	void initial(int i,string cn,int c,int cr);
	int over(int num);
	virtual void info();
};
void VIPcard::initial(int i,string cn,int c,int cr)
{
	id=i;
	cname=cn;
	counter=c;
	credit=cr;
}
int VIPcard::over(int num)
{

	if(counter+credit<num)
		return -1;
	else
	{
		credit=credit+counter-num;
		counter=0;
	//	cout<<credit<<endl;
		return 1;
	}
}
void VIPcard::info()
{
	cout<<id<<"-"<<cname<<"-"<<counter<<"-"<<credit<<endl;
}

void show(CommonCard &obj)
{
	obj.info();
}
int main()
{
	CommonCard exc;
	TCard ext;
	VIPcard exv;
	int idc;
	string namec;
	int bc;
	cin>>idc>>namec>>bc;
	exc.initial(idc,namec,bc);
	int idt;
	string namet;
	int bt,tt;
	cin>>idt>>namet>>bt>>tt;
	ext.initial(idt,namet,bt,tt);
	int idv,bv,cv;
	string namev;
	cin>>idv>>namev>>bv>>cv;
	exv.initial(idv,namev,bv,cv);
	
	int num1,num2,num3,num4;
	cin>>num1>>num2>>num3>>num4;
	exc.save(num1);
	exc.save(num2);
	exc.take(num3);
	exc.take(num4);
	int num11,num22,num33,num44;
	cin>>num11>>num22>>num33>>num44;
	ext.save(num11);
	ext.take(num22);
	ext.transfer(num33);
	ext.transfer(num44);
	int num111,num222,num333,num444;
	cin>>num111>>num222>>num333>>num444;
	exv.save(num111);
	exv.take(num222);
	exv.over(num333);
	exv.over(num444);
	show(exc);
	show(ext);
	show(exv);
	return 0;
}
------------------------------------------------------
2017161095:Problem1129:正确
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
#include<algorithm>
#include<iomanip>
using namespace std;

// 普通卡类定义
class card
{
protected:
    string id,name;
    unsigned int counter;
public:
    void initial(string id,string name,unsigned int m);
    int save(int x);
    int take(int x);
    virtual void info();
};

// 普通卡类实现
void card::initial(string id,string name,unsigned int m)
{
    this->id=id;
    this->name=name;
    this->counter=m;
}

int card::save(int x)
{
    if(x<0) return -1;
    else counter+=x;
    return 1;
}

int card::take(int x)
{
    if(x<0||x>counter) return -1;
    else counter-=x;
    return 1;
}

void card::info()
{
    cout<<id<<"-"<<name<<"-"<<counter<<endl;
}

// 交通卡定义
class transcard : virtual public card
{
    int Tcounter;
public:
    void initial(string id,string name,unsigned int m,int mm);
    int transfer(int x);
    void info();
};

// 交通卡实现
void transcard::initial(string id,string name,unsigned int m,int mm)
{
    this->id=id;
    this->name=name;
    this->counter=m;
    this->Tcounter=mm;
}

int transcard::transfer(int x)
{
    if(take(x)!=-1)
    {
        Tcounter+=x;
        return 1;
    }
    else
        return -1;
}

void transcard::info()
{
    cout<<id<<"-"<<name<<"-"<<counter<<"-"<<Tcounter<<endl;
}

// 贵宾卡定义
class vipcard : virtual public card
{
    int Credit;
public:
    void initial(string id,string name,unsigned int m,int mm);
    int over(int x);
    void info();
};

// 贵宾卡类实现

void vipcard::initial(string id,string name,unsigned int m,int mm)
{
    this->id=id;
    this->name=name;
    this->counter=m;
    this->Credit=mm;
}

int vipcard::over(int x)
{
    if(x>Credit+counter) return -1;
    Credit-=x-counter,counter=0;
    return 1;
}

void vipcard::info()
{
    cout<<id<<"-"<<name<<"-"<<counter<<"-"<<Credit<<endl;
}

// 多态函数
void show(card &obj)
{
    obj.info();
}

// 主函数
int main()
{
    int n,m,i,j,k,ans,num,sum,x,xx,y,yy;
    string s,ss;
    card a;
    transcard b;
    vipcard c;
    cin>>s>>ss>>num;
    a.initial(s,ss,num);
    cin>>s>>ss>>num>>sum;
    b.initial(s,ss,num,sum);
    cin>>s>>ss>>num>>sum;
    c.initial(s,ss,num,sum);
    //
    cin>>x>>xx>>y>>yy;
    a.save(x);
    a.save(xx);
    a.take(y);
    a.take(yy);
    //
    cin>>x>>xx>>y>>yy;
    b.save(x);
    b.take(xx);
    b.transfer(y);
    b.transfer(yy);
    //
    cin>>x>>xx>>y>>yy;
    c.save(x);
    c.take(xx);
    c.over(y);
    c.over(yy);
    //
    show(a);
    show(b);
    show(c);

    return 0;
}

------------------------------------------------------
2018152021:Problem1119:答案错误
#include<iostream>
#include<string>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    string name;
	string account;
    double balance;
public:
    BaseAccount(string n,string a,double b):name(n),account(a),balance(b){}
    virtual void deposit(double x)
    {
        balance+=x;
    }
    virtual void withdraw(double y)
    {
        balance-=y;
        if(balance<0)
        {
        	cout << "insufficient" << endl;
        	balance+=y;
		}
    }
	virtual void display()
    {
        cout << name << " " << account << " Balance:" << balance << endl;
    }   
};
class BasePlus:public BaseAccount
{
public:
    double limit_sum;
    BasePlus(string n,string a,double b):BaseAccount(n,a,b){}
    void deposit(double x)
    {
        balance+=x;
    }
    void withdraw(double y)
    {
        balance-=y;
        if(balance<-5000)
        {
        	cout << "insufficient" << endl;
        	balance+=y;
        	limit_sum=5000;
		}
		else if(balance>=-5000&&balance<0)
        {
        	limit_sum=-1*balance;
		}
	}
    void display()
    {
    	if(balance<0)
    		balance=0;
        cout<< name << " " << account << " Balance:" << balance << " " << "limit:" << limit_sum << endl;
    }
};
int main()
{
    int t;
    cin >> t;
    string name,account;
    double balance,x1,y1,x2,y2;
    while(t--)
    {
    	BaseAccount *p;
    	char a[20];
        cin >> name >> account >> balance >> x1 >> y1 >> x2 >> y2 ;
        strcpy(a,account.c_str());
		if(a[1]=='A')
    	{
    		p=new BaseAccount(name,account,balance);
    		p->deposit(x1);
    		p->withdraw(y1);
    		p->deposit(x2);
    		p->withdraw(y2);
    		p->display();
		}
		else if(a[1]=='P')
		{
			p=new BasePlus(name,account,balance);
			p->deposit(x1);
    		p->withdraw(y1);
    		p->deposit(x2);
    		p->withdraw(y2);
    		p->display();
		}
         
    }   
}
------------------------------------------------------
2016150201:Problem1235:答案错误
#include<iostream>
#define PI 3.14
using namespace std;
class Geometry{
	public:
		Geometry(){
		}
		virtual double getArea()=0;
};
class Rect:public Geometry{
	int a,b;
public:	
	Rect(int aa,int bb):a(aa),b(bb){
	}
	double virtual getArea(){
		return a*b;
	}
};
class Circle:public Geometry{
	int r;
public:	
	Circle(int rr):r(rr){
	}
	double virtual getArea(){
		return PI*r*r;
	}
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n);
};
void computerTotalArea(Geometry** t,int n){
	double d=0;
	for(int i=0;i<n;i++){
	if(t[i]->getArea()>d)
	d=t[i]->getArea();	
	}
	cout<<d<<endl;
}
int main(){
	int t,id,a,b,r;
	cin>>t;
	Geometry *g;
	double d=0;
	while(t--){
		cin>>id;
		if(id==1){
			cin>>a>>b;
			Rect r(a,b);
			g=&r;
		}
		else if(id==2){
			cin>>r;
			Circle c(r);
			g=&c;
		}
		if(g->getArea()>d)
		d=g->getArea();
	}
//	TotalArea tt;
	//TotalArea::computerTotalArea(g,t);
	cout<<d<<endl;
}
------------------------------------------------------
2018152021:Problem1119:正确
#include<iostream>
#include<string>
#include<cstring>
using namespace std;
class BaseAccount
{
protected:
    string name;
	string account;
    double balance;
public:
    BaseAccount(string n,string a,double b):name(n),account(a),balance(b){}
    virtual void deposit(double x)
    {
        balance+=x;
    }
    virtual void withdraw(double y)
    {
        balance-=y;
        if(balance<0)
        {
        	cout << "insufficient" << endl;
        	balance+=y;
		}
    }
	virtual void display()
    {
        cout << name << " " << account << " Balance:" << balance << endl;
    }   
};
class BasePlus:public BaseAccount
{
public:
    double limit_sum;
    BasePlus(string n,string a,double b):BaseAccount(n,a,b){}
    void deposit(double x)
    {
        balance+=x;
    }
    void withdraw(double y)
    {
        balance-=y;
        if(balance<-5000)
        {
        	cout << "insufficient" << endl;
        	balance+=y;
        	limit_sum=5000;
		}
		else if(balance>=-5000&&balance<0)
        {
        	limit_sum=5000+1*balance;
		}
	}
    void display()
    {
    	if(balance<0)
    		balance=0;
        cout<< name << " " << account << " Balance:" << balance << " " << "limit:" << limit_sum << endl;
    }
};
int main()
{
    int t;
    cin >> t;
    string name,account;
    double balance,x1,y1,x2,y2;
    while(t--)
    {
    	BaseAccount *p;
    	char a[20];
        cin >> name >> account >> balance >> x1 >> y1 >> x2 >> y2 ;
        strcpy(a,account.c_str());
		if(a[1]=='A')
    	{
    		p=new BaseAccount(name,account,balance);
    		p->deposit(x1);
    		p->withdraw(y1);
    		p->deposit(x2);
    		p->withdraw(y2);
    		p->display();
		}
		else if(a[1]=='P')
		{
			p=new BasePlus(name,account,balance);
			p->deposit(x1);
    		p->withdraw(y1);
    		p->deposit(x2);
    		p->withdraw(y2);
    		p->display();
		}
         
    }   
}
------------------------------------------------------
2016150201:Problem1235:答案错误
#include<iostream>
#include<iomanip>
#define PI 3.14
using namespace std;
class Geometry{
	public:
		Geometry(){
		}
		virtual double getArea()=0;
};
class Rect:public Geometry{
	int a,b;
public:	
	Rect(int aa,int bb):a(aa),b(bb){
	}
	double virtual getArea(){
		return a*b;
	}
};
class Circle:public Geometry{
	int r;
public:	
	Circle(int rr):r(rr){
	}
	double virtual getArea(){
		return PI*r*r;
	}
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n);
};
void computerTotalArea(Geometry** t,int n){
	double d=0;
	for(int i=0;i<n;i++){
	if(t[i]->getArea()>d)
	d=t[i]->getArea();	
	}
	cout<<d<<endl;
}
int main(){
	int t,id,a,b,r;
	cin>>t;
	Geometry *g;
	double d=0;
	while(t--){
		cin>>id;
		if(id==1){
			cin>>a>>b;
			Rect r(a,b);
			g=&r;
		}
		else if(id==2){
			cin>>r;
			Circle c(r);
			g=&c;
		}
		if(g->getArea()>d)
		d=g->getArea();
	}
//	TotalArea tt;
	//TotalArea::computerTotalArea(g,t);
	cout<<fixed<<setprecision(2)<<d<<endl;
}
------------------------------------------------------
2016150201:Problem1235:正确
#include<iostream>
#include<iomanip>
#define PI 3.14
using namespace std;
class Geometry{
	public:
		Geometry(){
		}
		virtual double getArea()=0;
};
class Rect:public Geometry{
	int a,b;
public:	
	Rect(int aa,int bb):a(aa),b(bb){
	}
	double virtual getArea(){
		return a*b;
	}
};
class Circle:public Geometry{
	int r;
public:	
	Circle(int rr):r(rr){
	}
	double virtual getArea(){
		return PI*r*r;
	}
};
class TotalArea{
public:
   static void computerTotalArea(Geometry** t,int n);
};
void computerTotalArea(Geometry** t,int n){
	double d=0;
	for(int i=0;i<n;i++){
	if(t[i]->getArea()>d)
	d=t[i]->getArea();	
	}
	cout<<d<<endl;
}
int main(){
	int t,id,a,b,r;
	cin>>t;
	Geometry *g;
	double d=0;
	while(t--){
		cin>>id;
		if(id==1){
			cin>>a>>b;
			Rect r(a,b);
			g=&r;
		}
		else if(id==2){
			cin>>r;
			Circle c(r);
			g=&c;
		}
		if(g->getArea()>d)
		d=g->getArea();
	}
//	TotalArea tt;
	//TotalArea::computerTotalArea(g,t);
	cout<<"最大面积="<<fixed<<setprecision(2)<<d<<endl;
}
------------------------------------------------------
