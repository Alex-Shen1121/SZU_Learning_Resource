// Generated by CoffeeScript 1.12.7
(function() {
  var Pagnation, Promise, friendly,
    slice = [].slice;

  Promise = require('bluebird');

  friendly = function(total, display, current) {
    var half, left, pages, right;
    left = 1;
    right = total;
    pages = [];
    if (total >= display + 1) {
      half = Math.ceil(display / 2);
      if (current > half && current < total - (half - 1)) {
        if (display % 2 === 0) {
          left = current - half;
        } else {
          left = current - half + 1;
        }
        right = current + half - 1;
      } else {
        if (current <= half) {
          left = 1;
          right = display;
        } else {
          right = total;
          left = total - (display - 1);
        }
      }
    }
    while (left <= right) {
      pages.push(left);
      left++;
    }
    return pages;
  };

  Pagnation = (function() {
    Pagnation.prototype.__size__ = 20;

    Pagnation.prototype.__display__ = 0;

    Pagnation.prototype.__size_name__ = 'size';

    Pagnation.prototype.__page_name__ = 'page';

    Pagnation.prototype.__light__ = false;

    Pagnation.prototype.__infinite__ = false;

    Pagnation.prototype.config = function(conf) {
      Pagnation.__size__ = conf.size || 20;
      Pagnation.__display__ = conf.display || 0;
      Pagnation.__size_name__ = conf.size_name || 'size';
      Pagnation.__page_name__ = conf.page_name || 'page';
      Pagnation.__light__ = conf.light || false;
    };

    function Pagnation(model) {
      this.model = model;
    }

    Pagnation.prototype.find = function(condition) {
      this.condition = condition;
      return this;
    };

    Pagnation.prototype.select = function(selection) {
       this.selection = selection;
      return this;
    };

    Pagnation.prototype.populate = function() {
      var population;
      population = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.populations == null) {
        this.populations = [];
      }
      this.populations.push(population);
      return this;
    };

    Pagnation.prototype.sort = function(sorting) {
      this.sorting = sorting;
      return this;
    };

    Pagnation.prototype.page = function(index) {
      this.index = index;
      return this;
    };

    Pagnation.prototype.size = function(count) {
      this.count = count;
      return this;
    };

    Pagnation.prototype.display = function(friend) {
      this.friend = friend;
      return this;
    };

    Pagnation.prototype.simple = function(light) {
      this.light = light;
      return this;
    };

    Pagnation.prototype.extend = function() {
      var name, params;
      name = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this["extends"] == null) {
        this["extends"] = [];
      }
      this["extends"].push({
        name: name,
        params: params
      });
      return this;
    };

    Pagnation.prototype.inject = function(o) {
      this.index = o[Pagnation.__page_name__];
      this.count = o[Pagnation.__size_name__];
      return this;
    };

    Pagnation.prototype.infinite = function(no_limit) {
      this.no_limit = no_limit;
      return this;
    };

    Pagnation.prototype.exec = function(fn) {
      var extend, i, j, len, len1, population, promiseCount, promiseRecords, ref, ref1, skip;
      if (this.no_limit == null) {
        this.no_limit = Pagnation.__infinite__;
      }
      if (this.index == null) {
        this.index = 1;
      }
      if (this.count == null) {
        this.count = Pagnation.__size__;
      }
      if (this.friend == null) {
        this.friend = Pagnation.__display__;
      }
      if (this.light == null) {
        this.light = Pagnation.__light__;
      }
      if (this.condition == null) {
        this.condition = {};
      }
      skip = (+this.index - 1) * +this.count;
      promiseCount = this.model.where(this.condition).count().exec();
      if (this.no_limit) {
        promiseRecords = this.model.find(this.condition);
      } else {
        promiseRecords = this.model.find(this.condition).skip(skip).limit(+this.count);
      }
      if (this["extends"] != null) {
        ref = this["extends"];
        for (i = 0, len = ref.length; i < len; i++) {
          extend = ref[i];
          if (this.model[extend.name] != null) {
            promiseRecords = promiseRecords[extend.name].apply(promiseRecords, extend.params);
          }
        }
      }
      if (this.selection != null) {
        promiseRecords = promiseRecords.select(this.selection);
      }
      if (this.sorting != null) {
        promiseRecords = promiseRecords.sort(this.sorting);
      }
      if (this.populations != null) {
        ref1 = this.populations;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          population = ref1[j];
          promiseRecords = promiseRecords.populate.apply(promiseRecords, population);
        }
      }
      if (!this.light) {
        return Promise.all([promiseCount, promiseRecords.exec()]).bind(this).then(function(arg) {
          var final, records, total;
          total = arg[0], records = arg[1];
          final = {
            page: +this.index,
            size: +this.count,
            total: total,
            records: records,
            pages: Math.ceil(total / +this.count)
          };
          if (+this.friend !== 0) {
            final.display = friendly(final.pages, +this.friend, +this.index);
          }
          if ((fn != null) && typeof fn === 'function') {
            return fn(null, final);
          } else {
            return final;
          }
        })["catch"](function(err) {
          if ((fn != null) && typeof fn === 'function') {
            return fn(err, null);
          } else {
            throw err;
          }
        });
      } else {
        return promiseRecords.then(function(records) {
          if ((fn != null) && typeof fn === 'function') {
            return fn(null, records);
          } else {
            return records;
          }
        })["catch"](function(err) {
          if ((fn != null) && typeof fn === 'function') {
            return fn(err, null);
          } else {
            throw err;
          }
        });
      }
    };

    return Pagnation;

  })();

  module.exports = Pagnation;

}).call(this);
