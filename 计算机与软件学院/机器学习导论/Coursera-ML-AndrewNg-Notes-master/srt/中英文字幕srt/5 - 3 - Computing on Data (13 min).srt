1
00:00:00,220 --> 00:00:01,128
Now that you know how to load
现在 你已经学会了在Octave中
(字幕整理：中国海洋大学 黄海广,haiguang2000@qq.com )

2
00:00:01,128 --> 00:00:03,062
and save data in Octave, put
如何加载或存储数据

3
00:00:03,062 --> 00:00:04,743
your data into matrices and so
如何把数据存入矩阵 等等

4
00:00:04,743 --> 00:00:06,301
on. In this video I'd like
在这段视频中

5
00:00:06,301 --> 00:00:08,252
to show you how to do computational
我将向你介绍

6
00:00:08,252 --> 00:00:10,343
operations on data and
如何对数据进行运算

7
00:00:10,343 --> 00:00:12,296
later on we'll be using this
稍后我们将使用这些

8
00:00:12,320 --> 00:00:16,860
sorts of computation operations to implement our learning algorithms.
运算操作来实现我们的学习算法

9
00:00:16,860 --> 00:00:19,360
Let's get started.
现在我们开始吧

10
00:00:19,610 --> 00:00:21,031
Here's my Octave window.
这是我的 Octave 窗口

11
00:00:21,031 --> 00:00:22,737
Let me just quickly initialize some
我现在快速地

12
00:00:22,737 --> 00:00:24,939
variables to use
初始化一些变量

13
00:00:24,940 --> 00:00:26,679
for examples and set A
比如设置A

14
00:00:26,679 --> 00:00:29,185
to be a 3 by 2 matrix.
为一个3×2的矩阵

15
00:00:29,820 --> 00:00:31,495
and set B to a
设置B为

16
00:00:31,510 --> 00:00:33,319
3 by 2 matrix and let's
一个3 × 2矩阵

17
00:00:33,330 --> 00:00:35,106
set C to a
设置C为

18
00:00:35,120 --> 00:00:38,419
2 by 2 matrix, like so.
2 × 2矩阵

19
00:00:39,150 --> 00:00:41,948
Now, let's say I want to multiply 2 of my matrices.
现在 我想算两个矩阵的乘积

20
00:00:41,960 --> 00:00:44,121
So, let's say I wanna compute AxC.
比如说 A × C

21
00:00:44,121 --> 00:00:45,713
I just type AxC.
我只需键入A×C

22
00:00:45,740 --> 00:00:48,848
So, it's a 3 by 2 matrix times a 2 by 2 matrix.
这是一个 3×2 矩阵乘以 2×2 矩阵

23
00:00:48,860 --> 00:00:52,135
This gives me this 3 by 2 matrix.
得到这样一个3×2矩阵

24
00:00:52,160 --> 00:00:53,736
You can also do elements wise
你也可以对每一个元素

25
00:00:53,740 --> 00:00:56,472
operations and do A.xB
做运算 方法是做点乘运算A .*B

26
00:00:56,500 --> 00:00:57,615
and what this would do is
这么做

27
00:00:57,615 --> 00:00:59,138
they'll take each elements of A
Octave将矩阵 A 中的每一个元素

28
00:00:59,138 --> 00:01:00,584
and multiply it by
与矩阵 B 中的

29
00:01:00,590 --> 00:01:02,558
the corresponding elements of B.
对应元素相乘

30
00:01:02,560 --> 00:01:06,390
So, that's A, that's B, that's A.xB.
这是A 这是B 这是A .* B

31
00:01:06,700 --> 00:01:09,412
So, for example, the first element
比如说 这里第一个元素

32
00:01:09,420 --> 00:01:10,940
gives 1 times 11 which gives 11.
1乘以11得到11

33
00:01:10,950 --> 00:01:14,045
The second element gives
第二个元素是

34
00:01:14,045 --> 00:01:16,752
2 x 12 which gives 24 and so on.
2乘以12得到24

35
00:01:16,760 --> 00:01:18,196
So it is the element
这就是两个矩阵的

36
00:01:18,196 --> 00:01:19,673
wise multiplication of two
元素位运算

37
00:01:19,673 --> 00:01:21,500
matrices, and in general
通常来说

38
00:01:21,520 --> 00:01:23,359
the P rand tends to,
在Octave中

39
00:01:23,380 --> 00:01:25,132
it's usually used, to denote
点号一般

40
00:01:25,132 --> 00:01:27,435
element wise operations in octave.
用来表示元素位运算

41
00:01:27,435 --> 00:01:28,882
So, here's a matrix
这里是一个矩阵A

42
00:01:28,882 --> 00:01:31,735
A and I'll do A dot carry 2.
这里我输入A .^ 2

43
00:01:31,735 --> 00:01:33,001
This gives me the multi,
这将对矩阵A中

44
00:01:33,010 --> 00:01:35,671
the element wise squaring of
每一个元素平方

45
00:01:35,690 --> 00:01:37,411
A, so 1 squared
所以 1的平方是1

46
00:01:37,411 --> 00:01:40,813
is 1, 2 squared is 4 and so on.
2的平方是4 等等

47
00:01:40,870 --> 00:01:42,215
Let's set V to a vector,
我们设V是一个向量

48
00:01:42,260 --> 00:01:46,085
we'll set V as 123 as a column vector.
设V为 [1; 2; 3] 是列向量

49
00:01:46,180 --> 00:01:47,848
You can also do 1.
你也可以输入

50
00:01:47,860 --> 00:01:49,675
over V to do
1 ./ V

51
00:01:49,675 --> 00:01:51,533
the element wise reciprocal of
得到每一个元素的倒数

52
00:01:51,533 --> 00:01:53,176
V so this gives me
所以这样一来

53
00:01:53,210 --> 00:01:55,600
one over one, one over two and one over three.
就会分别算出 1/1  1/2  1/3

54
00:01:55,600 --> 00:01:56,898
This works too for matrices so
矩阵也可以这样操作

55
00:01:56,898 --> 00:01:58,436
one dot over A, gives me
1 ./ A 得到

56
00:01:58,470 --> 00:02:00,464
that element wise inverse of
A中每一个元素的倒数

57
00:02:00,520 --> 00:02:03,342
A.  and once
同样地

58
00:02:03,342 --> 00:02:04,813
again the P radians gives use
这里的点号

59
00:02:04,830 --> 00:02:08,193
a clue that this is an elements wise operation.
还是表示对每一个元素进行操作

60
00:02:08,193 --> 00:02:09,663
To also do things like log
我们还可以进行求对数运算

61
00:02:09,663 --> 00:02:11,591
V This is an element wise
也就是对每个元素

62
00:02:11,600 --> 00:02:14,257
logarithm of, the
进行求对数运算

63
00:02:14,257 --> 00:02:15,418
V, E to the
还有自然数e的幂次运算

64
00:02:15,420 --> 00:02:17,394
V, is the base E
就是以e为底

65
00:02:17,394 --> 00:02:20,288
exponentiation of these elements
以这些元素为幂的运算

66
00:02:20,330 --> 00:02:21,432
of this is E, this is E
所以这是e 这是e的平方

67
00:02:21,432 --> 00:02:23,105
squared EQ, this is
这是e的立方

68
00:02:23,105 --> 00:02:26,010
V. And I
v 矩阵是这样的

69
00:02:26,120 --> 00:02:28,187
can also do apps V to
我还可以用 abs

70
00:02:28,230 --> 00:02:30,172
take the element wise absolute
来对 v 的每一个元素

71
00:02:30,172 --> 00:02:32,056
value of V. So here,
求绝对值

72
00:02:32,056 --> 00:02:34,418
V was all positive, abs, say
当然这里 v 都是正数

73
00:02:34,430 --> 00:02:36,503
minus 1 to minus 3,
我们换成另一个

74
00:02:36,503 --> 00:02:38,543
the element wise Absolute
这样对每个元素求绝对值

75
00:02:38,543 --> 00:02:40,428
value gives me back these
得到的结果就是

76
00:02:40,430 --> 00:02:43,929
non-negative values and negative
这些非负的元素

77
00:02:43,929 --> 00:02:45,465
V gives me the minus
还有 -v

78
00:02:45,465 --> 00:02:46,715
of V. This is the same
给出V中每个元素的相反数

79
00:02:46,730 --> 00:02:49,085
as -1xV but usually
这等价于 -1 乘以 v

80
00:02:49,085 --> 00:02:50,653
you just write negative V and
不过一般就直接用 -v 就好了

81
00:02:50,653 --> 00:02:55,340
so that negative 1xV and what else can you do?
其实就等于 -1*v

82
00:02:55,990 --> 00:02:57,185
Here's another neat trick.
还有什么呢？

83
00:02:57,185 --> 00:02:58,343
So Let's see.
还有一个技巧

84
00:02:58,343 --> 00:03:01,424
Let's say I want to take V and increment each of these elements by 1.
比如说 我们想对v中的每个元素都加1

85
00:03:01,424 --> 00:03:02,520
Well, one way to do
那么我们可以这么做

86
00:03:02,520 --> 00:03:05,407
it is by constructing a
首先构造一个

87
00:03:05,420 --> 00:03:09,010
3 by 1 vector
3行1列的1向量

88
00:03:09,660 --> 00:03:12,666
this all ones and adding that to V. So, they do that.
然后把这个1向量跟原来的向量相加

89
00:03:12,666 --> 00:03:15,373
This increments V by for 123 to 234.
因此 v 向量从[1 2 3] 增至 [2 3 4]

90
00:03:15,373 --> 00:03:16,804
The way I did
我用了一个

91
00:03:16,804 --> 00:03:21,439
that was length of V, is three.
length(v) 命令

92
00:03:21,890 --> 00:03:23,790
So ones, length of
因此这样一来

93
00:03:23,790 --> 00:03:25,792
V by one, this is ones
ones(length(v) ,1) 就相当于

94
00:03:25,820 --> 00:03:27,055
of three by one.
ones(3,1)

95
00:03:27,055 --> 00:03:29,525
So that's ones, three by one.
所以这是ones(3,1)

96
00:03:29,580 --> 00:03:31,150
On the right and what I
对吧 然后我做的是

97
00:03:31,230 --> 00:03:33,198
did was B plus ones,
v + ones(3,1)

98
00:03:33,198 --> 00:03:35,139
V by one, which is adding
也就是将 v 的各元素

99
00:03:35,150 --> 00:03:36,605
this vector of all ones
都加上这些1

100
00:03:36,610 --> 00:03:38,112
to B. And so this increments
这样就将 v 的每个元素

101
00:03:38,112 --> 00:03:40,340
V by one.
增加了1

102
00:03:40,340 --> 00:03:41,984
And you, another simpler
另一种更简单的方法是

103
00:03:41,984 --> 00:03:44,472
way to do that is to type V+ one, right?
直接用 v+1

104
00:03:44,472 --> 00:03:45,600
So that's V and
所以这是 v

105
00:03:45,650 --> 00:03:46,989
V+ one also means to
v + 1 也就等于

106
00:03:47,000 --> 00:03:49,257
add one element wise to
把 v 中的每一个元素

107
00:03:49,280 --> 00:03:52,458
each of my elements of V.
都加上1

108
00:03:52,458 --> 00:03:55,422
Now, let's talk about more operations.
现在 让我们来谈谈更多的操作

109
00:03:55,450 --> 00:03:58,848
So, here's my matrix A. If you want to write A transpose.
这是我的矩阵A 如果你想要求它的转置

110
00:03:58,848 --> 00:04:00,841
The way to do that is to write A prime.
那么方法是用A‘

111
00:04:00,900 --> 00:04:02,653
That's the apostrophe symbol.
这是单引号符号

112
00:04:02,660 --> 00:04:03,770
It's the left quote.
并且是左引号

113
00:04:03,770 --> 00:04:05,355
So, on your keyboard
可能你的键盘上

114
00:04:05,355 --> 00:04:06,975
you probably have a left
有一个左引号

115
00:04:06,975 --> 00:04:08,106
quote and a right quote.
和一个右引号

116
00:04:08,106 --> 00:04:09,901
So this is a at the
这里用的是左引号

117
00:04:09,950 --> 00:04:12,304
standard quotation mark is a,
也就是标准的引号

118
00:04:12,304 --> 00:04:14,765
what to say, a transpose
因此 A’

119
00:04:14,765 --> 00:04:16,172
to excuse me the, you
将得出 A 的转置矩阵

120
00:04:16,172 --> 00:04:17,228
know, a transpose of my
当然

121
00:04:17,228 --> 00:04:18,919
major and of course
如果我写 (A‘)’

122
00:04:18,919 --> 00:04:20,405
a transpose if I transpose
也就是 A 转置两次

123
00:04:20,405 --> 00:04:21,650
that again then I should
那么我又重新得到矩阵 A

124
00:04:21,650 --> 00:04:26,509
get back my matrix A. Some more useful functions.
还有一些有用的函数

125
00:04:26,540 --> 00:04:28,646
Let's say locate A is
假如说 小写a

126
00:04:28,646 --> 00:04:30,546
1 15 to 0.5.
是[1 15 2 0.5]

127
00:04:30,546 --> 00:04:34,266
So, it's a, you know, 1 by 4 matrix.
这是一个1行4列矩阵

128
00:04:34,266 --> 00:04:36,239
Let's say set val equals max
假如说 val=max(a)

129
00:04:36,239 --> 00:04:37,833
of A.  This returns the
这将返回

130
00:04:37,833 --> 00:04:39,328
maximum value of A, which
A矩阵中的最大值

131
00:04:39,328 --> 00:04:41,481
in this case is 15 and
在这里是15

132
00:04:41,500 --> 00:04:44,465
I can do val ind max
我还可以写 [val, ind] = max(a)

133
00:04:44,490 --> 00:04:47,115
A.  And this returns
这将返回

134
00:04:47,120 --> 00:04:49,634
val of int which are
a矩阵中的最大值

135
00:04:49,634 --> 00:04:51,289
the maximum value of A
存入val

136
00:04:51,289 --> 00:04:52,943
which is 15 as was the index.
以及该值对应的索引

137
00:04:52,943 --> 00:04:56,028
So the elements number two of A that 15.
 因此元素15对应的索引值为2 存入ind

138
00:04:56,028 --> 00:04:58,766
So, in is my index into this.
所以 ind 等于2

139
00:04:58,766 --> 00:05:00,148
Just as a warning: if
特别注意一下

140
00:05:00,148 --> 00:05:03,155
you do max A where A is a matrix.
如果你用命令 max(A) A是一个矩阵的话

141
00:05:03,180 --> 00:05:04,746
What this does is this actually
这样做就是对每一列

142
00:05:04,780 --> 00:05:07,848
does the column wise maximum,
求最大值

143
00:05:07,860 --> 00:05:11,525
but say a little bit more about this in a second.
等下再仔细讲讲

144
00:05:11,570 --> 00:05:13,305
So, using this example of the
我们还是用这个例子

145
00:05:13,305 --> 00:05:17,008
variable lowercase A. If I do A less than three.
这个 小a 矩阵

146
00:05:17,040 --> 00:05:19,548
This does the element wise operation.
如果输入 a<3

147
00:05:19,590 --> 00:05:21,063
Element wise comparison.
这将进行逐元素的运算

148
00:05:21,063 --> 00:05:22,624
So, the first element
所以 第一个元素

149
00:05:22,624 --> 00:05:24,855
Of A is less than three equals to one.
是小于3的 因此返回1

150
00:05:24,855 --> 00:05:26,315
Second elements of A is
a的第二个元素

151
00:05:26,315 --> 00:05:27,435
not less than three, so
不小于3 所以

152
00:05:27,435 --> 00:05:29,948
this value is zero, because it is also.
这个值是0 表示"非"

153
00:05:29,950 --> 00:05:31,258
The third and fourth numbers of
第三个和第四个数字

154
00:05:31,300 --> 00:05:32,866
A are the lesson,
仍然是小于3

155
00:05:32,870 --> 00:05:35,667
I meant less than three, third and fourth elements are less than three.
2和0.5都小于3

156
00:05:35,667 --> 00:05:36,826
So this is one, one, so
因此 这返回[1 1 0 1]

157
00:05:36,826 --> 00:05:38,441
this is just the element wide
也就是说

158
00:05:38,460 --> 00:05:40,241
comparison of all four
对a矩阵的每一个元素

159
00:05:40,280 --> 00:05:42,504
element variable lower case
与3进行比较

160
00:05:42,520 --> 00:05:44,008
three and it returns true
然后根据每一个元素与3的大小关系

161
00:05:44,020 --> 00:05:47,382
or false depending on whether or not it's less than three.
返回1和0表示真与假

162
00:05:47,400 --> 00:05:48,843
Now, if I do find
现在 如果我写 find(a<3)

163
00:05:48,880 --> 00:05:50,708
A less than three, this would
这将告诉我

164
00:05:50,710 --> 00:05:52,149
tell me which are the
a 中的哪些元素

165
00:05:52,190 --> 00:05:53,805
elements of A that the
是小于3的

166
00:05:53,860 --> 00:05:55,202
variable A of less than three
是小于3的

167
00:05:55,202 --> 00:05:56,964
and in this case the 1st, 3rd
在这里就是第一 第三和第四个元素

168
00:05:56,964 --> 00:06:00,244
and 4th elements are lesson three.
是小于3的

169
00:06:00,244 --> 00:06:01,465
For my next example Oh, let
下一个例子

170
00:06:01,465 --> 00:06:03,335
me set eight be code to
设A = magic(3)

171
00:06:03,340 --> 00:06:05,765
magic three. The magic
magic 函数返回什么呢

172
00:06:05,765 --> 00:06:07,409
function returns. Let's type help magic.  Functions called
让我们查看 magic 函数的帮助文件

173
00:06:09,390 --> 00:06:12,581
The magic function returns.
magic 函数将返回

174
00:06:12,581 --> 00:06:15,362
Returns this matrices called magic squares.
一个矩阵 称为魔方阵或幻方 (magic squares)

175
00:06:15,362 --> 00:06:17,722
They have this, you know,
它们具有以下

176
00:06:17,740 --> 00:06:20,012
mathematical property that all
这样的数学性质

177
00:06:20,030 --> 00:06:21,590
of their rows and columns and
它们所有的行和列和对角线

178
00:06:21,590 --> 00:06:23,730
diagonals sum up to the same thing.
加起来都等于相同的值

179
00:06:23,730 --> 00:06:25,535
So, you know, it's
当然据我所知

180
00:06:25,580 --> 00:06:27,378
not actually useful for machine
这在机器学习里

181
00:06:27,378 --> 00:06:28,385
learning as far as I
基本用不上

182
00:06:28,385 --> 00:06:29,688
know, but I'm just using
但我可以用这个方法

183
00:06:29,688 --> 00:06:31,720
this as a convenient way,
很方便地生成一个

184
00:06:31,720 --> 00:06:33,058
you know, to generate a 3
3行3列的矩阵

185
00:06:33,058 --> 00:06:36,206
by 3 matrix and this magic square screen.
而这个魔方矩阵这神奇的方形屏幕。

186
00:06:36,220 --> 00:06:37,228
We have the power of 3
每一行 每一列

187
00:06:37,228 --> 00:06:39,500
at each row, each column and
每一个对角线

188
00:06:39,510 --> 00:06:41,055
the diagonals all add up
三个数字加起来

189
00:06:41,055 --> 00:06:44,487
to the same thing, so it's kind of a mathematical construct.
都是等于同一个数

190
00:06:44,510 --> 00:06:45,789
I use magic, I use this
我只有在演示功能

191
00:06:45,800 --> 00:06:47,110
magic function only when I'm
或者上课教 Octave 的时候

192
00:06:47,110 --> 00:06:48,118
doing demos, or when I'm
会用到这个矩阵

193
00:06:48,140 --> 00:06:49,571
teaching Octave like this and
在其他有用的机器学习应用中

194
00:06:49,580 --> 00:06:51,103
I don't actually use it for
这个矩阵其实没多大作用

195
00:06:51,103 --> 00:06:53,846
any, you know, useful machine learning application.
让我来看看别的

196
00:06:53,860 --> 00:06:59,356
But, let's see, if I type RC equals find A greater than or equals 7.
如果我输入 [r,c] = find( A>=7 )

197
00:06:59,390 --> 00:07:02,657
This finds all the elements
这将找出所有A矩阵中

198
00:07:02,657 --> 00:07:03,797
of a that are greater than
大于等于7的元素

199
00:07:03,797 --> 00:07:05,246
and equals to 7 and
因此

200
00:07:05,246 --> 00:07:07,044
so, RC sense a row and column.
r 和 c 分别表示行和列

201
00:07:07,100 --> 00:07:09,392
So, the 11 element is greater than 7.
这就表示 第一行第一列的元素大于等于7

202
00:07:09,400 --> 00:07:10,973
The three two elements is
第三行第二列的元素大于等于7

203
00:07:10,980 --> 00:07:13,178
greater than 7 and the two 3 elements is greater than 7.
第二行第三列的元素大于等于7

204
00:07:13,200 --> 00:07:14,788
So let's see, the two, three
我们来看看 第二行第三列的元素

205
00:07:14,800 --> 00:07:18,803
element for example, is A two, three.
就是 A(2,3)

206
00:07:18,850 --> 00:07:21,102
Is seven, is this element
是等于7的

207
00:07:21,120 --> 00:07:24,248
out here, and that is indeed greater than or equal seven.
就是这个元素 确实是大于等于7的

208
00:07:24,248 --> 00:07:26,005
By the way, I actually don't even
顺便说一句 其实我从来都

209
00:07:26,030 --> 00:07:27,613
memorize myself what these
不去刻意记住这个 find 函数

210
00:07:27,613 --> 00:07:28,944
find functions do in the
到底是怎么用的

211
00:07:28,960 --> 00:07:30,323
all these things do myself and
我只需要会用 help 函数就可以了

212
00:07:30,323 --> 00:07:31,399
whenever I use a find
每当我在使用这个函数

213
00:07:31,399 --> 00:07:33,042
function, sometimes I forget
忘记怎么用的时候

214
00:07:33,070 --> 00:07:34,791
myself exactly what does, and
我就可以用 help 函数

215
00:07:34,791 --> 00:07:37,952
you know, type help find to look up the document.
键入 help find 来找到帮助文档

216
00:07:37,970 --> 00:07:40,042
Okay, just two more things, if it's okay, to show you.
好吧 最后再讲两个内容

217
00:07:40,042 --> 00:07:41,549
One is the sum function.
一个是求和函数

218
00:07:41,549 --> 00:07:43,452
So here's my A and
这是 a 矩阵

219
00:07:43,452 --> 00:07:44,755
I type sum A. This adds
键入 sum(a)

220
00:07:44,800 --> 00:07:46,500
up all the elements of A.
就把 a 中所有元素加起来了

221
00:07:46,510 --> 00:07:47,660
And if I want to multiply them
如果我想把它们都乘起来

222
00:07:47,660 --> 00:07:49,404
together, I type prod A.
键入 prod(a)

223
00:07:49,410 --> 00:07:50,795
Prod sense of product,
prod 意思是 product(乘积)

224
00:07:50,800 --> 00:07:53,022
and it returns the products of
它将返回

225
00:07:53,022 --> 00:07:55,773
these four elements of A.
这四个元素的乘积

226
00:07:56,040 --> 00:07:58,215
Floor A rounds down,
floor(a) 是向下四舍五入

227
00:07:58,215 --> 00:07:59,465
these elements of A, so zero
因此对于 a 中的元素

228
00:07:59,470 --> 00:08:01,766
O point five gets rounded down to zero.
0.5将被下舍入变成0

229
00:08:01,766 --> 00:08:03,352
And ceil, or ceiling A,
还有 ceil(A)

230
00:08:03,380 --> 00:08:04,815
gets rounded up, so zero
表示向上四舍五入

231
00:08:04,815 --> 00:08:06,212
point five, rounded up to
所以0.5将上舍入变为

232
00:08:06,220 --> 00:08:10,735
the nearest integer, so zero point five gets rounded up to one.
最接近的整数 也就是1

233
00:08:10,735 --> 00:08:12,143
You can also.
还有

234
00:08:12,143 --> 00:08:13,322
Let's see.
我们来看

235
00:08:13,322 --> 00:08:14,418
Let me type rand 3.
键入 type(3)

236
00:08:14,418 --> 00:08:16,643
This generally sets a 3 by 3 matrix.
这通常得到一个3×3的矩阵

237
00:08:16,680 --> 00:08:20,444
If I type max randd 3, rand 3.
如果键入 max(rand(3), rand(3))

238
00:08:20,460 --> 00:08:21,848
What this does is it takes
这样做的结果是

239
00:08:21,848 --> 00:08:24,963
the element wise maximum of
返回两个3×3的随机矩阵

240
00:08:24,963 --> 00:08:26,897
2 random 3 by 3 matrices.
并且逐元素比较 取最大值

241
00:08:26,900 --> 00:08:28,017
So, you'll notice all these
所以 你会发现所有这些

242
00:08:28,017 --> 00:08:29,063
numbers tend to be a bit on the
数字几乎都比较大

243
00:08:29,063 --> 00:08:30,948
large side because each of
因为这里的每个元素

244
00:08:30,948 --> 00:08:32,581
these is actually the max of
都实际上是

245
00:08:32,581 --> 00:08:35,093
a randomly, of element Y's
两个随机生成的矩阵

246
00:08:35,110 --> 00:08:38,269
max of two randomly generated matrices.
逐元素进行比较 取最大的那个值

247
00:08:38,269 --> 00:08:40,316
This is my magic number.
这是刚才生成的

248
00:08:40,316 --> 00:08:43,258
This was my magic square 3x3a.
3×3魔方阵 A

249
00:08:43,258 --> 00:08:47,704
Let's say I type max A and then this will be it.
假如我输入

250
00:08:47,730 --> 00:08:49,955
Open, close, square brackets comma 1.
max(A,[],1)

251
00:08:49,955 --> 00:08:51,344
What this does is
这样做会得到

252
00:08:51,360 --> 00:08:53,584
this takes the column wise maximum.
每一列的最大值

253
00:08:53,600 --> 00:08:54,892
So, the maximum of the
所以第一例的最大值

254
00:08:54,910 --> 00:08:56,517
first column is eight, max
就是8

255
00:08:56,517 --> 00:08:58,335
of the second column is nine,
第二列是9

256
00:08:58,335 --> 00:09:00,695
the max of the third column is seven.
第三列的最大值是7

257
00:09:00,695 --> 00:09:02,064
This 1 means to take the
这里的1表示

258
00:09:02,100 --> 00:09:03,665
max along the first dimension of
取A矩阵第一个维度的最大值

259
00:09:03,700 --> 00:09:05,860
A.  In contrast, if
相对地

260
00:09:05,940 --> 00:09:07,874
I were to type max a, this
如果我键入

261
00:09:07,910 --> 00:09:10,033
funny notation 2 then this
max(A,[],2)

262
00:09:10,033 --> 00:09:12,433
takes the per row maximum.
这将得到每一行的最大值

263
00:09:12,460 --> 00:09:13,449
So, the maximum for the first
所以 第一行的最大值

264
00:09:13,449 --> 00:09:14,525
row is 8, max of
是等于8

265
00:09:14,560 --> 00:09:16,561
second row is 7, max
第二行最大值是7

266
00:09:16,580 --> 00:09:18,105
of the third row is 9
第三行是9

267
00:09:18,105 --> 00:09:21,605
and so this allows you to take maxes.
所以你可以用这个方法

268
00:09:21,605 --> 00:09:24,771
You know, per row or per column.
来求得每一行或每一列的最值

269
00:09:24,780 --> 00:09:26,988
And if you want to, and
另外

270
00:09:26,988 --> 00:09:29,019
remember it defaults to column
你要知道 默认情况下

271
00:09:29,020 --> 00:09:30,091
mark wise elements on this,
max(A)返回的是

272
00:09:30,091 --> 00:09:31,628
so if you want to find
每一列的最大值

273
00:09:31,630 --> 00:09:33,395
the maximum element in
如果你想要

274
00:09:33,395 --> 00:09:35,040
the entire matrix A, you
找出整个矩阵A的最大值

275
00:09:35,040 --> 00:09:36,985
can type max of max
你可以输入

276
00:09:36,985 --> 00:09:39,558
of A, like so, which is nine.
max(max(A)) 像这样

277
00:09:39,558 --> 00:09:40,640
Or you can turn A into
或者你可以将 A 矩阵转成

278
00:09:40,670 --> 00:09:42,507
a vector and type max
一个向量

279
00:09:42,507 --> 00:09:44,739
of A colon, like
然后键入 max(A(:))

280
00:09:44,750 --> 00:09:46,912
so, this treats this as a vector
这样做就是把 A 当做一个向量

281
00:09:46,912 --> 00:09:51,539
and takes the max element of vector.
并返回 A 向量中的最大值

282
00:09:51,572 --> 00:09:54,288
Finally, let's set A
最后 让我们把 A 设为一个

283
00:09:54,288 --> 00:09:56,234
to be a nine by nine magic square.
9行9列的魔方阵

284
00:09:56,234 --> 00:09:57,853
So remember, the magic square
别忘了

285
00:09:57,853 --> 00:09:59,969
has this property that every
魔方阵具有的特性是

286
00:09:59,969 --> 00:10:03,535
column in every row sums the same thing and also the diagonals.
每行每列和对角线的求和都是相等的

287
00:10:03,535 --> 00:10:06,209
So here is 9X9 magic square.
这是一个9×9的魔方阵

288
00:10:06,240 --> 00:10:07,715
So let me just sum A one
我们来求一个 sum(A,1)

289
00:10:07,715 --> 00:10:10,169
so this does a per column sum.
这样就得到每一列的总和

290
00:10:10,190 --> 00:10:11,104
And so I'm going to take each
所以这样做就是

291
00:10:11,104 --> 00:10:12,194
column of A and add
把 A 的每一列进行求和

292
00:10:12,194 --> 00:10:13,698
them up and this, you
从这里我们也可以看出

293
00:10:13,700 --> 00:10:15,365
know, lets us verify that indeed
这也验证了

294
00:10:15,365 --> 00:10:16,935
for 9 by 9 magic square.
一个9×9的魔方阵

295
00:10:16,935 --> 00:10:20,124
Every column adds up to 369 as of the same thing.
确实每一列加起来都相等 都为369

296
00:10:20,124 --> 00:10:22,020
Now, let's do the row wise sum.
现在我们来求每一行的和

297
00:10:22,020 --> 00:10:24,643
So, the sum A  comma 2
键入sum(A,2)

298
00:10:24,643 --> 00:10:27,967
and this sums
这样就得到了

299
00:10:28,030 --> 00:10:29,269
up each row of A
A 中每一行的和

300
00:10:29,269 --> 00:10:30,522
and each row of A
A 中每一行的和

301
00:10:30,522 --> 00:10:32,113
also sums up to 369.
加起来还是369

302
00:10:32,113 --> 00:10:34,485
Now let's sum the
现在我们来算

303
00:10:34,500 --> 00:10:35,934
diagonal elements of A
A 的对角线元素的和

304
00:10:35,990 --> 00:10:37,362
and make sure that they, that
看看它们的和

305
00:10:37,370 --> 00:10:39,696
that also sums up to the same thing.
是不是也相等

306
00:10:39,730 --> 00:10:40,924
So what I'm going to
我们现在构造一个

307
00:10:40,924 --> 00:10:42,613
do is, construct a nine
9×9 的单位矩阵

308
00:10:42,613 --> 00:10:44,325
by nine identity matrix, that's
键入 eye(9)

309
00:10:44,360 --> 00:10:46,018
I9, and let me
设为I9

310
00:10:46,018 --> 00:10:49,326
take A and construct, multiply
然后我们要用 A

311
00:10:49,326 --> 00:10:51,272
A elements wise.
逐点乘以这个单位矩阵

312
00:10:51,300 --> 00:10:52,812
So here's my matrix of A.
这是矩阵A

313
00:10:52,812 --> 00:10:56,350
I'm gonna do A.xI9 and what
我现在用 A 逐点乘以 eye(9)

314
00:10:56,490 --> 00:10:58,018
this will do is take the
这样做的结果是

315
00:10:58,020 --> 00:11:00,035
element wise product of these
两个矩阵对应元素

316
00:11:00,035 --> 00:11:01,150
2 matrices, and so this
将进行相乘

317
00:11:01,150 --> 00:11:03,605
should wipe out everything except
除了对角线元素外

318
00:11:03,680 --> 00:11:06,421
for the diagonal entries and now
其他元素都会得到0

319
00:11:06,421 --> 00:11:08,761
I'm going to sum, sum of
然后我对刚才求到的结果

320
00:11:08,780 --> 00:11:11,179
A of that and this
键入sum(sum(A.*eye(9))

321
00:11:11,180 --> 00:11:14,512
gives me the sum of
这实际上是求得了

322
00:11:14,512 --> 00:11:16,684
these diagonal elements, and indeed it is 369.
这个矩阵对角线元素的和 确实是369

323
00:11:16,684 --> 00:11:20,218
You can sum up the other diagonal as well.
你也可以求另一条对角线的和

324
00:11:20,240 --> 00:11:22,385
So this top left to bottom right.
这个是从左上角到右下角的

325
00:11:22,400 --> 00:11:24,158
You can sum up the opposite diagonal
你也可以求另一条对角线

326
00:11:24,180 --> 00:11:26,832
from bottom left to top right.
从左下角到右上角

327
00:11:26,832 --> 00:11:30,199
The sum, the commands for this is somewhat more cryptic.
这个和  这个命令会有点麻烦

328
00:11:30,200 --> 00:11:31,535
You don't really need to know this.
其实你不需要知道这个

329
00:11:31,540 --> 00:11:33,122
I'm just showing you just in
我只是想给你看

330
00:11:33,122 --> 00:11:34,779
case any of you are curious,
如果你感兴趣的话可以听听

331
00:11:34,779 --> 00:11:37,543
but let's see.
让我们来看看

332
00:11:37,600 --> 00:11:41,235
Flip UD stands for flip up/down.
flipup/flipud 表示向上/向下翻转

333
00:11:41,235 --> 00:11:42,622
If you do that, that turns out
如果你用这个命令的话

334
00:11:42,622 --> 00:11:44,376
to sum up the
计算的就是副对角线上

335
00:11:44,376 --> 00:11:46,055
elements in the opposites of,
所有元素的和

336
00:11:46,055 --> 00:11:49,387
the other diagonal that also sums up to 369.
还是会得到369

337
00:11:49,390 --> 00:11:51,116
Here, let me show you,
我来给你演示一下

338
00:11:51,120 --> 00:11:53,055
whereas i9 is this
eye(9) 矩阵是这样

339
00:11:53,070 --> 00:11:57,300
matrix, flip up/down of
那么 flipup(eye(9))

340
00:11:57,370 --> 00:11:58,986
i9, you know, takes the identity
将得到一个单位矩阵

341
00:11:58,986 --> 00:12:00,832
matrix and flips it vertically
并且将它翻转

342
00:12:00,832 --> 00:12:01,822
so you end up with, excuse me,
不好意思打错了

343
00:12:01,822 --> 00:12:04,394
flip UD, end up
应该是flipud

344
00:12:04,400 --> 00:12:08,742
with ones on this opposite diagonal as well.
翻转以后所有的1就变成副对角线了

345
00:12:08,770 --> 00:12:10,430
Just one last command and then
最后再说一个命令

346
00:12:10,490 --> 00:12:12,706
that's it, and then that will be it for this video.
然后就下课

347
00:12:12,760 --> 00:12:13,730
Let's say A to be the
假如 A 是一个

348
00:12:13,730 --> 00:12:16,112
3x3 magic square
3×3的魔方阵

349
00:12:16,112 --> 00:12:17,221
again. If you want
同样地 如果你想

350
00:12:17,221 --> 00:12:18,493
to invert the matrix, you
这个矩阵的逆矩阵

351
00:12:18,493 --> 00:12:20,668
type P inv A, this
键入 pinv(A)

352
00:12:20,668 --> 00:12:23,612
is typically called a pseudo inference, but it doesn't matter.
通常称为伪逆矩阵 但这个名字不重要

353
00:12:23,612 --> 00:12:24,991
Think of it as basically the inverse
你就把它看成是

354
00:12:24,991 --> 00:12:26,927
of A and that's the
矩阵 A 求逆

355
00:12:26,960 --> 00:12:28,313
inverse of A and second
因此这就是 A 矩阵的逆矩阵

356
00:12:28,313 --> 00:12:31,721
set, you know, 10 equals p
设 temp = pinv(A)

357
00:12:31,740 --> 00:12:33,596
of A and of temp times
然后再用temp 乘以 A

358
00:12:33,596 --> 00:12:35,362
A. This is indeed the
这实际上得到的就是

359
00:12:35,362 --> 00:12:37,252
identity matrix with essentially ones
单位矩阵

360
00:12:37,260 --> 00:12:38,753
on the diagonals and zeros on
对角线为1 其他元素为0

361
00:12:38,753 --> 00:12:43,322
the off-diagonals, up to a numerical round-off.
稍微圆整一下就是

362
00:12:44,120 --> 00:12:45,746
So, that's it for how
好了 这样我们就介绍了

363
00:12:45,750 --> 00:12:48,430
to do different computational operations
如何对矩阵中的数字

364
00:12:48,430 --> 00:12:50,865
on the data in matrices.
进行各种操作

365
00:12:50,890 --> 00:12:53,055
And after running a
在运行完某个

366
00:12:53,055 --> 00:12:54,350
learning algorithm, often one of
学习算法之后

367
00:12:54,380 --> 00:12:55,876
the most useful things is to
通常一件最有用的事情

368
00:12:55,900 --> 00:12:57,223
be able to look at your
是看看你的结果

369
00:12:57,230 --> 00:13:00,013
results, or to plot, or visualize your result.
或者说让你的结果可视化

370
00:13:00,020 --> 00:13:01,675
And in the next video I'm
在接下来的视频中

371
00:13:01,675 --> 00:13:03,233
going to very quickly show you
我会非常迅速地告诉你

372
00:13:03,233 --> 00:13:04,230
how, again, with one or
如何很快地画出

373
00:13:04,300 --> 00:13:06,261
two lines of code using Octave
如何只用一两行代码

374
00:13:06,270 --> 00:13:07,814
you can quickly visualize your
你就可以快速地可视化你的数据

375
00:13:07,850 --> 00:13:09,901
data, or plot your data
画出你的数据

376
00:13:09,901 --> 00:13:11,101
and use that to better
这样你就能更好地理解

377
00:13:11,101 --> 00:13:14,880
understand, you know, what your learning algorithms are doing.
你使用的学习算法 (字幕整理：中国海洋大学 黄海广,haiguang2000@qq.com )

